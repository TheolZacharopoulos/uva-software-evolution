{ 
   "summary": {
       "project_name": "HyperSQL"
   },

   "directories": [ 	
       "/org/hsqldb/dbinfo",		
       "/org/hsqldb/cmdline",		
       "/org/hsqldb/lib",		
       "/org/hsqldb/cmdline/sqltool",		
       "/org/hsqldb/server",		
       "/org/hsqldb/map",		
       "/org/hsqldb/util/preprocessor",		
       "/org/hsqldb/rights",		
       "/org/hsqldb/types",		
       "/org/hsqldb/persist",		
       "/org/hsqldb/test",		
       "/org/hsqldb/jdbc/pool",		
       "/org/hsqldb",		
       "/org/hsqldb/sample",		
       "/org/hsqldb/auth",		
       "/org/hsqldb/util",		
       "/org/hsqldb/rowio",		
       "/org/hsqldb/result",		
       "/org/hsqldb/jdbc",		
       "/org/hsqldb/lib/tar",		
       "/org/hsqldb/navigator",		
       "/org/hsqldb/scriptio",		
       "/org/hsqldb/index"	
   ],

   "files": [ 
       {
          "name": "PgType.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "TestCacheSize.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ExpressionLogical.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowStoreAVLMemory.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "TestOdbcTypes.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestNullInUnion.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "GranteeManager.java", 
          "dir": "/org/hsqldb/rights"
       },

       {
          "name": "TestDbBackup.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestUpdatableResultSets.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "PostgresTransferHelper.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "NodeAVLDisk.java", 
          "dir": "/org/hsqldb/index"
       },

       {
          "name": "DatabaseManager.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "DTIType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "StatementSet.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestSqlPersistent.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "JDBCClobFile.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "ArrayType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "LobStoreMem.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "StatementDMQL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestMultipleConnections.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "StatementDML.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "DoubleIntIndex.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "TestUtil.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ClearTests.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "RowType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "HsqlDatabaseProperties.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "TableWorks.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "JDBCStatement.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "ScriptWriterEncode.java", 
          "dir": "/org/hsqldb/scriptio"
       },

       {
          "name": "SqlFileScanner.java", 
          "dir": "/org/hsqldb/cmdline/sqltool"
       },

       {
          "name": "JDBCBlobFile.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "TestLibSpeed.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "StatementResultUpdate.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "BlockObjectStore.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "DateTimeType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "WebServerConnection.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "JDBCBench.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "RowSetNavigatorDataTable.java", 
          "dir": "/org/hsqldb/navigator"
       },

       {
          "name": "ClobType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TransactionManagerMV2PL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "Session.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "FunctionSQL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "DITableInfo.java", 
          "dir": "/org/hsqldb/dbinfo"
       },

       {
          "name": "WebServer.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "JDBCPreparedStatement.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "BlobType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "OracleTransferHelper.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "RowStoreAVLDiskData.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "TestAcl.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "Expression.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestLikePredicateOptimizations.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TransactionManagerMVCC.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ConnectionDialogSwing.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "OdbcUtil.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "RangeVariable.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ExpressionOp.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowSetNavigatorData.java", 
          "dir": "/org/hsqldb/navigator"
       },

       {
          "name": "LongValueHashMap.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "JDBCResultSetMetaData.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "JDBCConnection.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "Types.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "Token.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "HsqlProperties.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "KMPSearchAlgorithm.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "Tokens.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "HsqlDeque.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "StatementCompound.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowAVLDisk.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "SetFunction.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "Type.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "JDBCPooledDataSource.java", 
          "dir": "/org/hsqldb/jdbc/pool"
       },

       {
          "name": "Database.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "QuerySpecification.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RCData.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "ArrayUtil.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "StatementPortal.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "BinaryType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TestJDBCGeneratedColumns.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "Right.java", 
          "dir": "/org/hsqldb/rights"
       },

       {
          "name": "TestDataStructures.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestDatabaseMetaData.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "DataFileCache.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "ConstraintCore.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowOutputBinary.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "JDBCCallableStatement.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "Grantee.java", 
          "dir": "/org/hsqldb/rights"
       },

       {
          "name": "StatementCommand.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestSql.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "Constraint.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowAVL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowInputText.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "Result.java", 
          "dir": "/org/hsqldb/result"
       },

       {
          "name": "BaseHashMap.java", 
          "dir": "/org/hsqldb/map"
       },

       {
          "name": "TestStoredProcedure.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestHarness.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "JDBCTypes.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "TestSubQueriesInPreparedStatements.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "RefCapablePropertyResourceBundle.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "Tree.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "JDBCArray.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "ExpressionArrayAggregate.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestBench.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "Scanner.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "LdapAuthBean.java", 
          "dir": "/org/hsqldb/auth"
       },

       {
          "name": "TestDatetimeSimple.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestStressInsert.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TransactionManager2PL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "IntervalType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "RangeVariableResolver.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ParserDQL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "AllTests.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestMultiInsert.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "QueryExpression.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestSchemaParse.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestHashStructures.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "DatabaseInformationFull.java", 
          "dir": "/org/hsqldb/dbinfo"
       },

       {
          "name": "RowInputBase.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "RowAVLDiskLarge.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ClobDataID.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "Schema.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "HsqlDateTime.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TextTable.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ServerConnection.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "ValuePoolHashMap.java", 
          "dir": "/org/hsqldb/map"
       },

       {
          "name": "StatementSimple.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestBug1191815.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ExpressionArithmetic.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TarFileOutputStream.java", 
          "dir": "/org/hsqldb/lib/tar"
       },

       {
          "name": "TestTypeConversion.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TriggerSample.java", 
          "dir": "/org/hsqldb/sample"
       },

       {
          "name": "ResultLob.java", 
          "dir": "/org/hsqldb/result"
       },

       {
          "name": "TestKarl.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "Calculator.java", 
          "dir": "/org/hsqldb/cmdline/sqltool"
       },

       {
          "name": "RangeVariableJoined.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "SchemaObjectSet.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "JDBCClobClient.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "BlobDataID.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "StatementSchemaDefinition.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "CharacterType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "NumberType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TransferTable.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "JDBCDriver.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "JDBCBlobClient.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "Server.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "TestTextTables.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ParserDML.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "JDBCSQLXML.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "Log.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "Routine.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowAVLDiskData.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "LongDeque.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "View.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "JDBCDatabaseMetaData.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "ParserRoutine.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "IndexAVL.java", 
          "dir": "/org/hsqldb/index"
       },

       {
          "name": "RowStoreAVLHybridExtended.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "Servlet.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "Grid.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "SqlTool.java", 
          "dir": "/org/hsqldb/cmdline"
       },

       {
          "name": "TestLobs.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ConnectionDialog.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "HsqldbTestCase.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestMerge.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestINPredicateParameterizationAndCorrelation.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestJavaFunctions.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "StatementExpression.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "LockFile.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "BitType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "ExpressionAggregate.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "StatementSession.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowInputTextLog.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "StatementInsert.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "HsqlSocketFactorySecure.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "RowOutputText.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "ClientConnection.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "FunctionCustom.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "NodeAVLDiskLarge.java", 
          "dir": "/org/hsqldb/index"
       },

       {
          "name": "TransferDb.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "TestBug785429.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TarFileInputStream.java", 
          "dir": "/org/hsqldb/lib/tar"
       },

       {
          "name": "JDBCXADataSource.java", 
          "dir": "/org/hsqldb/jdbc/pool"
       },

       {
          "name": "Collation.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TestQuotes.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "JDBCResultSet.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "NumberSequence.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "DatabaseInformationMain.java", 
          "dir": "/org/hsqldb/dbinfo"
       },

       {
          "name": "TestAllTypes.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestViewAsterisks.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "SqlFile.java", 
          "dir": "/org/hsqldb/cmdline"
       },

       {
          "name": "RAShadowFile.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "ScriptWriterText.java", 
          "dir": "/org/hsqldb/scriptio"
       },

       {
          "name": "ClosableByteArrayOutputStream.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "Transfer.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "TestDima.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "IntValueHashMap.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "RowStoreAVLHybrid.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "TestBatchBug.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "DatabaseManagerSwing.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "RowOutputBase.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "Charset.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "FileArchiver.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "ParserCommand.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TextFileReader.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "SchemaManager.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ParserDDL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestJDBCSavepoints.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TypeInvariants.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowStoreAVLDisk.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "BlobInputStream.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TestTriggers.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestOdbcService.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestDateTime.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TriggerDef.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "HSQLBug.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ExpressionColumn.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestHTTPKeepAlive.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ClobInputStream.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "PersistentStoreCollectionSession.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "LobManager.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "Table.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "CodeSwitcher.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "ScriptWriterBase.java", 
          "dir": "/org/hsqldb/scriptio"
       },

       {
          "name": "BitMap.java", 
          "dir": "/org/hsqldb/map"
       },

       {
          "name": "ClosableCharArrayWriter.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "Statement.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "Preprocessor.java", 
          "dir": "/org/hsqldb/util/preprocessor"
       },

       {
          "name": "TestTextTable.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TableDerived.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TransferSQLText.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "Logger.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "TestBatchExecution.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "JDBCArrayBasic.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "ParserBase.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "StatementSchema.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowAction.java", 
          "dir": "/org/hsqldb"
       }
   ],
   
   "clone_pairs": [ 
       {
           "id": "clone_0",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "408",
               "end_line": "413",
               "source_code": "                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.byteBlock   = new byte[(int) result.blockLength];\n\n                dataInput.readFully(result.byteBlock);\n                break;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "384",
               "end_line": "389",
               "source_code": "                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.byteBlock   = new byte[(int) result.blockLength];\n\n                dataInput.readFully(result.byteBlock);\n                break;"
           }

       },

       {
           "id": "clone_1",

           "clone_type": "type-1",

           "origin": {
               "file": "ArrayUtil.java",
               "start_line": "564",
               "end_line": "582",
               "source_code": "    public static int countSameElements(char[] arra, int start, char[] arrb) {\n\n        int k     = 0;\n        int limit = arra.length - start;\n\n        if (limit > arrb.length) {\n            limit = arrb.length;\n        }\n\n        for (int i = 0; i < limit; i++) {\n            if (arra[i + start] == arrb[i]) {\n                k++;\n            } else {\n                break;\n            }\n        }\n\n        return k;\n    }"
           },

           "clone": {
               "file": "ArrayUtil.java",
               "start_line": "540",
               "end_line": "558",
               "source_code": "    public static int countSameElements(byte[] arra, int start, byte[] arrb) {\n\n        int k     = 0;\n        int limit = arra.length - start;\n\n        if (limit > arrb.length) {\n            limit = arrb.length;\n        }\n\n        for (int i = 0; i < limit; i++) {\n            if (arra[i + start] == arrb[i]) {\n                k++;\n            } else {\n                break;\n            }\n        }\n\n        return k;\n    }"
           }

       },

       {
           "id": "clone_2",

           "clone_type": "type-1",

           "origin": {
               "file": "TestOdbcService.java",
               "start_line": "288",
               "end_line": "321",
               "source_code": "            rs = ps.executeQuery();\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(5, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"five\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(10, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"ten\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(15, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"fifteen\", rs.getString(3));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(25, rs.getInt(1));\n            assertNull(rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(40, rs.getInt(1));\n            assertEquals(\"forty\", rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertFalse(\"Too many rows fetched\", rs.next());\n            rs.close();"
           },

           "clone": {
               "file": "TestOdbcService.java",
               "start_line": "253",
               "end_line": "286",
               "source_code": "            rs = ps.executeQuery();\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(5, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"five\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(10, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"ten\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(15, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"fifteen\", rs.getString(3));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(25, rs.getInt(1));\n            assertNull(rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(40, rs.getInt(1));\n            assertEquals(\"forty\", rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertFalse(\"Too many rows fetched\", rs.next());\n            rs.close();"
           }

       },

       {
           "id": "clone_3",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2801",
               "end_line": "2810",
               "source_code": "            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);\n            addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);\n            addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null\n\n            // -----------------------------------------------------------------\n            // required by DatabaseMetaData.getVersionColumns filter parameters\n            // -----------------------------------------------------------------\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "647",
               "end_line": "652",
               "source_code": "            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);\n            addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);\n            addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null"
           }

       },

       {
           "id": "clone_4",

           "clone_type": "type-1",

           "origin": {
               "file": "TransactionManagerMV2PL.java",
               "start_line": "189",
               "end_line": "202",
               "source_code": "    public void rollbackSavepoint(Session session, int index) {\n\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n\n        rollbackPartial(session, start, timestamp);\n    }"
           },

           "clone": {
               "file": "TransactionManager2PL.java",
               "start_line": "139",
               "end_line": "152",
               "source_code": "    public void rollbackSavepoint(Session session, int index) {\n\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n\n        rollbackPartial(session, start, timestamp);\n    }"
           }

       },

       {
           "id": "clone_5",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1004",
               "end_line": "1015",
               "source_code": "            Statement statement = compileSQLProcedureStatementOrNull(routine,\n                null);\n\n            if (statement == null) {\n                throw unexpectedToken();\n            }\n\n            Token[] tokenisedStatement = getRecordedStatement();\n            String  sql                = Token.getSQL(tokenisedStatement);\n\n            statement.setSQL(sql);\n            routine.setProcedure(statement);"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2412",
               "end_line": "2423",
               "source_code": "        Statement statement = compileSQLProcedureStatementOrNull(routine,\n            null);\n\n        if (statement == null) {\n            throw unexpectedToken();\n        }\n\n        Token[] tokenisedStatement = getRecordedStatement();\n        String  sql                = Token.getSQL(tokenisedStatement);\n\n        statement.setSQL(sql);\n        routine.setProcedure(statement);"
           }

       },

       {
           "id": "clone_6",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "1002",
               "end_line": "1023",
               "source_code": "            int    i = all.indexOf(';');\n            String sql;\n\n            if (i != -1) {\n                sql = all.substring(0, i);\n                all = all.substring(i + 1);\n            } else {\n                sql = all;\n                all = \"\";\n            }\n\n            if (sql.startsWith(\"--#\")) {\n                max = Integer.parseInt(sql.substring(3));\n\n                continue;\n            } else if (sql.startsWith(\"--\")) {\n                continue;\n            }\n\n            g[2] = sql;\n\n            long l = 0;"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1825",
               "end_line": "1846",
               "source_code": "            int    i = all.indexOf(';');\n            String sql;\n\n            if (i != -1) {\n                sql = all.substring(0, i);\n                all = all.substring(i + 1);\n            } else {\n                sql = all;\n                all = \"\";\n            }\n\n            if (sql.startsWith(\"--#\")) {\n                max = Integer.parseInt(sql.substring(3));\n\n                continue;\n            } else if (sql.startsWith(\"--\")) {\n                continue;\n            }\n\n            g[2] = sql;\n\n            long l = 0;"
           }

       },

       {
           "id": "clone_7",

           "clone_type": "type-1",

           "origin": {
               "file": "TestHashStructures.java",
               "start_line": "119",
               "end_line": "125",
               "source_code": "            compareByUIteratorInt(uMap, hIntMap);\n            compareByHIteratorInt(uMap, hIntMap);\n\n            //\n            clearByIntIterator(uMap, hIntMap);\n            compareByUIteratorInt(uMap, hIntMap);\n            compareByHIteratorInt(uMap, hIntMap);"
           },

           "clone": {
               "file": "TestHashStructures.java",
               "start_line": "109",
               "end_line": "115",
               "source_code": "            compareByUIteratorInt(uMap, hIntMap);\n            compareByHIteratorInt(uMap, hIntMap);\n\n            //\n            clearByIntIterator(uMap, hIntMap);\n            compareByUIteratorInt(uMap, hIntMap);\n            compareByHIteratorInt(uMap, hIntMap);"
           }

       },

       {
           "id": "clone_8",

           "clone_type": "type-1",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1218",
               "end_line": "1224",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP : {\n                return new TimestampData(millis / 1000, 0,\n                                         ((TimestampData) a).getZone());\n            }\n            default :"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "1186",
               "end_line": "1192",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP : {\n                return new TimestampData(millis / 1000, 0,\n                                         ((TimestampData) a).getZone());\n            }\n            default :"
           }

       },

       {
           "id": "clone_9",

           "clone_type": "type-1",

           "origin": {
               "file": "Table.java",
               "start_line": "644",
               "end_line": "654",
               "source_code": "            ColumnSchema column  = getColumn(j);\n            String       colname = column.getName().statementName;\n            Type         type    = column.getDataType();\n\n            if (j > 0) {\n                sb.append(',');\n            }\n\n            sb.append(colname);\n            sb.append(' ');\n            sb.append(type.getTypeDefinition());"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "369",
               "end_line": "379",
               "source_code": "            ColumnSchema column  = getColumn(j);\n            String       colname = column.getName().statementName;\n            Type         type    = column.getDataType();\n\n            if (j > 0) {\n                sb.append(',');\n            }\n\n            sb.append(colname);\n            sb.append(' ');\n            sb.append(type.getTypeDefinition());"
           }

       },

       {
           "id": "clone_10",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6842",
               "end_line": "6849",
               "source_code": "                row[table_catalog]   = database.getCatalogName().name;\n                row[table_schema]    = refName.parent.schema.name;\n                row[table_name]      = refName.parent.name;\n                row[column_name]     = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5121",
               "end_line": "5128",
               "source_code": "                row[table_catalog]    = database.getCatalogName().name;\n                row[table_schema]     = refName.parent.schema.name;\n                row[table_name]       = refName.parent.name;\n                row[column_name]      = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           }

       },

       {
           "id": "clone_11",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCClobFile.java",
               "start_line": "963",
               "end_line": "989",
               "source_code": "    protected final void checkIsFile(boolean checkExists) throws SQLException {\n\n        boolean exists = false;\n        boolean isFile = false;\n\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }"
           },

           "clone": {
               "file": "JDBCBlobFile.java",
               "start_line": "770",
               "end_line": "796",
               "source_code": "    protected final void checkIsFile(boolean checkExists) throws SQLException {\n\n        boolean exists = false;\n        boolean isFile = false;\n\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }"
           }

       },

       {
           "id": "clone_12",

           "clone_type": "type-1",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1618",
               "end_line": "1635",
               "source_code": "                if (charAt(currentPosition + 1) == '-') {\n                    int pos = sqlString.indexOf('\r', currentPosition + 2);\n\n                    if (pos == -1) {\n                        pos = sqlString.indexOf('\n', currentPosition + 2);\n                    }\n\n                    if (pos == -1) {\n                        pos = limit;\n                    }\n\n                    token.tokenString = sqlString.substring(currentPosition\n                            + 2, pos);\n                    token.tokenType   = Tokens.X_REMARK;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1570",
               "end_line": "1587",
               "source_code": "                if (charAt(currentPosition + 1) == '/') {\n                    int pos = sqlString.indexOf('\r', currentPosition + 2);\n\n                    if (pos == -1) {\n                        pos = sqlString.indexOf('\n', currentPosition + 2);\n                    }\n\n                    if (pos == -1) {\n                        pos = limit;\n                    }\n\n                    token.tokenString = sqlString.substring(currentPosition\n                            + 2, pos);\n                    token.tokenType   = Tokens.X_REMARK;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           }

       },

       {
           "id": "clone_13",

           "clone_type": "type-1",

           "origin": {
               "file": "TestSql.java",
               "start_line": "467",
               "end_line": "485",
               "source_code": "                stmnt.execute(\"drop table CDTYPE if exists\");\n\n                // test for the value MAX(column) in an empty table\n                stmnt.execute(\n                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");\n\n                rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");\n\n                if (rs.next()) {\n                    int max = rs.getInt(1);\n\n                    System.out.println(\"Max value for ID: \" + max);\n                } else {\n                    System.out.println(\"Max value for ID not returned\");\n                }\n\n                stmnt.executeUpdate(\n                    \"INSERT INTO cdType VALUES (10,'Test String');\");\n                stmnt.execute(\"CALL IDENTITY();\");"
           },

           "clone": {
               "file": "TestSqlPersistent.java",
               "start_line": "542",
               "end_line": "560",
               "source_code": "                stmnt.execute(\"drop table CDTYPE if exists\");\n\n                // test for the value MAX(column) in an empty table\n                stmnt.execute(\n                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");\n\n                rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");\n\n                if (rs.next()) {\n                    int max = rs.getInt(1);\n\n                    System.out.println(\"Max value for ID: \" + max);\n                } else {\n                    System.out.println(\"Max value for ID not returned\");\n                }\n\n                stmnt.executeUpdate(\n                    \"INSERT INTO cdType VALUES (10,'Test String');\");\n                stmnt.execute(\"CALL IDENTITY();\");"
           }

       },

       {
           "id": "clone_14",

           "clone_type": "type-1",

           "origin": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "504",
               "end_line": "519",
               "source_code": "        //-- setup for following tests\n        conn1.setAutoCommit(false);\n\n        sql = \"insert into t values(?,?,?,?)\";\n        ps  = conn1.prepareStatement(sql);\n\n        ps.setString(2, \"Mary\");\n        ps.setString(3, \"Peterson-Clancy\");\n\n        i = 0;\n\n        for (; i < 10; i++) {\n            ps.setInt(1, i);\n            ps.setInt(4, i);\n            ps.executeUpdate();\n        }"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "168",
               "end_line": "183",
               "source_code": "        //-- setup for following tests\n        conn1.setAutoCommit(false);\n\n        sql = \"insert into t values(?,?,?,?)\";\n        ps  = conn1.prepareStatement(sql);\n\n        ps.setString(2, \"Mary\");\n        ps.setString(3, \"Peterson-Clancy\");\n\n        i = 0;\n\n        for (; i < 10; i++) {\n            ps.setInt(1, i);\n            ps.setInt(4, i);\n            ps.executeUpdate();\n        }"
           }

       },

       {
           "id": "clone_15",

           "clone_type": "type-1",

           "origin": {
               "file": "DoubleIntIndex.java",
               "start_line": "244",
               "end_line": "250",
               "source_code": "        hasChanged    = true;\n        keys[count]   = key;\n        values[count] = value;\n\n        count++;\n\n        return true;"
           },

           "clone": {
               "file": "DoubleIntIndex.java",
               "start_line": "204",
               "end_line": "210",
               "source_code": "        hasChanged    = true;\n        keys[count]   = key;\n        values[count] = value;\n\n        count++;\n\n        return true;"
           }

       },

       {
           "id": "clone_16",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "192",
               "end_line": "197",
               "source_code": "        result.lobID       = id;\n        result.blockOffset = offset;\n        result.charBlock   = chars;\n        result.blockLength = chars.length;\n\n        return result;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "153",
               "end_line": "158",
               "source_code": "        result.lobID       = id;\n        result.blockOffset = offset;\n        result.charBlock   = chars;\n        result.blockLength = chars.length;\n\n        return result;"
           }

       },

       {
           "id": "clone_17",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementDML.java",
               "start_line": "1297",
               "end_line": "1308",
               "source_code": "                Row             row          = navigator.getCurrentRow();\n                Object[]        data = navigator.getCurrentChangedData();\n                Table           currentTable = ((Table) row.getTable());\n                int[] changedColumns = navigator.getCurrentChangedColumns();\n                PersistentStore store = currentTable.getRowStore(session);\n\n                if (data == null) {\n                    continue;\n                }\n\n                Row newRow = currentTable.insertSingleRow(session, store,\n                    data, changedColumns);"
           },

           "clone": {
               "file": "StatementDML.java",
               "start_line": "1059",
               "end_line": "1070",
               "source_code": "            Row             row          = navigator.getCurrentRow();\n            Object[]        data         = navigator.getCurrentChangedData();\n            Table           currentTable = ((Table) row.getTable());\n            int[] changedColumns = navigator.getCurrentChangedColumns();\n            PersistentStore store        = currentTable.getRowStore(session);\n\n            if (data == null) {\n                continue;\n            }\n\n            Row newRow = currentTable.insertSingleRow(session, store, data,\n                changedColumns);"
           }

       },

       {
           "id": "clone_18",

           "clone_type": "type-1",

           "origin": {
               "file": "Table.java",
               "start_line": "2512",
               "end_line": "2516",
               "source_code": "            case TableBase.FUNCTION_TABLE :\n            case TableBase.SYSTEM_SUBQUERY :\n            case TableBase.INFO_SCHEMA_TABLE :\n            case TableBase.VIEW_TABLE :\n            case TableBase.TEMP_TABLE :"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "2415",
               "end_line": "2420",
               "source_code": "//            case TableBase.MEMORY_TABLE :\n            case TableBase.FUNCTION_TABLE :\n            case TableBase.SYSTEM_SUBQUERY :\n            case TableBase.INFO_SCHEMA_TABLE :\n            case TableBase.VIEW_TABLE :\n            case TableBase.TEMP_TABLE :"
           }

       },

       {
           "id": "clone_19",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDML.java",
               "start_line": "575",
               "end_line": "587",
               "source_code": "            HsqlList unresolved = condition.resolveColumnReferences(session,\n                rangeGroup, rangeGroups, null);\n\n            ExpressionColumn.checkColumnsResolved(unresolved);\n            condition.resolveTypes(session, null);\n\n            if (condition.isUnresolvedParam()) {\n                condition.dataType = Type.SQL_BOOLEAN;\n            }\n\n            if (condition.getDataType() != Type.SQL_BOOLEAN) {\n                throw Error.error(ErrorCode.X_42568);\n            }"
           },

           "clone": {
               "file": "ParserDML.java",
               "start_line": "462",
               "end_line": "474",
               "source_code": "            HsqlList unresolved = condition.resolveColumnReferences(session,\n                rangeGroup, rangeGroups, null);\n\n            ExpressionColumn.checkColumnsResolved(unresolved);\n            condition.resolveTypes(session, null);\n\n            if (condition.isUnresolvedParam()) {\n                condition.dataType = Type.SQL_BOOLEAN;\n            }\n\n            if (condition.getDataType() != Type.SQL_BOOLEAN) {\n                throw Error.error(ErrorCode.X_42568);\n            }"
           }

       },

       {
           "id": "clone_20",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCXADataSource.java",
               "start_line": "132",
               "end_line": "151",
               "source_code": "    /**\n     * Retrieves the Reference of this object.\n     *\n     * @return The non-null javax.naming.Reference of this object.\n     * @exception NamingException If a naming exception was encountered\n     *          while retrieving the reference.\n     */\n    public Reference getReference() throws NamingException {\n\n        String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";\n        Reference ref   = new Reference(getClass().getName(), cname, null);\n\n        ref.add(new StringRefAddr(\"database\", getDatabase()));\n        ref.add(new StringRefAddr(\"user\", getUser()));\n        ref.add(new StringRefAddr(\"password\", password));\n        ref.add(new StringRefAddr(\"loginTimeout\",\n                                  Integer.toString(loginTimeout)));\n\n        return ref;\n    }"
           },

           "clone": {
               "file": "JDBCPooledDataSource.java",
               "start_line": "93",
               "end_line": "112",
               "source_code": "    /**\n     * Retrieves the Reference of this object.\n     *\n     * @return The non-null javax.naming.Reference of this object.\n     * @exception NamingException If a naming exception was encountered\n     *          while retrieving the reference.\n     */\n    public Reference getReference() throws NamingException {\n\n        String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";\n        Reference ref   = new Reference(getClass().getName(), cname, null);\n\n        ref.add(new StringRefAddr(\"database\", getDatabase()));\n        ref.add(new StringRefAddr(\"user\", getUser()));\n        ref.add(new StringRefAddr(\"password\", password));\n        ref.add(new StringRefAddr(\"loginTimeout\",\n                                  Integer.toString(loginTimeout)));\n\n        return ref;\n    }"
           }

       },

       {
           "id": "clone_21",

           "clone_type": "type-1",

           "origin": {
               "file": "TestUtil.java",
               "start_line": "1350",
               "end_line": "1369",
               "source_code": "    protected String getResultString() {\n\n        StringBuffer sb = new StringBuffer();\n\n        if (lines.length == 1 && lines[0].trim().length() < 1) {\n            return null;\n        }\n\n        for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n\n            sb.append(\"+ \" + lines[i]);\n        }\n\n        TestUtil.expandStamps(sb);\n\n        return sb.toString().trim();\n    }"
           },

           "clone": {
               "file": "TestUtil.java",
               "start_line": "1042",
               "end_line": "1061",
               "source_code": "    protected String getResultString() {\n\n        StringBuffer sb = new StringBuffer();\n\n        if (lines.length == 1 && lines[0].trim().length() < 1) {\n            return null;\n        }\n\n        for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n\n            sb.append(\"+ \" + lines[i]);\n        }\n\n        TestUtil.expandStamps(sb);\n\n        return sb.toString().trim();\n    }"
           }

       },

       {
           "id": "clone_22",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3274",
               "end_line": "3309",
               "source_code": "        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3169",
               "end_line": "3204",
               "source_code": "        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }"
           }

       },

       {
           "id": "clone_23",

           "clone_type": "type-1",

           "origin": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "465",
               "end_line": "479",
               "source_code": "            Object[] currentData = getNext();\n            boolean newGroup =\n                compareData == null\n                || fullIndex.compareRowNonUnique(\n                    session, currentData, compareData,\n                    fullIndex.getColumnCount()) != 0;\n\n            if (newGroup) {\n                compareData = currentData;\n                it          = other.findFirstRow(currentData);\n            }\n\n            otherRow  = it.getNextRow();\n            otherData = otherRow == null ? null\n                                         : otherRow.getData();"
           },

           "clone": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "406",
               "end_line": "420",
               "source_code": "            Object[] currentData = getNext();\n            boolean newGroup =\n                compareData == null\n                || fullIndex.compareRowNonUnique(\n                    session, currentData, compareData,\n                    fullIndex.getColumnCount()) != 0;\n\n            if (newGroup) {\n                compareData = currentData;\n                it          = other.findFirstRow(currentData);\n            }\n\n            otherRow  = it.getNextRow();\n            otherData = otherRow == null ? null\n                                         : otherRow.getData();"
           }

       },

       {
           "id": "clone_24",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "255",
               "end_line": "278",
               "source_code": "    public void commitRow(Session session, Row row, int changeAction,\n                          int txModel) {\n\n        switch (changeAction) {\n\n            case RowAction.ACTION_DELETE :\n                remove(row);\n                break;\n\n            case RowAction.ACTION_INSERT :\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELEETE\n                remove(row);\n                break;\n\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                remove(row);\n                break;\n        }\n    }"
           },

           "clone": {
               "file": "RowStoreAVLHybridExtended.java",
               "start_line": "132",
               "end_line": "155",
               "source_code": "    public void commitRow(Session session, Row row, int changeAction,\n                          int txModel) {\n\n        switch (changeAction) {\n\n            case RowAction.ACTION_DELETE :\n                remove(row);\n                break;\n\n            case RowAction.ACTION_INSERT :\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELEETE\n                remove(row);\n                break;\n\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                remove(row);\n                break;\n        }\n    }"
           }

       },

       {
           "id": "clone_25",

           "clone_type": "type-1",

           "origin": {
               "file": "Tree.java",
               "start_line": "481",
               "end_line": "496",
               "source_code": "            String   folder = s[2];\n            int      ci     = currentindent;\n\n            for (; ci > 0; ci--) {\n                if (key.startsWith(root[ci])) {\n                    break;\n                }\n            }\n\n            if (root[ci].length() < key.length()) {\n                ci++;\n            }\n\n            if (closed && ci > currentindent) {\n                continue;\n            }"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "351",
               "end_line": "366",
               "source_code": "            String   folder = s[2];\n            int      ci     = currentindent;\n\n            for (; ci > 0; ci--) {\n                if (key.startsWith(root[ci])) {\n                    break;\n                }\n            }\n\n            if (root[ci].length() < key.length()) {\n                ci++;\n            }\n\n            if (closed && ci > currentindent) {\n                continue;\n            }"
           }

       },

       {
           "id": "clone_26",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7932",
               "end_line": "7985",
               "source_code": "            // common type block\n            if (type.isCharacterType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] = ValuePool.getLong(type.precision\n                        * 2);\n                row[character_set_catalog] = database.getCatalogName().name;\n                row[character_set_schema] =\n                    ((CharacterType) type).getCharacterSet().getSchemaName()\n                        .name;\n                row[character_set_name] =\n                    ((CharacterType) type).getCharacterSet().getName().name;\n                row[collation_catalog] = database.getCatalogName().name;\n                row[collation_schema] =\n                    ((CharacterType) type).getCollation().getSchemaName().name;\n                row[collation_name] =\n                    ((CharacterType) type).getCollation().getName().name;\n            } else if (type.isNumberType()) {\n                row[numeric_precision] = ValuePool.getLong(\n                    ((NumberType) type).getNumericPrecisionInRadix());\n                row[declared_numeric_precision] = ValuePool.getLong(\n                    ((NumberType) type).getNumericPrecisionInRadix());\n\n                if (type.isExactNumberType()) {\n                    row[numeric_scale] = row[declared_numeric_scale] =\n                        ValuePool.getLong(type.scale);\n                }\n\n                row[numeric_precision_radix] =\n                    ValuePool.getLong(type.getPrecisionRadix());\n            } else if (type.isBooleanType()) {}\n            else if (type.isDateTimeType()) {\n                row[datetime_precision] = ValuePool.getLong(type.scale);\n            } else if (type.isIntervalType()) {\n                row[data_type] = \"INTERVAL\";\n                row[interval_type] =\n                    ((IntervalType) type).getQualifier(type.typeCode);\n                row[interval_precision] = ValuePool.getLong(type.precision);\n                row[datetime_precision] = ValuePool.getLong(type.scale);\n            } else if (type.isBinaryType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] =\n                    ValuePool.getLong(type.precision);\n            } else if (type.isBitType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] =\n                    ValuePool.getLong(type.precision);\n            } else if (type.isArrayType()) {\n                row[maximum_cardinality] =\n                    ValuePool.getLong(type.arrayLimitCardinality());\n                row[data_type] = \"ARRAY\";\n            }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5967",
               "end_line": "6026",
               "source_code": "                // common type block\n                if (type.isCharacterType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision * 2);\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n                } else if (type.isNumberType()) {\n                    row[numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    row[declared_numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n\n                    if (type.isExactNumberType()) {\n                        row[numeric_scale] = row[declared_numeric_scale] =\n                            ValuePool.getLong(type.scale);\n                    }\n\n                    row[numeric_precision_radix] =\n                        ValuePool.getLong(type.getPrecisionRadix());\n                } else if (type.isBooleanType()) {\n\n                    //\n                } else if (type.isDateTimeType()) {\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isIntervalType()) {\n                    row[data_type] = \"INTERVAL\";\n                    row[interval_type] =\n                        ((IntervalType) type).getQualifier(type.typeCode);\n                    row[interval_precision] =\n                        ValuePool.getLong(type.precision);\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isBinaryType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isBitType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isArrayType()) {\n                    row[maximum_cardinality] =\n                        ValuePool.getLong(type.arrayLimitCardinality());\n                    row[data_type] = \"ARRAY\";\n                }"
           }

       },

       {
           "id": "clone_27",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "818",
               "end_line": "825",
               "source_code": "                break;\n\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "582",
               "end_line": "589",
               "source_code": "                break;\n\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :"
           }

       },

       {
           "id": "clone_28",

           "clone_type": "type-1",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "291",
               "end_line": "306",
               "source_code": "    protected Integer readInteger() throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        return ValuePool.getInt(Integer.parseInt(s));\n    }"
           },

           "clone": {
               "file": "RowInputText.java",
               "start_line": "274",
               "end_line": "289",
               "source_code": "    protected Integer readSmallint() throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        return ValuePool.getInt(Integer.parseInt(s));\n    }"
           }

       },

       {
           "id": "clone_29",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "2826",
               "end_line": "2830",
               "source_code": "            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "1569",
               "end_line": "1573",
               "source_code": "            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :"
           }

       },

       {
           "id": "clone_30",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberType.java",
               "start_line": "2017",
               "end_line": "2022",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1057",
               "end_line": "1063",
               "source_code": "            // fall through\n            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_31",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "665",
               "end_line": "670",
               "source_code": "            case OpTypes.EQUAL :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.GREATER :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "136",
               "end_line": "141",
               "source_code": "            case OpTypes.EQUAL :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.GREATER :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :"
           }

       },

       {
           "id": "clone_32",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "2503",
               "end_line": "2513",
               "source_code": "                        if (database.sqlSyntaxPgs) {\n                            read();\n\n                            isIdentity   = true;\n                            isPKIdentity = true;\n                            typeObject   = Type.SQL_BIGINT;\n                            sequence = new NumberSequence(null, 1, 1,\n                                                          typeObject);\n\n                            break;\n                        }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2482",
               "end_line": "2492",
               "source_code": "                        if (database.sqlSyntaxMys) {\n                            read();\n\n                            isIdentity   = true;\n                            isPKIdentity = true;\n                            typeObject   = Type.SQL_BIGINT;\n                            sequence = new NumberSequence(null, 1, 1,\n                                                          typeObject);\n\n                            break;\n                        }"
           }

       },

       {
           "id": "clone_33",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "5572",
               "end_line": "5584",
               "source_code": "        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        Expression c = XreadValueExpression();\n\n        readThis(Tokens.COMMA);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "5541",
               "end_line": "5553",
               "source_code": "        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        Expression c = XreadValueExpression();\n\n        readThis(Tokens.COMMA);"
           }

       },

       {
           "id": "clone_34",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "274",
               "end_line": "288",
               "source_code": "        /*\n         ** Barrier to complete this test session\n         */\n        e = vClient.elements();\n\n        while (e.hasMoreElements()) {\n            Client = (Thread) e.nextElement();\n\n            Client.join();\n        }\n\n        vClient.removeAllElements();\n        reportDone();\n\n        guardian = connect(url, user, password);"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "297",
               "end_line": "311",
               "source_code": "        /*\n         ** Barrier to complete this test session\n         */\n        e = vClient.elements();\n\n        while (e.hasMoreElements()) {\n            Client = (Thread) e.nextElement();\n\n            Client.join();\n        }\n\n        vClient.removeAllElements();\n        reportDone();\n\n        guardian = connect(url, user, password);"
           }

       },

       {
           "id": "clone_35",

           "clone_type": "type-1",

           "origin": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "373",
               "end_line": "385",
               "source_code": "        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           },

           "clone": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "343",
               "end_line": "355",
               "source_code": "        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           }

       },

       {
           "id": "clone_36",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7840",
               "end_line": "7854",
               "source_code": "            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5746",
               "end_line": "5760",
               "source_code": "            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_37",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "793",
               "end_line": "808",
               "source_code": "            st1 = conn.createStatement();\n            rs  = st1.executeQuery(\"select sum(bbalance) from branches\");\n\n            rs.next();\n\n            bbalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(tbalance) from tellers\");\n\n            rs.next();\n\n            tbalancesum = rs.getInt(1);\n\n            rs.close();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "702",
               "end_line": "717",
               "source_code": "            st1 = conn.createStatement();\n            rs  = st1.executeQuery(\"select sum(bbalance) from branches\");\n\n            rs.next();\n\n            bbalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(tbalance) from tellers\");\n\n            rs.next();\n\n            tbalancesum = rs.getInt(1);\n\n            rs.close();"
           }

       },

       {
           "id": "clone_38",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "505",
               "end_line": "512",
               "source_code": "                break;\n\n            case LobResultTypes.REQUEST_GET_LOB :\n            case LobResultTypes.REQUEST_DUPLICATE_LOB :\n\n            //\n            case LobResultTypes.REQUEST_GET_BYTES :\n            case LobResultTypes.REQUEST_GET_CHARS :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "370",
               "end_line": "377",
               "source_code": "                break;\n\n            case LobResultTypes.REQUEST_GET_LOB :\n            case LobResultTypes.REQUEST_DUPLICATE_LOB :\n\n            //\n            case LobResultTypes.REQUEST_GET_BYTES :\n            case LobResultTypes.REQUEST_GET_CHARS :"
           }

       },

       {
           "id": "clone_39",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "730",
               "end_line": "751",
               "source_code": "    public static int getRandomID(int type) {\n\n        int min = 0,\n            max = 0;\n\n        switch (type) {\n\n            case TELLER :\n                max = ntellers * tps - 1;\n                break;\n\n            case BRANCH :\n                max = nbranches * tps - 1;\n                break;\n\n            case ACCOUNT :\n                max = naccounts * tps - 1;\n                break;\n        }\n\n        return (getRandomInt(min, max));\n    }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "638",
               "end_line": "659",
               "source_code": "    public static int getRandomID(int type) {\n\n        int min = 0,\n            max = 0;\n\n        switch (type) {\n\n            case TELLER :\n                max = ntellers * tps - 1;\n                break;\n\n            case BRANCH :\n                max = nbranches * tps - 1;\n                break;\n\n            case ACCOUNT :\n                max = naccounts * tps - 1;\n                break;\n        }\n\n        return (getRandomInt(min, max));\n    }"
           }

       },

       {
           "id": "clone_40",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2115",
               "end_line": "2139",
               "source_code": "        // Do it.\n        row[icat]       = cat;\n        row[ischem]     = schem;\n        row[iname]      = pName;\n        row[icol_name]  = cName;\n        row[icol_type]  = cType;\n        row[idata_type] = dType;\n        row[itype_name] = tName;\n        row[iprec]      = prec;\n        row[ilength]    = len;\n        row[iscale]     = scale;\n        row[iradix]     = radix;\n        row[inullable]  = nullability;\n        row[iremark]    = remark;\n\n        // JDBC 4.0\n        row[icol_default]      = colDefault;\n        row[isql_data_type]    = sqlDataType;\n        row[isql_datetime_sub] = sqlDateTimeSub;\n        row[ichar_octet_len]   = charOctetLength;\n        row[iordinal_position] = ordinalPosition;\n        row[iis_nullable]      = isNullable;\n        row[ispecific_name]    = specificName;\n\n        t.insertSys(session, store, row);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2147",
               "end_line": "2170",
               "source_code": "                row[icat]       = cat;\n                row[ischem]     = schem;\n                row[iname]      = pName;\n                row[icol_name]  = cName;\n                row[icol_type]  = cType;\n                row[idata_type] = dType;\n                row[itype_name] = tName;\n                row[iprec]      = prec;\n                row[ilength]    = len;\n                row[iscale]     = scale;\n                row[iradix]     = radix;\n                row[inullable]  = nullability;\n                row[iremark]    = remark;\n\n                // JDBC 4.0\n                row[icol_default]      = colDefault;\n                row[isql_data_type]    = sqlDataType;\n                row[isql_datetime_sub] = sqlDateTimeSub;\n                row[ichar_octet_len]   = charOctetLength;\n                row[iordinal_position] = ordinalPosition;\n                row[iis_nullable]      = isNullable;\n                row[ispecific_name]    = specificName;\n\n                t.insertSys(session, store, row);"
           }

       },

       {
           "id": "clone_41",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "236",
               "end_line": "249",
               "source_code": "        rs  = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like '%'\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "186",
               "end_line": "199",
               "source_code": "        rs  = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like '%'\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_42",

           "clone_type": "type-1",

           "origin": {
               "file": "NodeAVLDisk.java",
               "start_line": "367",
               "end_line": "377",
               "source_code": "        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iBalance = b;\n\n        row.keepInMemory(false);\n\n        return node;"
           },

           "clone": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "328",
               "end_line": "338",
               "source_code": "        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iBalance = b;\n\n        row.keepInMemory(false);\n\n        return node;"
           }

       },

       {
           "id": "clone_43",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "532",
               "end_line": "537",
               "source_code": "                break;\n\n            case LobResultTypes.RESPONSE_SET :\n            case LobResultTypes.RESPONSE_CREATE_BYTES :\n            case LobResultTypes.RESPONSE_CREATE_CHARS :\n            case LobResultTypes.RESPONSE_TRUNCATE :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "423",
               "end_line": "428",
               "source_code": "                break;\n\n            case LobResultTypes.RESPONSE_SET :\n            case LobResultTypes.RESPONSE_CREATE_BYTES :\n            case LobResultTypes.RESPONSE_CREATE_CHARS :\n            case LobResultTypes.RESPONSE_TRUNCATE :"
           }

       },

       {
           "id": "clone_44",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberType.java",
               "start_line": "2005",
               "end_line": "2015",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1040",
               "end_line": "1050",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;"
           }

       },

       {
           "id": "clone_45",

           "clone_type": "type-1",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "257",
               "end_line": "276",
               "source_code": "        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();\n\n        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n        }"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "221",
               "end_line": "240",
               "source_code": "        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();\n\n        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n        }"
           }

       },

       {
           "id": "clone_46",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "1989",
               "end_line": "2006",
               "source_code": "        switch (targetType.typeCode) {\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                targetType = Type.SQL_DECIMAL;\n\n                break;\n            case Types.SQL_DOUBLE :\n            default :\n                targetType = Type.SQL_DECIMAL_DEFAULT;\n\n                break;\n        }"
           },

           "clone": {
               "file": "JDBCCallableStatement.java",
               "start_line": "983",
               "end_line": "1000",
               "source_code": "        switch (targetType.typeCode) {\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                targetType = Type.SQL_DECIMAL;\n\n                break;\n            case Types.SQL_DOUBLE :\n            default :\n                targetType = Type.SQL_DECIMAL_DEFAULT;\n\n                break;\n        }"
           }

       },

       {
           "id": "clone_47",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7136",
               "end_line": "7142",
               "source_code": "        // column number mappings\n        final int trigger_catalog = 0;\n        final int trigger_schema  = 1;\n        final int trigger_name    = 2;\n        final int table_catalog   = 3;\n        final int table_schema    = 4;\n        final int table_name      = 5;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6799",
               "end_line": "6805",
               "source_code": "        // column number mappings\n        final int trigger_catalog = 0;\n        final int trigger_schema  = 1;\n        final int trigger_name    = 2;\n        final int table_catalog   = 3;\n        final int table_schema    = 4;\n        final int table_name      = 5;"
           }

       },

       {
           "id": "clone_48",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5645",
               "end_line": "5653",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5056",
               "end_line": "5064",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_49",

           "clone_type": "type-1",

           "origin": {
               "file": "WebServerConnection.java",
               "start_line": "395",
               "end_line": "400",
               "source_code": "                dataOut.writeByte(ResultConstants.DISCONNECT);    // Mode\n                dataOut.writeInt(4);                              //Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                dataOut.writeByte(ResultConstants.NONE);          // No Additional results\n                dataOut.close();\n\n                return;"
           },

           "clone": {
               "file": "Servlet.java",
               "start_line": "299",
               "end_line": "304",
               "source_code": "                    dataOut.writeByte(ResultConstants.DISCONNECT);      // Mode\n                    dataOut.writeInt(4);                                //Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            // No Additional results\n                    dataOut.close();\n\n                    return;"
           }

       },

       {
           "id": "clone_50",

           "clone_type": "type-1",

           "origin": {
               "file": "TestSql.java",
               "start_line": "852",
               "end_line": "860",
               "source_code": "            r = sStatement.executeQuery(s);\n\n            r.next();\n\n            b1n = r.getBytes(1);\n\n            r.next();\n\n            b1n = r.getBytes(1);"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "839",
               "end_line": "847",
               "source_code": "            r = sStatement.executeQuery(s);\n\n            r.next();\n\n            b1n = r.getBytes(1);\n\n            r.next();\n\n            b1n = r.getBytes(1);"
           }

       },

       {
           "id": "clone_51",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "336",
               "end_line": "349",
               "source_code": "        System.out.println(\"\n--------------------\");\n        System.out.println(\"Time to execute \" + transaction_count\n                           + \" transactions: \" + completion_time\n                           + \" seconds.\");\n        System.out.println(\"Max/Min memory usage: \"\n                           + (MemoryWatcher.max / 1024) + \" / \"\n                           + (MemoryWatcher.min / 1024) + \" kb\");\n        System.out.println(failed_transactions + \" / \" + transaction_count\n                           + \" failed to complete.\");\n\n        double rate = (transaction_count - failed_transactions)\n                      / completion_time;\n\n        System.out.println(\"Transaction rate: \" + rate + \" txn/sec.\");"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "327",
               "end_line": "340",
               "source_code": "        System.out.println(\"\n--------------------\");\n        System.out.println(\"Time to execute \" + transaction_count\n                           + \" transactions: \" + completion_time\n                           + \" seconds.\");\n        System.out.println(\"Max/Min memory usage: \"\n                           + (MemoryWatcher.max / 1024) + \" / \"\n                           + (MemoryWatcher.min / 1024) + \" kb\");\n        System.out.println(failed_transactions + \" / \" + transaction_count\n                           + \" failed to complete.\");\n\n        double rate = (transaction_count - failed_transactions)\n                      / completion_time;\n\n        System.out.println(\"Transaction rate: \" + rate + \" txn/sec.\");"
           }

       },

       {
           "id": "clone_52",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "884",
               "end_line": "895",
               "source_code": "            lTime = System.currentTimeMillis() - lTime;\n            g[0]  = \"SQL Error\";\n\n            gResult.setHead(g);\n\n            String s = e.getMessage();\n\n            s    += \" / Error Code: \" + e.getErrorCode();\n            s    += \" / State: \" + e.getSQLState();\n            g[0] = s;\n\n            gResult.addRow(g);"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1671",
               "end_line": "1682",
               "source_code": "            lTime = System.currentTimeMillis() - lTime;\n            g[0]  = \"SQL Error\";\n\n            gResult.setHead(g);\n\n            String s = e.getMessage();\n\n            s    += \" / Error Code: \" + e.getErrorCode();\n            s    += \" / State: \" + e.getSQLState();\n            g[0] = s;\n\n            gResult.addRow(g);"
           }

       },

       {
           "id": "clone_53",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberSequence.java",
               "start_line": "509",
               "end_line": "539",
               "source_code": "        switch (dataType.typeCode) {\n\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n        }"
           },

           "clone": {
               "file": "NumberSequence.java",
               "start_line": "468",
               "end_line": "498",
               "source_code": "        switch (dataType.typeCode) {\n\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n        }"
           }

       },

       {
           "id": "clone_54",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "191",
               "end_line": "202",
               "source_code": "            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 / 1000D;\n\n                System.out.println(\"done. in \" + seconds + \" seconds\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "207",
               "end_line": "218",
               "source_code": "            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 / 1000D;\n\n                System.out.println(\"done. in \" + seconds + \" seconds\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }"
           }

       },

       {
           "id": "clone_55",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "532",
               "end_line": "538",
               "source_code": "            Long           lobID    = getNewLobID();\n            ResultMetaData meta     = createLob.getParametersMetaData();\n            Object         params[] = new Object[meta.getColumnCount()];\n\n            params[LOB_IDS.LOB_ID]          = lobID;\n            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);\n            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "507",
               "end_line": "513",
               "source_code": "            Long           lobID    = getNewLobID();\n            ResultMetaData meta     = createLob.getParametersMetaData();\n            Object         params[] = new Object[meta.getColumnCount()];\n\n            params[LOB_IDS.LOB_ID]          = lobID;\n            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);\n            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;"
           }

       },

       {
           "id": "clone_56",

           "clone_type": "type-1",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "525",
               "end_line": "533",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "BitType.java",
               "start_line": "275",
               "end_line": "283",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_57",

           "clone_type": "type-1",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "335",
               "end_line": "365",
               "source_code": "                if (!other.isDateTimeType()) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n\n                DateTimeType otherType = (DateTimeType) other;\n\n                // DATE with TIME caught here\n                if (otherType.startIntervalType > endIntervalType\n                        || startIntervalType > otherType.endIntervalType) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n\n                int     newType = typeCode;\n                int     scale   = this.scale > otherType.scale ? this.scale\n                                                               : otherType\n                                                                   .scale;\n                boolean zone    = withTimeZone || otherType.withTimeZone;\n                int startType = otherType.startIntervalType\n                                > startIntervalType ? startIntervalType\n                                                    : otherType\n                                                        .startIntervalType;\n\n                if (startType == Types.SQL_INTERVAL_HOUR) {\n                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE\n                                   : Types.SQL_TIME;\n                } else {\n                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE\n                                   : Types.SQL_TIMESTAMP;\n                }\n\n                return getDateTimeType(newType, scale);"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "286",
               "end_line": "314",
               "source_code": "        if (!other.isDateTimeType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n\n        DateTimeType otherType = (DateTimeType) other;\n\n        // DATE with TIME caught here\n        if (otherType.startIntervalType > endIntervalType\n                || startIntervalType > otherType.endIntervalType) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n\n        int     newType = typeCode;\n        int     scale   = this.scale > otherType.scale ? this.scale\n                                                       : otherType.scale;\n        boolean zone    = withTimeZone || otherType.withTimeZone;\n        int startType = otherType.startIntervalType > startIntervalType\n                        ? startIntervalType\n                        : otherType.startIntervalType;\n\n        if (startType == Types.SQL_INTERVAL_HOUR) {\n            newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE\n                           : Types.SQL_TIME;\n        } else {\n            newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE\n                           : Types.SQL_TIMESTAMP;\n        }\n\n        return getDateTimeType(newType, scale);"
           }

       },

       {
           "id": "clone_58",

           "clone_type": "type-1",

           "origin": {
               "file": "TestMultiInsert.java",
               "start_line": "69",
               "end_line": "88",
               "source_code": "    private void printTable(String table, String cols, int expected) throws SQLException {\n        int rows = 0;\n        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);\n\n        ResultSetMetaData rsmd = rs.getMetaData();\n        String result = \"Table \" + table + \", expecting \"\n            + expected + \" rows total:\n\";\n\n        while (rs.next()) {\n            for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                result += rsmd.getColumnLabel(i + 1) + \":\"\n                           + rs.getString(i + 1) + \":\";\n            }\n            result += \"\n\";\n            rows++;\n        }\n        rs.close();\n        System.out.println(result);\n        assertEquals(expected, rows);\n    }"
           },

           "clone": {
               "file": "TestMerge.java",
               "start_line": "69",
               "end_line": "96",
               "source_code": "    /**\n     * Prints a table displaying specified columns, and checks the expected\n     * number of rows.\n     */\n    private void printTable(String table, String cols,\n                            int expected) throws SQLException {\n\n        int               rows = 0;\n        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);\n        ResultSetMetaData rsmd = rs.getMetaData();\n        String result = \"Table \" + table + \", expecting \" + expected\n                        + \" rows total:\n\";\n\n        while (rs.next()) {\n            for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                result += rsmd.getColumnLabel(i + 1) + \":\"\n                          + rs.getString(i + 1) + \":\";\n            }\n\n            result += \"\n\";\n\n            rows++;\n        }\n\n        rs.close();\n        System.out.println(result);\n        assertEquals(expected, rows);\n    }"
           }

       },

       {
           "id": "clone_59",

           "clone_type": "type-1",

           "origin": {
               "file": "TestUtil.java",
               "start_line": "1096",
               "end_line": "1105",
               "source_code": "        /* Can't use the super constructor, since it does funny things when\n         * constructing the SQL Buffer, which we don't need. */\n        lines = (String[]) linesArray.toArray();\n\n        int    closeCmd = lines[0].indexOf(\"*/\");\n        String cmd      = lines[0].substring(0, closeCmd);\n\n        lines[0] = lines[0].substring(closeCmd + 2).trim();\n\n        String trimmed = cmd.trim();"
           },

           "clone": {
               "file": "TestUtil.java",
               "start_line": "1004",
               "end_line": "1013",
               "source_code": "        /* Can't user the super constructor, since it does funny things when\n         * constructing the SQL Buffer, which we don't need. */\n        lines = (String[]) linesArray.toArray();\n\n        int    closeCmd = lines[0].indexOf(\"*/\");\n        String cmd      = lines[0].substring(0, closeCmd);\n\n        lines[0] = lines[0].substring(closeCmd + 2).trim();\n\n        String trimmed = cmd.trim();"
           }

       },

       {
           "id": "clone_60",

           "clone_type": "type-1",

           "origin": {
               "file": "Grid.java",
               "start_line": "178",
               "end_line": "204",
               "source_code": "    /**\n     * Method declaration\n     *\n     *\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     */\n    public void setBounds(int x, int y, int w, int h) {\n\n        // fredt@users 20011210 - patch 450412 by elise@users\n        super.setBounds(x, y, w, h);\n\n        iSbHeight = sbHoriz.getPreferredSize().height;\n        iSbWidth  = sbVert.getPreferredSize().width;\n        iHeight   = h - iSbHeight;\n        iWidth    = w - iSbWidth;\n\n        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);\n        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);\n        adjustScroll();\n\n        iImage = null;\n\n        repaint();\n    }"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "159",
               "end_line": "187",
               "source_code": "    /**\n     * Method declaration\n     *\n     *\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     */\n\n// fredt@users 20011210 - patch 450412 by elise@users\n// with additional replacement of deprecated methods\n    public void setBounds(int x, int y, int w, int h) {\n\n        super.setBounds(x, y, w, h);\n\n        iSbHeight = sbHoriz.getPreferredSize().height;\n        iSbWidth  = sbVert.getPreferredSize().width;\n        iHeight   = h - iSbHeight;\n        iWidth    = w - iSbWidth;\n\n        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);\n        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);\n        adjustScroll();\n\n        iImage = null;\n\n        repaint();\n    }"
           }

       },

       {
           "id": "clone_61",

           "clone_type": "type-1",

           "origin": {
               "file": "Types.java",
               "start_line": "694",
               "end_line": "706",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1089",
               "end_line": "1101",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           }

       },

       {
           "id": "clone_62",

           "clone_type": "type-1",

           "origin": {
               "file": "RowSetNavigatorData.java",
               "start_line": "441",
               "end_line": "448",
               "source_code": "        Object[]    compareData = null;\n        RowIterator it;\n        Object[]    otherData = null;\n\n        sortFull(session);\n        other.sortFull(session);\n\n        it = queryExpression.fullIndex.emptyIterator();"
           },

           "clone": {
               "file": "RowSetNavigatorData.java",
               "start_line": "385",
               "end_line": "392",
               "source_code": "        Object[]    compareData = null;\n        RowIterator it;\n        Object[]    otherData = null;\n\n        sortFull(session);\n        other.sortFull(session);\n\n        it = queryExpression.fullIndex.emptyIterator();"
           }

       },

       {
           "id": "clone_63",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "2034",
               "end_line": "2043",
               "source_code": "            case FUNC_CURRENT_CATALOG :\n            case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :\n            case FUNC_CURRENT_PATH :\n            case FUNC_CURRENT_ROLE :\n            case FUNC_CURRENT_SCHEMA :\n            case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :\n            case FUNC_CURRENT_USER :\n            case FUNC_SESSION_USER :\n            case FUNC_SYSTEM_USER :\n            case FUNC_USER :"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1714",
               "end_line": "1727",
               "source_code": "            /*\n            case FUNCTION_CHAR_NORMALIZE :\n                break;\n            */\n            case FUNC_CURRENT_CATALOG :\n            case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :\n            case FUNC_CURRENT_PATH :\n            case FUNC_CURRENT_ROLE :\n            case FUNC_CURRENT_SCHEMA :\n            case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :\n            case FUNC_CURRENT_USER :\n            case FUNC_SESSION_USER :\n            case FUNC_SYSTEM_USER :\n            case FUNC_USER :"
           }

       },

       {
           "id": "clone_64",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSimple.java",
               "start_line": "106",
               "end_line": "119",
               "source_code": "    protected String describe(Session session, int blanks) {\n\n        StringBuffer sb = new StringBuffer();\n\n        sb.append('\n');\n\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n\n        sb.append(Tokens.T_STATEMENT);\n\n        return sb.toString();\n    }"
           },

           "clone": {
               "file": "StatementSet.java",
               "start_line": "270",
               "end_line": "283",
               "source_code": "    protected String describe(Session session, int blanks) {\n\n        StringBuffer sb = new StringBuffer();\n\n        sb.append('\n');\n\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n\n        sb.append(Tokens.T_STATEMENT);\n\n        return sb.toString();\n    }"
           }

       },

       {
           "id": "clone_65",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1110",
               "end_line": "1130",
               "source_code": "                if (data[0] == null || data[1] == null || data[2] == null) {\n                    return null;\n                }\n\n                Object value;\n\n                value = Type.SQL_BIGINT.convertToType(session, data[2],\n                                                      nodes[2].dataType);\n\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;\n\n                if (nodes[3] != null) {\n                    if (data[3] == null) {\n                        return null;\n                    }\n\n                    value = Type.SQL_BIGINT.convertToType(session, data[3],\n                                                          nodes[3].dataType);\n                    length = ((Number) value).longValue();\n                }"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1013",
               "end_line": "1033",
               "source_code": "                if (data[0] == null || data[1] == null || data[2] == null) {\n                    return null;\n                }\n\n                Object value;\n\n                value = Type.SQL_BIGINT.convertToType(session, data[2],\n                                                      nodes[2].dataType);\n\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;\n\n                if (nodes[3] != null) {\n                    if (data[3] == null) {\n                        return null;\n                    }\n\n                    value = Type.SQL_BIGINT.convertToType(session, data[3],\n                                                          nodes[3].dataType);\n                    length = ((Number) value).longValue();\n                }"
           }

       },

       {
           "id": "clone_66",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "816",
               "end_line": "830",
               "source_code": "            rs.close();\n\n            rs = st1.executeQuery(\"select sum(delta) from history\");\n\n            rs.next();\n\n            deltasum = rs.getInt(1);\n\n            rs.close();\n\n            rs = null;\n\n            st1.close();\n\n            st1 = null;"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "727",
               "end_line": "741",
               "source_code": "            rs.close();\n\n            rs = st1.executeQuery(\"select sum(delta) from history\");\n\n            rs.next();\n\n            deltasum = rs.getInt(1);\n\n            rs.close();\n\n            rs = null;\n\n            st1.close();\n\n            st1 = null;"
           }

       },

       {
           "id": "clone_67",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "1482",
               "end_line": "1503",
               "source_code": "    static void checkSchemaUpdateAuthorisation(Session session,\n            HsqlName schema) {\n\n        if (session.isProcessingLog()) {\n            return;\n        }\n\n        if (SqlInvariants.isSystemSchemaName(schema.name)) {\n            throw Error.error(ErrorCode.X_42503);\n        }\n\n        if (session.parser.isSchemaDefinition) {\n            if (schema == session.getCurrentSchemaHsqlName()) {\n                return;\n            }\n\n            Error.error(ErrorCode.X_42505, schema.name);\n        }\n\n        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);\n        session.checkDDLWrite();\n    }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "5185",
               "end_line": "5205",
               "source_code": "    void checkSchemaUpdateAuthorisation(Session session, HsqlName schema) {\n\n        if (session.isProcessingLog()) {\n            return;\n        }\n\n        if (SqlInvariants.isSystemSchemaName(schema.name)) {\n            throw Error.error(ErrorCode.X_42503);\n        }\n\n        if (session.parser.isSchemaDefinition) {\n            if (schema == session.getCurrentSchemaHsqlName()) {\n                return;\n            }\n\n            Error.error(ErrorCode.X_42505, schema.name);\n        }\n\n        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);\n        session.checkDDLWrite();\n    }"
           }

       },

       {
           "id": "clone_68",

           "clone_type": "type-1",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "153",
               "end_line": "163",
               "source_code": "        pstmt = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "106",
               "end_line": "116",
               "source_code": "        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_69",

           "clone_type": "type-1",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "755",
               "end_line": "759",
               "source_code": "        case '\u000B':\n        case '\u000C':\n        case '\u0085':\n        case '\u2028':\n        case '\u2029':"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "705",
               "end_line": "709",
               "source_code": "        case '\u000B':\n        case '\u000C':\n        case '\u0085':\n        case '\u2028':\n        case '\u2029':"
           }

       },

       {
           "id": "clone_70",

           "clone_type": "type-1",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "1312",
               "end_line": "1317",
               "source_code": "                        case ResultConstants.DATA :\n                            break;\n\n                        case ResultConstants.ERROR :\n                            throw new RecoverableOdbcFailure(rOut);\n                        default :"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "740",
               "end_line": "745",
               "source_code": "                            case ResultConstants.DATA :\n                                break;\n\n                            case ResultConstants.ERROR :\n                                throw new RecoverableOdbcFailure(rOut);\n                            default :"
           }

       },

       {
           "id": "clone_71",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6606",
               "end_line": "6611",
               "source_code": "        // Intermediate holders\n        Iterator     tables;\n        Table        table;\n        Constraint[] constraints;\n        int          constraintCount;\n        Constraint   constraint;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2893",
               "end_line": "2898",
               "source_code": "        // Intermediate holders\n        Iterator     tables;\n        Table        table;\n        Constraint[] constraints;\n        int          constraintCount;\n        Constraint   constraint;"
           }

       },

       {
           "id": "clone_72",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3621",
               "end_line": "3629",
               "source_code": "                read();\n                readThis(Tokens.OPENBRACKET);\n\n                e = XreadRowElementList(true);\n\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n\n            default :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2376",
               "end_line": "2384",
               "source_code": "                read();\n                readThis(Tokens.OPENBRACKET);\n\n                e = XreadRowElementList(true);\n\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_73",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionColumn.java",
               "start_line": "469",
               "end_line": "474",
               "source_code": "                                dataType   = seq.getDataType();\n                                sequence   = seq;\n                                schema     = null;\n                                tableName  = null;\n                                columnName = null;\n                                resolved   = true;"
           },

           "clone": {
               "file": "ExpressionColumn.java",
               "start_line": "454",
               "end_line": "459",
               "source_code": "                                dataType   = seq.getDataType();\n                                sequence   = seq;\n                                schema     = null;\n                                tableName  = null;\n                                columnName = null;\n                                resolved   = true;"
           }

       },

       {
           "id": "clone_74",

           "clone_type": "type-1",

           "origin": {
               "file": "TestCacheSize.java",
               "start_line": "929",
               "end_line": "934",
               "source_code": "        StopWatch        sw        = new StopWatch();\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;\n        int              count     = 0;\n        int              random    = 0;"
           },

           "clone": {
               "file": "TestCacheSize.java",
               "start_line": "878",
               "end_line": "883",
               "source_code": "        StopWatch        sw        = new StopWatch();\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;\n        int              count     = 0;\n        int              random    = 0;"
           }

       },

       {
           "id": "clone_75",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1897",
               "end_line": "1902",
               "source_code": "                read();\n                readThis(Tokens.MEMORY);\n                readThis(Tokens.ROWS);\n\n                Integer  size = readIntegerObject();\n                Object[] args = new Object[]{ size };"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "419",
               "end_line": "424",
               "source_code": "                read();\n                readThis(Tokens.MEMORY);\n                readThis(Tokens.ROWS);\n\n                Integer  size = readIntegerObject();\n                Object[] args = new Object[]{ size };"
           }

       },

       {
           "id": "clone_76",

           "clone_type": "type-1",

           "origin": {
               "file": "TestAllTypes.java",
               "start_line": "383",
               "end_line": "387",
               "source_code": "        StopWatch        sw        = new StopWatch();\n        int              smallrows = 0xfff;\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;"
           },

           "clone": {
               "file": "TestAllTypes.java",
               "start_line": "328",
               "end_line": "332",
               "source_code": "        StopWatch        sw        = new StopWatch();\n        int              smallrows = 0xfff;\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;"
           }

       },

       {
           "id": "clone_77",

           "clone_type": "type-1",

           "origin": {
               "file": "ScriptWriterEncode.java",
               "start_line": "102",
               "end_line": "118",
               "source_code": "    protected void openFile() {\n\n        try {\n            FileAccess   fa  = isDump ? FileUtil.getFileUtil()\n                                      : database.logger.getFileAccess();\n            OutputStream fos = fa.openOutputStreamElement(outFile);\n\n            outDescriptor = fa.getFileSync(fos);\n            fileStreamOut = fos;\n            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n        }\n    }"
           },

           "clone": {
               "file": "ScriptWriterBase.java",
               "start_line": "265",
               "end_line": "285",
               "source_code": "    /**\n     *  File is opened in append mode although in current usage the file\n     *  never pre-exists\n     */\n    protected void openFile() {\n\n        try {\n            FileAccess   fa  = isDump ? FileUtil.getFileUtil()\n                                      : database.logger.getFileAccess();\n            OutputStream fos = fa.openOutputStreamElement(outFile);\n\n            outDescriptor = fa.getFileSync(fos);\n            fileStreamOut = fos;\n            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n        }\n    }"
           }

       },

       {
           "id": "clone_78",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "837",
               "end_line": "841",
               "source_code": "            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);            // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not null\n            addColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);          // 6\n            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);        // 7"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "643",
               "end_line": "647",
               "source_code": "            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);         // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);        // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);\n            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);"
           }

       },

       {
           "id": "clone_79",

           "clone_type": "type-1",

           "origin": {
               "file": "PostgresTransferHelper.java",
               "start_line": "120",
               "end_line": "135",
               "source_code": "        if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n\n            t.Stmts.sDestDrop += DropSequence;\n        }"
           },

           "clone": {
               "file": "OracleTransferHelper.java",
               "start_line": "98",
               "end_line": "113",
               "source_code": "        if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n\n            t.Stmts.sDestDrop += DropSequence;\n        }"
           }

       },

       {
           "id": "clone_80",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8291",
               "end_line": "8296",
               "source_code": "            addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);    // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8041",
               "end_line": "8046",
               "source_code": "            addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_81",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "449",
               "end_line": "466",
               "source_code": "        if (exprList.size() > 1) {\n            throw Error.parseError(ErrorCode.X_42602, null,\n                                   scanner.getLineNumber());\n        }\n\n        Expression expression = (Expression) exprList.get(0);\n\n        if (expression.getDegree() != targetSet.size()) {\n            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);\n        }\n\n        int[] columnMap = new int[colIndexList.size()];\n\n        colIndexList.toArray(columnMap);\n\n        Expression[] targets = new Expression[targetSet.size()];\n\n        targetSet.toArray(targets);"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "388",
               "end_line": "405",
               "source_code": "        if (exprList.size() > 1) {\n            throw Error.parseError(ErrorCode.X_42602, null,\n                                   scanner.getLineNumber());\n        }\n\n        Expression expression = (Expression) exprList.get(0);\n\n        if (expression.getDegree() != targetSet.size()) {\n            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);\n        }\n\n        int[] columnMap = new int[colIndexList.size()];\n\n        colIndexList.toArray(columnMap);\n\n        Expression[] targets = new Expression[targetSet.size()];\n\n        targetSet.toArray(targets);"
           }

       },

       {
           "id": "clone_82",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "726",
               "end_line": "748",
               "source_code": "                readThis(Tokens.TYPE);\n\n                int type = TableBase.MEMORY_TABLE;\n\n                switch (token.tokenType) {\n\n                    case Tokens.MEMORY :\n                        break;\n\n                    case Tokens.CACHED :\n                        type = TableBase.CACHED_TABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }\n\n                read();\n\n                Object[] args = new Object[]{ ValuePool.getInt(type) };\n\n                return new StatementCommand(\n                    StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "431",
               "end_line": "453",
               "source_code": "                readThis(Tokens.TYPE);\n\n                int type = TableBase.MEMORY_TABLE;\n\n                switch (token.tokenType) {\n\n                    case Tokens.MEMORY :\n                        break;\n\n                    case Tokens.CACHED :\n                        type = TableBase.CACHED_TABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }\n\n                read();\n\n                Object[] args = new Object[]{ ValuePool.getInt(type) };\n\n                return new StatementCommand(\n                    StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);"
           }

       },

       {
           "id": "clone_83",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3377",
               "end_line": "3387",
               "source_code": "        // intermediate holders\n        Iterator tables;\n        Table    table;\n        Object[] row;\n\n        // column number mappings\n        final int grantor        = 0;\n        final int grantee        = 1;\n        final int table_catalog  = 2;\n        final int table_schema   = 3;\n        final int table_name     = 4;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2951",
               "end_line": "2960",
               "source_code": "        Iterator tables;\n        Table    table;\n        Object[] row;\n\n// column number mappings\n        final int grantor        = 0;\n        final int grantee        = 1;\n        final int table_catalog  = 2;\n        final int table_schema   = 3;\n        final int table_name     = 4;"
           }

       },

       {
           "id": "clone_84",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "730",
               "end_line": "741",
               "source_code": "                switch (token.tokenType) {\n\n                    case Tokens.MEMORY :\n                        break;\n\n                    case Tokens.CACHED :\n                        type = TableBase.CACHED_TABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "435",
               "end_line": "446",
               "source_code": "                switch (token.tokenType) {\n\n                    case Tokens.MEMORY :\n                        break;\n\n                    case Tokens.CACHED :\n                        type = TableBase.CACHED_TABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }"
           }

       },

       {
           "id": "clone_85",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementCompound.java",
               "start_line": "499",
               "end_line": "514",
               "source_code": "            for (int i = 0; i < statements.length; i++) {\n                result = executeProtected(session, statements[i]);\n                result = handleCondition(session, result);\n\n                if (result.isError()) {\n                    break;\n                }\n\n                if (result.getType() == ResultConstants.VALUE) {\n                    break;\n                }\n\n                if (result.getType() == ResultConstants.DATA) {\n                    break;\n                }\n            }"
           },

           "clone": {
               "file": "StatementCompound.java",
               "start_line": "375",
               "end_line": "390",
               "source_code": "        for (int i = 0; i < statements.length; i++) {\n            result = executeProtected(session, statements[i]);\n            result = handleCondition(session, result);\n\n            if (result.isError()) {\n                break;\n            }\n\n            if (result.getType() == ResultConstants.VALUE) {\n                break;\n            }\n\n            if (result.getType() == ResultConstants.DATA) {\n                break;\n            }\n        }"
           }

       },

       {
           "id": "clone_86",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "120",
               "end_line": "131",
               "source_code": "            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.ASSERTION :\n            case SchemaObject.TRIGGER :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "89",
               "end_line": "100",
               "source_code": "            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.ASSERTION :\n            case SchemaObject.TRIGGER :"
           }

       },

       {
           "id": "clone_87",

           "clone_type": "type-1",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "221",
               "end_line": "225",
               "source_code": "        c.core.uniqueName = uniqueConstraint.getName();\n        c.core.mainName   = mainName;\n        c.core.mainIndex  = mainIndex;\n        c.core.refTable   = table;\n        c.core.refName    = c.getName();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "1433",
               "end_line": "1437",
               "source_code": "        c.core.uniqueName = uniqueConstraint.getName();\n        c.core.mainName   = mainName;\n        c.core.mainIndex  = mainIndex;\n        c.core.refTable   = table;\n        c.core.refName    = c.getName();"
           }

       },

       {
           "id": "clone_88",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3350",
               "end_line": "3357",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n            addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4819",
               "end_line": "4826",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n            addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);"
           }

       },

       {
           "id": "clone_89",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2462",
               "end_line": "2478",
               "source_code": "        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;\n        final int column_name   = 6;\n\n        // intermediate holders\n        int      columnCount;\n        Iterator tables;\n        Table    table;\n        Object[] row;\n        Type     type;\n        HsqlName tableName;\n\n        // Initialization\n        tables = allTables();\n\n        Grantee grantee = session.getGrantee();"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2344",
               "end_line": "2360",
               "source_code": "        final int table_catalog  = 3;\n        final int table_schema   = 4;\n        final int table_name     = 5;\n        final int column_name    = 6;\n\n        // intermediate holders\n        int      columnCount;\n        Iterator tables;\n        Table    table;\n        Object[] row;\n        Type     type;\n        HsqlName tableName;\n\n        // Initialization\n        tables = allTables();\n\n        Grantee grantee = session.getGrantee();"
           }

       },

       {
           "id": "clone_90",

           "clone_type": "type-1",

           "origin": {
               "file": "RowType.java",
               "start_line": "362",
               "end_line": "376",
               "source_code": "        if (a == b) {\n            return 0;\n        }\n\n        // not related to sort\n        if (a == null) {\n            return -1;\n        }\n\n        if (b == null) {\n            return 1;\n        }\n\n        Object[] arra   = (Object[]) a;\n        Object[] arrb   = (Object[]) b;"
           },

           "clone": {
               "file": "RowType.java",
               "start_line": "119",
               "end_line": "132",
               "source_code": "        if (a == b) {\n            return 0;\n        }\n\n        if (a == null) {\n            return -1;\n        }\n\n        if (b == null) {\n            return 1;\n        }\n\n        Object[] arra   = (Object[]) a;\n        Object[] arrb   = (Object[]) b;"
           }

       },

       {
           "id": "clone_91",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7118",
               "end_line": "7123",
               "source_code": "            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6780",
               "end_line": "6785",
               "source_code": "            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null"
           }

       },

       {
           "id": "clone_92",

           "clone_type": "type-1",

           "origin": {
               "file": "NodeAVLDisk.java",
               "start_line": "143",
               "end_line": "154",
               "source_code": "    public void delete() {\n\n        iLeft    = NO_POS;\n        iRight   = NO_POS;\n        iParent  = NO_POS;\n        nLeft    = null;\n        nRight   = null;\n        nParent  = null;\n        iBalance = 0;\n\n        row.setNodesChanged();\n    }"
           },

           "clone": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "99",
               "end_line": "110",
               "source_code": "    public void delete() {\n\n        iLeft    = NO_POS;\n        iRight   = NO_POS;\n        iParent  = NO_POS;\n        nLeft    = null;\n        nRight   = null;\n        nParent  = null;\n        iBalance = 0;\n\n        row.setNodesChanged();\n    }"
           }

       },

       {
           "id": "clone_93",

           "clone_type": "type-1",

           "origin": {
               "file": "ClobInputStream.java",
               "start_line": "117",
               "end_line": "132",
               "source_code": "    public long skip(long n) throws IOException {\n\n        checkClosed();\n\n        if (n <= 0) {\n            return 0;\n        }\n\n        if (currentPosition + n > availableLength) {\n            n = availableLength - currentPosition;\n        }\n\n        currentPosition += n;\n\n        return n;\n    }"
           },

           "clone": {
               "file": "BlobInputStream.java",
               "start_line": "98",
               "end_line": "113",
               "source_code": "    public long skip(long n) throws IOException {\n\n        checkClosed();\n\n        if (n <= 0) {\n            return 0;\n        }\n\n        if (currentPosition + n > availableLength) {\n            n = availableLength - currentPosition;\n        }\n\n        currentPosition += n;\n\n        return n;\n    }"
           }

       },

       {
           "id": "clone_94",

           "clone_type": "type-1",

           "origin": {
               "file": "NodeAVLDisk.java",
               "start_line": "407",
               "end_line": "419",
               "source_code": "        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           },

           "clone": {
               "file": "NodeAVLDisk.java",
               "start_line": "382",
               "end_line": "394",
               "source_code": "        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           }

       },

       {
           "id": "clone_95",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4512",
               "end_line": "4516",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.OTHER :\n                throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));\n            default :"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4480",
               "end_line": "4484",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.OTHER :\n                throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));\n            default :"
           }

       },

       {
           "id": "clone_96",

           "clone_type": "type-1",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1506",
               "end_line": "1513",
               "source_code": "                if (charAt(currentPosition + 1) == '>') {\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1489",
               "end_line": "1496",
               "source_code": "                if (charAt(currentPosition + 1) == '=') {\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           }

       },

       {
           "id": "clone_97",

           "clone_type": "type-1",

           "origin": {
               "file": "RowInputTextLog.java",
               "start_line": "457",
               "end_line": "469",
               "source_code": "        readFieldPrefix();\n\n        if (scanner.scanNull()) {\n            return null;\n        }\n\n        scanner.scanBinaryStringWithQuote();\n\n        if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) {\n            throw Error.error(ErrorCode.X_42587);\n        }\n\n        value = scanner.getValue();"
           },

           "clone": {
               "file": "RowInputTextLog.java",
               "start_line": "419",
               "end_line": "431",
               "source_code": "        readFieldPrefix();\n\n        if (scanner.scanNull()) {\n            return null;\n        }\n\n        scanner.scanBinaryStringWithQuote();\n\n        if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) {\n            throw Error.error(ErrorCode.X_42587);\n        }\n\n        value = scanner.getValue();"
           }

       },

       {
           "id": "clone_98",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4029",
               "end_line": "4033",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);                        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);                       // not null\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);                 // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2538",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_99",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4266",
               "end_line": "4287",
               "source_code": "            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3539",
               "end_line": "3560",
               "source_code": "            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_100",

           "clone_type": "type-1",

           "origin": {
               "file": "QueryExpression.java",
               "start_line": "763",
               "end_line": "771",
               "source_code": "        StringBuffer sb;\n        String       temp;\n        StringBuffer b = new StringBuffer(blanks);\n\n        for (int i = 0; i < blanks; i++) {\n            b.append(' ');\n        }\n\n        sb = new StringBuffer();"
           },

           "clone": {
               "file": "QuerySpecification.java",
               "start_line": "1959",
               "end_line": "1967",
               "source_code": "        StringBuffer sb;\n        String       temp;\n        StringBuffer b = new StringBuffer(blanks);\n\n        for (int i = 0; i < blanks; i++) {\n            b.append(' ');\n        }\n\n        sb = new StringBuffer();"
           }

       },

       {
           "id": "clone_101",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "159",
               "end_line": "168",
               "source_code": "            int size = object.getRealSize(cache.rowOut);\n\n            size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;\n            size = cache.rowOut.getStorageSize(size);\n\n            object.setStorageSize(size);\n\n            long pos = tableSpace.getFilePosition(size, false);\n\n            object.setPos(pos);"
           },

           "clone": {
               "file": "RowStoreAVLHybridExtended.java",
               "start_line": "80",
               "end_line": "89",
               "source_code": "            int size = object.getRealSize(cache.rowOut);\n\n            size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;\n            size = cache.rowOut.getStorageSize(size);\n\n            object.setStorageSize(size);\n\n            long pos = tableSpace.getFilePosition(size, false);\n\n            object.setPos(pos);"
           }

       },

       {
           "id": "clone_102",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "603",
               "end_line": "612",
               "source_code": "            for (int i = 0; i < 100; i++) {\n                reader = dataClob.getCharacterStream();\n\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "530",
               "end_line": "539",
               "source_code": "            for (int i = 0; i < 1000; i++) {\n                reader = dataClob.getCharacterStream();\n\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }"
           }

       },

       {
           "id": "clone_103",

           "clone_type": "type-1",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1181",
               "end_line": "1187",
               "source_code": "            ps.setInt(1, 3);\n            ps.setString(2, \"xy\");\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1141",
               "end_line": "1147",
               "source_code": "            ps.setInt(1, 3);\n            ps.setString(2, \"xy\");\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           }

       },

       {
           "id": "clone_104",

           "clone_type": "type-1",

           "origin": {
               "file": "Grid.java",
               "start_line": "294",
               "end_line": "324",
               "source_code": "    /**\n     * Method declaration\n     *\n     *\n     * @param e\n     */\n\n    // fredt@users 20020130 - comment by fredt\n    // to remove this deprecated method we need to rewrite the Grid class as a\n    // ScrollPane component\n    // sqlbob:  I believe that changing to the JDK1.1 event handler\n    // would require browsers to use the Java plugin.\n    public boolean handleEvent(Event e) {\n\n        switch (e.id) {\n\n            case Event.SCROLL_LINE_UP :\n            case Event.SCROLL_LINE_DOWN :\n            case Event.SCROLL_PAGE_UP :\n            case Event.SCROLL_PAGE_DOWN :\n            case Event.SCROLL_ABSOLUTE :\n                iX = sbHoriz.getValue();\n                iY = iRowHeight * sbVert.getValue();\n\n                repaint();\n\n                return true;\n        }\n\n        return super.handleEvent(e);\n    }"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "280",
               "end_line": "308",
               "source_code": "    /**\n     * Method declaration\n     *\n     *\n     * @param e\n     */\n\n// fredt@users 20020130 - comment by fredt\n// to remove this deprecated method we need to rewrite the Tree class as a\n// ScrollPane component\n    public boolean handleEvent(Event e) {\n\n        switch (e.id) {\n\n            case Event.SCROLL_LINE_UP :\n            case Event.SCROLL_LINE_DOWN :\n            case Event.SCROLL_PAGE_UP :\n            case Event.SCROLL_PAGE_DOWN :\n            case Event.SCROLL_ABSOLUTE :\n                iX = sbHoriz.getValue();\n                iY = iRowHeight * sbVert.getValue();\n\n                repaint();\n\n                return true;\n        }\n\n        return super.handleEvent(e);\n    }"
           }

       },

       {
           "id": "clone_105",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3222",
               "end_line": "3241",
               "source_code": "//            case Token.OCCURRENCES_REGEX :\n//            case Token.POSITION_REGEX :\n            case Tokens.EXTRACT :\n            case Tokens.CHAR_LENGTH :\n            case Tokens.CHARACTER_LENGTH :\n            case Tokens.OCTET_LENGTH :\n            case Tokens.CARDINALITY :\n            case Tokens.ABS :\n            case Tokens.MOD :\n            case Tokens.LN :\n            case Tokens.EXP :\n            case Tokens.POWER :\n            case Tokens.SQRT :\n            case Tokens.FLOOR :\n            case Tokens.CEILING :\n            case Tokens.CEIL :\n            case Tokens.WIDTH_BUCKET :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2827",
               "end_line": "2844",
               "source_code": "            case Tokens.EXTRACT :\n            case Tokens.CHAR_LENGTH :\n            case Tokens.CHARACTER_LENGTH :\n            case Tokens.OCTET_LENGTH :\n            case Tokens.CARDINALITY :\n            case Tokens.ABS :\n            case Tokens.MOD :\n            case Tokens.LN :\n            case Tokens.EXP :\n            case Tokens.POWER :\n            case Tokens.SQRT :\n            case Tokens.FLOOR :\n            case Tokens.CEILING :\n            case Tokens.CEIL :\n            case Tokens.WIDTH_BUCKET :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);"
           }

       },

       {
           "id": "clone_106",

           "clone_type": "type-1",

           "origin": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "494",
               "end_line": "502",
               "source_code": "        int               rowcount = 0;\n\n        sql = \"drop table t if exists\";\n\n        stmt.executeUpdate(sql);\n\n        sql = \"create table t(id int, fn varchar(40), ln varchar(40), zip int)\";\n\n        stmt.executeUpdate(sql);"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "142",
               "end_line": "150",
               "source_code": "        int               rowcount = 0;\n\n        sql = \"drop table t if exists\";\n\n        stmt.executeUpdate(sql);\n\n        sql = \"create table t(id int, fn varchar(40), ln varchar(40), zip int)\";\n\n        stmt.executeUpdate(sql);"
           }

       },

       {
           "id": "clone_107",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "613",
               "end_line": "625",
               "source_code": "            case OpTypes.VALUE :\n                return valueData;\n\n            case OpTypes.SIMPLE_COLUMN : {\n                Object value =\n                    session.sessionContext.rangeIterators[rangePosition]\n                        .getCurrent(columnIndex);\n\n                return value;\n            }\n            case OpTypes.NEGATE :\n                return ((NumberType) dataType).negate(\n                    nodes[LEFT].getValue(session, nodes[LEFT].dataType));"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "1192",
               "end_line": "1204",
               "source_code": "            case OpTypes.VALUE :\n                return valueData;\n\n            case OpTypes.SIMPLE_COLUMN : {\n                Object value =\n                    session.sessionContext.rangeIterators[rangePosition]\n                        .getCurrent(columnIndex);\n\n                return value;\n            }\n            case OpTypes.NEGATE :\n                return ((NumberType) dataType).negate(\n                    nodes[LEFT].getValue(session, nodes[LEFT].dataType));"
           }

       },

       {
           "id": "clone_108",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "869",
               "end_line": "877",
               "source_code": "            ps.setBlob(1, blob);\n            ps.executeUpdate();\n\n            data[4] = 50;\n            blob    = new JDBCBlob(data);\n\n            ps.setBlob(1, blob);\n            ps.executeUpdate();\n            ps.close();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "107",
               "end_line": "115",
               "source_code": "            ps.setBlob(1, blob);\n            ps.executeUpdate();\n\n            data[4] = 50;\n            blob    = new JDBCBlob(data);\n\n            ps.setBlob(1, blob);\n            ps.executeUpdate();\n            ps.close();"
           }

       },

       {
           "id": "clone_109",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2923",
               "end_line": "2930",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4642",
               "end_line": "4649",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null"
           }

       },

       {
           "id": "clone_110",

           "clone_type": "type-1",

           "origin": {
               "file": "DoubleIntIndex.java",
               "start_line": "340",
               "end_line": "349",
               "source_code": "        hasChanged = true;\n\n        if (count != i) {\n            moveRows(i, i + 1, count - i);\n        }\n\n        keys[i]   = key;\n        values[i] = value;\n\n        count++;"
           },

           "clone": {
               "file": "DoubleIntIndex.java",
               "start_line": "283",
               "end_line": "292",
               "source_code": "        hasChanged = true;\n\n        if (count != i) {\n            moveRows(i, i + 1, count - i);\n        }\n\n        keys[i]   = key;\n        values[i] = value;\n\n        count++;"
           }

       },

       {
           "id": "clone_111",

           "clone_type": "type-1",

           "origin": {
               "file": "RangeVariableResolver.java",
               "start_line": "1456",
               "end_line": "1460",
               "source_code": "                case OpTypes.SMALLER :\n                case OpTypes.SMALLER_EQUAL :\n                case OpTypes.GREATER :\n                case OpTypes.GREATER_EQUAL :\n                case OpTypes.GREATER_EQUAL_PRE :"
           },

           "clone": {
               "file": "RangeVariableResolver.java",
               "start_line": "1078",
               "end_line": "1082",
               "source_code": "                case OpTypes.SMALLER :\n                case OpTypes.SMALLER_EQUAL :\n                case OpTypes.GREATER :\n                case OpTypes.GREATER_EQUAL :\n                case OpTypes.GREATER_EQUAL_PRE :"
           }

       },

       {
           "id": "clone_112",

           "clone_type": "type-1",

           "origin": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "359",
               "end_line": "365",
               "source_code": "            if (setting != null) {\n                mName.setText(setting.getName());\n                mDriver.setText(setting.getDriver());\n                mURL.setText(setting.getUrl());\n                mUser.setText(setting.getUser());\n                mPassword.setText(setting.getPassword());\n            }"
           },

           "clone": {
               "file": "ConnectionDialog.java",
               "start_line": "159",
               "end_line": "165",
               "source_code": "                if (setting != null) {\n                    mName.setText(setting.getName());\n                    mDriver.setText(setting.getDriver());\n                    mURL.setText(setting.getUrl());\n                    mUser.setText(setting.getUser());\n                    mPassword.setText(setting.getPassword());\n                }"
           }

       },

       {
           "id": "clone_113",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBench.java",
               "start_line": "977",
               "end_line": "985",
               "source_code": "            while (count-- > 0) {\n                int account = TestBench.getRandomID(ACCOUNT);\n                int branch  = TestBench.getRandomID(BRANCH);\n                int teller  = TestBench.getRandomID(TELLER);\n                int delta   = TestBench.getRandomInt(-1000, 1000);\n\n                doOne(branch, teller, account, delta);\n                incrementTransactionCount();\n            }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "818",
               "end_line": "826",
               "source_code": "            while (count-- > 0) {\n                int account = TestBench.getRandomID(ACCOUNT);\n                int branch  = TestBench.getRandomID(BRANCH);\n                int teller  = TestBench.getRandomID(TELLER);\n                int delta   = TestBench.getRandomInt(-1000, 1000);\n\n                doOne(branch, teller, account, delta);\n                incrementTransactionCount();\n            }"
           }

       },

       {
           "id": "clone_114",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBug1191815.java",
               "start_line": "107",
               "end_line": "113",
               "source_code": "        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration exceptions;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();"
           },

           "clone": {
               "file": "TestBug785429.java",
               "start_line": "164",
               "end_line": "170",
               "source_code": "        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration exceptions;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();"
           }

       },

       {
           "id": "clone_115",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4418",
               "end_line": "4429",
               "source_code": "            if (is.session.getDatabaseUniqueName().equals(\n                    session.getDatabaseUniqueName())) {\n                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,\n                                        \"invalid Reader\");\n            }\n\n            // in the same database ? see if it blocks in\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n\n            return;"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4348",
               "end_line": "4357",
               "source_code": "            if (is.session.getDatabaseUniqueName().equals(\n                    session.getDatabaseUniqueName())) {\n                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,\n                                        \"invalid Reader\");\n            }\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n\n            return;"
           }

       },

       {
           "id": "clone_116",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "285",
               "end_line": "292",
               "source_code": "            ps.executeUpdate();\n            ps.close();\n\n            ps = connection.prepareStatement(dql0);\n\n            ResultSet rs = ps.executeQuery();\n\n            rs.next();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "114",
               "end_line": "121",
               "source_code": "            ps.executeUpdate();\n            ps.close();\n\n            ps = connection.prepareStatement(dql0);\n\n            ResultSet rs = ps.executeQuery();\n\n            rs.next();"
           }

       },

       {
           "id": "clone_117",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "4193",
               "end_line": "4200",
               "source_code": "                            read();\n                            readThis(Tokens.BY);\n\n                            long value = readBigint();\n\n                            sequence.setIncrement(value);\n\n                            break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2809",
               "end_line": "2816",
               "source_code": "                    read();\n                    readThis(Tokens.BY);\n\n                    long value = readBigint();\n\n                    sequence.setIncrement(value);\n\n                    break;"
           }

       },

       {
           "id": "clone_118",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1154",
               "end_line": "1165",
               "source_code": "        try {\n            Object[] data = getLobHeader(lobID);\n\n            if (data == null) {\n                throw Error.error(ErrorCode.X_0F502);\n            }\n\n            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();\n\n            return ResultLob.newLobSetResponse(lobID, length);\n        }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "672",
               "end_line": "683",
               "source_code": "        try {\n            Object[] data = getLobHeader(lobID);\n\n            if (data == null) {\n                throw Error.error(ErrorCode.X_0F502);\n            }\n\n            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();\n\n            return ResultLob.newLobSetResponse(lobID, length);\n        }"
           }

       },

       {
           "id": "clone_119",

           "clone_type": "type-1",

           "origin": {
               "file": "RefCapablePropertyResourceBundle.java",
               "start_line": "271",
               "end_line": "278",
               "source_code": "                case EMPTYSTRING_BEHAVIOR:\n                    varValue = \"\";\n                    break;\n                case NOOP_BEHAVIOR:\n                    break;\n                default:\n                    throw new RuntimeException(\n                            \"Undefined value for behavior: \" + behavior);"
           },

           "clone": {
               "file": "RefCapablePropertyResourceBundle.java",
               "start_line": "223",
               "end_line": "230",
               "source_code": "                case EMPTYSTRING_BEHAVIOR:\n                    varValue = \"\";\n                    break;\n                case NOOP_BEHAVIOR:\n                    break;\n                default:\n                    throw new RuntimeException(\n                            \"Undefined value for behavior: \" + behavior);"
           }

       },

       {
           "id": "clone_120",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "144",
               "end_line": "152",
               "source_code": "                case Tokens.TRUE :\n                    read();\n\n                    return Expression.EXPR_TRUE;\n\n                case Tokens.FALSE :\n                    read();\n\n                    return Expression.EXPR_FALSE;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2215",
               "end_line": "2223",
               "source_code": "            case Tokens.TRUE :\n                read();\n\n                return Expression.EXPR_TRUE;\n\n            case Tokens.FALSE :\n                read();\n\n                return Expression.EXPR_FALSE;"
           }

       },

       {
           "id": "clone_121",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2320",
               "end_line": "2337",
               "source_code": "            case Tokens.COLON :\n                read();\n\n                if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER\n                        || token.tokenType == Tokens.X_IDENTIFIER) {}\n                else {\n                    throw unexpectedToken(Tokens.T_COLON);\n                }\n\n            // fall through\n            case Tokens.QUESTION :\n                ExpressionColumn p =\n                    new ExpressionColumn(OpTypes.DYNAMIC_PARAM);\n\n                compileContext.addParameter(p, getPosition());\n                read();\n\n                return p;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2257",
               "end_line": "2274",
               "source_code": "            case Tokens.COLON :\n                read();\n\n                if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER\n                        || token.tokenType == Tokens.X_IDENTIFIER) {}\n                else {\n                    throw unexpectedToken(Tokens.T_COLON);\n                }\n\n            // fall through\n            case Tokens.QUESTION :\n                ExpressionColumn p =\n                    new ExpressionColumn(OpTypes.DYNAMIC_PARAM);\n\n                compileContext.addParameter(p, getPosition());\n                read();\n\n                return p;"
           }

       },

       {
           "id": "clone_122",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2350",
               "end_line": "2356",
               "source_code": "                    break;\n\n                case SchemaObject.INDEX :\n                    set = schema.indexLookup;\n                    break;\n\n                case SchemaObject.CONSTRAINT :"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "700",
               "end_line": "706",
               "source_code": "                    break;\n\n                case SchemaObject.INDEX :\n                    set = schema.indexLookup;\n                    break;\n\n                case SchemaObject.CONSTRAINT :"
           }

       },

       {
           "id": "clone_123",

           "clone_type": "type-1",

           "origin": {
               "file": "Calculator.java",
               "start_line": "248",
               "end_line": "259",
               "source_code": "            if (startAtomIndex + remaining < i + 3)\n                throw new IllegalStateException(\n                        \"No operator/operand pairing remaining\");\n            nextAtom = atoms.get(i + 1);\n            if (nextAtom.op == null)\n                throw new IllegalStateException(\n                        \"Operator expected but got value \" + nextAtom.val);\n            op = nextAtom.op;\n            nextAtom = atoms.get(i + 2);\n            if (nextAtom.op != null)\n                throw new IllegalStateException(\n                        \"Value expected but got operator \" + nextAtom.op);"
           },

           "clone": {
               "file": "Calculator.java",
               "start_line": "213",
               "end_line": "224",
               "source_code": "            if (startAtomIndex + remaining < i + 3)\n                throw new IllegalStateException(\n                        \"No operator/operand pairing remaining\");\n            nextAtom = atoms.get(i + 1);\n            if (nextAtom.op == null)\n                throw new IllegalStateException(\n                        \"Operator expected but got value \" + nextAtom.val);\n            op = nextAtom.op;\n            nextAtom = atoms.get(i + 2);\n            if (nextAtom.op != null)\n                throw new IllegalStateException(\n                        \"Value expected but got operator \" + nextAtom.op);"
           }

       },

       {
           "id": "clone_124",

           "clone_type": "type-1",

           "origin": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "454",
               "end_line": "462",
               "source_code": "        Object[]    compareData = null;\n        RowIterator it;\n        Row         otherRow  = null;\n        Object[]    otherData = null;\n\n        sortFull(session);\n        other.sortFull(session);\n\n        it = fullIndex.emptyIterator();"
           },

           "clone": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "395",
               "end_line": "403",
               "source_code": "        Object[]    compareData = null;\n        RowIterator it;\n        Row         otherRow  = null;\n        Object[]    otherData = null;\n\n        sortFull(session);\n        other.sortFull(session);\n\n        it = fullIndex.emptyIterator();"
           }

       },

       {
           "id": "clone_125",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2502",
               "end_line": "2507",
               "source_code": "                row[table_catalog] = database.getCatalogName().name;\n                row[table_schema]  = tableName.schema.name;\n                row[table_name]    = tableName.name;\n                row[column_name]   = column.getNameString();\n\n                t.insertSys(session, store, row);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2384",
               "end_line": "2389",
               "source_code": "                row[table_catalog]  = database.getCatalogName().name;\n                row[table_schema]   = tableName.schema.name;\n                row[table_name]     = tableName.name;\n                row[column_name]    = column.getNameString();\n\n                t.insertSys(session, store, row);"
           }

       },

       {
           "id": "clone_126",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "880",
               "end_line": "894",
               "source_code": "            ps = connection.prepareStatement(dql0);\n\n            ResultSet rs = ps.executeQuery();\n\n            rs.next();\n\n            Blob blob1 = rs.getBlob(2);\n\n            rs.next();\n\n            Blob   blob2 = rs.getBlob(2);\n            byte[] data1 = blob1.getBytes(1, 10);\n            byte[] data2 = blob2.getBytes(1, 10);\n\n            assertTrue(data1[4] == 5 && data2[4] == 50);"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "117",
               "end_line": "131",
               "source_code": "            ps = connection.prepareStatement(dql0);\n\n            ResultSet rs = ps.executeQuery();\n\n            rs.next();\n\n            Blob blob1 = rs.getBlob(2);\n\n            rs.next();\n\n            Blob   blob2 = rs.getBlob(2);\n            byte[] data1 = blob1.getBytes(1, 10);\n            byte[] data2 = blob2.getBytes(1, 10);\n\n            assertTrue(data1[4] == 5 && data2[4] == 50);"
           }

       },

       {
           "id": "clone_127",

           "clone_type": "type-1",

           "origin": {
               "file": "ValuePoolHashMap.java",
               "start_line": "277",
               "end_line": "286",
               "source_code": "        lookup                 = hashIndex.linkNode(index, lastLookup);\n        objectKeyTable[lookup] = testValue;\n\n        if (accessCount > ACCESS_MAX) {\n            resetAccessCount();\n        }\n\n        accessTable[lookup] = accessCount++;\n\n        return testValue;"
           },

           "clone": {
               "file": "ValuePoolHashMap.java",
               "start_line": "232",
               "end_line": "241",
               "source_code": "        lookup                 = hashIndex.linkNode(index, lastLookup);\n        objectKeyTable[lookup] = testValue;\n\n        if (accessCount > ACCESS_MAX) {\n            resetAccessCount();\n        }\n\n        accessTable[lookup] = accessCount++;\n\n        return testValue;"
           }

       },

       {
           "id": "clone_128",

           "clone_type": "type-1",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "6308",
               "end_line": "6312",
               "source_code": "        char[] readBfr = new char[1024];\n        int i;\n        StringWriter sWriter = new StringWriter();\n        InputStreamReader isr = null;\n        String str;"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "6269",
               "end_line": "6273",
               "source_code": "        char[] readBfr = new char[1024];\n        int i;\n        StringWriter sWriter = new StringWriter();\n        InputStreamReader isr = null;\n        String str;"
           }

       },

       {
           "id": "clone_129",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2317",
               "end_line": "2328",
               "source_code": "                    RoutineSchema routine =\n                        (RoutineSchema) set.getObject(name.name);\n\n                    object = routine;\n\n                    Routine[] specifics = routine.getSpecificRoutines();\n\n                    for (int i = 0; i < specifics.length; i++) {\n                        removeSchemaObject(specifics[i].getSpecificName());\n                    }\n\n                    break;"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "2301",
               "end_line": "2312",
               "source_code": "                    RoutineSchema routine =\n                        (RoutineSchema) set.getObject(name.name);\n\n                    object = routine;\n\n                    Routine[] specifics = routine.getSpecificRoutines();\n\n                    for (int i = 0; i < specifics.length; i++) {\n                        removeSchemaObject(specifics[i].getSpecificName());\n                    }\n\n                    break;"
           }

       },

       {
           "id": "clone_130",

           "clone_type": "type-1",

           "origin": {
               "file": "BaseHashMap.java",
               "start_line": "525",
               "end_line": "531",
               "source_code": "                            objectKeyTable[lookup]   = null;\n                            returnValue = objectValueTable[lookup];\n                            objectValueTable[lookup] = null;\n\n                            hashIndex.unlinkNode(index, lastLookup, lookup);\n\n                            multiValueTable[lookup] = false;"
           },

           "clone": {
               "file": "BaseHashMap.java",
               "start_line": "508",
               "end_line": "514",
               "source_code": "                        objectKeyTable[lookup]   = null;\n                        returnValue              = objectValueTable[lookup];\n                        objectValueTable[lookup] = null;\n\n                        hashIndex.unlinkNode(index, lastLookup, lookup);\n\n                        multiValueTable[lookup] = false;"
           }

       },

       {
           "id": "clone_131",

           "clone_type": "type-1",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "6323",
               "end_line": "6327",
               "source_code": "            isr = new InputStreamReader(is);\n            while ((i = isr.read(readBfr)) > -1) sWriter.write(readBfr, 0, i);\n            readBfr = null;\n            str = sWriter.toString();\n            sWriter.close();"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "6284",
               "end_line": "6289",
               "source_code": "            isr = new InputStreamReader(is);\n            while ((i = isr.read(readBfr)) > -1)\n                sWriter.write(readBfr, 0, i);\n            readBfr = null;\n            str = sWriter.toString();\n            sWriter.close();"
           }

       },

       {
           "id": "clone_132",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementDML.java",
               "start_line": "279",
               "end_line": "292",
               "source_code": "        for (int i = 0; i < rangeVariables.length; i++) {\n            Table    rangeTable = rangeVariables[i].rangeTable;\n            HsqlName name       = rangeTable.getName();\n\n            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {\n                continue;\n            }\n\n            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n\n            set.add(name);\n        }"
           },

           "clone": {
               "file": "StatementSet.java",
               "start_line": "329",
               "end_line": "342",
               "source_code": "        for (int i = 0; i < rangeVariables.length; i++) {\n            Table    rangeTable = rangeVariables[i].rangeTable;\n            HsqlName name       = rangeTable.getName();\n\n            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {\n                continue;\n            }\n\n            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n\n            set.add(name);\n        }"
           }

       },

       {
           "id": "clone_133",

           "clone_type": "type-1",

           "origin": {
               "file": "TestHashStructures.java",
               "start_line": "149",
               "end_line": "154",
               "source_code": "            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            depopulateRandomly(uMap, hMap, 20);"
           },

           "clone": {
               "file": "TestHashStructures.java",
               "start_line": "143",
               "end_line": "148",
               "source_code": "            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            depopulateRandomly(uMap, hMap, 20);"
           }

       },

       {
           "id": "clone_134",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "1118",
               "end_line": "1135",
               "source_code": "            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n\n                switch (name.type) {\n\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n\n                        object.compile(session, null);\n                        break;\n                }\n            }"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "1070",
               "end_line": "1087",
               "source_code": "            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n\n                switch (name.type) {\n\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n\n                        object.compile(session, null);\n                        break;\n                }\n            }"
           }

       },

       {
           "id": "clone_135",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLDisk.java",
               "start_line": "86",
               "end_line": "92",
               "source_code": "        this.database     = table.database;\n        this.manager      = manager;\n        this.table        = table;\n        this.indexList    = table.getIndexList();\n        this.accessorList = new CachedObject[indexList.length];\n\n        manager.setStore(table, this);"
           },

           "clone": {
               "file": "RowStoreAVLDiskData.java",
               "start_line": "66",
               "end_line": "72",
               "source_code": "        this.database     = table.database;\n        this.manager      = manager;\n        this.table        = table;\n        this.indexList    = table.getIndexList();\n        this.accessorList = new CachedObject[indexList.length];\n\n        manager.setStore(table, this);"
           }

       },

       {
           "id": "clone_136",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "2150",
               "end_line": "2161",
               "source_code": "            if (readIfThis(Tokens.SET)) {\n                readThis(Tokens.MESSAGE_TEXT);\n                readThis(Tokens.EQUALS);\n\n                message = XreadSimpleValueSpecificationOrNull();\n\n                if (message == null) {\n                    throw unexpectedToken();\n                }\n\n                resolveOuterReferencesAndTypes(routine, context, message);\n            }"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "2119",
               "end_line": "2130",
               "source_code": "        if (readIfThis(Tokens.SET)) {\n            readThis(Tokens.MESSAGE_TEXT);\n            readThis(Tokens.EQUALS);\n\n            message = XreadSimpleValueSpecificationOrNull();\n\n            if (message == null) {\n                throw unexpectedToken();\n            }\n\n            resolveOuterReferencesAndTypes(routine, context, message);\n        }"
           }

       },

       {
           "id": "clone_137",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1079",
               "end_line": "1093",
               "source_code": "                    case Tokens.BOTH :\n                        leading = trailing = true;\n                        break;\n\n                    case Tokens.LEADING :\n                        leading = true;\n                        break;\n\n                    case Tokens.TRAILING :\n                        trailing = true;\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500,\n                                                 \"FunctionSQL\");"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "983",
               "end_line": "997",
               "source_code": "                    case Tokens.BOTH :\n                        leading = trailing = true;\n                        break;\n\n                    case Tokens.LEADING :\n                        leading = true;\n                        break;\n\n                    case Tokens.TRAILING :\n                        trailing = true;\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500,\n                                                 \"FunctionSQL\");"
           }

       },

       {
           "id": "clone_138",

           "clone_type": "type-1",

           "origin": {
               "file": "BitType.java",
               "start_line": "93",
               "end_line": "107",
               "source_code": "    public String getDefinition() {\n\n        if (precision == 0) {\n            return getNameString();\n        }\n\n        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n\n        return sb.toString();\n    }"
           },

           "clone": {
               "file": "BinaryType.java",
               "start_line": "118",
               "end_line": "132",
               "source_code": "    public String getDefinition() {\n\n        if (precision == 0) {\n            return getNameString();\n        }\n\n        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n\n        return sb.toString();\n    }"
           }

       },

       {
           "id": "clone_139",

           "clone_type": "type-1",

           "origin": {
               "file": "RowType.java",
               "start_line": "337",
               "end_line": "352",
               "source_code": "        if (!other.isRowType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n\n        Type[] newTypes   = new Type[dataTypes.length];\n        Type[] otherTypes = ((RowType) other).getTypesArray();\n\n        if (dataTypes.length != otherTypes.length) {\n            throw Error.error(ErrorCode.X_42564);\n        }\n\n        for (int i = 0; i < dataTypes.length; i++) {\n            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);\n        }\n\n        return new RowType(newTypes);"
           },

           "clone": {
               "file": "RowType.java",
               "start_line": "309",
               "end_line": "324",
               "source_code": "        if (!other.isRowType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n\n        Type[] newTypes   = new Type[dataTypes.length];\n        Type[] otherTypes = ((RowType) other).getTypesArray();\n\n        if (dataTypes.length != otherTypes.length) {\n            throw Error.error(ErrorCode.X_42564);\n        }\n\n        for (int i = 0; i < dataTypes.length; i++) {\n            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);\n        }\n\n        return new RowType(newTypes);"
           }

       },

       {
           "id": "clone_140",

           "clone_type": "type-1",

           "origin": {
               "file": "TestHashStructures.java",
               "start_line": "142",
               "end_line": "150",
               "source_code": "            populateBySerialIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            depopulateRandomly(uMap, hMap, 20);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);"
           },

           "clone": {
               "file": "TestHashStructures.java",
               "start_line": "62",
               "end_line": "74",
               "source_code": "            populateBySerialIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n\n            // -\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n\n            //\n            depopulateRandomly(uMap, hMap, 20);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);"
           }

       },

       {
           "id": "clone_141",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "244",
               "end_line": "317",
               "source_code": "        System.getProperties().put(\"sun.java2d.noddraw\", \"true\");\n\n        // (ulrivo): read all arguments from the command line\n        String  currentArg;\n        String  lowerArg;\n        String  urlid        = null;\n        String  rcFile       = null;\n        boolean autoConnect  = false;\n        boolean urlidConnect = false;\n\n        bMustExit = true;\n\n        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg   = arg[i].toLowerCase();\n\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n\n                //\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n\n            i++;\n\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n\n                return;\n            } else {\n                /* Syntax ERRORS should either throw or exit with non-0 status.\n                 * In our case, it may be unsafe to exit, so we throw.\n                 * (I.e. should provide easy way for caller to programmatically\n                 * determine that there was an invocation problem).\n                 */\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n\n                // No reason to localize, since the main syntax message is\n                // not localized.\n            }\n        }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "466",
               "end_line": "539",
               "source_code": "        System.getProperties().put(\"sun.java2d.noddraw\", \"true\");\n\n        // (ulrivo): read all arguments from the command line\n        String  currentArg;\n        String  lowerArg;\n        String  urlid        = null;\n        String  rcFile       = null;\n        boolean autoConnect  = false;\n        boolean urlidConnect = false;\n\n        bMustExit = true;\n\n        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg = arg[i].toLowerCase();\n\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n\n                //\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n\n            i++;\n\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n\n                return;\n            } else {\n                /* Syntax ERRORS should either throw or exit with non-0 status.\n                 * In our case, it may be unsafe to exit, so we throw.\n                 * (I.e. should provide easy way for caller to programmatically\n                 * determine that there was an invocation problem).\n                 */\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n\n                // No reason to localize, since the main syntax message is\n                // not localized.\n            }\n        }"
           }

       },

       {
           "id": "clone_142",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "304",
               "end_line": "310",
               "source_code": "            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.COLUMN :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "273",
               "end_line": "279",
               "source_code": "            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.COLUMN :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :"
           }

       },

       {
           "id": "clone_143",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7510",
               "end_line": "7516",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4899",
               "end_line": "4905",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);     // not null"
           }

       },

       {
           "id": "clone_144",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementDMQL.java",
               "start_line": "679",
               "end_line": "691",
               "source_code": "                appendColumns(sb, updateColumnMap).append('\n');\n                appendTable(sb).append('\n');\n                appendCondition(session, sb);\n\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\n');\n                }\n\n                appendParms(sb).append('\n');\n                appendSubqueries(session, sb, 2).append(']');\n\n                return sb.toString();"
           },

           "clone": {
               "file": "StatementDMQL.java",
               "start_line": "639",
               "end_line": "651",
               "source_code": "                appendColumns(sb, updateColumnMap).append('\n');\n                appendTable(sb).append('\n');\n                appendCondition(session, sb);\n\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\n');\n                }\n\n                appendParms(sb).append('\n');\n                appendSubqueries(session, sb, 2).append(']');\n\n                return sb.toString();"
           }

       },

       {
           "id": "clone_145",

           "clone_type": "type-1",

           "origin": {
               "file": "RangeVariable.java",
               "start_line": "1341",
               "end_line": "1348",
               "source_code": "                                value = null;\n                                break;\n\n                            default :\n                                it = conditions[condIndex].rangeIndex\n                                    .emptyIterator();\n\n                                return;"
           },

           "clone": {
               "file": "RangeVariable.java",
               "start_line": "1328",
               "end_line": "1335",
               "source_code": "                                value = null;\n                                break;\n\n                            default :\n                                it = conditions[condIndex].rangeIndex\n                                    .emptyIterator();\n\n                                return;"
           }

       },

       {
           "id": "clone_146",

           "clone_type": "type-1",

           "origin": {
               "file": "HsqlSocketFactorySecure.java",
               "start_line": "156",
               "end_line": "162",
               "source_code": "        if (Error.TRACESYSTEMOUT) {\n            Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");\n            Error.printSystemOut(\"capabilities for \" + ss + \":\");\n            Error.printSystemOut(\"----------------------------\");\n            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());\n            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());\n        }"
           },

           "clone": {
               "file": "HsqlSocketFactorySecure.java",
               "start_line": "126",
               "end_line": "132",
               "source_code": "        if (Error.TRACESYSTEMOUT) {\n            Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");\n            Error.printSystemOut(\"capabilities for \" + ss + \":\");\n            Error.printSystemOut(\"----------------------------\");\n            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());\n            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());\n        }"
           }

       },

       {
           "id": "clone_147",

           "clone_type": "type-1",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1807",
               "end_line": "1816",
               "source_code": "            case '0' :\n            case '1' :\n            case '2' :\n            case '3' :\n            case '4' :\n            case '5' :\n            case '6' :\n            case '7' :\n            case '8' :\n            case '9' :"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "986",
               "end_line": "995",
               "source_code": "                case '0' :\n                case '1' :\n                case '2' :\n                case '3' :\n                case '4' :\n                case '5' :\n                case '6' :\n                case '7' :\n                case '8' :\n                case '9' :"
           }

       },

       {
           "id": "clone_148",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3740",
               "end_line": "3751",
               "source_code": "                row                             = t.getEmptyRowData();\n                row[object_catalog] = database.getCatalogName().name;\n                row[object_schema]              = routine.getSchemaName().name;\n                row[object_name]                = routine.getName().name;\n                row[object_type]                = \"ROUTINE\";\n                row[collection_type_identifier] = type.getDefinition();\n\n                addTypeInfo(row, ((ArrayType) type).collectionBaseType());\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3709",
               "end_line": "3720",
               "source_code": "                row                             = t.getEmptyRowData();\n                row[object_catalog] = database.getCatalogName().name;\n                row[object_schema]              = routine.getSchemaName().name;\n                row[object_name]                = routine.getName().name;\n                row[object_type]                = \"ROUTINE\";\n                row[collection_type_identifier] = type.getDefinition();\n\n                addTypeInfo(row, ((ArrayType) type).collectionBaseType());\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           }

       },

       {
           "id": "clone_149",

           "clone_type": "type-1",

           "origin": {
               "file": "KMPSearchAlgorithm.java",
               "start_line": "488",
               "end_line": "521",
               "source_code": "    public static int[] computeTable(final char[] pattern) {\n\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern must  not be null.\");\n        } else if (pattern.length < 2) {\n            throw new IllegalArgumentException(\"Pattern length must be > 1.\");\n        }\n\n        int[] table = new int[pattern.length];\n        int   i     = 2;\n        int   j     = 0;\n\n        table[0] = -1;\n        table[1] = 0;\n\n        while (i < pattern.length) {\n            if (pattern[i - 1] == pattern[j]) {\n                table[i] = j + 1;\n\n                j++;\n                i++;\n            } else if (j > 0) {\n                j = table[j];\n            } else {\n                table[i] = 0;\n\n                i++;\n\n                j = 0;\n            }\n        }\n\n        return table;\n    }"
           },

           "clone": {
               "file": "KMPSearchAlgorithm.java",
               "start_line": "449",
               "end_line": "486",
               "source_code": "    public static int[] computeTable(final byte[] pattern) {\n\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern must  not be null.\");\n        } else if (pattern.length < 2) {\n            throw new IllegalArgumentException(\"Pattern length must be > 1.\");\n        }\n\n        //\n        final int[] table = new int[pattern.length];\n        int         i     = 2;\n        int         j     = 0;\n\n        //\n        table[0] = -1;\n        table[1] = 0;\n\n        //\n        while (i < pattern.length) {\n            if (pattern[i - 1] == pattern[j]) {\n                table[i] = j + 1;\n\n                j++;\n                i++;\n            } else if (j > 0) {\n                j = table[j];\n            } else {\n                table[i] = 0;\n\n                i++;\n\n                j = 0;\n            }\n        }\n\n        //\n        return table;\n    }"
           }

       },

       {
           "id": "clone_150",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "312",
               "end_line": "316",
               "source_code": "            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.ASSERTION :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "68",
               "end_line": "72",
               "source_code": "            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.ASSERTION :"
           }

       },

       {
           "id": "clone_151",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "265",
               "end_line": "274",
               "source_code": "                case OpTypes.VALUE :\n                case OpTypes.DYNAMIC_PARAM :\n                case OpTypes.PARAMETER :\n                case OpTypes.VARIABLE :\n                    isSingleColumnCondition = true;\n\n                    if (opType == OpTypes.EQUAL) {\n                        isSingleColumnEqual = true;\n                    }\n                    break;"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "249",
               "end_line": "258",
               "source_code": "                case OpTypes.VALUE :\n                case OpTypes.DYNAMIC_PARAM :\n                case OpTypes.PARAMETER :\n                case OpTypes.VARIABLE :\n                    isSingleColumnCondition = true;\n\n                    if (opType == OpTypes.EQUAL) {\n                        isSingleColumnEqual = true;\n                    }\n                    break;"
           }

       },

       {
           "id": "clone_152",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "557",
               "end_line": "578",
               "source_code": "            Statement Stmt = Conn.createStatement();\n            String    Query;\n\n            Query = \"DELETE FROM history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "520",
               "end_line": "541",
               "source_code": "            Statement Stmt = Conn.createStatement();\n            String    Query;\n\n            Query = \"DELETE FROM history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           }

       },

       {
           "id": "clone_153",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "4714",
               "end_line": "4724",
               "source_code": "                switch (token.tokenType) {\n\n                    case Tokens.ROUTINE :\n                    case Tokens.PROCEDURE :\n                    case Tokens.FUNCTION :\n                        read();\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "386",
               "end_line": "396",
               "source_code": "                switch (token.tokenType) {\n\n                    case Tokens.ROUTINE :\n                    case Tokens.PROCEDURE :\n                    case Tokens.FUNCTION :\n                        read();\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }"
           }

       },

       {
           "id": "clone_154",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberSequence.java",
               "start_line": "236",
               "end_line": "260",
               "source_code": "            //\n            sb.append(Tokens.T_START).append(' ');\n            sb.append(Tokens.T_WITH).append(' ');\n            sb.append(startValue);\n\n            if (getIncrement() != 1) {\n                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n                sb.append(Tokens.T_BY).append(' ');\n                sb.append(getIncrement());\n            }\n\n            if (!hasDefaultMinMax()) {\n                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n                sb.append(getMinValue());\n                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n                sb.append(getMaxValue());\n            }\n\n            if (isCycle()) {\n                sb.append(' ').append(Tokens.T_CYCLE);\n            }\n\n            if (name == null) {\n                sb.append(Tokens.T_CLOSEBRACKET);\n            }"
           },

           "clone": {
               "file": "NumberSequence.java",
               "start_line": "191",
               "end_line": "215",
               "source_code": "        //\n        sb.append(Tokens.T_START).append(' ');\n        sb.append(Tokens.T_WITH).append(' ');\n        sb.append(startValue);\n\n        if (getIncrement() != 1) {\n            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n            sb.append(Tokens.T_BY).append(' ');\n            sb.append(getIncrement());\n        }\n\n        if (!hasDefaultMinMax()) {\n            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n            sb.append(getMinValue());\n            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n            sb.append(getMaxValue());\n        }\n\n        if (isCycle()) {\n            sb.append(' ').append(Tokens.T_CYCLE);\n        }\n\n        if (name == null) {\n            sb.append(Tokens.T_CLOSEBRACKET);\n        }"
           }

       },

       {
           "id": "clone_155",

           "clone_type": "type-1",

           "origin": {
               "file": "Grid.java",
               "start_line": "143",
               "end_line": "151",
               "source_code": "        setLayout(null);\n\n        sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL);\n\n        add(sbHoriz);\n\n        sbVert = new Scrollbar(Scrollbar.VERTICAL);\n\n        add(sbVert);"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "138",
               "end_line": "146",
               "source_code": "        setLayout(null);\n\n        sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL);\n\n        add(sbHoriz);\n\n        sbVert = new Scrollbar(Scrollbar.VERTICAL);\n\n        add(sbVert);"
           }

       },

       {
           "id": "clone_156",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3426",
               "end_line": "3431",
               "source_code": "                        row                 = t.getEmptyRowData();\n                        row[grantor] = right.getGrantor().getName().name;\n                        row[grantee] = right.getGrantee().getName().name;\n                        row[table_catalog]  = tableCatalog;\n                        row[table_schema]   = tableSchema;\n                        row[table_name]     = tableName;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3007",
               "end_line": "3012",
               "source_code": "                            row                 = t.getEmptyRowData();\n                            row[grantor] = right.getGrantor().getName().name;\n                            row[grantee] = right.getGrantee().getName().name;\n                            row[table_catalog]  = tableCatalog;\n                            row[table_schema]   = tableSchema;\n                            row[table_name]     = tableName;"
           }

       },

       {
           "id": "clone_157",

           "clone_type": "type-1",

           "origin": {
               "file": "Expression.java",
               "start_line": "677",
               "end_line": "688",
               "source_code": "            case OpTypes.COUNT :\n            case OpTypes.SUM :\n            case OpTypes.MIN :\n            case OpTypes.MAX :\n            case OpTypes.AVG :\n            case OpTypes.EVERY :\n            case OpTypes.SOME :\n            case OpTypes.STDDEV_POP :\n            case OpTypes.STDDEV_SAMP :\n            case OpTypes.VAR_POP :\n            case OpTypes.VAR_SAMP :\n                return false;"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "589",
               "end_line": "601",
               "source_code": "            //\n            case OpTypes.COUNT :\n            case OpTypes.SUM :\n            case OpTypes.MIN :\n            case OpTypes.MAX :\n            case OpTypes.AVG :\n            case OpTypes.EVERY :\n            case OpTypes.SOME :\n            case OpTypes.STDDEV_POP :\n            case OpTypes.STDDEV_SAMP :\n            case OpTypes.VAR_POP :\n            case OpTypes.VAR_SAMP :\n                return false;"
           }

       },

       {
           "id": "clone_158",

           "clone_type": "type-1",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "269",
               "end_line": "276",
               "source_code": "        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n        }"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "233",
               "end_line": "240",
               "source_code": "        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n        }"
           }

       },

       {
           "id": "clone_159",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCConnection.java",
               "start_line": "883",
               "end_line": "891",
               "source_code": "                        sb.append(sql.substring(tail, i));\n\n                        i       = onStartEscapeSequence(sql, sb, i);\n                        tail    = i;\n                        changed = true;\n\n                        nest++;\n\n                        state = inside_escape;"
           },

           "clone": {
               "file": "JDBCConnection.java",
               "start_line": "838",
               "end_line": "846",
               "source_code": "                        sb.append(sql.substring(tail, i));\n\n                        i       = onStartEscapeSequence(sql, sb, i);\n                        tail    = i;\n                        changed = true;\n\n                        nest++;\n\n                        state = inside_escape;"
           }

       },

       {
           "id": "clone_160",

           "clone_type": "type-1",

           "origin": {
               "file": "TransferSQLText.java",
               "start_line": "443",
               "end_line": "454",
               "source_code": "        if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n\n        String        currentLine  = \"\";\n        String        Token        = \"\";\n        String        name         = \"\";\n        TransferTable relatedTable = null;"
           },

           "clone": {
               "file": "TransferSQLText.java",
               "start_line": "376",
               "end_line": "387",
               "source_code": "        if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n\n        String        currentLine  = \"\";\n        String        Token        = \"\";\n        String        name         = \"\";\n        TransferTable relatedTable = null;"
           }

       },

       {
           "id": "clone_161",

           "clone_type": "type-1",

           "origin": {
               "file": "TestNullInUnion.java",
               "start_line": "51",
               "end_line": "82",
               "source_code": "        st.execute(\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\n        st.execute(\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");\n\n        ResultSet rs = st.executeQuery(\n            \"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(\"\n            + \"(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union\"\n            + \"(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue\");\n\n        assertTrue(rs.next());\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\n        assertEquals(1, rs.getInt(\"idvalue\"));\n        assertEquals(1, rs.getInt(\"value1\"));\n        assertEquals(1, rs.getInt(\"value2\"));\n        assertEquals(null, rs.getObject(\"value3\"));\n        assertTrue(rs.next());\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\n        assertEquals(2, rs.getInt(\"idvalue\"));\n        assertEquals(2, rs.getInt(\"value1\"));\n        assertEquals(2, rs.getInt(\"value2\"));\n        assertEquals(null, rs.getObject(\"value3\"));\n        assertTrue(rs.next());\n        assertEquals(\"t2\", rs.getObject(\"atable\"));\n        assertEquals(1, rs.getInt(\"idvalue\"));\n        assertEquals(3, rs.getInt(\"value1\"));\n        assertEquals(null, rs.getObject(\"value2\"));\n        assertEquals(3, rs.getInt(\"value3\"));    //this fails!\n        assertFalse(rs.next());"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "696",
               "end_line": "727",
               "source_code": "        st.execute(\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\n        st.execute(\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");\n\n        ResultSet rs = st.executeQuery(\n            \"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(\"\n            + \"(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union\"\n            + \"(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue\");\n\n        assertTrue(rs.next());\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\n        assertEquals(1, rs.getInt(\"idvalue\"));\n        assertEquals(1, rs.getInt(\"value1\"));\n        assertEquals(1, rs.getInt(\"value2\"));\n        assertEquals(null, rs.getObject(\"value3\"));\n        assertTrue(rs.next());\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\n        assertEquals(2, rs.getInt(\"idvalue\"));\n        assertEquals(2, rs.getInt(\"value1\"));\n        assertEquals(2, rs.getInt(\"value2\"));\n        assertEquals(null, rs.getObject(\"value3\"));\n        assertTrue(rs.next());\n        assertEquals(\"t2\", rs.getObject(\"atable\"));\n        assertEquals(1, rs.getInt(\"idvalue\"));\n        assertEquals(3, rs.getInt(\"value1\"));\n        assertEquals(null, rs.getObject(\"value2\"));\n        assertEquals(3, rs.getInt(\"value3\"));    //this fails!\n        assertFalse(rs.next());"
           }

       },

       {
           "id": "clone_162",

           "clone_type": "type-1",

           "origin": {
               "file": "TransactionManagerMV2PL.java",
               "start_line": "177",
               "end_line": "183",
               "source_code": "            session.abortTransaction        = false;\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n\n            rollbackPartial(session, 0, session.transactionTimestamp);\n            endTransaction(session);\n            endTransactionTPL(session);"
           },

           "clone": {
               "file": "TransactionManagerMVCC.java",
               "start_line": "235",
               "end_line": "241",
               "source_code": "            session.abortTransaction        = false;\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n\n            rollbackPartial(session, 0, session.transactionTimestamp);\n            endTransaction(session);\n            endTransactionTPL(session);"
           }

       },

       {
           "id": "clone_163",

           "clone_type": "type-1",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "711",
               "end_line": "722",
               "source_code": "                        outPacket.writeShort(4);              // Datatype size  [adtsize]\n                        outPacket.writeInt(-1);               // Var size [atttypmod]\n                        outPacket.writeShort(0);              // text \"format code\"\n                        outPacket.xmit('T', dataOutput);      // sending a Tuple (row)\n\n                        // This query returns no rows.  typenam \"lo\"??\n                        outPacket.write(\"SELECT\");\n                        outPacket.xmit('C', dataOutput);\n\n                        sendReadyForQuery = true;\n\n                        break;"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "675",
               "end_line": "686",
               "source_code": "                        outPacket.writeShort(4);\n                        outPacket.writeInt(-1);\n                        outPacket.writeShort(0);\n                        outPacket.xmit('T', dataOutput);      // Xmit Row Definition\n\n                        // This query returns no rows.  typenam \"lo\"??\n                        outPacket.write(\"SELECT\");\n                        outPacket.xmit('C', dataOutput);\n\n                        sendReadyForQuery = true;\n\n                        break;"
           }

       },

       {
           "id": "clone_164",

           "clone_type": "type-1",

           "origin": {
               "file": "TestSql.java",
               "start_line": "370",
               "end_line": "464",
               "source_code": "            stmnt.execute(ddl1);\n\n            PreparedStatement ps = connection.prepareStatement(\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\n\n            ps.setString(1, \"0.2\");\n            ps.setDouble(2, 0.2);\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\n            ps.setInt(4, Integer.MAX_VALUE);\n            ps.setInt(5, Short.MAX_VALUE);\n            ps.setInt(6, 0);\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\n            ps.setTimestamp(\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.NaN);\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setInt(5, Short.MIN_VALUE);\n            ps.setInt(6, 0);\n\n            // allowed conversions\n            ps.setTimestamp(\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\n            ps.execute();\n\n            //\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\n            ps.setInt(4, Integer.MIN_VALUE);\n\n            // test conversion\n            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int\n            // ps.setBoolean(5, true);\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\n            ps.setObject(6, new Integer(2), Types.TINYINT);\n\n            // allowed conversions\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\n                                                   + 2));\n            ps.execute();\n            ps.setObject(1, new Float(0), Types.INTEGER);\n            ps.setObject(4, new Float(1), Types.INTEGER);\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\n            ps.execute();\n\n            ResultSet rs =\n                stmnt.executeQuery(\"SELECT d, f, l, i, s*2, t FROM t1\");\n            boolean result = rs.next();\n\n            value = rs.getDouble(2);\n\n//            int smallintValue = rs.getShort(3);\n            int integerValue = rs.getInt(4);\n\n            if (rs.next()) {\n                value        = rs.getDouble(2);\n                wasEqual     = Double.isNaN(value);\n                integerValue = rs.getInt(4);\n\n                // tests for conversion\n                // getInt on DECIMAL\n                integerValue = rs.getInt(1);\n            }\n\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\n            }\n\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\n            }\n\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\n\n            if (rs.next()) {\n                int max = rs.getInt(1);\n\n                System.out.println(\"Max value for i: \" + max);\n            }\n\n            try {\n\n                // cause errors\n                ps.setString(5, \"three\");\n                fail(\"update did not fail\");\n            } catch (SQLException e) {}"
           },

           "clone": {
               "file": "TestSqlPersistent.java",
               "start_line": "445",
               "end_line": "539",
               "source_code": "            stmnt.execute(ddl1);\n\n            PreparedStatement ps = connection.prepareStatement(\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\n\n            ps.setString(1, \"0.2\");\n            ps.setDouble(2, 0.2);\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\n            ps.setInt(4, Integer.MAX_VALUE);\n            ps.setInt(5, Short.MAX_VALUE);\n            ps.setInt(6, 0);\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\n            ps.setTimestamp(\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.NaN);\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setInt(5, Short.MIN_VALUE);\n            ps.setInt(6, 0);\n\n            // allowed conversions\n            ps.setTimestamp(\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\n            ps.execute();\n\n            //\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\n            ps.setInt(4, Integer.MIN_VALUE);\n\n            // test conversion\n            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int\n            // ps.setBoolean(5, true);\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\n            ps.setObject(6, new Integer(2), Types.TINYINT);\n\n            // allowed conversions\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\n                                                   + 2));\n            ps.execute();\n            ps.setObject(1, new Float(0), Types.INTEGER);\n            ps.setObject(4, new Float(1), Types.INTEGER);\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\n            ps.execute();\n\n            ResultSet rs =\n                stmnt.executeQuery(\"SELECT d, f, l, i, s*2, t FROM t1\");\n            boolean result = rs.next();\n\n            value = rs.getDouble(2);\n\n//            int smallintValue = rs.getShort(3);\n            int integerValue = rs.getInt(4);\n\n            if (rs.next()) {\n                value        = rs.getDouble(2);\n                wasEqual     = Double.isNaN(value);\n                integerValue = rs.getInt(4);\n\n                // tests for conversion\n                // getInt on DECIMAL\n                integerValue = rs.getInt(1);\n            }\n\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\n            }\n\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\n            }\n\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\n\n            if (rs.next()) {\n                int max = rs.getInt(1);\n\n                System.out.println(\"Max value for i: \" + max);\n            }\n\n            try {\n\n                // cause errors\n                ps.setString(5, \"three\");\n                fail(\"update did not fail\");\n            } catch (SQLException e) {}"
           }

       },

       {
           "id": "clone_165",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "431",
               "end_line": "449",
               "source_code": "            Query = \"DROP TABLE history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "417",
               "end_line": "435",
               "source_code": "            Query = \"DROP TABLE history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           }

       },

       {
           "id": "clone_166",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCStatement.java",
               "start_line": "1097",
               "end_line": "1118",
               "source_code": "        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n\n        return updateCounts;"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "1924",
               "end_line": "1945",
               "source_code": "        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n\n        return updateCounts;"
           }

       },

       {
           "id": "clone_167",

           "clone_type": "type-1",

           "origin": {
               "file": "BlobDataID.java",
               "start_line": "131",
               "end_line": "147",
               "source_code": "    public long length(SessionInterface session) {\n\n        if (length > -1) {\n            return length;\n        }\n\n        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);\n        Result    resultIn  = session.execute(resultOut);\n\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n\n        length = ((ResultLob) resultIn).getBlockLength();\n\n        return length;\n    }"
           },

           "clone": {
               "file": "ClobDataID.java",
               "start_line": "72",
               "end_line": "88",
               "source_code": "    public long length(SessionInterface session) {\n\n        if (length > -1) {\n            return length;\n        }\n\n        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);\n        Result    resultIn  = session.execute(resultOut);\n\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n\n        length = ((ResultLob) resultIn).getBlockLength();\n\n        return length;\n    }"
           }

       },

       {
           "id": "clone_168",

           "clone_type": "type-1",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "267",
               "end_line": "277",
               "source_code": "  private static int zzUnpackAttribute(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "118",
               "end_line": "128",
               "source_code": "  private static int zzUnpackAction(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"
           }

       },

       {
           "id": "clone_169",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8311",
               "end_line": "8317",
               "source_code": "        // Column number mappings\n        final int view_catalog  = 0;\n        final int view_schema   = 1;\n        final int view_name     = 2;\n        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8072",
               "end_line": "8078",
               "source_code": "        // Column number mappings\n        final int view_catalog  = 0;\n        final int view_schema   = 1;\n        final int view_name     = 2;\n        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;"
           }

       },

       {
           "id": "clone_170",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "2001",
               "end_line": "2010",
               "source_code": "        statements = new Statement[list.size()];\n\n        list.toArray(statements);\n\n        StatementCompound result = new StatementCompound(StatementTypes.IF,\n            null);\n\n        result.setStatements(statements);\n\n        return result;"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1954",
               "end_line": "1963",
               "source_code": "        statements = new Statement[list.size()];\n\n        list.toArray(statements);\n\n        StatementCompound result = new StatementCompound(StatementTypes.IF,\n            null);\n\n        result.setStatements(statements);\n\n        return result;"
           }

       },

       {
           "id": "clone_171",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1675",
               "end_line": "1681",
               "source_code": "        // intermediate holders\n        int           columnCount;\n        Iterator      routines;\n        RoutineSchema routineSchema;\n        Routine       routine;\n        Object[]      row;\n        Type          type;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4338",
               "end_line": "4344",
               "source_code": "        // intermediate holders\n        int           columnCount;\n        Iterator      routines;\n        RoutineSchema routineSchema;\n        Routine       routine;\n        Object[]      row;\n        Type          type;"
           }

       },

       {
           "id": "clone_172",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "856",
               "end_line": "872",
               "source_code": "            if (r == -1) {\n                ResultSet rs = sStatement.getResultSet();\n\n                try {\n                    formatResultSet(rs);\n                } catch (Throwable t) {\n                    g[0] = \"Error displaying the ResultSet\";\n\n                    gResult.setHead(g);\n\n                    String s = t.getMessage();\n\n                    g[0] = s;\n\n                    gResult.addRow(g);\n                }\n            }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1636",
               "end_line": "1652",
               "source_code": "            if (r == -1) {\n                ResultSet rs = sStatement.getResultSet();\n\n                try {\n                    formatResultSet(rs);\n                } catch (Throwable t) {\n                    g[0] = \"Error displaying the ResultSet\";\n\n                    gResult.setHead(g);\n\n                    String s = t.getMessage();\n\n                    g[0] = s;\n\n                    gResult.addRow(g);\n                }\n            }"
           }

       },

       {
           "id": "clone_173",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3587",
               "end_line": "3597",
               "source_code": "        //\n        // intermediate holders\n        int            columnCount;\n        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        OrderedHashSet columnList;\n        Type           type;\n\n        // Initialization\n        tables = allTables();"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2644",
               "end_line": "2654",
               "source_code": "        //\n        // intermediate holders\n        int            columnCount;\n        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        OrderedHashSet columnList;\n        Type           type;\n\n        // Initialization\n        tables = allTables();"
           }

       },

       {
           "id": "clone_174",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCConnection.java",
               "start_line": "2213",
               "end_line": "2243",
               "source_code": "        checkClosed();\n\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n        }"
           },

           "clone": {
               "file": "JDBCConnection.java",
               "start_line": "2124",
               "end_line": "2154",
               "source_code": "        checkClosed();\n\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n        }"
           }

       },

       {
           "id": "clone_175",

           "clone_type": "type-1",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "529",
               "end_line": "541",
               "source_code": "        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        long id = Long.parseLong(s);"
           },

           "clone": {
               "file": "RowInputText.java",
               "start_line": "510",
               "end_line": "522",
               "source_code": "        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        long id = Long.parseLong(s);"
           }

       },

       {
           "id": "clone_176",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBench.java",
               "start_line": "944",
               "end_line": "963",
               "source_code": "                                     int transactionMode) {\n\n            System.out.println(number_of_txns);\n\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n\n            if (Conn == null) {\n                return;\n            }\n\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n            }\n        }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "773",
               "end_line": "792",
               "source_code": "                            String password, int transactionMode) {\n\n            System.out.println(number_of_txns);\n\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n\n            if (Conn == null) {\n                return;\n            }\n\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n            }\n        }"
           }

       },

       {
           "id": "clone_177",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBatchExecution.java",
               "start_line": "200",
               "end_line": "208",
               "source_code": "        preparedTestOne(runs);\n\n        // drop the test table\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "176",
               "end_line": "184",
               "source_code": "        preparedTestOne(runs);\n\n        // drop the test table and shut down database\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");"
           }

       },

       {
           "id": "clone_178",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "614",
               "end_line": "620",
               "source_code": "            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n\n            ps = connection.prepareStatement(dml1);\n\n            sw.zero();\n            sw.start();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "541",
               "end_line": "547",
               "source_code": "            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n\n            ps = connection.prepareStatement(dml1);\n\n            sw.zero();\n            sw.start();"
           }

       },

       {
           "id": "clone_179",

           "clone_type": "type-1",

           "origin": {
               "file": "IndexAVL.java",
               "start_line": "811",
               "end_line": "833",
               "source_code": "        for (int j = start; j < colIndex.length; j++) {\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[colIndex[j]]);\n\n            if (i != 0) {\n                if (isSimpleOrder) {\n                    return i;\n                }\n\n                boolean nulls = a[colIndex[j]] == null\n                                || b[colIndex[j]] == null;\n\n                if (colDesc[j] && !nulls) {\n                    i = -i;\n                }\n\n                if (nullsLast[j] && nulls) {\n                    i = -i;\n                }\n\n                return i;\n            }\n        }"
           },

           "clone": {
               "file": "IndexAVL.java",
               "start_line": "766",
               "end_line": "788",
               "source_code": "        for (int j = 0; j < colIndex.length; j++) {\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[colIndex[j]]);\n\n            if (i != 0) {\n                if (isSimpleOrder) {\n                    return i;\n                }\n\n                boolean nulls = a[colIndex[j]] == null\n                                || b[colIndex[j]] == null;\n\n                if (colDesc[j] && !nulls) {\n                    i = -i;\n                }\n\n                if (nullsLast[j] && nulls) {\n                    i = -i;\n                }\n\n                return i;\n            }\n        }"
           }

       },

       {
           "id": "clone_180",

           "clone_type": "type-1",

           "origin": {
               "file": "TestDateTime.java",
               "start_line": "272",
               "end_line": "287",
               "source_code": "        iUpdateCount = insertStatement.executeUpdate();\n\n        insertStatement.close();\n        Assert.assertEquals(\n            \"Exactly one record with time data shoud have been inserted.\",\n            iUpdateCount, 1);\n\n        // Now select it back to be sure it is there\n        PreparedStatement selectStatement = null;\n        PreparedStatement deleteStatement = null;\n        ResultSet         results         = null;\n        java.sql.Time     retrievedTime;\n        int               iDeletedCount = 0;\n        java.sql.Time     selectTime;\n\n        selectStatement = connection.prepareStatement(SELECT_TIME);"
           },

           "clone": {
               "file": "TestDateTime.java",
               "start_line": "177",
               "end_line": "192",
               "source_code": "        iUpdateCount = insertStatement.executeUpdate();\n\n        insertStatement.close();\n        Assert.assertEquals(\n            \"Exactly one record with time data shoud have been inserted.\",\n            iUpdateCount, 1);\n\n        // Now select it back to be sure it is there\n        PreparedStatement selectStatement = null;\n        PreparedStatement deleteStatement = null;\n        ResultSet         results         = null;\n        java.sql.Time     retrievedTime;\n        int               iDeletedCount = 0;\n        java.sql.Time     selectTime;\n\n        selectStatement = connection.prepareStatement(SELECT_TIME);"
           }

       },

       {
           "id": "clone_181",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5696",
               "end_line": "5707",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;\n                row[specific_name]    = routine.getSpecificName().name;\n                row[routine_catalog]  = database.getCatalogName().name;\n                row[routine_schema]   = routine.getSchemaName().name;\n                row[routine_name]     = routine.getName().name;\n                row[table_catalog]    = database.getCatalogName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5108",
               "end_line": "5121",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row = t.getEmptyRowData();\n\n                //\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;\n                row[specific_name]    = routine.getSpecificName().name;\n                row[routine_catalog]  = database.getCatalogName().name;\n                row[routine_schema]   = routine.getSchemaName().name;\n                row[routine_name]     = routine.getName().name;\n                row[table_catalog]    = database.getCatalogName().name;"
           }

       },

       {
           "id": "clone_182",

           "clone_type": "type-1",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "255",
               "end_line": "266",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "390",
               "end_line": "401",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           }

       },

       {
           "id": "clone_183",

           "clone_type": "type-1",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "66",
               "end_line": "71",
               "source_code": "        TestUtil.deleteDatabase(\"/hsql/testtext/test\");\n        TestUtil.delete(\"/hsql/testtext/t.txt\");\n        TestUtil.delete(\"/hsql/testtext/tt.txt\");\n        TestUtil.delete(\"/hsql/testtext/tident.txt\");\n        TestUtil.delete(\"/hsql/testtext/tsingle.txt\");\n        initDatabase();"
           },

           "clone": {
               "file": "TestTextTables.java",
               "start_line": "54",
               "end_line": "59",
               "source_code": "        TestUtil.deleteDatabase(\"/hsql/testtext/test\");\n        TestUtil.delete(\"/hsql/testtext/t.txt\");\n        TestUtil.delete(\"/hsql/testtext/tt.txt\");\n        TestUtil.delete(\"/hsql/testtext/tident.txt\");\n        TestUtil.delete(\"/hsql/testtext/tsingle.txt\");\n        initDatabase();"
           }

       },

       {
           "id": "clone_184",

           "clone_type": "type-1",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "200",
               "end_line": "205",
               "source_code": "        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "544",
               "end_line": "549",
               "source_code": "        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();"
           }

       },

       {
           "id": "clone_185",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3248",
               "end_line": "3311",
               "source_code": "        //\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n\n        //\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }\n\n        return t;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3143",
               "end_line": "3206",
               "source_code": "        //\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n\n        //\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }\n\n        return t;"
           }

       },

       {
           "id": "clone_186",

           "clone_type": "type-1",

           "origin": {
               "file": "BaseHashMap.java",
               "start_line": "469",
               "end_line": "486",
               "source_code": "        int hash = (int) longKey;\n\n        if (isObjectKey) {\n            if (objectKey == null) {\n                return null;\n            }\n\n            if (comparator == null) {\n                hash = objectKey.hashCode();\n            } else {\n                hash = comparator.hashCode(objectKey);\n            }\n        }\n\n        int     index       = hashIndex.getHashIndex(hash);\n        int     lookup      = hashIndex.hashTable[index];\n        int     lastLookup  = -1;\n        Object  returnValue = null;"
           },

           "clone": {
               "file": "BaseHashMap.java",
               "start_line": "310",
               "end_line": "327",
               "source_code": "        int hash = (int) longKey;\n\n        if (isObjectKey) {\n            if (objectKey == null) {\n                return null;\n            }\n\n            if (comparator == null) {\n                hash = objectKey.hashCode();\n            } else {\n                hash = comparator.hashCode(objectKey);\n            }\n        }\n\n        int    index       = hashIndex.getHashIndex(hash);\n        int    lookup      = hashIndex.hashTable[index];\n        int    lastLookup  = -1;\n        Object returnValue = null;"
           }

       },

       {
           "id": "clone_187",

           "clone_type": "type-1",

           "origin": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "124",
               "end_line": "143",
               "source_code": "            statement.execute(\"drop table t1 if exists\");\n            statement.execute(\n                \"create table t1 (i int primary key, c varchar(10), t varbinary(3))\");\n\n            String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n\n            connection.setAutoCommit(false);\n\n            ResultSet rs = statement.executeQuery(select);"
           },

           "clone": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "67",
               "end_line": "86",
               "source_code": "            statement.execute(\"drop table t1 if exists\");\n            statement.execute(\n                \"create table t1 (i int primary key, c varchar(10), t varbinary(3))\");\n\n            String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n\n            connection.setAutoCommit(false);\n\n            ResultSet rs = statement.executeQuery(select);"
           }

       },

       {
           "id": "clone_188",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "234",
               "end_line": "259",
               "source_code": "    public Result execute(Session session) {\n\n        Result result;\n\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n\n            return result;\n        }\n\n        try {\n            if (isLogged) {\n                session.database.logger.writeOtherStatement(session, sql);\n            }\n        } catch (Throwable e) {\n            return Result.newErrorResult(e, sql);\n        }\n\n        return result;\n    }"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "212",
               "end_line": "237",
               "source_code": "    public Result execute(Session session) {\n\n        Result result;\n\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n\n            return result;\n        }\n\n        try {\n            if (isLogged) {\n                session.database.logger.writeOtherStatement(session, sql);\n            }\n        } catch (Throwable e) {\n            return Result.newErrorResult(e, sql);\n        }\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_189",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5764",
               "end_line": "5768",
               "source_code": "            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4280",
               "end_line": "4284",
               "source_code": "            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_190",

           "clone_type": "type-1",

           "origin": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "223",
               "end_line": "236",
               "source_code": "            String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n\n            connection.setAutoCommit(false);"
           },

           "clone": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "128",
               "end_line": "141",
               "source_code": "            String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n\n            connection.setAutoCommit(false);"
           }

       },

       {
           "id": "clone_191",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "919",
               "end_line": "939",
               "source_code": "                try {\n                    if (pstmt1 != null) {\n                        pstmt1.close();\n                    }\n\n                    if (pstmt2 != null) {\n                        pstmt2.close();\n                    }\n\n                    if (pstmt3 != null) {\n                        pstmt3.close();\n                    }\n\n                    if (pstmt4 != null) {\n                        pstmt4.close();\n                    }\n\n                    if (pstmt5 != null) {\n                        pstmt5.close();\n                    }\n                }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "843",
               "end_line": "863",
               "source_code": "            try {\n                if (pstmt1 != null) {\n                    pstmt1.close();\n                }\n\n                if (pstmt2 != null) {\n                    pstmt2.close();\n                }\n\n                if (pstmt3 != null) {\n                    pstmt3.close();\n                }\n\n                if (pstmt4 != null) {\n                    pstmt4.close();\n                }\n\n                if (pstmt5 != null) {\n                    pstmt5.close();\n                }\n            }"
           }

       },

       {
           "id": "clone_192",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLDisk.java",
               "start_line": "323",
               "end_line": "337",
               "source_code": "    public CachedObject getAccessor(Index key) {\n\n        NodeAVL node = (NodeAVL) accessorList[key.getPosition()];\n\n        if (node == null) {\n            return null;\n        }\n\n        RowAVL row = (RowAVL) get(node.getRow(this), false);\n\n        node                            = row.getNode(key.getPosition());\n        accessorList[key.getPosition()] = node;\n\n        return node;\n    }"
           },

           "clone": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "338",
               "end_line": "352",
               "source_code": "    public CachedObject getAccessor(Index key) {\n\n        NodeAVL node = (NodeAVL) accessorList[key.getPosition()];\n\n        if (node == null) {\n            return null;\n        }\n\n        RowAVL row = (RowAVL) get(node.getRow(this), false);\n\n        node                            = row.getNode(key.getPosition());\n        accessorList[key.getPosition()] = node;\n\n        return node;\n    }"
           }

       },

       {
           "id": "clone_193",

           "clone_type": "type-1",

           "origin": {
               "file": "BitType.java",
               "start_line": "451",
               "end_line": "470",
               "source_code": "        if (end < offset) {\n            throw Error.error(ErrorCode.X_22011);\n        }\n\n        if (offset > end || end < 0) {\n\n            // return zero length data\n            offset = 0;\n            end    = 0;\n        }\n\n        if (offset < 0) {\n            offset = 0;\n        }\n\n        if (end > dataLength) {\n            end = dataLength;\n        }\n\n        length = end - offset;"
           },

           "clone": {
               "file": "CharacterType.java",
               "start_line": "814",
               "end_line": "833",
               "source_code": "        if (end < offset) {\n            throw Error.error(ErrorCode.X_22011);\n        }\n\n        if (offset > end || end < 0) {\n\n            // return zero length data\n            offset = 0;\n            end    = 0;\n        }\n\n        if (offset < 0) {\n            offset = 0;\n        }\n\n        if (end > dataLength) {\n            end = dataLength;\n        }\n\n        length = end - offset;"
           }

       },

       {
           "id": "clone_194",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "2086",
               "end_line": "2097",
               "source_code": "                if (data[0] == null || data[1] == null) {\n                    return null;\n                }\n\n                Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,\n                                                  true);\n\n                st = Type.SQL_VARCHAR.upper(session, st);\n                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);\n\n                int token    = Tokens.get((String) st);\n                int typeCode = IntervalType.getFieldNameTypeForToken(token);"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2056",
               "end_line": "2067",
               "source_code": "                if (data[0] == null || data[1] == null) {\n                    return null;\n                }\n\n                Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,\n                                                  true);\n\n                st = Type.SQL_VARCHAR.upper(session, st);\n                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);\n\n                int token    = Tokens.get((String) st);\n                int typeCode = IntervalType.getFieldNameTypeForToken(token);"
           }

       },

       {
           "id": "clone_195",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "634",
               "end_line": "647",
               "source_code": "        //\n        int  bufferLength  = session.getStreamBlockSize();\n        long currentOffset = blockOffset;\n\n        dataOut.writeByte(mode);\n        dataOut.writeInt(databaseID);\n        dataOut.writeLong(sessionID);\n        dataOut.writeLong(lobID);\n        dataOut.writeInt(subType);\n\n        HsqlByteArrayOutputStream byteArrayOS =\n            new HsqlByteArrayOutputStream(bufferLength);\n\n        byteArrayOS.reset();"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "578",
               "end_line": "591",
               "source_code": "        //\n        int  bufferLength  = session.getStreamBlockSize();\n        long currentOffset = blockOffset;\n\n        dataOut.writeByte(mode);\n        dataOut.writeInt(databaseID);\n        dataOut.writeLong(sessionID);\n        dataOut.writeLong(lobID);\n        dataOut.writeInt(subType);\n\n        HsqlByteArrayOutputStream byteArrayOS =\n            new HsqlByteArrayOutputStream(bufferLength);\n\n        byteArrayOS.reset();"
           }

       },

       {
           "id": "clone_196",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3482",
               "end_line": "3488",
               "source_code": "        // intermediate holders\n        Iterator  tables;\n        Table     table;\n        Object[]  row;\n        final int table_catalog                = 0;\n        final int table_schema                 = 1;\n        final int table_name                   = 2;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8425",
               "end_line": "8430",
               "source_code": "        Iterator  tables;\n        Table     table;\n        Object[]  row;\n        final int table_catalog              = 0;\n        final int table_schema               = 1;\n        final int table_name                 = 2;"
           }

       },

       {
           "id": "clone_197",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3366",
               "end_line": "3390",
               "source_code": "    Expression XreadIntervalValueExpression() {\n\n        Expression e = XreadDateTimeIntervalTerm();\n\n        while (true) {\n            int type;\n\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n\n            read();\n\n            Expression a = e;\n\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n\n        return e;\n    }"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3340",
               "end_line": "3364",
               "source_code": "    Expression XreadDatetimeValueExpression() {\n\n        Expression e = XreadDateTimeIntervalTerm();\n\n        while (true) {\n            int type;\n\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n\n            read();\n\n            Expression a = e;\n\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n\n        return e;\n    }"
           }

       },

       {
           "id": "clone_198",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "178",
               "end_line": "183",
               "source_code": "        result.lobID       = id;\n        result.blockOffset = offset;\n        result.byteBlock   = block;\n        result.blockLength = block.length;\n\n        return result;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "139",
               "end_line": "144",
               "source_code": "        result.lobID       = id;\n        result.blockOffset = offset;\n        result.byteBlock   = block;\n        result.blockLength = block.length;\n\n        return result;"
           }

       },

       {
           "id": "clone_199",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3601",
               "end_line": "3606",
               "source_code": "            case FUNC_DEGREES :\n            case FUNC_SIN :\n            case FUNC_TAN :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_ROUNDMAGIC :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2763",
               "end_line": "2768",
               "source_code": "            case FUNC_DEGREES :\n            case FUNC_SIN :\n            case FUNC_TAN :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_ROUNDMAGIC :"
           }

       },

       {
           "id": "clone_200",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "1040",
               "end_line": "1046",
               "source_code": "        g[0] = \"\" + total;\n        g[1] = \"total\";\n        g[2] = \"\";\n\n        gResult.addRow(g);\n\n        lTime = System.currentTimeMillis() - lTime;"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1866",
               "end_line": "1872",
               "source_code": "        g[0] = \"\" + total;\n        g[1] = \"total\";\n        g[2] = \"\";\n\n        gResult.addRow(g);\n\n        lTime = System.currentTimeMillis() - lTime;"
           }

       },

       {
           "id": "clone_201",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "416",
               "end_line": "423",
               "source_code": "                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "393",
               "end_line": "400",
               "source_code": "                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;"
           }

       },

       {
           "id": "clone_202",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "113",
               "end_line": "118",
               "source_code": "                read();\n                readThis(Tokens.TABLE);\n\n                isTable   = true;\n                tableType = TableBase.TEMP_TABLE;\n                break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "105",
               "end_line": "110",
               "source_code": "                read();\n                readThis(Tokens.TABLE);\n\n                isTable   = true;\n                tableType = TableBase.TEMP_TABLE;\n                break;"
           }

       },

       {
           "id": "clone_203",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4265",
               "end_line": "4270",
               "source_code": "            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2550",
               "end_line": "2555",
               "source_code": "            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_204",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7686",
               "end_line": "7693",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4975",
               "end_line": "4982",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null"
           }

       },

       {
           "id": "clone_205",

           "clone_type": "type-1",

           "origin": {
               "file": "Result.java",
               "start_line": "1081",
               "end_line": "1088",
               "source_code": "                break;\n\n            case ResultConstants.DISCONNECT :\n            case ResultConstants.RESETSESSION :\n            case ResultConstants.STARTTRAN :\n                break;\n\n            case ResultConstants.PREPARE :"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "349",
               "end_line": "356",
               "source_code": "                break;\n\n            case ResultConstants.DISCONNECT :\n            case ResultConstants.RESETSESSION :\n            case ResultConstants.STARTTRAN :\n                break;\n\n            case ResultConstants.PREPARE :"
           }

       },

       {
           "id": "clone_206",

           "clone_type": "type-1",

           "origin": {
               "file": "DTIType.java",
               "start_line": "280",
               "end_line": "285",
               "source_code": "            // fall through\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_MINUTE :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "834",
               "end_line": "838",
               "source_code": "                case Types.SQL_INTERVAL_YEAR :\n                case Types.SQL_INTERVAL_MONTH :\n                case Types.SQL_INTERVAL_DAY :\n                case Types.SQL_INTERVAL_HOUR :\n                case Types.SQL_INTERVAL_MINUTE :"
           }

       },

       {
           "id": "clone_207",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "666",
               "end_line": "674",
               "source_code": "            if (byteArrayOS.size() == 0) {\n                break;\n            }\n\n            //\n            dataOut.writeByte(mode);\n            dataOut.writeInt(databaseID);\n            dataOut.writeLong(sessionID);\n            dataOut.writeLong(lobID);"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "608",
               "end_line": "616",
               "source_code": "            if (byteArrayOS.size() == 0) {\n                break;\n            }\n\n            //\n            dataOut.writeByte(mode);\n            dataOut.writeInt(databaseID);\n            dataOut.writeLong(sessionID);\n            dataOut.writeLong(lobID);"
           }

       },

       {
           "id": "clone_208",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3504",
               "end_line": "3513",
               "source_code": "            table = (Table) tables.next();\n\n            if (!isAccessibleTable(session, table)) {\n                continue;\n            }\n\n            row                = t.getEmptyRowData();\n            row[table_catalog] = database.getCatalogName().name;\n            row[table_schema]  = table.getSchemaName().name;\n            row[table_name]    = table.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1345",
               "end_line": "1354",
               "source_code": "            table = (Table) tables.next();\n\n            if (!isAccessibleTable(session, table)) {\n                continue;\n            }\n\n            row                = t.getEmptyRowData();\n            row[table_catalog] = database.getCatalogName().name;\n            row[table_schema]  = table.getSchemaName().name;\n            row[table_name]    = table.getName().name;"
           }

       },

       {
           "id": "clone_209",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2008",
               "end_line": "2015",
               "source_code": "        row[icat]          = cat;\n        row[ischem]        = schem;\n        row[ipname]        = pName;\n        row[iinput_parms]  = ip;\n        row[ioutput_parms] = op;\n        row[iresult_sets]  = rs;\n        row[iremark]       = remark;\n        row[iptype]        = pType;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2027",
               "end_line": "2034",
               "source_code": "                row[icat]          = cat;\n                row[ischem]        = schem;\n                row[ipname]        = pName;\n                row[iinput_parms]  = ip;\n                row[ioutput_parms] = op;\n                row[iresult_sets]  = rs;\n                row[iremark]       = remark;\n                row[iptype]        = pType;"
           }

       },

       {
           "id": "clone_210",

           "clone_type": "type-1",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "1152",
               "end_line": "1168",
               "source_code": "                        // table ID  [relid]:\n                        outPacket.writeInt(OdbcUtil.getTableOidForColumn(i,\n                                md));\n\n                        // column id  [attid]\n                        outPacket.writeShort(OdbcUtil.getIdForColumn(i, md));\n                        outPacket.writeInt(pgTypes[i].getOid());\n\n                        // Datatype size  [adtsize]\n                        outPacket.writeShort(pgTypes[i].getTypeWidth());\n                        outPacket.writeInt(pgTypes[i].getLPConstraint());\n\n                        // Var size [atttypmod]\n                        // This is the size constraint integer\n                        // like VARCHAR(12) or DECIMAL(4).\n                        // -1 if none specified for this column.\n                        outPacket.writeShort(0);"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "791",
               "end_line": "808",
               "source_code": "                            // table ID  [relid]:\n                            outPacket.writeInt(OdbcUtil.getTableOidForColumn(i,\n                                    md));\n\n                            // column id  [attid]\n                            outPacket.writeShort(OdbcUtil.getIdForColumn(i,\n                                    md));\n                            outPacket.writeInt(pgTypes[i].getOid());\n\n                            // Datatype size  [adtsize]\n                            outPacket.writeShort(pgTypes[i].getTypeWidth());\n                            outPacket.writeInt(pgTypes[i].getLPConstraint());\n\n                            // Var size [atttypmod]\n                            // This is the size constraint integer\n                            // like VARCHAR(12) or DECIMAL(4).\n                            // -1 if none specified for this column.\n                            outPacket.writeShort(0);"
           }

       },

       {
           "id": "clone_211",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2514",
               "end_line": "2530",
               "source_code": "            while (true) {\n                Iterator it = unresolved.iterator();\n\n                if (!it.hasNext()) {\n                    break;\n                }\n\n                OrderedHashSet newResolved = new OrderedHashSet();\n\n                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,\n                                          newResolved);\n                unresolved.removeAll(newResolved);\n\n                if (newResolved.size() == 0) {\n                    break;\n                }\n            }"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "2480",
               "end_line": "2496",
               "source_code": "            while (true) {\n                Iterator it = unresolved.iterator();\n\n                if (!it.hasNext()) {\n                    break;\n                }\n\n                OrderedHashSet newResolved = new OrderedHashSet();\n\n                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,\n                                          newResolved);\n                unresolved.removeAll(newResolved);\n\n                if (newResolved.size() == 0) {\n                    break;\n                }\n            }"
           }

       },

       {
           "id": "clone_212",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8346",
               "end_line": "8353",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                = t.getEmptyRowData();\n                row[view_catalog]  = database.getCatalogName().name;\n                row[view_schema]   = table.getSchemaName().name;\n                row[view_name]     = table.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8227",
               "end_line": "8234",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[view_catalog]     = database.getCatalogName().name;\n                row[view_schema]      = table.getSchemaName().name;\n                row[view_name]        = table.getName().name;"
           }

       },

       {
           "id": "clone_213",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1720",
               "end_line": "1724",
               "source_code": "                pResult.removeAll();\n                pResult.add(gScrollPane, BorderLayout.CENTER);\n                pResult.doLayout();\n                gResult.fireTableChanged(null);\n                pResult.repaint();"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1339",
               "end_line": "1343",
               "source_code": "        pResult.removeAll();\n        pResult.add(gScrollPane, BorderLayout.CENTER);\n        pResult.doLayout();\n        gResult.fireTableChanged(null);\n        pResult.repaint();"
           }

       },

       {
           "id": "clone_214",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "7572",
               "end_line": "7583",
               "source_code": "            Object[] rowData = getCurrent();\n            Type     sourceType;\n            Object   value;\n\n            checkColumn(columnIndex);\n\n            sourceType = resultMetaData.columnTypes[--columnIndex];\n            value      = rowData[columnIndex];\n\n            if (trackNull(value)) {\n                return null;\n            }"
           },

           "clone": {
               "file": "JDBCResultSet.java",
               "start_line": "7281",
               "end_line": "7292",
               "source_code": "        Object[] rowData = getCurrent();\n        Type     sourceType;\n        Object   value;\n\n        checkColumn(columnIndex);\n\n        sourceType = resultMetaData.columnTypes[--columnIndex];\n        value      = rowData[columnIndex];\n\n        if (trackNull(value)) {\n            return null;\n        }"
           }

       },

       {
           "id": "clone_215",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7030",
               "end_line": "7036",
               "source_code": "        final int sequence_catalog = 3;\n        final int sequence_schema  = 4;\n        final int sequence_name    = 5;\n\n        //\n        Iterator it;\n        Object[] row;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5557",
               "end_line": "5563",
               "source_code": "        final int sequence_catalog = 3;\n        final int sequence_schema  = 4;\n        final int sequence_name    = 5;\n\n        //\n        Iterator it;\n        Object[] row;"
           }

       },

       {
           "id": "clone_216",

           "clone_type": "type-1",

           "origin": {
               "file": "TestDateTime.java",
               "start_line": "311",
               "end_line": "333",
               "source_code": "        iDeletedCount = deleteStatement.executeUpdate();\n\n        Assert.assertEquals(\n            \"Exactly one record with time data shoud have been deleted.\",\n            iDeletedCount, 1);\n\n        // And now test the date\n        Assert.assertNotNull(\n            \"The inserted time shouldn't be retrieved as null from the database\",\n            retrievedTime);\n\n        // Ignore milliseconds when comparing dates\n        String selectString = selectTime.toString();\n        String retrievedString = retrievedTime.toString();\n\n        boolean result =\n            retrievedString.equals(selectString);\n\n        Assert.assertTrue(\n            \"The time retrieved from database \"\n            + DateFormat.getDateTimeInstance().format(retrievedTime)\n            + \" is not the same as the inserted one \"\n            + DateFormat.getDateTimeInstance().format(insertTime), result);"
           },

           "clone": {
               "file": "TestDateTime.java",
               "start_line": "211",
               "end_line": "233",
               "source_code": "        iDeletedCount = deleteStatement.executeUpdate();\n\n        Assert.assertEquals(\n            \"Exactly one record with time data shoud have been deleted.\",\n            iDeletedCount, 1);\n\n        // And now test the date\n        Assert.assertNotNull(\n            \"The inserted time shouldn't be retrieved as null from the database\",\n            retrievedTime);\n\n        // Ignore milliseconds when comparing dates\n        String selectString = selectTime.toString();\n        String retrievedString = retrievedTime.toString();\n\n        boolean result =\n            retrievedString.equals(selectString);\n\n        Assert.assertTrue(\n            \"The time retrieved from database \"\n            + DateFormat.getDateTimeInstance().format(retrievedTime)\n            + \" is not the same as the inserted one \"\n            + DateFormat.getDateTimeInstance().format(insertTime), result);"
           }

       },

       {
           "id": "clone_217",

           "clone_type": "type-1",

           "origin": {
               "file": "TriggerSample.java",
               "start_line": "356",
               "end_line": "364",
               "source_code": "        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));"
           },

           "clone": {
               "file": "TriggerSample.java",
               "start_line": "332",
               "end_line": "340",
               "source_code": "        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));"
           }

       },

       {
           "id": "clone_218",

           "clone_type": "type-1",

           "origin": {
               "file": "Type.java",
               "start_line": "1040",
               "end_line": "1052",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_FLOAT :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "833",
               "end_line": "845",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_FLOAT :"
           }

       },

       {
           "id": "clone_219",

           "clone_type": "type-1",

           "origin": {
               "file": "ClobType.java",
               "start_line": "98",
               "end_line": "110",
               "source_code": "        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(factor);\n\n        if (multiplier != null) {\n            sb.append(multiplier);\n        }\n\n        sb.append(')');\n\n        return sb.toString();"
           },

           "clone": {
               "file": "BlobType.java",
               "start_line": "99",
               "end_line": "111",
               "source_code": "        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(factor);\n\n        if (multiplier != null) {\n            sb.append(multiplier);\n        }\n\n        sb.append(')');\n\n        return sb.toString();"
           }

       },

       {
           "id": "clone_220",

           "clone_type": "type-1",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "535",
               "end_line": "539",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1082",
               "end_line": "1086",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           }

       },

       {
           "id": "clone_221",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "146",
               "end_line": "151",
               "source_code": "            System.out.println();\n            System.out.println(\"-v          verbose error messages\");\n            System.out.println(\"-init       initialize the tables\");\n            System.out.println(\"-tpc        transactions per client\");\n            System.out.println(\"-clients    number of simultaneous clients\");\n            System.exit(-1);"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "154",
               "end_line": "159",
               "source_code": "            System.out.println();\n            System.out.println(\"-v          verbose error messages\");\n            System.out.println(\"-init       initialize the tables\");\n            System.out.println(\"-tpc        transactions per client\");\n            System.out.println(\"-clients    number of simultaneous clients\");\n            System.exit(-1);"
           }

       },

       {
           "id": "clone_222",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1009",
               "end_line": "1030",
               "source_code": "            aOffset++;\n            bOffset++;\n\n            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {\n                aOffset = 0;\n\n                aIndex++;\n            }\n\n            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {\n                bOffset = 0;\n\n                bIndex++;\n            }\n\n            if (aIndex == aAddresses.length) {\n                break;\n            }\n\n            if (bIndex == bAddresses.length) {\n                break;\n            }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "919",
               "end_line": "940",
               "source_code": "            aOffset++;\n            bOffset++;\n\n            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {\n                aOffset = 0;\n\n                aIndex++;\n            }\n\n            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {\n                bOffset = 0;\n\n                bIndex++;\n            }\n\n            if (aIndex == aAddresses.length) {\n                break;\n            }\n\n            if (bIndex == bAddresses.length) {\n                break;\n            }"
           }

       },

       {
           "id": "clone_223",

           "clone_type": "type-1",

           "origin": {
               "file": "RangeVariable.java",
               "start_line": "930",
               "end_line": "950",
               "source_code": "        sb = new StringBuffer();\n\n        String temp = \"INNER\";\n\n        if (isLeftJoin) {\n            temp = \"LEFT OUTER\";\n\n            if (isRightJoin) {\n                temp = \"FULL\";\n            }\n        } else if (isRightJoin) {\n            temp = \"RIGHT OUTER\";\n        }\n\n        sb.append(b).append(\"join type=\").append(temp).append(\"\n\");\n        sb.append(b).append(\"table=\").append(rangeTable.getName().name).append(\n            \"\n\");\n\n        if (tableAlias != null) {\n            sb.append(b).append(\"alias=\").append(tableAlias.name).append(\"\n\");\n        }"
           },

           "clone": {
               "file": "RangeVariableJoined.java",
               "start_line": "344",
               "end_line": "364",
               "source_code": "        sb = new StringBuffer();\n\n        String temp = \"INNER\";\n\n        if (isLeftJoin) {\n            temp = \"LEFT OUTER\";\n\n            if (isRightJoin) {\n                temp = \"FULL\";\n            }\n        } else if (isRightJoin) {\n            temp = \"RIGHT OUTER\";\n        }\n\n        sb.append(b).append(\"join type=\").append(temp).append(\"\n\");\n        sb.append(b).append(\"table=\").append(rangeTable.getName().name).append(\n            \"\n\");\n\n        if (tableAlias != null) {\n            sb.append(b).append(\"alias=\").append(tableAlias.name).append(\"\n\");\n        }"
           }

       },

       {
           "id": "clone_224",

           "clone_type": "type-1",

           "origin": {
               "file": "TestCacheSize.java",
               "start_line": "246",
               "end_line": "255",
               "source_code": "            sw.zero();\n\n            sStatement = cConnection.createStatement();\n\n            java.util.Random randomgen = new java.util.Random();\n\n//            sStatement.execute(\"SET WRITE_DELAY \" + writeDelay);\n            sStatement.execute(ddl1);\n            sStatement.execute(ddl2);\n            sStatement.execute(ddl3);"
           },

           "clone": {
               "file": "TestAllTypes.java",
               "start_line": "169",
               "end_line": "177",
               "source_code": "            sw.zero();\n\n            sStatement = cConnection.createStatement();\n\n            java.util.Random randomgen = new java.util.Random();\n\n            sStatement.execute(ddl1);\n            sStatement.execute(ddl2);\n            sStatement.execute(ddl3);"
           }

       },

       {
           "id": "clone_225",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7169",
               "end_line": "7173",
               "source_code": "                row                  = t.getEmptyRowData();\n                row[trigger_catalog] = database.getCatalogName().name;\n                row[trigger_schema]  = trigger.getSchemaName().name;\n                row[trigger_name]    = trigger.getName().name;\n                row[table_catalog]   = database.getCatalogName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6836",
               "end_line": "6842",
               "source_code": "                row = t.getEmptyRowData();\n\n                //\n                row[trigger_catalog] = database.getCatalogName().name;\n                row[trigger_schema]  = trigger.getSchemaName().name;\n                row[trigger_name]    = trigger.getName().name;\n                row[table_catalog]   = database.getCatalogName().name;"
           }

       },

       {
           "id": "clone_226",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "256",
               "end_line": "317",
               "source_code": "        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg   = arg[i].toLowerCase();\n\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n\n                //\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n\n            i++;\n\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n\n                return;\n            } else {\n                /* Syntax ERRORS should either throw or exit with non-0 status.\n                 * In our case, it may be unsafe to exit, so we throw.\n                 * (I.e. should provide easy way for caller to programmatically\n                 * determine that there was an invocation problem).\n                 */\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n\n                // No reason to localize, since the main syntax message is\n                // not localized.\n            }\n        }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "478",
               "end_line": "539",
               "source_code": "        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg = arg[i].toLowerCase();\n\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n\n                //\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n\n            i++;\n\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n\n                return;\n            } else {\n                /* Syntax ERRORS should either throw or exit with non-0 status.\n                 * In our case, it may be unsafe to exit, so we throw.\n                 * (I.e. should provide easy way for caller to programmatically\n                 * determine that there was an invocation problem).\n                 */\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n\n                // No reason to localize, since the main syntax message is\n                // not localized.\n            }\n        }"
           }

       },

       {
           "id": "clone_227",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "785",
               "end_line": "789",
               "source_code": "        Statement st1 = null;\n        ResultSet rs  = null;\n        int       bbalancesum;\n        int       tbalancesum;\n        int       abalancesum;"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "693",
               "end_line": "697",
               "source_code": "        Statement st1 = null;\n        ResultSet rs  = null;\n        int       bbalancesum;\n        int       tbalancesum;\n        int       abalancesum;"
           }

       },

       {
           "id": "clone_228",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "950",
               "end_line": "964",
               "source_code": "            Table      t = c.getMain();\n\n            if (t != table) {\n                tableSet.add(t);\n            }\n\n            t = c.getRef();\n\n            if (t != table) {\n                tableSet.add(t);\n            }\n\n            constraintNameSet.add(c.getMainName());\n            constraintNameSet.add(c.getRefName());\n            indexNameSet.add(c.getRefIndex().getName());"
           },

           "clone": {
               "file": "TableWorks.java",
               "start_line": "905",
               "end_line": "919",
               "source_code": "                    Table      t = c.getMain();\n\n                    if (t != table) {\n                        tableSet.add(t);\n                    }\n\n                    t = c.getRef();\n\n                    if (t != table) {\n                        tableSet.add(t);\n                    }\n\n                    constraintNameSet.add(c.getMainName());\n                    constraintNameSet.add(c.getRefName());\n                    indexNameSet.add(c.getRefIndex().getName());"
           }

       },

       {
           "id": "clone_229",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "965",
               "end_line": "992",
               "source_code": "                    pstmt1.setInt(1, delta);\n                    pstmt1.setInt(2, aid);\n                    pstmt1.executeUpdate();\n                    pstmt1.clearWarnings();\n                    pstmt2.setInt(1, aid);\n\n                    ResultSet RS = pstmt2.executeQuery();\n\n                    pstmt2.clearWarnings();\n\n                    while (RS.next()) {\n                        aBalance = RS.getInt(1);\n                    }\n\n                    pstmt3.setInt(1, delta);\n                    pstmt3.setInt(2, tid);\n                    pstmt3.executeUpdate();\n                    pstmt3.clearWarnings();\n                    pstmt4.setInt(1, delta);\n                    pstmt4.setInt(2, bid);\n                    pstmt4.executeUpdate();\n                    pstmt4.clearWarnings();\n                    pstmt5.setInt(1, tid);\n                    pstmt5.setInt(2, bid);\n                    pstmt5.setInt(3, aid);\n                    pstmt5.setInt(4, delta);\n                    pstmt5.executeUpdate();\n                    pstmt5.clearWarnings();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "887",
               "end_line": "914",
               "source_code": "                pstmt1.setInt(1, delta);\n                pstmt1.setInt(2, aid);\n                pstmt1.executeUpdate();\n                pstmt1.clearWarnings();\n                pstmt2.setInt(1, aid);\n\n                ResultSet RS = pstmt2.executeQuery();\n\n                pstmt2.clearWarnings();\n\n                while (RS.next()) {\n                    aBalance = RS.getInt(1);\n                }\n\n                pstmt3.setInt(1, delta);\n                pstmt3.setInt(2, tid);\n                pstmt3.executeUpdate();\n                pstmt3.clearWarnings();\n                pstmt4.setInt(1, delta);\n                pstmt4.setInt(2, bid);\n                pstmt4.executeUpdate();\n                pstmt4.clearWarnings();\n                pstmt5.setInt(1, tid);\n                pstmt5.setInt(2, bid);\n                pstmt5.setInt(3, aid);\n                pstmt5.setInt(4, delta);\n                pstmt5.executeUpdate();\n                pstmt5.clearWarnings();"
           }

       },

       {
           "id": "clone_230",

           "clone_type": "type-1",

           "origin": {
               "file": "Types.java",
               "start_line": "721",
               "end_line": "726",
               "source_code": "            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n                return true;\n\n            default :\n                return false;"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "414",
               "end_line": "419",
               "source_code": "            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n                return true;\n\n            default :\n                return false;"
           }

       },

       {
           "id": "clone_231",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2904",
               "end_line": "2909",
               "source_code": "            case Tokens.YEAR :\n            case Tokens.MONTH :\n            case Tokens.DAY :\n            case Tokens.HOUR :\n            case Tokens.MINUTE :\n            case Tokens.SECOND :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2883",
               "end_line": "2888",
               "source_code": "                        case Tokens.YEAR :\n                        case Tokens.MONTH :\n                        case Tokens.DAY :\n                        case Tokens.HOUR :\n                        case Tokens.MINUTE :\n                        case Tokens.SECOND :"
           }

       },

       {
           "id": "clone_232",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "2301",
               "end_line": "2305",
               "source_code": "            case OpTypes.GREATER :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "1978",
               "end_line": "1983",
               "source_code": "            // fall through\n            case OpTypes.GREATER :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :"
           }

       },

       {
           "id": "clone_233",

           "clone_type": "type-1",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1574",
               "end_line": "1580",
               "source_code": "            ps.setInt(1, 3);\n            ps.setBytes(2, expectedBytes);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1522",
               "end_line": "1528",
               "source_code": "            ps.setInt(1, 3);\n            ps.setBytes(2, expectedBytes);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           }

       },

       {
           "id": "clone_234",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementInsert.java",
               "start_line": "87",
               "end_line": "95",
               "source_code": "        super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,\n              session.getCurrentSchemaHsqlName());\n\n        this.targetTable = targetTable;\n        this.baseTable   = targetTable.isTriggerInsertable() ? targetTable\n                                                             : targetTable\n                                                             .getBaseTable();\n        this.insertColumnMap    = columnMap;\n        this.insertCheckColumns = checkColumns;"
           },

           "clone": {
               "file": "StatementInsert.java",
               "start_line": "60",
               "end_line": "68",
               "source_code": "        super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,\n              session.getCurrentSchemaHsqlName());\n\n        this.targetTable = targetTable;\n        this.baseTable   = targetTable.isTriggerInsertable() ? targetTable\n                                                             : targetTable\n                                                             .getBaseTable();\n        this.insertColumnMap    = columnMap;\n        this.insertCheckColumns = checkColumns;"
           }

       },

       {
           "id": "clone_235",

           "clone_type": "type-1",

           "origin": {
               "file": "TransactionManagerMV2PL.java",
               "start_line": "120",
               "end_line": "135",
               "source_code": "            int limit = session.rowActionList.size();\n\n            // new actionTimestamp used for commitTimestamp\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n\n            endTransaction(session);\n\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n\n                action.commit(session);\n            }\n\n            adjustLobUsage(session);\n            persistCommit(session);"
           },

           "clone": {
               "file": "TransactionManager2PL.java",
               "start_line": "96",
               "end_line": "111",
               "source_code": "            int limit = session.rowActionList.size();\n\n            // new actionTimestamp used for commitTimestamp\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n\n            endTransaction(session);\n\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n\n                action.commit(session);\n            }\n\n            adjustLobUsage(session);\n            persistCommit(session);"
           }

       },

       {
           "id": "clone_236",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5733",
               "end_line": "5738",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5645",
               "end_line": "5650",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_237",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3427",
               "end_line": "3431",
               "source_code": "            case Tokens.CURRENT_DATE :\n            case Tokens.CURRENT_TIME :\n            case Tokens.CURRENT_TIMESTAMP :\n            case Tokens.LOCALTIME :\n            case Tokens.LOCALTIMESTAMP :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3396",
               "end_line": "3400",
               "source_code": "            case Tokens.CURRENT_DATE :\n            case Tokens.CURRENT_TIME :\n            case Tokens.CURRENT_TIMESTAMP :\n            case Tokens.LOCALTIME :\n            case Tokens.LOCALTIMESTAMP :"
           }

       },

       {
           "id": "clone_238",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5947",
               "end_line": "5953",
               "source_code": "            //\n            row[specific_catalog] = database.getCatalogName().name;\n            row[specific_schema]  = routine.getSchemaName().name;\n            row[specific_name]    = routine.getSpecificName().name;\n            row[routine_catalog]  = database.getCatalogName().name;\n            row[routine_schema]   = routine.getSchemaName().name;\n            row[routine_name]     = routine.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5701",
               "end_line": "5706",
               "source_code": "                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;\n                row[specific_name]    = routine.getSpecificName().name;\n                row[routine_catalog]  = database.getCatalogName().name;\n                row[routine_schema]   = routine.getSchemaName().name;\n                row[routine_name]     = routine.getName().name;"
           }

       },

       {
           "id": "clone_239",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBatchExecution.java",
               "start_line": "176",
               "end_line": "191",
               "source_code": "        preparedTestOne(runs);\n\n        // drop the test table and shut down database\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");\n\n        // get the connection and statement\n        conn  = DriverManager.getConnection(url, \"SA\", \"\");\n        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "152",
               "end_line": "167",
               "source_code": "        preparedTestOne(runs);\n\n        // drop the test table and shut down database\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");\n\n        // get the connection and statement\n        conn  = DriverManager.getConnection(url, \"SA\", \"\");\n        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");"
           }

       },

       {
           "id": "clone_240",

           "clone_type": "type-1",

           "origin": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "311",
               "end_line": "328",
               "source_code": "    public void write(RowOutputInterface out,\n                      ResultMetaData meta) throws IOException {\n\n        reset();\n        out.writeLong(id);\n        out.writeInt(size);\n        out.writeInt(0);    // offset\n        out.writeInt(size);\n\n        while (hasNext()) {\n            Object[] data = getNext();\n\n            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,\n                          data, null, null);\n        }\n\n        reset();\n    }"
           },

           "clone": {
               "file": "RowSetNavigatorData.java",
               "start_line": "295",
               "end_line": "312",
               "source_code": "    public void write(RowOutputInterface out,\n                      ResultMetaData meta) throws IOException {\n\n        reset();\n        out.writeLong(id);\n        out.writeInt(size);\n        out.writeInt(0);    // offset\n        out.writeInt(size);\n\n        while (hasNext()) {\n            Object[] data = getNext();\n\n            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,\n                          data, null, null);\n        }\n\n        reset();\n    }"
           }

       },

       {
           "id": "clone_241",

           "clone_type": "type-1",

           "origin": {
               "file": "Transfer.java",
               "start_line": "1139",
               "end_line": "1144",
               "source_code": "        p.add(\"South\", createLabel(\"\"));\n        p.add(\"East\", createLabel(\"\"));\n        p.add(\"West\", createLabel(\"\"));\n        p.setBackground(SystemColor.control);\n\n        return p;"
           },

           "clone": {
               "file": "ConnectionDialog.java",
               "start_line": "294",
               "end_line": "299",
               "source_code": "        p.add(\"South\", createLabel(\"\"));\n        p.add(\"East\", createLabel(\"\"));\n        p.add(\"West\", createLabel(\"\"));\n        p.setBackground(SystemColor.control);\n\n        return p;"
           }

       },

       {
           "id": "clone_242",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3535",
               "end_line": "3549",
               "source_code": "            addColumn(t, \"DATA_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3360",
               "end_line": "3374",
               "source_code": "            addColumn(t, \"DATA_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_243",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberType.java",
               "start_line": "999",
               "end_line": "1008",
               "source_code": "                case Types.SQL_BIGINT :\n                    return convertToLong(session, a);\n\n                case Types.SQL_REAL :\n                case Types.SQL_FLOAT :\n                case Types.SQL_DOUBLE :\n                    return convertToDouble(a);\n\n                case Types.SQL_NUMERIC :\n                case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "897",
               "end_line": "906",
               "source_code": "            case Types.SQL_BIGINT :\n                return convertToLong(session, a);\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return convertToDouble(a);\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_244",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "399",
               "end_line": "409",
               "source_code": "//\n            Query = \"SELECT count(*) \";\n            Query += \"FROM   accounts\";\n\n            ResultSet RS = Stmt.executeQuery(Query);\n\n            Stmt.clearWarnings();\n\n            while (RS.next()) {\n                accountsnb = RS.getInt(1);\n            }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "377",
               "end_line": "390",
               "source_code": "//\n//            Stmt.execute(\"SET WRITE_DELAY 1000 MILLIS;\");\n//            Stmt.execute(\"SET DATABASE DEFAULT TABLE TYPE CACHED\");\n//\n            Query = \"SELECT count(*) \";\n            Query += \"FROM   accounts\";\n\n            ResultSet RS = Stmt.executeQuery(Query);\n\n            Stmt.clearWarnings();\n\n            while (RS.next()) {\n                accountsnb = RS.getInt(1);\n            }"
           }

       },

       {
           "id": "clone_245",

           "clone_type": "type-1",

           "origin": {
               "file": "ValuePoolHashMap.java",
               "start_line": "249",
               "end_line": "274",
               "source_code": "        String testValue;\n        int    index      = hashIndex.getHashIndex(key.hashCode());\n        int    lookup     = hashIndex.hashTable[index];\n        int    lastLookup = -1;\n\n        for (; lookup >= 0;\n                lastLookup = lookup,\n                lookup = hashIndex.getNextLookup(lookup)) {\n            testValue = (String) objectKeyTable[lookup];\n\n            if (key.equals(testValue)) {\n                if (accessCount > ACCESS_MAX) {\n                    resetAccessCount();\n                }\n\n                accessTable[lookup] = accessCount++;\n\n                return testValue;\n            }\n        }\n\n        if (hashIndex.elementCount >= threshold) {\n            reset();\n\n            return getOrAddString(key);\n        }"
           },

           "clone": {
               "file": "ValuePoolHashMap.java",
               "start_line": "204",
               "end_line": "229",
               "source_code": "        String testValue;\n        int    index      = hashIndex.getHashIndex(key.hashCode());\n        int    lookup     = hashIndex.hashTable[index];\n        int    lastLookup = -1;\n\n        for (; lookup >= 0;\n                lastLookup = lookup,\n                lookup = hashIndex.getNextLookup(lookup)) {\n            testValue = (String) objectKeyTable[lookup];\n\n            if (key.equals(testValue)) {\n                if (accessCount > ACCESS_MAX) {\n                    resetAccessCount();\n                }\n\n                accessTable[lookup] = accessCount++;\n\n                return testValue;\n            }\n        }\n\n        if (hashIndex.elementCount >= threshold) {\n            reset();\n\n            return getOrAddString(key);\n        }"
           }

       },

       {
           "id": "clone_246",

           "clone_type": "type-1",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "137",
               "end_line": "148",
               "source_code": "        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "121",
               "end_line": "132",
               "source_code": "        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_247",

           "clone_type": "type-1",

           "origin": {
               "file": "TextFileReader.java",
               "start_line": "218",
               "end_line": "223",
               "source_code": "                    break;\n\n                default :\n                    wasNormal = true;\n                    complete  = wasCR;\n                    wasCR     = false;"
           },

           "clone": {
               "file": "TextFileReader.java",
               "start_line": "132",
               "end_line": "137",
               "source_code": "                        break;\n\n                    default :\n                        wasNormal = true;\n                        complete  = wasCR;\n                        wasCR     = false;"
           }

       },

       {
           "id": "clone_248",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "1067",
               "end_line": "1114",
               "source_code": "    class MemoryWatcherThread extends Thread {\n\n        long    min          = 0;\n        long    max          = 0;\n        boolean keep_running = true;\n\n        public MemoryWatcherThread() {\n\n            this.reset();\n\n            keep_running = true;\n        }\n\n        public void reset() {\n\n            System.gc();\n\n            long currentFree  = Runtime.getRuntime().freeMemory();\n            long currentAlloc = Runtime.getRuntime().totalMemory();\n\n            min = max = (currentAlloc - currentFree);\n        }\n\n        public void end() {\n            keep_running = false;\n        }\n\n        public void run() {\n\n            while (keep_running) {\n                long currentFree  = Runtime.getRuntime().freeMemory();\n                long currentAlloc = Runtime.getRuntime().totalMemory();\n                long used         = currentAlloc - currentFree;\n\n                if (used < min) {\n                    min = used;\n                }\n\n                if (used > max) {\n                    max = used;\n                }\n\n                try {\n                    sleep(100);\n                } catch (InterruptedException E) {}\n            }\n        }\n    }    /* end of class MemoryWatcherThread */"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "1050",
               "end_line": "1097",
               "source_code": "    class MemoryWatcherThread extends Thread {\n\n        long    min          = 0;\n        long    max          = 0;\n        boolean keep_running = true;\n\n        public MemoryWatcherThread() {\n\n            this.reset();\n\n            keep_running = true;\n        }\n\n        public void reset() {\n\n            System.gc();\n\n            long currentFree  = Runtime.getRuntime().freeMemory();\n            long currentAlloc = Runtime.getRuntime().totalMemory();\n\n            min = max = (currentAlloc - currentFree);\n        }\n\n        public void end() {\n            keep_running = false;\n        }\n\n        public void run() {\n\n            while (keep_running) {\n                long currentFree  = Runtime.getRuntime().freeMemory();\n                long currentAlloc = Runtime.getRuntime().totalMemory();\n                long used         = currentAlloc - currentFree;\n\n                if (used < min) {\n                    min = used;\n                }\n\n                if (used > max) {\n                    max = used;\n                }\n\n                try {\n                    sleep(100);\n                } catch (InterruptedException E) {}\n            }\n        }\n    }    /* end of class MemoryWatcherThread */"
           }

       },

       {
           "id": "clone_249",

           "clone_type": "type-1",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "310",
               "end_line": "319",
               "source_code": "        mark = 0;\n\n        reset();\n\n        if (buffer.length < rowsize) {\n            buffer = new byte[rowsize];\n        }\n\n        filePos   = filepos;\n        size      = count = rowsize;"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "286",
               "end_line": "295",
               "source_code": "        mark = 0;\n\n        reset();\n\n        if (buffer.length < rowsize) {\n            buffer = new byte[rowsize];\n        }\n\n        filePos   = filepos;\n        size      = count = rowsize;"
           }

       },

       {
           "id": "clone_250",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSet.java",
               "start_line": "128",
               "end_line": "149",
               "source_code": "    TableDerived[] getSubqueries(Session session) {\n\n        OrderedHashSet subQueries = null;\n\n        if (expression != null) {\n            subQueries = expression.collectAllSubqueries(subQueries);\n        }\n\n        if (subQueries == null || subQueries.size() == 0) {\n            return TableDerived.emptyArray;\n        }\n\n        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];\n\n        subQueries.toArray(subQueryArray);\n\n        for (int i = 0; i < subqueries.length; i++) {\n            subQueryArray[i].prepareTable();\n        }\n\n        return subQueryArray;\n    }"
           },

           "clone": {
               "file": "StatementExpression.java",
               "start_line": "94",
               "end_line": "115",
               "source_code": "    TableDerived[] getSubqueries(Session session) {\n\n        OrderedHashSet subQueries = null;\n\n        if (expression != null) {\n            subQueries = expression.collectAllSubqueries(subQueries);\n        }\n\n        if (subQueries == null || subQueries.size() == 0) {\n            return TableDerived.emptyArray;\n        }\n\n        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];\n\n        subQueries.toArray(subQueryArray);\n\n        for (int i = 0; i < subqueries.length; i++) {\n            subQueryArray[i].prepareTable();\n        }\n\n        return subQueryArray;\n    }"
           }

       },

       {
           "id": "clone_251",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberType.java",
               "start_line": "1735",
               "end_line": "1745",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return 64;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                return (int) precision;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "148",
               "end_line": "158",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return 64;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                return (int) precision;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
           }

       },

       {
           "id": "clone_252",

           "clone_type": "type-1",

           "origin": {
               "file": "RowAVL.java",
               "start_line": "161",
               "end_line": "170",
               "source_code": "    public NodeAVL insertNode(int index) {\n\n        NodeAVL backnode = getNode(index - 1);\n        NodeAVL newnode  = new NodeAVL(this);\n\n        newnode.nNext  = backnode.nNext;\n        backnode.nNext = newnode;\n\n        return newnode;\n    }"
           },

           "clone": {
               "file": "RowAVLDiskData.java",
               "start_line": "146",
               "end_line": "155",
               "source_code": "    public NodeAVL insertNode(int index) {\n\n        NodeAVL backnode = getNode(index - 1);\n        NodeAVL newnode  = new NodeAVL(this);\n\n        newnode.nNext  = backnode.nNext;\n        backnode.nNext = newnode;\n\n        return newnode;\n    }"
           }

       },

       {
           "id": "clone_253",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCArrayBasic.java",
               "start_line": "539",
               "end_line": "554",
               "source_code": "        RowSetNavigatorClient navigator = new RowSetNavigatorClient();\n\n        for (int i = (int) position; i < position + count; i++) {\n            Object[] rowData = new Object[2];\n\n            rowData[0] = Integer.valueOf(i + 1);\n            rowData[1] = data[i];\n\n            navigator.add(rowData);\n        }\n\n        Result result = Result.newDataResult(meta);\n\n        result.setNavigator(navigator);\n\n        return result;"
           },

           "clone": {
               "file": "JDBCArray.java",
               "start_line": "585",
               "end_line": "600",
               "source_code": "        RowSetNavigatorClient navigator = new RowSetNavigatorClient();\n\n        for (int i = (int) position; i < position + count; i++) {\n            Object[] rowData = new Object[2];\n\n            rowData[0] = Integer.valueOf(i + 1);\n            rowData[1] = data[i];\n\n            navigator.add(rowData);\n        }\n\n        Result result = Result.newDataResult(meta);\n\n        result.setNavigator(navigator);\n\n        return result;"
           }

       },

       {
           "id": "clone_254",

           "clone_type": "type-1",

           "origin": {
               "file": "TestJDBCGeneratedColumns.java",
               "start_line": "165",
               "end_line": "175",
               "source_code": "            Connection c  = newConnection();\n            Statement  st = c.createStatement();\n            String     s  = \"DROP TABLE T IF EXISTS\";\n\n            st.execute(s);\n\n            s = \"CREATE TABLE T (I INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33), C CHARACTER(10))\";\n\n            st.execute(s);\n\n            s = \"INSERT INTO T (C) VALUES('TEST')\";"
           },

           "clone": {
               "file": "TestJDBCGeneratedColumns.java",
               "start_line": "51",
               "end_line": "61",
               "source_code": "            Connection c  = newConnection();\n            Statement  st = c.createStatement();\n            String     s  = \"DROP TABLE T IF EXISTS\";\n\n            st.execute(s);\n\n            s = \"CREATE TABLE T (I INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33), C CHARACTER(10))\";\n\n            st.execute(s);\n\n            s = \"INSERT INTO T (C) VALUES('TEST')\";"
           }

       },

       {
           "id": "clone_255",

           "clone_type": "type-1",

           "origin": {
               "file": "TestSql.java",
               "start_line": "177",
               "end_line": "189",
               "source_code": "                ResultSetMetaData rsmd    = rs.getMetaData();\n                String            result0 = \"\";\n\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result0 += rs.getString(i + 1) + \":\";\n                    }\n\n                    result0 += \"\n\";\n                }\n\n                rs.close();\n                System.out.println(result0);"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "157",
               "end_line": "169",
               "source_code": "                ResultSetMetaData rsmd    = rs.getMetaData();\n                String            result0 = \"\";\n\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result0 += rs.getString(i + 1) + \":\";\n                    }\n\n                    result0 += \"\n\";\n                }\n\n                rs.close();\n                System.out.println(result0);"
           }

       },

       {
           "id": "clone_256",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "280",
               "end_line": "304",
               "source_code": "    public void rollbackRow(Session session, Row row, int changeAction,\n                            int txModel) {\n\n        switch (changeAction) {\n\n            case RowAction.ACTION_DELETE :\n                row = (Row) get(row, true);\n\n                ((RowAVL) row).setNewNodes(this);\n                row.keepInMemory(false);\n                indexRow(session, row);\n                break;\n\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n                remove(row);\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELEETE\n                remove(row);\n                break;\n        }\n    }"
           },

           "clone": {
               "file": "RowStoreAVLHybridExtended.java",
               "start_line": "157",
               "end_line": "181",
               "source_code": "    public void rollbackRow(Session session, Row row, int changeAction,\n                            int txModel) {\n\n        switch (changeAction) {\n\n            case RowAction.ACTION_DELETE :\n                row = (Row) get(row, true);\n\n                ((RowAVL) row).setNewNodes(this);\n                row.keepInMemory(false);\n                indexRow(session, row);\n                break;\n\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n                remove(row);\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELEETE\n                remove(row);\n                break;\n        }\n    }"
           }

       },

       {
           "id": "clone_257",

           "clone_type": "type-1",

           "origin": {
               "file": "HsqlProperties.java",
               "start_line": "463",
               "end_line": "468",
               "source_code": "        Object[] row = new Object[indexLimit];\n\n        row[indexName]         = name;\n        row[indexType]         = ValuePool.getInt(type);\n        row[indexClass]        = \"Integer\";\n        row[indexDefaultValue] = ValuePool.getInt(defaultValue);"
           },

           "clone": {
               "file": "HsqlProperties.java",
               "start_line": "449",
               "end_line": "454",
               "source_code": "        Object[] row = new Object[indexLimit];\n\n        row[indexName]         = name;\n        row[indexType]         = ValuePool.getInt(type);\n        row[indexClass]        = \"Integer\";\n        row[indexDefaultValue] = ValuePool.getInt(defaultValue);"
           }

       },

       {
           "id": "clone_258",

           "clone_type": "type-1",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "953",
               "end_line": "958",
               "source_code": "                setNewTableInSchema(tn);\n                setNewTablesInSchema(tableSet);\n                updateConstraints(tn, emptySet);\n                updateConstraints(tableSet, constraintNameSet);\n                database.schemaManager.recompileDependentObjects(tableSet);\n                database.schemaManager.recompileDependentObjects(tn);"
           },

           "clone": {
               "file": "TableWorks.java",
               "start_line": "845",
               "end_line": "850",
               "source_code": "        setNewTableInSchema(tn);\n        setNewTablesInSchema(tableSet);\n        updateConstraints(tn, emptySet);\n        updateConstraints(tableSet, constraintNameSet);\n        database.schemaManager.recompileDependentObjects(tableSet);\n        database.schemaManager.recompileDependentObjects(tn);"
           }

       },

       {
           "id": "clone_259",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "927",
               "end_line": "939",
               "source_code": "        if (r == null) {\n            String[] g = new String[1];\n\n            g[0] = \"Result\";\n\n            gResult.setHead(g);\n\n            g[0] = \"(empty)\";\n\n            gResult.addRow(g);\n\n            return;\n        }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1744",
               "end_line": "1756",
               "source_code": "        if (r == null) {\n            String[] g = new String[1];\n\n            g[0] = \"Result\";\n\n            gResult.setHead(g);\n\n            g[0] = \"(empty)\";\n\n            gResult.addRow(g);\n\n            return;\n        }"
           }

       },

       {
           "id": "clone_260",

           "clone_type": "type-1",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "226",
               "end_line": "236",
               "source_code": "        st   = conn.createStatement();\n\n        rs = st.executeQuery(\"select count(*) from tmsingle\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));\n\n        rs = st.executeQuery(\"select count(*) from tident\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));"
           },

           "clone": {
               "file": "TestTextTables.java",
               "start_line": "210",
               "end_line": "220",
               "source_code": "        st   = conn.createStatement();\n\n        rs = st.executeQuery(\"select count(*) from tmsingle\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));\n\n        rs = st.executeQuery(\"select count(*) from tident\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));"
           }

       },

       {
           "id": "clone_261",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4219",
               "end_line": "4223",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :"
           },

           "clone": {
               "file": "PgType.java",
               "start_line": "325",
               "end_line": "352",
               "source_code": "                /*\n            case Types.OTHER :\n                try {\n                    if (o instanceof Serializable) {\n                        o = new JavaObjectData((Serializable) o);\n\n                        break;\n                    }\n                } catch (HsqlException e) {\n                    PgType.throwError(e);\n                }\n                PgType.throwError(Error.error(ErrorCode.X_42565));\n\n                break;\n            case Types.SQL_BLOB :\n                //setBlobParameter(i, o);\n\n                //break;\n            case Types.SQL_CLOB :\n                //setClobParameter(i, o);\n\n                //break;\n            */\n            case Types.SQL_DATE :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :"
           }

       },

       {
           "id": "clone_262",

           "clone_type": "type-1",

           "origin": {
               "file": "RowType.java",
               "start_line": "119",
               "end_line": "137",
               "source_code": "        if (a == b) {\n            return 0;\n        }\n\n        if (a == null) {\n            return -1;\n        }\n\n        if (b == null) {\n            return 1;\n        }\n\n        Object[] arra   = (Object[]) a;\n        Object[] arrb   = (Object[]) b;\n        int      length = arra.length;\n\n        if (arrb.length < length) {\n            length = arrb.length;\n        }"
           },

           "clone": {
               "file": "ArrayType.java",
               "start_line": "145",
               "end_line": "163",
               "source_code": "        if (a == b) {\n            return 0;\n        }\n\n        if (a == null) {\n            return -1;\n        }\n\n        if (b == null) {\n            return 1;\n        }\n\n        Object[] arra   = (Object[]) a;\n        Object[] arrb   = (Object[]) b;\n        int      length = arra.length;\n\n        if (arrb.length < length) {\n            length = arrb.length;\n        }"
           }

       },

       {
           "id": "clone_263",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1627",
               "end_line": "1636",
               "source_code": "            addColumn(t, \"REMARKS\", CHARACTER_DATA);                // 12\n\n            // ----------------------------------------------------------------\n            // JDBC 4.0\n            // ----------------------------------------------------------------\n            addColumn(t, \"COLUMN_DEF\", CHARACTER_DATA);             // 13\n            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);        // 14\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);     // 15\n            addColumn(t, \"CHAR_OCTET_LENGTH\", Type.SQL_INTEGER);    // 16\n            addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // 17"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "845",
               "end_line": "850",
               "source_code": "            addColumn(t, \"REMARKS\", CHARACTER_DATA);                // 11\n            addColumn(t, \"COLUMN_DEF\", CHARACTER_DATA);             // 12\n            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);        // 13\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);     // 14\n            addColumn(t, \"CHAR_OCTET_LENGTH\", Type.SQL_INTEGER);    // 15\n            addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // not null"
           }

       },

       {
           "id": "clone_264",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1043",
               "end_line": "1053",
               "source_code": "                if (data[0] == null || data[1] == null) {\n                    return null;\n                }\n\n                Object value;\n\n                value = Type.SQL_BIGINT.convertToType(session, data[1],\n                                                      nodes[1].dataType);\n\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "913",
               "end_line": "923",
               "source_code": "                if (data[0] == null || data[1] == null) {\n                    return null;\n                }\n\n                Object value;\n\n                value = Type.SQL_BIGINT.convertToType(session, data[1],\n                                                      nodes[1].dataType);\n\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;"
           }

       },

       {
           "id": "clone_265",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5666",
               "end_line": "5675",
               "source_code": "        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int routine_catalog  = 3;\n        final int routine_schema   = 4;\n        final int routine_name     = 5;\n        final int table_catalog    = 6;\n        final int table_schema     = 7;\n        final int table_name       = 8;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5078",
               "end_line": "5087",
               "source_code": "        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int routine_catalog  = 3;\n        final int routine_schema   = 4;\n        final int routine_name     = 5;\n        final int table_catalog    = 6;\n        final int table_schema     = 7;\n        final int table_name       = 8;"
           }

       },

       {
           "id": "clone_266",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "954",
               "end_line": "974",
               "source_code": "        Object[] data    = getLobHeader(aID);\n        long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n\n        data = getLobHeader(bID);\n\n        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);\n        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);\n        int     aIndex     = 0;\n        int     bIndex     = 0;\n        int     aOffset    = 0;\n        int     bOffset    = 0;\n\n        if (aLength == 0) {\n            return bLength == 0 ? 0\n                                : -1;\n        }\n\n        if (bLength == 0) {\n            return 1;\n        }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "886",
               "end_line": "906",
               "source_code": "        Object[] data    = getLobHeader(aID);\n        long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n\n        data = getLobHeader(bID);\n\n        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);\n        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);\n        int     aIndex     = 0;\n        int     bIndex     = 0;\n        int     aOffset    = 0;\n        int     bOffset    = 0;\n\n        if (aLength == 0) {\n            return bLength == 0 ? 0\n                                : -1;\n        }\n\n        if (bLength == 0) {\n            return 1;\n        }"
           }

       },

       {
           "id": "clone_267",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "158",
               "end_line": "167",
               "source_code": "        System.out.println(\n            \"*********************************************************\");\n        System.out.println();\n        System.out.println(\"Driver: \" + DriverName);\n        System.out.println(\"URL:\" + DBUrl);\n        System.out.println();\n        System.out.println(\"Scale factor value: \" + tps);\n        System.out.println(\"Number of clients: \" + n_clients);\n        System.out.println(\"Number of transactions per client: \"\n                           + n_txn_per_client);"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "166",
               "end_line": "175",
               "source_code": "        System.out.println(\n            \"*********************************************************\");\n        System.out.println();\n        System.out.println(\"Driver: \" + DriverName);\n        System.out.println(\"URL:\" + DBUrl);\n        System.out.println();\n        System.out.println(\"Scale factor value: \" + tps);\n        System.out.println(\"Number of clients: \" + n_clients);\n        System.out.println(\"Number of transactions per client: \"\n                           + n_txn_per_client);"
           }

       },

       {
           "id": "clone_268",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5852",
               "end_line": "5857",
               "source_code": "        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2612",
               "end_line": "2617",
               "source_code": "        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;"
           }

       },

       {
           "id": "clone_269",

           "clone_type": "type-1",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1394",
               "end_line": "1400",
               "source_code": "            ps.setInt(1, 3);\n            ps.setTimestamp(2, aTimestamp);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1352",
               "end_line": "1358",
               "source_code": "            ps.setInt(1, 3);\n            ps.setTimestamp(2, aTimestamp);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           }

       },

       {
           "id": "clone_270",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2786",
               "end_line": "2798",
               "source_code": "        read();\n        readThis(Tokens.OPENBRACKET);\n\n        String  spec    = readQuotedString();\n        Scanner scanner = session.getScanner();\n\n        scanner.reset(spec);\n        scanner.scanNext();\n\n        String schemaName = session.getSchemaName(scanner.token.namePrefix);\n        NumberSequence sequence =\n            database.schemaManager.getSequence(scanner.token.tokenString,\n                                               schemaName, true);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2664",
               "end_line": "2677",
               "source_code": "                    read();\n                    readThis(Tokens.OPENBRACKET);\n\n                    String  spec    = readQuotedString();\n                    Scanner scanner = session.getScanner();\n\n                    scanner.reset(spec);\n                    scanner.scanNext();\n\n                    String schemaName =\n                        session.getSchemaName(scanner.token.namePrefix);\n                    NumberSequence sequence =\n                        database.schemaManager.getSequence(\n                            scanner.token.tokenString, schemaName, true);"
           }

       },

       {
           "id": "clone_271",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3216",
               "end_line": "3233",
               "source_code": "            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            // HSQLDB-specific\n            addColumn(t, \"START_WITH\", CHARACTER_DATA);\n            addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3112",
               "end_line": "3129",
               "source_code": "            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            // HSQLDB-specific\n            addColumn(t, \"START_WITH\", CHARACTER_DATA);\n            addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);"
           }

       },

       {
           "id": "clone_272",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5835",
               "end_line": "5841",
               "source_code": "        // column number mappings\n        final int specific_catalog                       = 0;\n        final int specific_schema                        = 1;\n        final int specific_name                          = 2;\n        final int routine_catalog                        = 3;\n        final int routine_schema                         = 4;\n        final int routine_name                           = 5;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5666",
               "end_line": "5672",
               "source_code": "        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int routine_catalog  = 3;\n        final int routine_schema   = 4;\n        final int routine_name     = 5;"
           }

       },

       {
           "id": "clone_273",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "2086",
               "end_line": "2101",
               "source_code": "            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION,\n                                                condition);\n\n            list.add(statement);\n            readThis(Tokens.THEN);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }\n\n            if (token.tokenType != Tokens.WHEN) {\n                break;\n            }"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "2050",
               "end_line": "2065",
               "source_code": "            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION,\n                                                condition);\n\n            list.add(statement);\n            readThis(Tokens.THEN);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }\n\n            if (token.tokenType != Tokens.WHEN) {\n                break;\n            }"
           }

       },

       {
           "id": "clone_274",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3673",
               "end_line": "3680",
               "source_code": "            if (!session.getGrantee().isAccessible(type)) {\n                continue;\n            }\n\n            row                             = t.getEmptyRowData();\n            row[object_catalog]             = database.getCatalogName().name;\n            row[object_schema]              = type.getSchemaName().name;\n            row[object_name]                = type.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3649",
               "end_line": "3656",
               "source_code": "            if (!session.getGrantee().isAccessible(type)) {\n                continue;\n            }\n\n            row                             = t.getEmptyRowData();\n            row[object_catalog]             = database.getCatalogName().name;\n            row[object_schema]              = type.getSchemaName().name;\n            row[object_name]                = type.getName().name;"
           }

       },

       {
           "id": "clone_275",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "189",
               "end_line": "208",
               "source_code": "            java.util.Date start = new java.util.Date();\n\n            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 / 1000D;\n\n                System.out.println(\"done. in \" + seconds + \" seconds\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }\n\n            System.out.println(\"* Starting Benchmark Run *\");\n\n            MemoryWatcher = new MemoryWatcherThread();\n\n            MemoryWatcher.start();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "205",
               "end_line": "224",
               "source_code": "            java.util.Date start = new java.util.Date();\n\n            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 / 1000D;\n\n                System.out.println(\"done. in \" + seconds + \" seconds\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }\n\n            System.out.println(\"* Starting Benchmark Run *\");\n\n            MemoryWatcher = new MemoryWatcherThread();\n\n            MemoryWatcher.start();"
           }

       },

       {
           "id": "clone_276",

           "clone_type": "type-1",

           "origin": {
               "file": "BitType.java",
               "start_line": "258",
               "end_line": "262",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_BLOB :\n                b = (BlobData) a;\n                break;"
           },

           "clone": {
               "file": "BinaryType.java",
               "start_line": "424",
               "end_line": "428",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_BLOB :\n                b = (BlobData) a;\n                break;"
           }

       },

       {
           "id": "clone_277",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2672",
               "end_line": "2680",
               "source_code": "                if (!columnList.contains(column.getName())) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[table_cat]        = database.getCatalogName().name;\n                row[table_schem]      = table.getSchemaName().name;\n                row[table_name]       = table.getName().name;\n                row[column_name]      = column.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "610",
               "end_line": "618",
               "source_code": "                if (!columnList.contains(column.getName())) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[table_cat]        = database.getCatalogName().name;\n                row[table_schem]      = table.getSchemaName().name;\n                row[table_name]       = table.getName().name;\n                row[column_name]      = column.getName().name;"
           }

       },

       {
           "id": "clone_278",

           "clone_type": "type-1",

           "origin": {
               "file": "Result.java",
               "start_line": "1161",
               "end_line": "1170",
               "source_code": "                        break;\n\n                    case ResultConstants.TX_COMMIT :\n                    case ResultConstants.TX_ROLLBACK :\n                    case ResultConstants.TX_COMMIT_AND_CHAIN :\n                    case ResultConstants.TX_ROLLBACK_AND_CHAIN :\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "432",
               "end_line": "441",
               "source_code": "                        break;\n\n                    case ResultConstants.TX_COMMIT :\n                    case ResultConstants.TX_ROLLBACK :\n                    case ResultConstants.TX_COMMIT_AND_CHAIN :\n                    case ResultConstants.TX_ROLLBACK_AND_CHAIN :\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");"
           }

       },

       {
           "id": "clone_279",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLDisk.java",
               "start_line": "235",
               "end_line": "242",
               "source_code": "                break;\n\n            case RowAction.ACTION_INSERT :\n                database.logger.writeInsertStatement(session, row,\n                                                     (Table) table);\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :"
           },

           "clone": {
               "file": "RowStoreAVLMemory.java",
               "start_line": "142",
               "end_line": "149",
               "source_code": "                break;\n\n            case RowAction.ACTION_INSERT :\n                database.logger.writeInsertStatement(session, row,\n                                                     (Table) table);\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :"
           }

       },

       {
           "id": "clone_280",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "974",
               "end_line": "999",
               "source_code": "        String       all   = txtCommand.getText();\n        StringBuffer b     = new StringBuffer();\n        long         total = 0;\n\n        for (int i = 0; i < all.length(); i++) {\n            char c = all.charAt(i);\n\n            if (c != '\n') {\n                b.append(c);\n            }\n        }\n\n        all = b.toString();\n\n        String[] g = new String[4];\n\n        g[0] = \"ms\";\n        g[1] = \"count\";\n        g[2] = \"sql\";\n        g[3] = \"error\";\n\n        gResult.setHead(g);\n\n        int max = 1;\n\n        lTime = System.currentTimeMillis() - lTime;"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1797",
               "end_line": "1822",
               "source_code": "        String       all   = txtCommand.getText();\n        StringBuffer b     = new StringBuffer();\n        long         total = 0;\n\n        for (int i = 0; i < all.length(); i++) {\n            char c = all.charAt(i);\n\n            if (c != '\n') {\n                b.append(c);\n            }\n        }\n\n        all = b.toString();\n\n        String[] g = new String[4];\n\n        g[0] = \"ms\";\n        g[1] = \"count\";\n        g[2] = \"sql\";\n        g[3] = \"error\";\n\n        gResult.setHead(g);\n\n        int max = 1;\n\n        lTime = System.currentTimeMillis() - lTime;"
           }

       },

       {
           "id": "clone_281",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "726",
               "end_line": "769",
               "source_code": "                    boolean wasEscape   = false;\n                    int     escapeCount = 0;\n                    int     i           = 0;\n                    int     j           = 0;\n\n                    for (; i < array.length; i++) {\n                        if (array[i] == escapeChar) {\n                            if (wasEscape) {\n                                escapeCount++;\n\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n\n                                continue;\n                            }\n\n                            wasEscape = true;\n\n                            if (i == array.length - 1) {\n                                throw Error.error(ErrorCode.X_22025);\n                            }\n\n                            continue;\n                        }\n\n                        if (array[i] == '_' || array[i] == '%') {\n                            if (wasEscape) {\n                                escapeCount++;\n\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n\n                                continue;\n                            }\n\n                            break;\n                        }\n\n                        if (wasEscape) {\n                            throw Error.error(ErrorCode.X_22025);\n                        }\n\n                        newArray[j++] = array[i];\n                    }"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "648",
               "end_line": "691",
               "source_code": "                    boolean wasEscape   = false;\n                    int     escapeCount = 0;\n                    int     i           = 0;\n                    int     j           = 0;\n\n                    for (; i < array.length; i++) {\n                        if (array[i] == escapeChar) {\n                            if (wasEscape) {\n                                escapeCount++;\n\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n\n                                continue;\n                            }\n\n                            wasEscape = true;\n\n                            if (i == array.length - 1) {\n                                throw Error.error(ErrorCode.X_22025);\n                            }\n\n                            continue;\n                        }\n\n                        if (array[i] == '_' || array[i] == '%') {\n                            if (wasEscape) {\n                                escapeCount++;\n\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n\n                                continue;\n                            }\n\n                            break;\n                        }\n\n                        if (wasEscape) {\n                            throw Error.error(ErrorCode.X_22025);\n                        }\n\n                        newArray[j++] = array[i];\n                    }"
           }

       },

       {
           "id": "clone_282",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCClobFile.java",
               "start_line": "643",
               "end_line": "699",
               "source_code": "    /**\n     * This method frees the <code>Clob</code> object and releases the resources the resources\n     * that it holds.  The object is invalid once the <code>free</code> method\n     * is called.\n     * <p>\n     * After <code>free</code> has been called, any attempt to invoke a\n     * method other than <code>free</code> will result in a <code>SQLException</code>\n     * being thrown.  If <code>free</code> is called multiple times, the subsequent\n     * calls to <code>free</code> are treated as a no-op.\n     * <p>\n     * @throws SQLException if an error occurs releasing\n     * the Clob's resources\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since JDK 1.4\n     */\n    public synchronized void free() throws SQLException {\n\n        if (m_closed) {\n            return;\n        }\n\n        m_closed = true;\n\n        final List streams = new ArrayList();\n\n        streams.addAll(m_streams);\n\n        m_streams = null;\n\n        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {\n            final Object stream = itr.next();\n\n            if (stream instanceof InputStream) {\n                try {\n                    ((InputStream) stream).close();\n                } catch (Exception ex) {\n\n                    //\n                }\n            } else if (stream instanceof OutputStream) {\n                try {\n                    ((OutputStream) stream).close();\n                } catch (Exception ex) {\n\n                    //\n                }\n            }\n        }\n\n        if (m_deleteOnFree) {\n            try {\n                m_file.delete();\n            } catch (Exception e) {}\n        }\n    }"
           },

           "clone": {
               "file": "JDBCBlobFile.java",
               "start_line": "516",
               "end_line": "588",
               "source_code": "    /**\n     * This method frees the <code>Blob</code> object and releases the resources that\n     * it holds. The object is invalid once the <code>free</code>\n     * method is called.\n     * <p>\n     * After <code>free</code> has been called, any attempt to invoke a\n     * method other than <code>free</code> will result in a <code>SQLException</code>\n     * being thrown.  If <code>free</code> is called multiple times, the subsequent\n     * calls to <code>free</code> are treated as a no-op.\n     * <p>\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * This operation closes any input and/or output streams obtained\n     * via {@link #getBinaryStream()}, {@link #getBinaryStream(long, long)} or\n     * {@link #setBinaryStream(long)}. <p>\n     *\n     * Additionally, if the property {@link #isDeleteOnFree()} is true, then\n     * an attempt is made to delete the backing file.\n     *\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @throws SQLException if an error occurs releasing\n     * the Blob's resources\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setDeleteOnFree(boolean)\n     * @see #isDeleteOnFree()\n     * @since JDK 1.6\n     */\n    public synchronized void free() throws SQLException {\n\n        if (m_closed) {\n            return;\n        }\n\n        m_closed = true;\n\n        final List streams = new ArrayList();\n\n        streams.addAll(m_streams);\n\n        m_streams = null;\n\n        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {\n            final Object stream = itr.next();\n\n            if (stream instanceof InputStream) {\n                try {\n                    ((InputStream) stream).close();\n                } catch (Exception ex) {\n\n                    //\n                }\n            } else if (stream instanceof OutputStream) {\n                try {\n                    ((OutputStream) stream).close();\n                } catch (Exception ex) {\n\n                    //\n                }\n            }\n        }\n\n        if (m_deleteOnFree) {\n            try {\n                m_file.delete();\n            } catch (Exception e) {}\n        }\n    }"
           }

       },

       {
           "id": "clone_283",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "709",
               "end_line": "727",
               "source_code": "            case StatementTypes.DROP_ASSERTION :\n            case StatementTypes.DROP_CHARACTER_SET :\n            case StatementTypes.DROP_COLLATION :\n            case StatementTypes.DROP_TYPE :\n            case StatementTypes.DROP_DOMAIN :\n            case StatementTypes.DROP_ROLE :\n            case StatementTypes.DROP_USER :\n            case StatementTypes.DROP_ROUTINE :\n            case StatementTypes.DROP_SCHEMA :\n            case StatementTypes.DROP_SEQUENCE :\n            case StatementTypes.DROP_TABLE :\n            case StatementTypes.DROP_TRANSFORM :\n            case StatementTypes.DROP_TRANSLATION :\n            case StatementTypes.DROP_TRIGGER :\n            case StatementTypes.DROP_CAST :\n            case StatementTypes.DROP_ORDERING :\n            case StatementTypes.DROP_VIEW :\n            case StatementTypes.DROP_INDEX :\n            case StatementTypes.DROP_CONSTRAINT :"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "112",
               "end_line": "130",
               "source_code": "            case StatementTypes.DROP_ASSERTION :\n            case StatementTypes.DROP_CHARACTER_SET :\n            case StatementTypes.DROP_COLLATION :\n            case StatementTypes.DROP_TYPE :\n            case StatementTypes.DROP_DOMAIN :\n            case StatementTypes.DROP_ROLE :\n            case StatementTypes.DROP_USER :\n            case StatementTypes.DROP_ROUTINE :\n            case StatementTypes.DROP_SCHEMA :\n            case StatementTypes.DROP_SEQUENCE :\n            case StatementTypes.DROP_TABLE :\n            case StatementTypes.DROP_TRANSFORM :\n            case StatementTypes.DROP_TRANSLATION :\n            case StatementTypes.DROP_TRIGGER :\n            case StatementTypes.DROP_CAST :\n            case StatementTypes.DROP_ORDERING :\n            case StatementTypes.DROP_VIEW :\n            case StatementTypes.DROP_INDEX :\n            case StatementTypes.DROP_CONSTRAINT :"
           }

       },

       {
           "id": "clone_284",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "276",
               "end_line": "283",
               "source_code": "            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "64",
               "end_line": "71",
               "source_code": "            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :"
           }

       },

       {
           "id": "clone_285",

           "clone_type": "type-1",

           "origin": {
               "file": "BitMap.java",
               "start_line": "557",
               "end_line": "574",
               "source_code": "        int shift     = pos & 0x07;\n        int mask      = (source & 0xff) >>> shift;\n        int innermask = 0xff >> shift;\n        int index     = pos / 8;\n\n        if (count < 8) {\n            innermask = innermask >>> (8 - count);\n            innermask = innermask << (8 - count);\n        }\n\n        mask      &= innermask;\n        innermask = ~innermask;\n\n        if (index >= map.length) {\n            return;\n        }\n\n        byte b = map[index];"
           },

           "clone": {
               "file": "BitMap.java",
               "start_line": "482",
               "end_line": "499",
               "source_code": "        int shift     = pos & 0x07;\n        int mask      = (source & 0xff) >>> shift;\n        int innermask = 0xff >> shift;\n        int index     = pos / 8;\n\n        if (count < 8) {\n            innermask = innermask >>> (8 - count);\n            innermask = innermask << (8 - count);\n        }\n\n        mask      &= innermask;\n        innermask = ~innermask;\n\n        if (index >= map.length) {\n            return;\n        }\n\n        byte b = map[index];"
           }

       },

       {
           "id": "clone_286",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCArrayBasic.java",
               "start_line": "512",
               "end_line": "529",
               "source_code": "        if (!JDBCClobClient.isInLimits(data.length, position, count)) {\n            throw JDBCUtil.outOfRangeArgument();\n        }\n\n        Type[] types = new Type[2];\n\n        types[0] = Type.SQL_INTEGER;\n        types[1] = elementType;\n\n        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);\n\n        meta.columnLabels = new String[] {\n            \"C1\", \"C2\"\n        };\n        meta.colIndexes   = new int[] {\n            -1, -1\n        };\n        meta.columns      = new ColumnBase[2];"
           },

           "clone": {
               "file": "JDBCArray.java",
               "start_line": "555",
               "end_line": "572",
               "source_code": "        if (!JDBCClobClient.isInLimits(data.length, position, count)) {\n            throw JDBCUtil.outOfRangeArgument();\n        }\n\n        Type[] types = new Type[2];\n\n        types[0] = Type.SQL_INTEGER;\n        types[1] = elementType;\n\n        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);\n\n        meta.columnLabels = new String[] {\n            \"C1\", \"C2\"\n        };\n        meta.colIndexes   = new int[] {\n            -1, -1\n        };\n        meta.columns      = new ColumnBase[2];"
           }

       },

       {
           "id": "clone_287",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5182",
               "end_line": "5191",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4724",
               "end_line": "4733",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);          // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);          // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);"
           }

       },

       {
           "id": "clone_288",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5349",
               "end_line": "5355",
               "source_code": "        final int jar_catalog      = 3;\n        final int jar_schema       = 4;\n        final int jar_name         = 5;\n\n        //\n        Iterator it;\n        Object[] row;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3933",
               "end_line": "3939",
               "source_code": "        final int jar_catalog      = 3;\n        final int jar_schema       = 4;\n        final int jar_name         = 5;\n\n        //\n        Iterator it;\n        Object[] row;"
           }

       },

       {
           "id": "clone_289",

           "clone_type": "type-1",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "327",
               "end_line": "340",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                return true;\n\n            default :\n                return false;"
           },

           "clone": {
               "file": "Types.java",
               "start_line": "697",
               "end_line": "710",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                return true;\n\n            default :\n                return false;"
           }

       },

       {
           "id": "clone_290",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "1225",
               "end_line": "1240",
               "source_code": "        if (token.tokenType == Tokens.ON) {\n            if (!table.isTemp()) {\n                throw unexpectedToken();\n            }\n\n            read();\n            readThis(Tokens.COMMIT);\n\n            if (token.tokenType == Tokens.DELETE) {}\n            else if (token.tokenType == Tokens.PRESERVE) {\n                table.persistenceScope = TableBase.SCOPE_SESSION;\n            }\n\n            read();\n            readThis(Tokens.ROWS);\n        }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "1059",
               "end_line": "1074",
               "source_code": "        if (token.tokenType == Tokens.ON) {\n            if (!table.isTemp()) {\n                throw unexpectedToken();\n            }\n\n            read();\n            readThis(Tokens.COMMIT);\n\n            if (token.tokenType == Tokens.DELETE) {}\n            else if (token.tokenType == Tokens.PRESERVE) {\n                table.persistenceScope = TableBase.SCOPE_SESSION;\n            }\n\n            read();\n            readThis(Tokens.ROWS);\n        }"
           }

       },

       {
           "id": "clone_291",

           "clone_type": "type-1",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "336",
               "end_line": "343",
               "source_code": "        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "257",
               "end_line": "264",
               "source_code": "        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();"
           }

       },

       {
           "id": "clone_292",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementResultUpdate.java",
               "start_line": "209",
               "end_line": "242",
               "source_code": "        switch (type) {\n\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n        }"
           },

           "clone": {
               "file": "StatementDMQL.java",
               "start_line": "437",
               "end_line": "470",
               "source_code": "        switch (type) {\n\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n        }"
           }

       },

       {
           "id": "clone_293",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "759",
               "end_line": "808",
               "source_code": "            ps.executeUpdate();\n\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n\n            rs.next();\n\n            int length = rs.getInt(1);\n\n            assertTrue(value.length() == length);\n            rs.close();\n\n            String dq3 = \"delete from clobtest;\";\n\n            statement.execute(dq3);\n\n            char[] testChars = new char[11111];\n\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n\n                testChars[i] = (char) j;\n            }\n\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n\n            String dq2 = \"select clobfield from clobtest;\";\n\n            rs = statement.executeQuery(dq2);\n\n            rs.next();\n\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "682",
               "end_line": "731",
               "source_code": "            ps.executeUpdate();\n\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n\n            rs.next();\n\n            int length = rs.getInt(1);\n\n            assertTrue(value.length() == length);\n            rs.close();\n\n            String dq3 = \"delete from clobtest;\";\n\n            statement.execute(dq3);\n\n            char[] testChars = new char[11111];\n\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n\n                testChars[i] = (char) j;\n            }\n\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n\n            String dq2 = \"select clobfield from clobtest;\";\n\n            rs = statement.executeQuery(dq2);\n\n            rs.next();\n\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }"
           }

       },

       {
           "id": "clone_294",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "116",
               "end_line": "120",
               "source_code": "            case OpTypes.CAST :\n                sb.append(' ').append(Tokens.T_CAST).append('(');\n                sb.append(left).append(' ').append(Tokens.T_AS).append(' ');\n                sb.append(dataType.getTypeDefinition());\n                sb.append(')');"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "212",
               "end_line": "216",
               "source_code": "            case OpTypes.CAST :\n                sb.append(' ').append(Tokens.T_CAST).append('(');\n                sb.append(left).append(' ').append(Tokens.T_AS).append(' ');\n                sb.append(dataType.getTypeDefinition());\n                sb.append(')');"
           }

       },

       {
           "id": "clone_295",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "790",
               "end_line": "796",
               "source_code": "            Object[] data    = getLobHeader(a.getId());\n            long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int[][] aAddresses = getBlockAddresses(a.getId(), 0,\n                                                   Integer.MAX_VALUE);\n            int aIndex  = 0;\n            int bOffset = 0;\n            int aOffset = 0;"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "695",
               "end_line": "701",
               "source_code": "            Object[] data    = getLobHeader(a.getId());\n            long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int[][] aAddresses = getBlockAddresses(a.getId(), 0,\n                                                   Integer.MAX_VALUE);\n            int aIndex  = 0;\n            int bOffset = 0;\n            int aOffset = 0;"
           }

       },

       {
           "id": "clone_296",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3985",
               "end_line": "3993",
               "source_code": "                rewind(position);\n\n                TableDerived td = XreadSubqueryTableBody(OpTypes.IN);\n\n                e = new Expression(OpTypes.TABLE_SUBQUERY, td);\n\n                readThis(Tokens.CLOSEBRACKET);\n\n                break;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3936",
               "end_line": "3943",
               "source_code": "                rewind(position);\n\n                TableDerived td = XreadSubqueryTableBody(OpTypes.IN);\n\n                e = new Expression(OpTypes.TABLE_SUBQUERY, td);\n\n                readThis(Tokens.CLOSEBRACKET);\n                break;"
           }

       },

       {
           "id": "clone_297",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "1717",
               "end_line": "1734",
               "source_code": "        checkSetParameterIndex(parameterIndex);\n\n        int i = parameterIndex - 1;\n\n        if (x == null) {\n            parameterValues[i] = null;\n            parameterSet[i]    = Boolean.TRUE;\n\n            return;\n        }\n\n        Type     outType    = parameterTypes[i];\n        long     millis     = x.getTime();\n        int      zoneOffset = 0;\n        Calendar calendar   = cal == null ? session.getCalendar()\n                : cal;\n\n        millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "1642",
               "end_line": "1659",
               "source_code": "        checkSetParameterIndex(parameterIndex);\n\n        int i = parameterIndex - 1;\n\n        if (x == null) {\n            parameterValues[i] = null;\n            parameterSet[i]    = Boolean.TRUE;\n\n            return;\n        }\n\n        Type     outType    = parameterTypes[i];\n        long     millis     = x.getTime();\n        int      zoneOffset = 0;\n        Calendar calendar   = cal == null ? session.getCalendar()\n                : cal;\n\n        millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);"
           }

       },

       {
           "id": "clone_298",

           "clone_type": "type-1",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "689",
               "end_line": "696",
               "source_code": "        moveData(table, tn, -1, 0);\n\n        table = tn;\n\n        database.schemaManager.addSchemaObject(constraint);\n        setNewTableInSchema(table);\n        updateConstraints(table, emptySet);\n        database.schemaManager.recompileDependentObjects(table);"
           },

           "clone": {
               "file": "TableWorks.java",
               "start_line": "664",
               "end_line": "671",
               "source_code": "        moveData(table, tn, -1, 0);\n\n        table = tn;\n\n        database.schemaManager.addSchemaObject(constraint);\n        setNewTableInSchema(table);\n        updateConstraints(table, emptySet);\n        database.schemaManager.recompileDependentObjects(table);"
           }

       },

       {
           "id": "clone_299",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "2241",
               "end_line": "2247",
               "source_code": "            case OpTypes.IN :\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "148",
               "end_line": "154",
               "source_code": "            case OpTypes.IN :\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :"
           }

       },

       {
           "id": "clone_300",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "591",
               "end_line": "601",
               "source_code": "            PreparedStatement ps = connection.prepareStatement(dml0);\n\n            connection.setAutoCommit(false);\n\n            //\n            JDBCClob dataClob =\n                new JDBCClob(\"the quick brown fox jumps on the lazy dog\");\n            Reader    reader = null;\n            StopWatch sw     = new StopWatch();\n\n            sw.start();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "518",
               "end_line": "528",
               "source_code": "            PreparedStatement ps = connection.prepareStatement(dml0);\n\n            connection.setAutoCommit(false);\n\n            //\n            JDBCClob dataClob =\n                new JDBCClob(\"the quick brown fox jumps on the lazy dog\");\n            Reader    reader = null;\n            StopWatch sw     = new StopWatch();\n\n            sw.start();"
           }

       },

       {
           "id": "clone_301",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5872",
               "end_line": "5918",
               "source_code": "        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;\n        final int declared_data_type                     = 82;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_302",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1277",
               "end_line": "1281",
               "source_code": "            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);             // NOT NULL\n            addColumn(t, \"NON_UNIQUE\", Type.SQL_BOOLEAN);           // NOT NULL\n            addColumn(t, \"INDEX_QUALIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"INDEX_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1044",
               "end_line": "1049",
               "source_code": "            // Note: some sessions may have a NULL LAST_IDENTITY value\n            addColumn(t, \"LAST_IDENTITY\", CARDINAL_NUMBER);\n            addColumn(t, \"SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRANSACTION\", Type.SQL_BOOLEAN);\n            addColumn(t, \"TRANSACTION_SIZE\", CARDINAL_NUMBER);\n            addColumn(t, \"WAITING_FOR_THIS\", CHARACTER_DATA);"
           }

       },

       {
           "id": "clone_303",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "680",
               "end_line": "706",
               "source_code": "            case Types.SQL_BLOB :\n            case Types.SQL_CHAR :\n            case Types.SQL_NCHAR :\n            case Types.SQL_CLOB :\n            case Types.NCLOB :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_VARCHAR :\n            case Types.SQL_NVARCHAR :\n            case Types.VARCHAR_IGNORECASE :\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_FLOAT :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "126",
               "end_line": "155",
               "source_code": "//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :\n            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :"
           }

       },

       {
           "id": "clone_304",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "5448",
               "end_line": "5454",
               "source_code": "                    case java.sql.Types.ARRAY :\n                        autonulls[i] = true;\n                        readFormat[i] = 'a';\n                        break;\n                    case java.sql.Types.VARCHAR :\n                    case java.sql.Types.BLOB :\n                    case java.sql.Types.CLOB :"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "5435",
               "end_line": "5441",
               "source_code": "                    case java.sql.Types.BIT :\n                        autonulls[i] = true;\n                        readFormat[i] = 'b';\n                        break;\n                    case java.sql.Types.LONGVARBINARY :\n                    case java.sql.Types.VARBINARY :\n                    case java.sql.Types.BINARY :"
           }

       },

       {
           "id": "clone_305",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "415",
               "end_line": "422",
               "source_code": "                break;\n\n            case Types.SQL_CLOB :\n            case Types.SQL_BLOB :\n                s += 8;\n                break;\n\n            case Types.SQL_ARRAY :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "334",
               "end_line": "341",
               "source_code": "                break;\n\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n                s += 2;\n                break;\n\n            case Types.SQL_INTEGER :"
           }

       },

       {
           "id": "clone_306",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5748",
               "end_line": "5794",
               "source_code": "            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_307",

           "clone_type": "type-2",

           "origin": {
               "file": "OdbcUtil.java",
               "start_line": "188",
               "end_line": "192",
               "source_code": "        odbcSeverityMap.put(ODBC_SEVERITY_FATAL, \"FATAL\");\n        odbcSeverityMap.put(ODBC_SEVERITY_ERROR, \"ERROR\");\n        odbcSeverityMap.put(ODBC_SEVERITY_PANIC, \"PANIC\");\n        odbcSeverityMap.put(ODBC_SEVERITY_WARNING, \"WARNING\");\n        odbcSeverityMap.put(ODBC_SEVERITY_NOTICE, \"NOTICE\");"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "821",
               "end_line": "828",
               "source_code": "        tipMap.put(boxAutoCommit,\n                   \"Shows current Auto-commit mode.  Click to change\");\n        tipMap.put(\n            boxLogging,\n            \"Shows current JDBC DriverManager logging mode.  Click to change\");\n        tipMap.put(boxShowSys, \"Show system tables in table tree to the left\");\n        tipMap.put(boxShowGrid, \"Show query results in grid (in text if off)\");\n        tipMap.put(boxRowCounts, \"Show row counts with table names in tree\");"
           }

       },

       {
           "id": "clone_308",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementCompound.java",
               "start_line": "84",
               "end_line": "88",
               "source_code": "            case StatementTypes.FOR :\n            case StatementTypes.LOOP :\n            case StatementTypes.WHILE :\n            case StatementTypes.REPEAT :\n                isLoop = true;"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "118",
               "end_line": "122",
               "source_code": "            case StatementTypes.SET_DATABASE_UNIQUE_NAME :\n            case StatementTypes.SET_DATABASE_FILES_WRITE_DELAY :\n            case StatementTypes.SET_DATABASE_FILES_TEMP_PATH :\n            case StatementTypes.SET_DATABASE_FILES_EVENT_LOG :\n                isTransactionStatement = false;"
           }

       },

       {
           "id": "clone_309",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCResultSetMetaData.java",
               "start_line": "1023",
               "end_line": "1031",
               "source_code": "            meta.isNullable           = isNullable(i);\n            meta.isReadOnly           = isReadOnly(i);\n            meta.isSearchable         = isSearchable(i);\n            meta.isSigned             = isSigned(i);\n            meta.isWritable           = isWritable(i);\n            meta.precision            = getPrecision(i);\n            meta.scale                = getScale(i);\n            meta.schemaName           = getSchemaName(i);\n            meta.tableName            = getTableName(i);"
           },

           "clone": {
               "file": "JDBCResultSetMetaData.java",
               "start_line": "1014",
               "end_line": "1022",
               "source_code": "            meta.columnClassName      = getColumnClassName(i);\n            meta.columnDisplaySize    = getColumnDisplaySize(i);\n            meta.columnLabel          = getColumnLabel(i);\n            meta.columnName           = getColumnName(i);\n            meta.columnType           = getColumnType(i);\n            meta.isAutoIncrement      = isAutoIncrement(i);\n            meta.isCaseSensitive      = isCaseSensitive(i);\n            meta.isCurrency           = isCurrency(i);\n            meta.isDefinitelyWritable = isDefinitelyWritable(i);"
           }

       },

       {
           "id": "clone_310",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAllTypes.java",
               "start_line": "168",
               "end_line": "177",
               "source_code": "            System.out.println(\"connected: \" + sw.elapsedTime());\n            sw.zero();\n\n            sStatement = cConnection.createStatement();\n\n            java.util.Random randomgen = new java.util.Random();\n\n            sStatement.execute(ddl1);\n            sStatement.execute(ddl2);\n            sStatement.execute(ddl3);"
           },

           "clone": {
               "file": "TestCacheSize.java",
               "start_line": "245",
               "end_line": "255",
               "source_code": "            System.out.println(\"connection time -- \" + sw.elapsedTime());\n            sw.zero();\n\n            sStatement = cConnection.createStatement();\n\n            java.util.Random randomgen = new java.util.Random();\n\n//            sStatement.execute(\"SET WRITE_DELAY \" + writeDelay);\n            sStatement.execute(ddl1);\n            sStatement.execute(ddl2);\n            sStatement.execute(ddl3);"
           }

       },

       {
           "id": "clone_311",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8311",
               "end_line": "8326",
               "source_code": "        // Column number mappings\n        final int view_catalog  = 0;\n        final int view_schema   = 1;\n        final int view_name     = 2;\n        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;\n\n        //\n        Iterator tables;\n        Table    table;\n        Object[] row;\n\n        // Initialization\n        tables =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1239",
               "end_line": "1254",
               "source_code": "        final int ivfs         = 7;\n        final int ilvfs        = 8;\n        final int iif          = 9;\n        final int iiq          = 10;\n        final int iiaq         = 11;\n        final int iid          = 12;\n\n        //\n        // intermediate holders\n        Iterator tables;\n        Table    table;\n        Object[] row;\n\n        // Initialization\n        tables =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);"
           }

       },

       {
           "id": "clone_312",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1347",
               "end_line": "1377",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n                endType = Types.SQL_INTERVAL_DAY;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;"
           },

           "clone": {
               "file": "ParserBase.java",
               "start_line": "251",
               "end_line": "281",
               "source_code": "                case Tokens.X_MALFORMED_BINARY_STRING :\n                    errorCode = ErrorCode.X_42587;\n                    break;\n\n                case Tokens.X_MALFORMED_BIT_STRING :\n                    errorCode = ErrorCode.X_42588;\n                    break;\n\n                case Tokens.X_MALFORMED_UNICODE_STRING :\n                    errorCode = ErrorCode.X_42586;\n                    break;\n\n                case Tokens.X_MALFORMED_STRING :\n                    errorCode = ErrorCode.X_42584;\n                    break;\n\n                case Tokens.X_UNKNOWN_TOKEN :\n                    errorCode = ErrorCode.X_42582;\n                    break;\n\n                case Tokens.X_MALFORMED_NUMERIC :\n                    errorCode = ErrorCode.X_42585;\n                    break;\n\n                case Tokens.X_MALFORMED_COMMENT :\n                    errorCode = ErrorCode.X_42589;\n                    break;\n\n                case Tokens.X_MALFORMED_IDENTIFIER :\n                    errorCode = ErrorCode.X_42583;\n                    break;"
           }

       },

       {
           "id": "clone_313",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "771",
               "end_line": "779",
               "source_code": "            case Types.SQL_BIGINT :\n                return a;\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return a;\n\n            case Types.SQL_NUMERIC :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "842",
               "end_line": "850",
               "source_code": "            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_FLOAT :\n            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :"
           }

       },

       {
           "id": "clone_314",

           "clone_type": "type-2",

           "origin": {
               "file": "TestQuotes.java",
               "start_line": "104",
               "end_line": "111",
               "source_code": "            pStatement.setString(1, QUOTES);\n            pStatement.executeUpdate();\n\n            rs2 = statement.executeQuery(RESULT);\n\n            rs2.next();\n\n            String result2 = rs2.getString(1);"
           },

           "clone": {
               "file": "TestQuotes.java",
               "start_line": "92",
               "end_line": "99",
               "source_code": "            pStatement.setString(1, NOQUOTES);\n            pStatement.executeUpdate();\n\n            rs1 = statement.executeQuery(RESULT);\n\n            rs1.next();\n\n            String result1 = rs1.getString(1);"
           }

       },

       {
           "id": "clone_315",

           "clone_type": "type-2",

           "origin": {
               "file": "TestStressInsert.java",
               "start_line": "172",
               "end_line": "193",
               "source_code": "    private void stressInsertB() throws Exception {\n\n        long t1 = System.currentTimeMillis();\n        long t2 = System.currentTimeMillis();\n\n        System.out.println(\"done \" + (t2 - t1));\n\n        for (int i = 0; i < MAX_SIZE; i++) {\n            insertB(getRandomBytes(16));\n\n            if (i % 100 == 0) {\n                long t3 = System.currentTimeMillis();\n\n                System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));\n\n                t2 = t3;\n            }\n        }\n\n        System.out.println(\"total inserted \" + MAX_SIZE + \" in \" + (t2 - t1));\n        shutdown();\n    }"
           },

           "clone": {
               "file": "TestStressInsert.java",
               "start_line": "149",
               "end_line": "170",
               "source_code": "    private void stressInsertA() throws Exception {\n\n        long t1 = System.currentTimeMillis();\n        long t2 = System.currentTimeMillis();\n\n        System.out.println(\"done \" + (t2 - t1));\n\n        for (int i = 0; i < MAX_SIZE; i++) {\n            insertA(getRandomBytes(16));\n\n            if (i % 100 == 0) {\n                long t3 = System.currentTimeMillis();\n\n                System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));\n\n                t2 = t3;\n            }\n        }\n\n        System.out.println(\"total inserted \" + MAX_SIZE + \" in \" + (t2 - t1));\n        shutdown();\n    }"
           }

       },

       {
           "id": "clone_316",

           "clone_type": "type-2",

           "origin": {
               "file": "Expression.java",
               "start_line": "225",
               "end_line": "240",
               "source_code": "            case OpTypes.ARRAY :\n                opType = OpTypes.ARRAY;\n                break;\n\n            case OpTypes.ARRAY_SUBQUERY :\n                opType = OpTypes.ARRAY_SUBQUERY;\n                break;\n\n            case OpTypes.TABLE_SUBQUERY :\n                opType = OpTypes.TABLE_SUBQUERY;\n                break;\n\n            case OpTypes.ROW_SUBQUERY :\n            case OpTypes.SCALAR_SUBQUERY :\n                opType = OpTypes.ROW_SUBQUERY;\n                break;"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "685",
               "end_line": "700",
               "source_code": "                case SchemaObject.COLLATION :\n                    set = schema.collationLookup;\n                    break;\n\n                case SchemaObject.PROCEDURE :\n                    set = schema.procedureLookup;\n                    break;\n\n                case SchemaObject.FUNCTION :\n                    set = schema.functionLookup;\n                    break;\n\n                case SchemaObject.DOMAIN :\n                case SchemaObject.TYPE :\n                    set = schema.typeLookup;\n                    break;"
           }

       },

       {
           "id": "clone_317",

           "clone_type": "type-2",

           "origin": {
               "file": "RAShadowFile.java",
               "start_line": "69",
               "end_line": "73",
               "source_code": "        this.database = database;\n        this.pathName = pathName;\n        this.source   = source;\n        this.pageSize = pageSize;\n        this.maxSize  = maxSize;"
           },

           "clone": {
               "file": "ClientConnection.java",
               "start_line": "137",
               "end_line": "141",
               "source_code": "        this.path         = path;\n        this.database     = database;\n        this.isTLS        = isTLS;\n        this.isTLSWrapper = isTLSWrapper;\n        this.zoneSeconds  = timeZoneSeconds;"
           }

       },

       {
           "id": "clone_318",

           "clone_type": "type-2",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "156",
               "end_line": "164",
               "source_code": "        st = conn.createStatement();\n\n        st.execute(\"create memory table tmsingle (c1 int primary key)\");\n\n        st.execute(\"truncate table tident restart identity\");\n\n        st.execute(\"truncate table tsingle restart identity\");\n\n        ResultSet rs = st.executeQuery(\"select count(*) from tident\");"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "126",
               "end_line": "134",
               "source_code": "            statement = conn.createStatement();\n\n            statement.execute(\"create user testuser password 'test'\");\n            statement.execute(\"create table testtable(v varchar(20))\");\n            statement.execute(\n                \"insert into testtable values ('tennis'), ('tent'), ('television'), ('radio')\");\n\n            ResultSet rs = statement.executeQuery(\n                \"call \\\"org.hsqldb.test.TestStoredProcedure.funcTest2\\\"('test')\");"
           }

       },

       {
           "id": "clone_319",

           "clone_type": "type-2",

           "origin": {
               "file": "Type.java",
               "start_line": "981",
               "end_line": "1001",
               "source_code": "            case Types.SQL_BLOB :\n                return Types.BLOB;\n\n            case Types.SQL_CLOB :\n                return Types.CLOB;\n\n            case Types.SQL_BIGINT :\n                return Types.BIGINT;\n\n            case Types.SQL_BINARY :\n                return Types.BINARY;\n\n            case Types.SQL_VARBINARY :\n                return Types.VARBINARY;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n                return Types.BIT;\n\n            case Types.SQL_ARRAY :\n                return Types.ARRAY;"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "940",
               "end_line": "960",
               "source_code": "            case Types.BIGINT :\n                return Types.SQL_BIGINT;\n\n            case Types.LONGVARCHAR :\n                return Types.SQL_VARCHAR;\n\n            case Types.CLOB :\n                return Types.SQL_CLOB;\n\n            case Types.BINARY :\n                return Types.SQL_BINARY;\n\n            case Types.BIT :\n                return Types.SQL_BIT_VARYING;\n\n            case Types.VARBINARY :\n            case Types.LONGVARBINARY :\n                return Types.SQL_VARBINARY;\n\n            case Types.BLOB :\n                return Types.SQL_BLOB;"
           }

       },

       {
           "id": "clone_320",

           "clone_type": "type-2",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "64",
               "end_line": "74",
               "source_code": "    public void testSectionTwo() throws Exception {\n\n        TestUtil.deleteDatabase(\"/hsql/testtext/test\");\n        TestUtil.delete(\"/hsql/testtext/t.txt\");\n        TestUtil.delete(\"/hsql/testtext/tt.txt\");\n        TestUtil.delete(\"/hsql/testtext/tident.txt\");\n        TestUtil.delete(\"/hsql/testtext/tsingle.txt\");\n        initDatabase();\n        partB();\n        partD();\n    }"
           },

           "clone": {
               "file": "TestTextTables.java",
               "start_line": "52",
               "end_line": "62",
               "source_code": "    public void testSectionOne() throws Exception {\n\n        TestUtil.deleteDatabase(\"/hsql/testtext/test\");\n        TestUtil.delete(\"/hsql/testtext/t.txt\");\n        TestUtil.delete(\"/hsql/testtext/tt.txt\");\n        TestUtil.delete(\"/hsql/testtext/tident.txt\");\n        TestUtil.delete(\"/hsql/testtext/tsingle.txt\");\n        initDatabase();\n        partA();\n        partD();\n    }"
           }

       },

       {
           "id": "clone_321",

           "clone_type": "type-2",

           "origin": {
               "file": "RowAVLDiskLarge.java",
               "start_line": "72",
               "end_line": "86",
               "source_code": "        position    = in.getPos();\n        storageSize = in.getSize();\n\n        int indexcount = t.getIndexCount();\n\n        nPrimaryNode = new NodeAVLDiskLarge(this, in, 0);\n\n        NodeAVL n = nPrimaryNode;\n\n        for (int i = 1; i < indexcount; i++) {\n            n.nNext = new NodeAVLDiskLarge(this, in, i);\n            n       = n.nNext;\n        }\n\n        rowData = in.readData(table.getColumnTypes());"
           },

           "clone": {
               "file": "RowAVLDisk.java",
               "start_line": "149",
               "end_line": "163",
               "source_code": "        position    = in.getPos();\n        storageSize = in.getSize();\n\n        int indexcount = t.getIndexCount();\n\n        nPrimaryNode = new NodeAVLDisk(this, in, 0);\n\n        NodeAVL n = nPrimaryNode;\n\n        for (int i = 1; i < indexcount; i++) {\n            n.nNext = new NodeAVLDisk(this, in, i);\n            n       = n.nNext;\n        }\n\n        rowData = in.readData(table.getColumnTypes());"
           }

       },

       {
           "id": "clone_322",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "1207",
               "end_line": "1212",
               "source_code": "                break;\n\n            case ResultConstants.BATCHEXECRESPONSE :\n            case ResultConstants.BATCHEXECUTE :\n            case ResultConstants.BATCHEXECDIRECT :\n            case ResultConstants.SETSESSIONATTR :"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "1161",
               "end_line": "1166",
               "source_code": "                        break;\n\n                    case ResultConstants.TX_COMMIT :\n                    case ResultConstants.TX_ROLLBACK :\n                    case ResultConstants.TX_COMMIT_AND_CHAIN :\n                    case ResultConstants.TX_ROLLBACK_AND_CHAIN :"
           }

       },

       {
           "id": "clone_323",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2584",
               "end_line": "2602",
               "source_code": "            case Tokens.ISNULL : {\n                e = readIfNullExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.NVL2 : {\n                e = readIfNull2ExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CAST :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2556",
               "end_line": "2574",
               "source_code": "            case Tokens.CONCAT_WS : {\n                e = readConcatSeparatorExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CASEWHEN : {\n                e = readCaseWhenExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CASE :"
           }

       },

       {
           "id": "clone_324",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5863",
               "end_line": "5909",
               "source_code": "        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_325",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1532",
               "end_line": "1549",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ASSERTIONS]);\n\n            addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"IS_DEFERRABLE\", YES_OR_NO);\n            addColumn(t, \"INITIALLY_DEFERRED\", YES_OR_NO);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ASSERTIONS].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "803",
               "end_line": "823",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SYSTEM_PROPERTIES]);\n\n            addColumn(t, \"PROPERTY_SCOPE\", CHARACTER_DATA);\n            addColumn(t, \"PROPERTY_NAMESPACE\", CHARACTER_DATA);\n            addColumn(t, \"PROPERTY_NAME\", CHARACTER_DATA);\n            addColumn(t, \"PROPERTY_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"PROPERTY_CLASS\", CHARACTER_DATA);\n\n            // order PROPERTY_SCOPE, PROPERTY_NAMESPACE, PROPERTY_NAME\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_PROPERTIES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, true);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_326",

           "clone_type": "type-2",

           "origin": {
               "file": "Grantee.java",
               "start_line": "1162",
               "end_line": "1181",
               "source_code": "                        break;\n\n                    case SchemaObject.TYPE :\n                        Type type =\n                            (Type) granteeManager.database.schemaManager\n                                .findSchemaObject(hsqlname.name,\n                                                  hsqlname.schema.name,\n                                                  SchemaObject.DOMAIN);\n\n                        if (type != null) {\n                            sb.append(Tokens.T_GRANT).append(' ');\n                            sb.append(Tokens.T_USAGE);\n                            sb.append(' ').append(Tokens.T_ON).append(' ');\n                            sb.append(Tokens.T_TYPE).append(' ');\n                            sb.append(\n                                hsqlname.getSchemaQualifiedStatementName());\n                        }\n                        break;\n\n                    case SchemaObject.PROCEDURE :"
           },

           "clone": {
               "file": "Grantee.java",
               "start_line": "1127",
               "end_line": "1147",
               "source_code": "                        break;\n\n                    case SchemaObject.SEQUENCE :\n                        NumberSequence sequence =\n                            (NumberSequence) granteeManager.database\n                                .schemaManager\n                                .findSchemaObject(hsqlname.name,\n                                                  hsqlname.schema.name,\n                                                  SchemaObject.SEQUENCE);\n\n                        if (sequence != null) {\n                            sb.append(Tokens.T_GRANT).append(' ');\n                            sb.append(Tokens.T_USAGE);\n                            sb.append(' ').append(Tokens.T_ON).append(' ');\n                            sb.append(Tokens.T_SEQUENCE).append(' ');\n                            sb.append(\n                                hsqlname.getSchemaQualifiedStatementName());\n                        }\n                        break;\n\n                    case SchemaObject.DOMAIN :"
           }

       },

       {
           "id": "clone_327",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "477",
               "end_line": "488",
               "source_code": "            case Types.SQL_TIMESTAMP : {\n                TimestampData ts       = (TimestampData) a;\n                int           nanos    = ts.getNanos();\n                int           newNanos = scaleNanos(nanos);\n\n                if (newNanos == nanos) {\n                    return ts;\n                }\n\n                return new TimestampData(ts.getSeconds(), newNanos,\n                                         ts.getZone());\n            }"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "465",
               "end_line": "475",
               "source_code": "            case Types.SQL_TIME : {\n                TimeData ti       = (TimeData) a;\n                int      nanos    = ti.getNanos();\n                int      newNanos = scaleNanos(nanos);\n\n                if (newNanos == nanos) {\n                    return ti;\n                }\n\n                return new TimeData(ti.getSeconds(), newNanos, ti.getZone());\n            }"
           }

       },

       {
           "id": "clone_328",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDateTime.java",
               "start_line": "136",
               "end_line": "145",
               "source_code": "        deleteStatement = connection.prepareStatement(DELETE_DATE);\n\n        deleteStatement.setDate(1, insertDate);\n\n        iDeletedCount = deleteStatement.executeUpdate();\n\n        deleteStatement.close();\n        Assert.assertEquals(\n            \"Exactly one record with date data shoud have been deleted.\",\n            iDeletedCount, 1);"
           },

           "clone": {
               "file": "TestDateTime.java",
               "start_line": "99",
               "end_line": "108",
               "source_code": "        insertStatement = connection.prepareStatement(INSERT_DATE);\n\n        insertStatement.setDate(1, insertDate);\n\n        iUpdateCount = insertStatement.executeUpdate();\n\n        insertStatement.close();\n        Assert.assertEquals(\n            \"Exactly one record with date data shoud have been inserted.\",\n            iUpdateCount, 1);"
           }

       },

       {
           "id": "clone_329",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "4767",
               "end_line": "4795",
               "source_code": "                objectType = SchemaObject.TYPE;\n                break;\n\n            case Tokens.DOMAIN :\n                if (!isUsage && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();\n\n                objectType = SchemaObject.DOMAIN;\n                break;\n\n            case Tokens.SEQUENCE :\n                if (!isUsage && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();\n\n                objectType = SchemaObject.SEQUENCE;\n                break;\n\n            case Tokens.CHARACTER :\n                if (!isUsage && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "4737",
               "end_line": "4765",
               "source_code": "                objectType = SchemaObject.FUNCTION;\n                break;\n\n            case Tokens.PROCEDURE :\n                if (!isExec && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();\n\n                objectType = SchemaObject.PROCEDURE;\n                break;\n\n            case Tokens.ROUTINE :\n                if (!isExec && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();\n\n                objectType = SchemaObject.ROUTINE;\n                break;\n\n            case Tokens.TYPE :\n                if (!isUsage && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();"
           }

       },

       {
           "id": "clone_330",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCTypes.java",
               "start_line": "81",
               "end_line": "95",
               "source_code": "        hStringJDBCtypes.put(new Integer(java.sql.Types.NULL), \"NULL\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.NUMERIC), \"NUMERIC\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.OTHER), \"OTHER\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.REAL), \"REAL\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.SMALLINT),\n                             \"SMALLINT\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.TIME), \"TIME\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.TIMESTAMP),\n                             \"TIMESTAMP\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.TINYINT), \"TINYINT\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.VARBINARY),\n                             \"VARBINARY\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.VARCHAR), \"VARCHAR\");\n\n        hStringJDBCtypes.put(new Integer(java.sql.Types.BOOLEAN), \"BOOLEAN\");"
           },

           "clone": {
               "file": "JDBCTypes.java",
               "start_line": "67",
               "end_line": "80",
               "source_code": "        //\n        hStringJDBCtypes.put(new Integer(java.sql.Types.BIGINT), \"BIGINT\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.BINARY), \"BINARY\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.BIT), \"BIT\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.CHAR), \"CHAR\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.DATE), \"DATE\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.DECIMAL), \"DECIMAL\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.DOUBLE), \"DOUBLE\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.FLOAT), \"FLOAT\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.INTEGER), \"INTEGER\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.LONGVARBINARY),\n                             \"LONGVARBINARY\");\n        hStringJDBCtypes.put(new Integer(java.sql.Types.LONGVARCHAR),\n                             \"LONGVARCHAR\");"
           }

       },

       {
           "id": "clone_331",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1214",
               "end_line": "1228",
               "source_code": "                        value    = readIntegerObject();\n                        property = HsqlDatabaseProperties.sql_avg_scale;\n                        break;\n\n                    case Tokens.DOUBLE :\n                        read();\n                        readThis(Tokens.NAN);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_double_nan;\n                        break;\n\n                    case Tokens.LONGVAR :\n                        read();\n                        readThis(Tokens.IS);"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1198",
               "end_line": "1212",
               "source_code": "                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_unique_nulls;\n                        break;\n\n                    case Tokens.CONVERT :\n                        read();\n                        readThis(Tokens.TRUNCATE);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_convert_trunc;\n                        break;\n\n                    case Tokens.AVG :\n                        read();\n                        readThis(Tokens.SCALE);"
           }

       },

       {
           "id": "clone_332",

           "clone_type": "type-2",

           "origin": {
               "file": "PgType.java",
               "start_line": "149",
               "end_line": "160",
               "source_code": "            case Types.SQL_FLOAT:\n                // TODO:\n                // Improve the driver to make use of the Float precision\n                // return new PgType(hType, TYPE_FLOAT8, null, hType.precision);\n            case Types.SQL_DOUBLE:\n            case Types.SQL_REAL:\n                return doubleSingleton;\n\n            case Types.BOOLEAN:\n                return boolSingleton;\n\n            case Types.SQL_CHAR: // = CHARACTER"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "845",
               "end_line": "853",
               "source_code": "            case Types.SQL_FLOAT :\n            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :\n                return SQL_NUMERIC;\n\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_333",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "1383",
               "end_line": "1390",
               "source_code": "                    readThis(Tokens.JOIN);\n\n                    right = true;\n                    break;\n\n                case Tokens.FULL :\n                    read();\n                    readIfThis(Tokens.OUTER);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "1375",
               "end_line": "1382",
               "source_code": "                    readThis(Tokens.JOIN);\n\n                    left = true;\n                    break;\n\n                case Tokens.RIGHT :\n                    read();\n                    readIfThis(Tokens.OUTER);"
           }

       },

       {
           "id": "clone_334",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "566",
               "end_line": "570",
               "source_code": "        javaTypeNumbers.put(\"long\", Types.SQL_BIGINT);\n        javaTypeNumbers.put(\"java.lang.Long\", Types.SQL_BIGINT);\n        javaTypeNumbers.put(\"[B\", Types.SQL_BINARY);\n        javaTypeNumbers.put(\"java.lang.Object\", Types.OTHER);\n        javaTypeNumbers.put(\"java.lang.Void\", Types.SQL_ALL_TYPES);"
           },

           "clone": {
               "file": "Types.java",
               "start_line": "561",
               "end_line": "565",
               "source_code": "        javaTypeNumbers.put(\"java.lang.Boolean\", Types.SQL_BOOLEAN);\n        javaTypeNumbers.put(\"byte\", Types.TINYINT);\n        javaTypeNumbers.put(\"java.lang.Byte\", Types.TINYINT);\n        javaTypeNumbers.put(\"short\", Types.SQL_SMALLINT);\n        javaTypeNumbers.put(\"java.lang.Short\", Types.SQL_SMALLINT);"
           }

       },

       {
           "id": "clone_335",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5735",
               "end_line": "5781",
               "source_code": "            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_336",

           "clone_type": "type-2",

           "origin": {
               "file": "Type.java",
               "start_line": "889",
               "end_line": "929",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n                return SQL_INTERVAL_YEAR;\n\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n                return SQL_INTERVAL_YEAR_TO_MONTH;\n\n            case Types.SQL_INTERVAL_MONTH :\n                return SQL_INTERVAL_MONTH;\n\n            case Types.SQL_INTERVAL_DAY :\n                return SQL_INTERVAL_DAY;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return SQL_INTERVAL_DAY_TO_HOUR;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return SQL_INTERVAL_DAY_TO_MINUTE;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return SQL_INTERVAL_DAY_TO_SECOND;\n\n            case Types.SQL_INTERVAL_HOUR :\n                return SQL_INTERVAL_HOUR;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                return SQL_INTERVAL_HOUR_TO_MINUTE;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                return SQL_INTERVAL_HOUR_TO_SECOND;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                return SQL_INTERVAL_MINUTE;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                return SQL_INTERVAL_MINUTE_TO_SECOND;\n\n            case Types.SQL_INTERVAL_SECOND :\n                return SQL_INTERVAL_SECOND;\n\n            case Types.OTHER :\n                return OTHER;"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "847",
               "end_line": "887",
               "source_code": "            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :\n                return SQL_NUMERIC;\n\n            case Types.SQL_DECIMAL :\n                return SQL_DECIMAL;\n\n            case Types.SQL_BOOLEAN :\n                return SQL_BOOLEAN;\n\n            case Types.SQL_BINARY :\n                return SQL_BINARY_DEFAULT;\n\n            case Types.SQL_VARBINARY :\n                return SQL_VARBINARY_DEFAULT;\n\n            case Types.SQL_BLOB :\n                return SQL_BLOB;\n\n            case Types.SQL_BIT :\n                return SQL_BIT;\n\n            case Types.SQL_BIT_VARYING :\n                return SQL_BIT_VARYING;\n\n            case Types.SQL_DATE :\n                return SQL_DATE;\n\n            case Types.SQL_TIME :\n                return SQL_TIME;\n\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                return SQL_TIME_WITH_TIME_ZONE;\n\n            case Types.SQL_TIMESTAMP :\n                return SQL_TIMESTAMP;\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                return SQL_TIMESTAMP_WITH_TIME_ZONE;"
           }

       },

       {
           "id": "clone_337",

           "clone_type": "type-2",

           "origin": {
               "file": "OdbcUtil.java",
               "start_line": "189",
               "end_line": "193",
               "source_code": "        odbcSeverityMap.put(ODBC_SEVERITY_ERROR, \"ERROR\");\n        odbcSeverityMap.put(ODBC_SEVERITY_PANIC, \"PANIC\");\n        odbcSeverityMap.put(ODBC_SEVERITY_WARNING, \"WARNING\");\n        odbcSeverityMap.put(ODBC_SEVERITY_NOTICE, \"NOTICE\");\n        odbcSeverityMap.put(ODBC_SEVERITY_DEBUG, \"DEBUG\");"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "821",
               "end_line": "828",
               "source_code": "        tipMap.put(boxAutoCommit,\n                   \"Shows current Auto-commit mode.  Click to change\");\n        tipMap.put(\n            boxLogging,\n            \"Shows current JDBC DriverManager logging mode.  Click to change\");\n        tipMap.put(boxShowSys, \"Show system tables in table tree to the left\");\n        tipMap.put(boxShowGrid, \"Show query results in grid (in text if off)\");\n        tipMap.put(boxRowCounts, \"Show row counts with table names in tree\");"
           }

       },

       {
           "id": "clone_338",

           "clone_type": "type-2",

           "origin": {
               "file": "PostgresTransferHelper.java",
               "start_line": "116",
               "end_line": "152",
               "source_code": "    String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,\n                               String columnType, ResultSet columnDesc,\n                               int columnIndex) throws SQLException {\n\n        if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n\n            t.Stmts.sDestDrop += DropSequence;\n        }\n\n        for (int Idx = 0; Idx < Funcs.length; Idx++) {\n            String HSQLDB_func = Funcs[Idx][HSQLDB];\n            int    iStartPos   = columnType.indexOf(HSQLDB_func);\n\n            if (iStartPos >= 0) {\n                String NewColumnType = columnType.substring(0, iStartPos);\n\n                NewColumnType += Funcs[Idx][PostgreSQL];\n                NewColumnType += columnType.substring(iStartPos\n                                                      + HSQLDB_func.length());\n                columnType = NewColumnType;\n            }\n        }\n\n        return (columnType);\n    }"
           },

           "clone": {
               "file": "OracleTransferHelper.java",
               "start_line": "94",
               "end_line": "130",
               "source_code": "    String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,\n                               String columnType, ResultSet columnDesc,\n                               int columnIndex) throws SQLException {\n\n        if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n\n            t.Stmts.sDestDrop += DropSequence;\n        }\n\n        for (int Idx = 0; Idx < Funcs.length; Idx++) {\n            String HSQLDB_func = Funcs[Idx][HSQLDB];\n            int    iStartPos   = columnType.indexOf(HSQLDB_func);\n\n            if (iStartPos >= 0) {\n                String NewColumnType = columnType.substring(0, iStartPos);\n\n                NewColumnType += Funcs[Idx][ORACLE];\n                NewColumnType += columnType.substring(iStartPos\n                                                      + HSQLDB_func.length());\n                columnType = NewColumnType;\n            }\n        }\n\n        return (columnType);\n    }"
           }

       },

       {
           "id": "clone_339",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionColumn.java",
               "start_line": "461",
               "end_line": "476",
               "source_code": "                        } else if (Tokens.T_NEXTVAL.equals(columnName)) {\n                            NumberSequence seq =\n                                session.database.schemaManager.getSequence(\n                                    tableName, session.getSchemaName(schema),\n                                    false);\n\n                            if (seq != null) {\n                                opType     = OpTypes.SEQUENCE;\n                                dataType   = seq.getDataType();\n                                sequence   = seq;\n                                schema     = null;\n                                tableName  = null;\n                                columnName = null;\n                                resolved   = true;\n                            }\n                        }"
           },

           "clone": {
               "file": "ExpressionColumn.java",
               "start_line": "446",
               "end_line": "461",
               "source_code": "                                || Tokens.T_PREVVAL.equals(columnName)) {\n                            NumberSequence seq =\n                                session.database.schemaManager.getSequence(\n                                    tableName, session.getSchemaName(schema),\n                                    false);\n\n                            if (seq != null) {\n                                opType     = OpTypes.SEQUENCE_CURRENT;\n                                dataType   = seq.getDataType();\n                                sequence   = seq;\n                                schema     = null;\n                                tableName  = null;\n                                columnName = null;\n                                resolved   = true;\n                            }\n                        }"
           }

       },

       {
           "id": "clone_340",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "482",
               "end_line": "488",
               "source_code": "                break;\n\n            case ResultConstants.EXECUTE :\n                result.updateCount  = in.readInt();\n                result.fetchSize    = in.readInt();\n                result.statementID  = in.readLong();\n                result.rsProperties = in.readByte();"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "472",
               "end_line": "478",
               "source_code": "                break;\n\n            case ResultConstants.CALL_RESPONSE :\n                result.updateCount         = in.readInt();\n                result.fetchSize           = in.readInt();\n                result.statementID         = in.readLong();\n                result.statementReturnType = in.readByte();"
           }

       },

       {
           "id": "clone_341",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "267",
               "end_line": "277",
               "source_code": "  private static int zzUnpackAttribute(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "118",
               "end_line": "128",
               "source_code": "  private static int zzUnpackAction(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"
           }

       },

       {
           "id": "clone_342",

           "clone_type": "type-2",

           "origin": {
               "file": "TableDerived.java",
               "start_line": "74",
               "end_line": "83",
               "source_code": "            // for special use, not INFORMATION_SCHEMA views\n            case TableBase.CHANGE_SET_TABLE :\n            case TableBase.SYSTEM_TABLE :\n            case TableBase.FUNCTION_TABLE :\n            case TableBase.VIEW_TABLE :\n            case TableBase.RESULT_TABLE :\n            case TableBase.SYSTEM_SUBQUERY :\n                break;\n\n            default :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "519",
               "end_line": "527",
               "source_code": "            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_343",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "906",
               "end_line": "910",
               "source_code": "            assertTrue(\"Got no rows with ti = 200\", rs.next());\n            assertEquals(Integer.class, rs.getObject(\"ti\").getClass());\n            assertTrue(\"Got only one row with ti = 200\", rs.next());\n            assertEquals((byte) 200, rs.getByte(\"ti\"));\n            assertFalse(\"Got too many rows with ti = 200\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "178",
               "end_line": "183",
               "source_code": "            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(Integer.class, rs.getObject(\"ti\").getClass());\n            // Nb. HyperSQL purposefully returns an Integer for this type\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals((byte) 3, rs.getByte(\"ti\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());"
           }

       },

       {
           "id": "clone_344",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5747",
               "end_line": "5793",
               "source_code": "            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_345",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "751",
               "end_line": "766",
               "source_code": "        execSQL(\"ALTER \" + pref\n                + \"TABLE bigtbl ALTER COLUMN i105 RENAME TO j2\", expect);\n        execSQL(\"ALTER TABLE bigtbl \" + pref\n                + \"ALTER COLUMN i106 RENAME TO j3\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER \" + pref\n                + \"COLUMN i107 RENAME TO j4\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER COLUMN i108 \" + pref\n                + \"RENAME TO j5\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER COLUMN i109 RENAME \" + pref\n                + \"TO j6\", expect);\n        execSQL(\n            pref\n            + \"ALTER TABLE constrainedtbl ADD CONSTRAINT con2 CHECK (i6 > 4)\", expect);\n        execSQL(\n            \"ALTER \" + pref\n            + \"TABLE constrainedtbl ADD CONSTRAINT con3 CHECK (i6 > 4)\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "582",
               "end_line": "592",
               "source_code": "        execSQL(\"SET TABLE texttbl SOURCE \" + pref + \"\\\"test.csv;fs=|\\\"\",\n                expect);\n        execSQL(\"UPDATE tsttbl SET vc = \" + pref + \"'eleven' WHERE i = 1\",\n                expect);\n        execSQL(\"UPDATE tsttbl SET vc = 'eleven' WHERE i = \" + pref + \"1\",\n                expect);\n        execSQL(\"ALTER SEQUENCE tstseq RESTART WITH \" + pref + \"13\", expect);\n        execSQL(\"ALTER TABLE constrainedtbl ADD CONSTRAINT con1 CHECK (i6 > \"\n                + pref + \"4)\", expect);\n        execSQL(pref + \"INSERT INTO tsttbl VALUES (1, 'one')\", expect);\n        execSQL(\"INSERT \" + pref + \"INTO tsttbl VALUES (1, 'one')\", expect);"
           }

       },

       {
           "id": "clone_346",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1846",
               "end_line": "1861",
               "source_code": "    private Result createFullBlockAddresses(long lobID, int offset,\n            int count) {\n\n        ResultMetaData meta = createSingleLobPartCall.getParametersMetaData();\n        Object         params[] = new Object[meta.getColumnCount()];\n\n        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);\n        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);\n        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);\n\n        Result result =\n            sysLobSession.executeCompiledStatement(createSingleLobPartCall,\n                params, 0);\n\n        return result;\n    }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "1830",
               "end_line": "1844",
               "source_code": "    private Result createBlockAddresses(long lobID, int offset, int count) {\n\n        ResultMetaData meta     = createLobPartCall.getParametersMetaData();\n        Object         params[] = new Object[meta.getColumnCount()];\n\n        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);\n        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);\n        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);\n\n        Result result =\n            sysLobSession.executeCompiledStatement(createLobPartCall, params,\n                0);\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_347",

           "clone_type": "type-2",

           "origin": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "213",
               "end_line": "232",
               "source_code": "    NodeAVL getParent(PersistentStore store) {\n\n        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (node.iParent == NO_POS) {\n            return null;\n        }\n\n        if (node.nParent == null || !node.nParent.isInMemory()) {\n            node.nParent = findNode(store, iParent);\n        }\n\n        return node.nParent;\n    }"
           },

           "clone": {
               "file": "NodeAVLDisk.java",
               "start_line": "257",
               "end_line": "276",
               "source_code": "    NodeAVL getParent(PersistentStore store) {\n\n        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (node.iParent == NO_POS) {\n            return null;\n        }\n\n        if (node.nParent == null || !node.nParent.isInMemory()) {\n            node.nParent = findNode(store, iParent);\n        }\n\n        return node.nParent;\n    }"
           }

       },

       {
           "id": "clone_348",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqldbTestCase.java",
               "start_line": "106",
               "end_line": "116",
               "source_code": "            String createQuery =\n                \"drop table test1 if exists;create table test1 (rowNum identity, col1 varchar(50), col2 int, col3 varchar(50))\";\n            Statement st = con.createStatement();\n\n            st.execute(createQuery);\n            st.close();\n\n            //we try to insert values in batch\n            String insertQuery =\n                \"insert into test1 (col1,col2,col3) values (?,?,?)\";\n            PreparedStatement pst = con.prepareStatement(insertQuery);"
           },

           "clone": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "181",
               "end_line": "187",
               "source_code": "            String createSQL =\n                \"create table test (num INTEGER PRIMARY KEY, str VARCHAR(25))\";\n            Statement createStmt = c.createStatement();\n            createStmt.execute(createSQL);\n            createStmt.close();\n            String ins = \"insert into test (num,str) values (?,?)\";\n            PreparedStatement pStmt = c.prepareStatement(ins);"
           }

       },

       {
           "id": "clone_349",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5860",
               "end_line": "5906",
               "source_code": "        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_350",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "325",
               "end_line": "352",
               "source_code": "    public void testDoubleSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(Double.class, rs.getObject(\"r\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(9.7D, rs.getDouble(\"r\"), 0D);\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "296",
               "end_line": "323",
               "source_code": "    public void testFloatSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(Double.class, rs.getObject(\"f\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(8.9D, rs.getDouble(\"f\"), 0D);\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_351",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "1101",
               "end_line": "1106",
               "source_code": "            case ResultConstants.FREESTMT :\n                rowOut.writeLong(statementID);\n                break;\n\n            case ResultConstants.CLOSE_RESULT :\n                rowOut.writeLong(id);"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "518",
               "end_line": "523",
               "source_code": "            case LobResultTypes.REQUEST_TRUNCATE :\n                dataOut.writeLong(blockOffset);\n                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTES :\n                dataOut.writeLong(blockOffset);"
           }

       },

       {
           "id": "clone_352",

           "clone_type": "type-2",

           "origin": {
               "file": "IntValueHashMap.java",
               "start_line": "92",
               "end_line": "108",
               "source_code": "    public boolean get(Object key, int[] value) {\n\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n\n        int hash   = key.hashCode();\n        int lookup = getLookup(key, hash);\n\n        if (lookup != -1) {\n            value[0] = intValueTable[lookup];\n\n            return true;\n        }\n\n        return false;\n    }"
           },

           "clone": {
               "file": "LongValueHashMap.java",
               "start_line": "91",
               "end_line": "107",
               "source_code": "    public boolean get(Object key, long[] value) {\n\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n\n        int hash   = key.hashCode();\n        int lookup = getLookup(key, hash);\n\n        if (lookup != -1) {\n            value[0] = longValueTable[lookup];\n\n            return true;\n        }\n\n        return false;\n    }"
           }

       },

       {
           "id": "clone_353",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3396",
               "end_line": "3410",
               "source_code": "            case Tokens.CURRENT_DATE :\n            case Tokens.CURRENT_TIME :\n            case Tokens.CURRENT_TIMESTAMP :\n            case Tokens.LOCALTIME :\n            case Tokens.LOCALTIMESTAMP :\n\n            //\n            case Tokens.ABS :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);\n\n                if (function == null) {\n                    throw super.unexpectedToken();\n                }"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3233",
               "end_line": "3245",
               "source_code": "            case Tokens.POWER :\n            case Tokens.SQRT :\n            case Tokens.FLOOR :\n            case Tokens.CEILING :\n            case Tokens.CEIL :\n            case Tokens.WIDTH_BUCKET :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);\n\n                if (function == null) {\n                    throw super.unexpectedToken();\n                }"
           }

       },

       {
           "id": "clone_354",

           "clone_type": "type-2",

           "origin": {
               "file": "TriggerDef.java",
               "start_line": "455",
               "end_line": "468",
               "source_code": "            case StatementTypes.INSERT :\n                triggerType = Trigger.INSERT_AFTER;\n                break;\n\n            case StatementTypes.DELETE_WHERE :\n                triggerType = Trigger.DELETE_AFTER;\n                break;\n\n            case StatementTypes.UPDATE_WHERE :\n                triggerType = Trigger.UPDATE_AFTER;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"TriggerDef\");"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1375",
               "end_line": "1388",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"IntervalType\");"
           }

       },

       {
           "id": "clone_355",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5861",
               "end_line": "5907",
               "source_code": "        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_356",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "60",
               "end_line": "64",
               "source_code": "        PreparedStatement pstmt;\n        ResultSet         rs;\n        String            sql;\n        int               expectedCount;\n        int               actualCount;"
           },

           "clone": {
               "file": "HsqlSocketFactorySecure.java",
               "start_line": "342",
               "end_line": "346",
               "source_code": "        PublicKey         publicKey;\n        String            DN;\n        String            CN;\n        int               start;\n        int               end;"
           }

       },

       {
           "id": "clone_357",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "563",
               "end_line": "593",
               "source_code": "            case FUNC_SPACE :\n            case FUNC_SYS_EXTRACT_UTC :\n            case FUNC_TAN :\n            case FUNC_TIMESTAMP_WITH_ZONE :\n            case FUNC_TO_DSINTERVAL :\n            case FUNC_TO_YMINTERVAL :\n            case FUNC_TO_NUMBER :\n                parseList = singleParamList;\n                break;\n\n            case FUNC_ADD_MONTHS :\n            case FUNC_ATAN2 :\n            case FUNC_CONCAT :\n            case FUNC_CRYPT_KEY :\n            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :\n            case FUNC_DIFFERENCE :\n            case FUNC_FROM_TZ :\n            case FUNC_LEFT :\n            case FUNC_MONTHS_BETWEEN :\n            case FUNC_NEXT_DAY :\n            case FUNC_NUMTODSINTERVAL :\n            case FUNC_NUMTOYMINTERVAL :\n            case FUNC_REGEXP_MATCHES :\n            case FUNC_REGEXP_SUBSTRING :\n            case FUNC_REGEXP_SUBSTRING_ARRAY :\n            case FUNC_REPEAT :\n            case FUNC_RIGHT :\n            case FUNC_TO_CHAR :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "532",
               "end_line": "562",
               "source_code": "            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_SESSION_TIMEZONE :\n            case FUNC_SESSIONTIMEZONE :\n            case FUNC_TIMEZONE :\n            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n                parseList = emptyParamList;\n                break;\n\n            case FUNC_ACOS :\n            case FUNC_ASCII :\n            case FUNC_ASIN :\n            case FUNC_ATAN :\n            case FUNC_BITNOT :\n            case FUNC_CHAR :\n            case FUNC_COS :\n            case FUNC_COT :\n            case FUNC_DEGREES :\n            case FUNC_DAYS :\n            case FUNC_HEXTORAW :\n            case FUNC_LAST_DAY :\n            case FUNC_LOB_ID :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_RAWTOHEX :\n            case FUNC_REVERSE :\n            case FUNC_ROUNDMAGIC :\n            case FUNC_SIGN :\n            case FUNC_SIN :\n            case FUNC_SOUNDEX :"
           }

       },

       {
           "id": "clone_358",

           "clone_type": "type-2",

           "origin": {
               "file": "CharacterType.java",
               "start_line": "310",
               "end_line": "324",
               "source_code": "            case Types.SQL_CHAR :\n                newType = this;\n                break;\n\n            case Types.SQL_VARCHAR :\n                newType = (typeCode == Types.SQL_CLOB) ? this\n                                                       : other;\n                break;\n\n            case Types.SQL_CLOB :\n                newType = other;\n                break;\n\n            default :\n                throw Error.error(ErrorCode.X_42562);"
           },

           "clone": {
               "file": "BinaryType.java",
               "start_line": "267",
               "end_line": "281",
               "source_code": "            case Types.SQL_BINARY :\n                newType = this;\n                break;\n\n            case Types.SQL_VARBINARY :\n                newType = (typeCode == Types.SQL_BLOB) ? this\n                                                       : other;\n                break;\n\n            case Types.SQL_BLOB :\n                newType = other;\n                break;\n\n            default :\n                throw Error.error(ErrorCode.X_42561);"
           }

       },

       {
           "id": "clone_359",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "254",
               "end_line": "259",
               "source_code": "                writeYearMonthInterval((IntervalMonthData) o, t);\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "248",
               "end_line": "253",
               "source_code": "                writeTimestamp((TimestampData) o, t);\n                break;\n\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :"
           }

       },

       {
           "id": "clone_360",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "585",
               "end_line": "591",
               "source_code": "            pstmt.close();\n            Conn.commit();\n\n            Query = \"INSERT INTO accounts(Aid,Bid,Abalance) VALUES (?,?,0)\";\n            pstmt = Conn.prepareStatement(Query);\n\n            System.out.println(\"Insert data in accounts table\");"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "566",
               "end_line": "572",
               "source_code": "            pstmt.close();\n            Conn.commit();\n\n            Query = \"INSERT INTO tellers(Tid,Bid,Tbalance) VALUES (?,?,0)\";\n            pstmt = Conn.prepareStatement(Query);\n\n            System.out.println(\"Insert data in tellers table\");"
           }

       },

       {
           "id": "clone_361",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "847",
               "end_line": "860",
               "source_code": "                read();\n\n                unionType = QueryExpression.INTERSECT;\n\n                if (token.tokenType == Tokens.ALL) {\n                    unionType = QueryExpression.INTERSECT_ALL;\n\n                    read();\n                } else if (token.tokenType == Tokens.DISTINCT) {\n                    read();\n                }\n                break;\n\n            case Tokens.EXCEPT :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "833",
               "end_line": "846",
               "source_code": "                read();\n\n                unionType = QueryExpression.UNION;\n\n                if (token.tokenType == Tokens.ALL) {\n                    unionType = QueryExpression.UNION_ALL;\n\n                    read();\n                } else if (token.tokenType == Tokens.DISTINCT) {\n                    read();\n                }\n                break;\n\n            case Tokens.INTERSECT :"
           }

       },

       {
           "id": "clone_362",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "812",
               "end_line": "824",
               "source_code": "                read();\n                readThis(Tokens.SCHEMA);\n\n                HsqlName schema;\n\n                if (token.tokenType == Tokens.DEFAULT) {\n                    schema = null;\n                } else {\n                    schema = database.schemaManager.getSchemaHsqlName(\n                        token.tokenString);\n                }\n\n                read();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "4391",
               "end_line": "4403",
               "source_code": "                read();\n                readThis(Tokens.SCHEMA);\n\n                HsqlName schemaName;\n\n                if (token.tokenType == Tokens.DEFAULT) {\n                    schemaName = null;\n                } else {\n                    schemaName = database.schemaManager.getSchemaHsqlName(\n                        token.tokenString);\n                }\n\n                read();"
           }

       },

       {
           "id": "clone_363",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "908",
               "end_line": "917",
               "source_code": "    public static Result newRequestDataResult(long id, int offset, int count) {\n\n        Result result = newResult(ResultConstants.REQUESTDATA);\n\n        result.id          = id;\n        result.updateCount = offset;\n        result.fetchSize   = count;\n\n        return result;\n    }"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "581",
               "end_line": "590",
               "source_code": "    public static Result newPSMResult(int type, String label, Object value) {\n\n        Result result = newResult(ResultConstants.VALUE);\n\n        result.errorCode  = type;\n        result.mainString = label;\n        result.valueData  = value;\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_364",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5877",
               "end_line": "5923",
               "source_code": "        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;\n        final int declared_data_type                     = 82;\n        final int declared_numeric_precision             = 83;\n        final int declared_numeric_scale                 = 84;\n        final int result_cast_from_declared_data_type    = 85;\n        final int result_cast_declared_numeric_precision = 86;\n        final int result_cast_declared_numeric_scale     = 87;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_365",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3539",
               "end_line": "3543",
               "source_code": "            row[self_referencing_column_name] = null;\n            row[reference_generation]         = null;\n            row[user_defined_type_catalog]    = null;\n            row[user_defined_type_schema]     = null;\n            row[user_defined_type_name]       = null;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6094",
               "end_line": "6098",
               "source_code": "            row[result_cast_scope_catalog]              = null;\n            row[result_cast_scope_schema]               = null;\n            row[result_cast_scope_name]                 = null;\n            row[result_cast_max_cardinality]            = null;\n            row[result_cast_dtd_identifier]             = null;"
           }

       },

       {
           "id": "clone_366",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCStatement.java",
               "start_line": "240",
               "end_line": "246",
               "source_code": "        closeResultData();\n\n        batchResultOut = null;\n        connection     = null;\n        resultIn       = null;\n        resultOut      = null;\n        isClosed       = true;"
           },

           "clone": {
               "file": "QuerySpecification.java",
               "start_line": "421",
               "end_line": "427",
               "source_code": "        setResultNullability();\n\n        rangeVariableList = null;\n        tempSet           = null;\n        compileContext    = null;\n        outerRanges       = null;\n        isResolved        = true;"
           }

       },

       {
           "id": "clone_367",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1788",
               "end_line": "1809",
               "source_code": "        readThis(Tokens.END);\n        readThis(Tokens.REPEAT);\n\n        if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n\n            read();\n        }\n\n        StatementCompound statement =\n            new StatementCompound(StatementTypes.REPEAT, label);\n\n        statement.setStatements(statements);\n        statement.setCondition(condition);\n\n        return statement;"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1746",
               "end_line": "1767",
               "source_code": "        readThis(Tokens.END);\n        readThis(Tokens.WHILE);\n\n        if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n\n            read();\n        }\n\n        StatementCompound statement =\n            new StatementCompound(StatementTypes.WHILE, label);\n\n        statement.setStatements(statements);\n        statement.setCondition(condition);\n\n        return statement;"
           }

       },

       {
           "id": "clone_368",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "209",
               "end_line": "217",
               "source_code": "                break;\n\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                o = readTime(type);\n                break;\n\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "176",
               "end_line": "184",
               "source_code": "                break;\n\n            case Types.SQL_CHAR :\n            case Types.SQL_VARCHAR :\n                o = readChar(type);\n                break;\n\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :"
           }

       },

       {
           "id": "clone_369",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "101",
               "end_line": "114",
               "source_code": "            case StatementTypes.ALTER_DOMAIN :\n            case StatementTypes.ALTER_INDEX :\n            case StatementTypes.ALTER_ROUTINE :\n            case StatementTypes.ALTER_SEQUENCE :\n            case StatementTypes.ALTER_TYPE :\n            case StatementTypes.ALTER_TABLE :\n            case StatementTypes.ALTER_TRANSFORM :\n            case StatementTypes.ALTER_VIEW :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.DROP_ASSERTION :\n            case StatementTypes.DROP_CHARACTER_SET :\n            case StatementTypes.DROP_COLLATION :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "146",
               "end_line": "161",
               "source_code": "            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :\n                group = StatementTypes.X_HSQLDB_SETTING;\n                break;\n\n            case StatementTypes.SET_TABLE_CLUSTERED :\n            case StatementTypes.SET_TABLE_NEW_TABLESPACE :\n            case StatementTypes.SET_TABLE_SET_TABLESPACE :"
           }

       },

       {
           "id": "clone_370",

           "clone_type": "type-2",

           "origin": {
               "file": "TestCacheSize.java",
               "start_line": "595",
               "end_line": "628",
               "source_code": "    void selectZipTable() {\n\n        StopWatch        sw        = new StopWatch();\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;\n\n        try {\n            PreparedStatement ps = cConnection.prepareStatement(\n                \"SELECT zip FROM zip WHERE zip = ?\");\n\n            for (i = 0; i < bigops; i++) {\n                ps.setInt(1, nextIntRandom(randomgen, smallrows - 1));\n                ps.execute();\n\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Select \" + (i + 1) + \" : \"\n                                       + (sw.elapsedTime() + 1));\n                }\n            }\n\n            ps.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        long time = sw.elapsedTime();\n        long rate = ((long) i * 1000) / (time + 1);\n\n        storeResult(\"select random zip (zip table)\", i, time, rate);\n        System.out.println(\"select time for random zip from zip table \" + i\n                           + \" rows  -- \" + time + \" ms -- \" + rate + \" tps\");\n    }"
           },

           "clone": {
               "file": "TestCacheSize.java",
               "start_line": "560",
               "end_line": "593",
               "source_code": "    void selectID() {\n\n        StopWatch        sw        = new StopWatch();\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;\n\n        try {\n            PreparedStatement ps = cConnection.prepareStatement(\n                \"SELECT firstname,lastname,zip,filler FROM test WHERE id = ?\");\n\n            for (i = 0; i < smallops; i++) {\n                ps.setInt(1, nextIntRandom(randomgen, bigrows - 1));\n                ps.execute();\n\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Select \" + (i + 1) + \" : \"\n                                       + (sw.elapsedTime() + 1));\n                }\n            }\n\n            ps.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        long time = sw.elapsedTime();\n        long rate = ((long) i * 1000) / (time + 1);\n\n        storeResult(\"select random id\", i, time, rate);\n        System.out.println(\"select time for random id \" + i + \" rows  -- \"\n                           + time + \" ms -- \" + rate + \" tps\");\n    }"
           }

       },

       {
           "id": "clone_371",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "890",
               "end_line": "906",
               "source_code": "        Object[]    row;\n        DITableInfo ti;\n\n        // column number mappings\n        final int itable_cat         = 0;\n        final int itable_schem       = 1;\n        final int itable_name        = 2;\n        final int icolumn_name       = 3;\n        final int idata_type         = 4;\n        final int itype_name         = 5;\n        final int icolumn_size       = 6;\n        final int ibuffer_length     = 7;\n        final int idecimal_digits    = 8;\n        final int inum_prec_radix    = 9;\n        final int inullable          = 10;\n        final int iremark            = 11;\n        final int icolumn_def        = 12;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "698",
               "end_line": "714",
               "source_code": "        Object[]       row;\n        HsqlProperties p;\n\n        // Column number mappings\n        final int iscope          = 0;\n        final int icolumn_name    = 1;\n        final int idata_type      = 2;\n        final int itype_name      = 3;\n        final int icolumn_size    = 4;\n        final int ibuffer_length  = 5;\n        final int idecimal_digits = 6;\n        final int ipseudo_column  = 7;\n        final int itable_cat      = 8;\n        final int itable_schem    = 9;\n        final int itable_name     = 10;\n        final int inullable       = 11;\n        final int iinKey          = 12;"
           }

       },

       {
           "id": "clone_372",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6444",
               "end_line": "6457",
               "source_code": "            addColumn(t, \"SIZING_ID\", CARDINAL_NUMBER);\n            addColumn(t, \"SIZING_NAME\", CHARACTER_DATA);\n            addColumn(t, \"PROFILE_ID\", CARDINAL_NUMBER);\n            addColumn(t, \"PROFILE_NAME\", CHARACTER_DATA);\n            addColumn(t, \"REQUIRED_VALUE\", CARDINAL_NUMBER);\n            addColumn(t, \"COMMENTS\", CHARACTER_DATA);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SQL_SIZING_PROFILES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "454",
               "end_line": "467",
               "source_code": "            addColumn(t, \"MAX_CACHE_COUNT\", CARDINAL_NUMBER);    // not null\n            addColumn(t, \"MAX_CACHE_BYTES\", CARDINAL_NUMBER);    // not null\n            addColumn(t, \"CACHE_SIZE\", CARDINAL_NUMBER);         // not null\n            addColumn(t, \"CACHE_BYTES\", CARDINAL_NUMBER);        // not null\n            addColumn(t, \"FILE_LOST_BYTES\", CARDINAL_NUMBER);    // not null\n            addColumn(t, \"FILE_FREE_POS\", CARDINAL_NUMBER);      // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_CACHEINFO].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);\n\n            return t;"
           }

       },

       {
           "id": "clone_373",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAcl.java",
               "start_line": "132",
               "end_line": "163",
               "source_code": "        file = File.createTempFile(\"aclPermitLocalhost2\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Permit Localhost test ACL\n\");\n        pw.println(\"permit 127.0.0.1/32\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclPermitLocalhosts = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclPermitLocalhosts.length; i++) {\n                aclPermitLocalhosts[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclPermitLocalNet1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Permit Local Net test ACL\n\");\n        pw.println(\"permit 127.0.0.0/24\");\n        pw.close();\n        acls.add(new ServerAcl(file));"
           },

           "clone": {
               "file": "TestAcl.java",
               "start_line": "100",
               "end_line": "130",
               "source_code": "        file = File.createTempFile(\"aclDenyAll1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Deny all test ACL\n\");\n        pw.println(\"deny 0.0.0.0/0\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclDenyAlls = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclDenyAlls.length; i++) {\n                aclDenyAlls[i].setPrintWriter(new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclPermitLocalhost1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Permit Localhost test ACL\n\");\n        pw.println(\"permit 127.0.0.1\");\n        pw.close();\n        acls.add(new ServerAcl(file));"
           }

       },

       {
           "id": "clone_374",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2496",
               "end_line": "2502",
               "source_code": "            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);\n            addColumn(t, \"PRECISION\", Type.SQL_INTEGER);\n            addColumn(t, \"LITERAL_PREFIX\", CHARACTER_DATA);\n            addColumn(t, \"LITERAL_SUFFIX\", CHARACTER_DATA);\n            addColumn(t, \"CREATE_PARAMS\", CHARACTER_DATA);\n            addColumn(t, \"NULLABLE\", Type.SQL_SMALLINT);\n            addColumn(t, \"CASE_SENSITIVE\", Type.SQL_BOOLEAN);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "648",
               "end_line": "654",
               "source_code": "            addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);\n            addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null\n            addColumn(t, \"NULLABLE\", Type.SQL_SMALLINT);         // not null\n            addColumn(t, \"IN_KEY\", Type.SQL_BOOLEAN);            // not null"
           }

       },

       {
           "id": "clone_375",

           "clone_type": "type-2",

           "origin": {
               "file": "TransactionManagerMV2PL.java",
               "start_line": "211",
               "end_line": "251",
               "source_code": "    /**\n     * rollback the row actions from start index in list and\n     * the given timestamp\n     */\n    public void rollbackPartial(Session session, int start, long timestamp) {\n\n        int limit = session.rowActionList.size();\n\n        if (start == limit) {\n            return;\n        }\n\n        for (int i = start; i < limit; i++) {\n            RowAction action = (RowAction) session.rowActionList.get(i);\n\n            if (action == null) {\n/*\n            System.out.println(\"null insert action \" + session + \" \"\n                               + session.actionTimestamp);\n*/\n                throw Error.runtimeError(ErrorCode.GENERAL_ERROR,\n                                         \"null rollback action \");\n            }\n\n            action.rollback(session, timestamp);\n        }\n\n        // rolled back transactions can always be merged as they have never been\n        // seen by other sessions\n        writeLock.lock();\n\n        try {\n            Object[] list = session.rowActionList.getArray();\n\n            mergeRolledBackTransaction(session, timestamp, list, start, limit);\n        } finally {\n            writeLock.unlock();\n        }\n\n        session.rowActionList.setSize(start);\n    }"
           },

           "clone": {
               "file": "TransactionManagerMVCC.java",
               "start_line": "271",
               "end_line": "307",
               "source_code": "    /**\n     * rollback the row actions from start index in list and\n     * the given timestamp\n     */\n    public void rollbackPartial(Session session, int start, long timestamp) {\n\n        int limit = session.rowActionList.size();\n\n        if (start == limit) {\n            return;\n        }\n\n        for (int i = start; i < limit; i++) {\n            RowAction action = (RowAction) session.rowActionList.get(i);\n\n            if (action == null) {\n                throw Error.runtimeError(ErrorCode.GENERAL_ERROR,\n                                         \"TXManager - null rollback action \");\n            }\n\n            action.rollback(session, timestamp);\n        }\n\n        // rolled back transactions can always be merged as they have never been\n        // seen by other sessions\n        writeLock.lock();\n\n        try {\n            Object[] list = session.rowActionList.getArray();\n\n            mergeRolledBackTransaction(session, timestamp, list, start, limit);\n        } finally {\n            writeLock.unlock();\n        }\n\n        session.rowActionList.setSize(start);\n    }"
           }

       },

       {
           "id": "clone_376",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDatetimeSimple.java",
               "start_line": "214",
               "end_line": "223",
               "source_code": "        Statement          st = conn.createStatement();\n\n        st.executeUpdate(\"SET TIME ZONE INTERVAL '-5:00' HOUR TO MINUTE\");\n        st.executeUpdate(\"DROP TABLE t3 IF EXISTS\");\n        st.executeUpdate(\"CREATE TABLE t3(d date)\");\n        st.executeUpdate(\"INSERT INTO t3 VALUES('2008-11-27')\");\n\n        rs = st.executeQuery(\"SELECT d FROM t3\");\n\n        rs.next();"
           },

           "clone": {
               "file": "TestDatetimeSimple.java",
               "start_line": "112",
               "end_line": "121",
               "source_code": "        Statement         st = conn.createStatement();\n\n        st.executeUpdate(\"SET TIME ZONE INTERVAL '-5:00' HOUR TO MINUTE\");\n        st.executeUpdate(\"DROP TABLE t IF EXISTS\");\n        st.executeUpdate(\"CREATE TABLE t(i int, d date)\");\n        st.executeUpdate(\"INSERT INTO t VALUES(1, '2008-11-27')\");\n\n        rs = st.executeQuery(\"SELECT d FROM t\");\n\n        rs.next();"
           }

       },

       {
           "id": "clone_377",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "412",
               "end_line": "439",
               "source_code": "    public void testVarCharSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(String.class, rs.getObject(\"cv\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(\"cd\", rs.getString(\"cv\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "383",
               "end_line": "410",
               "source_code": "    public void testCharSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(String.class, rs.getObject(\"c\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(\"ab \", rs.getString(\"c\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_378",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2580",
               "end_line": "2589",
               "source_code": "        sqlTSILookup.put(SQL_TSI_DAY, T_SQL_TSI_DAY);\n        sqlTSILookup.put(SQL_TSI_FRAC_SECOND, T_SQL_TSI_FRAC_SECOND);\n        sqlTSILookup.put(SQL_TSI_MILLI_SECOND, T_SQL_TSI_MILLI_SECOND);\n        sqlTSILookup.put(SQL_TSI_HOUR, T_SQL_TSI_HOUR);\n        sqlTSILookup.put(SQL_TSI_MINUTE, T_SQL_TSI_MINUTE);\n        sqlTSILookup.put(SQL_TSI_MONTH, T_SQL_TSI_MONTH);\n        sqlTSILookup.put(SQL_TSI_QUARTER, T_SQL_TSI_QUARTER);\n        sqlTSILookup.put(SQL_TSI_SECOND, T_SQL_TSI_SECOND);\n        sqlTSILookup.put(SQL_TSI_WEEK, T_SQL_TSI_WEEK);\n        sqlTSILookup.put(SQL_TSI_YEAR, T_SQL_TSI_YEAR);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2470",
               "end_line": "2480",
               "source_code": "        //\n        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);\n        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);\n        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);\n        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);\n        commandSet.put(T_TIMEZONE, TIMEZONE);\n        commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE);\n        commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE);\n        commandSet.put(T_DATABASE_VERSION, DATABASE_VERSION);\n        commandSet.put(T_LOB_ID, LOB_ID);\n        commandSet.put(T_SEQUENCE_ARRAY, SEQUENCE_ARRAY);"
           }

       },

       {
           "id": "clone_379",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqlSocketFactorySecure.java",
               "start_line": "339",
               "end_line": "343",
               "source_code": "        X509Certificate[] chain;\n        X509Certificate   certificate;\n        Principal         principal;\n        PublicKey         publicKey;\n        String            DN;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "481",
               "end_line": "485",
               "source_code": "        Object[]      row;\n        HashSet       cacheSet;\n        Iterator      caches;\n        Iterator      tables;\n        Table         table;"
           }

       },

       {
           "id": "clone_380",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5871",
               "end_line": "5917",
               "source_code": "        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_381",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "1893",
               "end_line": "1901",
               "source_code": "        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_DOUBLE).append(' ');\n        sb.append(Tokens.T_NAN).append(' ');\n        sb.append(database.sqlDoubleNaN ? Tokens.T_TRUE\n                                        : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);"
           },

           "clone": {
               "file": "Logger.java",
               "start_line": "1880",
               "end_line": "1888",
               "source_code": "        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_CONVERT).append(' ');\n        sb.append(Tokens.T_TRUNCATE).append(' ');\n        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE\n                                              : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);"
           }

       },

       {
           "id": "clone_382",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "1042",
               "end_line": "1048",
               "source_code": "        case 67: break;\n        case 13: \n          { specialAppendState = false;\n        commandBuffer.append(yytext());\n        yybegin(SQL_DOUBLE_QUOTED);\n          }\n        case 68: break;"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "1010",
               "end_line": "1016",
               "source_code": "        case 63: break;\n        case 15: \n          { specialAppendState = false;\n        commandBuffer.append(yytext());\n        yybegin(SQL_SINGLE_QUOTED);\n          }\n        case 64: break;"
           }

       },

       {
           "id": "clone_383",

           "clone_type": "type-2",

           "origin": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "491",
               "end_line": "505",
               "source_code": "        PreparedStatement ps;\n        ResultSet         rs;\n        Savepoint         sp1;\n        int               rowcount = 0;\n\n        sql = \"drop table t if exists\";\n\n        stmt.executeUpdate(sql);\n\n        sql = \"create table t(id int, fn varchar(40), ln varchar(40), zip int)\";\n\n        stmt.executeUpdate(sql);\n\n        //-- setup for following tests\n        conn1.setAutoCommit(false);"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "139",
               "end_line": "151",
               "source_code": "        Savepoint         sp5;\n        Savepoint         sp6;\n        Savepoint         sp7;\n        int               rowcount = 0;\n\n        sql = \"drop table t if exists\";\n\n        stmt.executeUpdate(sql);\n\n        sql = \"create table t(id int, fn varchar(40), ln varchar(40), zip int)\";\n\n        stmt.executeUpdate(sql);\n        conn1.setAutoCommit(true);"
           }

       },

       {
           "id": "clone_384",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5766",
               "end_line": "5812",
               "source_code": "            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_385",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2840",
               "end_line": "2852",
               "source_code": "            addColumn(t, \"INITIAL_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"AUTHENTICATION\", SQL_IDENTIFIER);\n            addColumn(t, \"PASSWORD_DIGEST\", SQL_IDENTIFIER);\n\n            // order: USER\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_USERS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6447",
               "end_line": "6457",
               "source_code": "            addColumn(t, \"PROFILE_NAME\", CHARACTER_DATA);\n            addColumn(t, \"REQUIRED_VALUE\", CARDINAL_NUMBER);\n            addColumn(t, \"COMMENTS\", CHARACTER_DATA);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SQL_SIZING_PROFILES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_386",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "623",
               "end_line": "651",
               "source_code": "    public void testTimestampWSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(Timestamp.class, rs.getObject(\"tsw\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(Timestamp.valueOf(\"2009-02-09 17:18:19\"),\n                    rs.getTimestamp(\"tsw\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "594",
               "end_line": "621",
               "source_code": "    public void testTimestampSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try { st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(Timestamp.class, rs.getObject(\"ts\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(Timestamp.valueOf(\"2009-02-09 16:17:18\"),\n                    rs.getTimestamp(\"ts\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_387",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "1600",
               "end_line": "1610",
               "source_code": "                return;\n\n            case 'x' :\n                if (arg1.equals(\"x?\") || arg1.equals(\"xq?\")\n                        || (other != null && other.trim().equals(\"?\")\n                        && (arg1.equals(\"x\") || arg1.equals(\"xq\")))) {\n                    stdprintln(DSV_OPTIONS_TEXT + LS + DSV_X_SYNTAX_MSG);\n                    return;\n                }\n                shared.userVars.remove(\"?\");\n                requireConnection();"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "1568",
               "end_line": "1578",
               "source_code": "                return;\n\n            case 'm' :\n                if (arg1.equals(\"m?\") || arg1.equals(\"mq?\")\n                        || (other != null && other.trim().equals(\"?\")\n                        && (arg1.equals(\"m\") || arg1.equals(\"mq\")))) {\n                    stdprintln(DSV_OPTIONS_TEXT + LS + DSV_M_SYNTAX_MSG);\n                    return;\n                }\n                shared.userVars.remove(\"?\");\n                requireConnection();"
           }

       },

       {
           "id": "clone_388",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5846",
               "end_line": "5892",
               "source_code": "        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_389",

           "clone_type": "type-2",

           "origin": {
               "file": "TestMultiInsert.java",
               "start_line": "152",
               "end_line": "157",
               "source_code": "        TestResult result = new TestResult();\n        TestCase   testA  = new TestMultiInsert(\"testMultiInsert\");\n\n        testA.run(result);\n        System.out.println(\"TestMultiInsert error count: \" + result.failureCount());\n        Enumeration e = result.failures();"
           },

           "clone": {
               "file": "TestHTTPKeepAlive.java",
               "start_line": "176",
               "end_line": "183",
               "source_code": "\t\tTestResult result = new TestResult();\n\t\tTestCase testKeepAlive = new TestHTTPKeepAlive(\"testKeepAlive\");\n\n\t\ttestKeepAlive.run(result);\n\n\t\tSystem.out.println(\"TestKeepAlive error count: \" + result.failureCount());\n\n\t\tEnumeration e = result.failures();"
           }

       },

       {
           "id": "clone_390",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "404",
               "end_line": "432",
               "source_code": "                break;\n\n            /*\n            case FUNCTION_SUBSTRING_REG_EXPR :\n                break;\n            case FUNCTION_SUBSTRING_REGEX :\n                break;\n            */\n            case FUNC_FOLD_LOWER :\n                name      = Tokens.T_LOWER;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_FOLD_UPPER :\n                name      = Tokens.T_UPPER;\n                parseList = singleParamList;\n                break;\n\n            /*\n            case FUNCTION_TRANSCODING :\n                break;\n            case FUNCTION_TRANSLITERATION :\n                break;\n            case FUNCTION_REGEX_TRANSLITERATION :\n                break;\n             */\n            case FUNC_TRIM_CHAR :\n            case FUNC_TRIM_BINARY :\n                name      = Tokens.T_TRIM;"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "377",
               "end_line": "391",
               "source_code": "                break;\n\n            case FUNC_CEILING :\n                name      = Tokens.T_CEILING;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_WIDTH_BUCKET :\n                name      = Tokens.T_WIDTH_BUCKET;\n                parseList = quadParamList;\n                break;\n\n            case FUNC_SUBSTRING_CHAR :\n            case FUNC_SUBSTRING_BINARY :\n                name      = Tokens.T_SUBSTRING;"
           }

       },

       {
           "id": "clone_391",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "517",
               "end_line": "526",
               "source_code": "        // Prep for we will attempt to drop later\n        execSQL(\"DROP VIEW tstview\", 0);                              // Don't want dep. problems\n        execSQL(\"CREATE TABLE adroptbl (i INT, vc VARCHAR(100))\", 0);\n        execSQL(\"CREATE TABLE bdroptbl (i INT, vc VARCHAR(100))\", 0);\n        execSQL(\"CREATE UNIQUE INDEX adropind ON adroptbl (i)\", 0);\n        execSQL(\"CREATE UNIQUE INDEX bdropind ON bdroptbl (i)\", 0);\n        execSQL(\"CREATE SEQUENCE bdropseq\", 0);\n        execSQL(\"CREATE SEQUENCE adropseq\", 0);\n        execSQL(\"CREATE TRIGGER adroptrig AFTER INSERT ON adroptbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", 0);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "384",
               "end_line": "392",
               "source_code": "        execSQL(\"ALTER INDEX renamedind RENAME TO tstind\", 0);\n        execSQL(\"ALTER USER tstuser SET PASSWORD frank\", 0);\n        execSQL(\"ALTER USER tstuser SET PASSWORD 'frank'\", 0);\n        execSQL(\"ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0);\n        execSQL(\"ALTER TABLE tsttbl ALTER COLUMN vco1 RENAME TO j1\", 0);\n        execSQL(\"ALTER TABLE constrainedtbl DROP CONSTRAINT con1\", 0);\n        execSQL(\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", 0);\n        execSQL(\"ALTER TABLE foreigntbl ADD CONSTRAINT tstfk FOREIGN KEY \"\n                + \"(i7) REFERENCES primarytbl (i8)\", 0);"
           }

       },

       {
           "id": "clone_392",

           "clone_type": "type-2",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "312",
               "end_line": "317",
               "source_code": "        rs = st.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"INFORMATION_SCHEMA\");\n        assertEquals(rs.getString(2), \"_SYSTEM\");\n        rs.close();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "270",
               "end_line": "275",
               "source_code": "            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();"
           }

       },

       {
           "id": "clone_393",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1300",
               "end_line": "1313",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                startType = Types.SQL_INTERVAL_DAY;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                startType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "154",
               "end_line": "169",
               "source_code": "            case StatementTypes.FETCH :\n            case StatementTypes.FREE_LOCATOR :\n            case StatementTypes.GET_DESCRIPTOR :\n            case StatementTypes.HOLD_LOCATOR :\n                group = StatementTypes.X_SQL_DATA;\n                break;\n\n            //\n            case StatementTypes.PREPARABLE_DYNAMIC_DELETE_CURSOR :\n            case StatementTypes.PREPARABLE_DYNAMIC_UPDATE_CURSOR :\n            case StatementTypes.PREPARE :\n                group = StatementTypes.X_SQL_DYNAMIC;\n                break;\n\n            // logged by session\n            case StatementTypes.DISCONNECT :"
           }

       },

       {
           "id": "clone_394",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1653",
               "end_line": "1681",
               "source_code": "        // column number mappings\n        final int specific_cat            = 0;\n        final int specific_schem          = 1;\n        final int procedure_name          = 2;\n        final int parameter_name          = 3;\n        final int parameter_mode          = 4;\n        final int data_type_sql_id        = 5;\n        final int data_type               = 6;\n        final int numeric_precision       = 7;\n        final int byte_length             = 8;\n        final int numeric_scale           = 9;\n        final int numeric_precision_radix = 10;\n        final int nullable                = 11;\n        final int remark                  = 12;\n        final int default_val             = 13;\n        final int sql_data_type           = 14;\n        final int sql_datetime_sub        = 15;\n        final int character_octet_length  = 16;\n        final int ordinal_position        = 17;\n        final int is_nullable             = 18;\n        final int specific_name           = 19;\n\n        // intermediate holders\n        int           columnCount;\n        Iterator      routines;\n        RoutineSchema routineSchema;\n        Routine       routine;\n        Object[]      row;\n        Type          type;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4317",
               "end_line": "4344",
               "source_code": "        final int character_set_catalog    = 17;\n        final int character_set_schema     = 18;\n        final int character_set_name       = 19;\n        final int collation_catalog        = 20;\n        final int collation_schema         = 21;\n        final int collation_name           = 22;\n        final int numeric_precision        = 23;\n        final int numeric_precision_radix  = 24;\n        final int numeric_scale            = 25;\n        final int datetime_precision       = 26;\n        final int interval_type            = 27;\n        final int interval_precision       = 28;\n        final int udt_catalog              = 29;\n        final int udt_schema               = 30;\n        final int udt_name                 = 31;\n        final int scope_catalog            = 32;\n        final int scope_schema             = 33;\n        final int scope_name               = 34;\n        final int maximum_cardinality      = 35;\n        final int dtd_identifier           = 36;\n\n        // intermediate holders\n        int           columnCount;\n        Iterator      routines;\n        RoutineSchema routineSchema;\n        Routine       routine;\n        Object[]      row;\n        Type          type;"
           }

       },

       {
           "id": "clone_395",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6606",
               "end_line": "6612",
               "source_code": "        // Intermediate holders\n        Iterator     tables;\n        Table        table;\n        Constraint[] constraints;\n        int          constraintCount;\n        Constraint   constraint;\n        String       cat;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2893",
               "end_line": "2899",
               "source_code": "        // Intermediate holders\n        Iterator     tables;\n        Table        table;\n        Constraint[] constraints;\n        int          constraintCount;\n        Constraint   constraint;\n        Iterator     iterator;"
           }

       },

       {
           "id": "clone_396",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1571",
               "end_line": "1604",
               "source_code": "        try {\n            ps = netConn.prepareStatement(\n                \"INSERT INTO alltypes(id, vb) VALUES(?, ?)\");\n            ps.setInt(1, 3);\n            ps.setBytes(2, expectedBytes);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();\n            ps = netConn.prepareStatement(\n                \"SELECT * FROM alltypes WHERE vb = ?\");\n            ps.setBytes(1, expectedBytes);\n            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with vb = b'AA99'\", rs.next());\n            ba1 = rs.getBytes(\"vb\");\n            assertTrue(\"Got only one row with vb = b'AA99'\", rs.next());\n            ba2 = rs.getBytes(\"vb\");\n            assertFalse(\"Got too many rows with vb = b'AA99'\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1519",
               "end_line": "1552",
               "source_code": "        try {\n            ps = netConn.prepareStatement(\n                \"INSERT INTO alltypes(id, bin) VALUES(?, ?)\");\n            ps.setInt(1, 3);\n            ps.setBytes(2, expectedBytes);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();\n            ps = netConn.prepareStatement(\n                \"SELECT * FROM alltypes WHERE bin = ?\");\n            ps.setBytes(1, expectedBytes);\n            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with bin = b'AA99'\", rs.next());\n            ba1 = rs.getBytes(\"bin\");\n            assertTrue(\"Got only one row with bin = b'AA99'\", rs.next());\n            ba2 = rs.getBytes(\"bin\");\n            assertFalse(\"Got too many rows with bin = b'AA99'\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }"
           }

       },

       {
           "id": "clone_397",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1374",
               "end_line": "1383",
               "source_code": "        int     blockOffset     = (int) (offset / lobBlockSize);\n        int     byteBlockOffset = (int) (offset % lobBlockSize);\n        int     blockLimit      = (int) ((offset + dataLength) / lobBlockSize);\n        int     byteLimitOffset = (int) ((offset + dataLength) % lobBlockSize);\n\n        if (byteLimitOffset == 0) {\n            byteLimitOffset = lobBlockSize;\n        } else {\n            blockLimit++;\n        }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "1256",
               "end_line": "1265",
               "source_code": "        int blockOffset     = (int) (offset / lobBlockSize);\n        int byteBlockOffset = (int) (offset % lobBlockSize);\n        int blockLimit      = (int) ((offset + length) / lobBlockSize);\n        int byteLimitOffset = (int) ((offset + length) % lobBlockSize);\n\n        if (byteLimitOffset == 0) {\n            byteLimitOffset = lobBlockSize;\n        } else {\n            blockLimit++;\n        }"
           }

       },

       {
           "id": "clone_398",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5764",
               "end_line": "5810",
               "source_code": "            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_399",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCSQLXML.java",
               "start_line": "954",
               "end_line": "960",
               "source_code": "        checkClosed();\n        checkWritable();\n\n        final T result = createResult(resultClass);\n\n        setReadable(true);\n        setWritable(false);"
           },

           "clone": {
               "file": "JDBCSQLXML.java",
               "start_line": "901",
               "end_line": "907",
               "source_code": "        checkClosed();\n        checkReadable();\n\n        final Source source = getSourceImpl(sourceClass);\n\n        setReadable(false);\n        setWritable(false);"
           }

       },

       {
           "id": "clone_400",

           "clone_type": "type-2",

           "origin": {
               "file": "ClientConnection.java",
               "start_line": "135",
               "end_line": "141",
               "source_code": "        this.host         = host;\n        this.port         = port;\n        this.path         = path;\n        this.database     = database;\n        this.isTLS        = isTLS;\n        this.isTLSWrapper = isTLSWrapper;\n        this.zoneSeconds  = timeZoneSeconds;"
           },

           "clone": {
               "file": "RCData.java",
               "start_line": "278",
               "end_line": "284",
               "source_code": "        this.username   = username;\n        this.password   = password;\n        this.ti         = ti;\n        this.driver     = driver;\n        this.charset    = charset;\n        this.truststore = truststore;\n        this.libpath    = libpath;"
           }

       },

       {
           "id": "clone_401",

           "clone_type": "type-2",

           "origin": {
               "file": "TestTriggers.java",
               "start_line": "144",
               "end_line": "155",
               "source_code": "        clearCalls();\n        st.execute(\"update testtrig set c2 = c2 || ' updated' where c1 = 0\");\n        checkCallCount(3);\n        checkCalls(Trigger.UPDATE_AFTER, 1);\n        checkCalls(Trigger.UPDATE_BEFORE_ROW, 1);\n        checkCalls(Trigger.UPDATE_AFTER_ROW, 1);\n        clearCalls();\n        st.execute(\"update testtrig set c2 = c2 || ' updated' where c1 < 0\");\n        checkCallCount(1);\n        checkCalls(Trigger.UPDATE_AFTER, 1);\n        checkCalls(Trigger.UPDATE_BEFORE_ROW, 0);\n        checkCalls(Trigger.UPDATE_AFTER_ROW, 0);"
           },

           "clone": {
               "file": "TestTriggers.java",
               "start_line": "130",
               "end_line": "143",
               "source_code": "        clearCalls();\n        st.execute(\n            \"insert into testtrig values (default, 'inserted val 1', 100)\");\n        checkCallCount(3);\n        checkCalls(Trigger.INSERT_AFTER, 1);\n        checkCalls(Trigger.INSERT_BEFORE_ROW, 1);\n        checkCalls(Trigger.INSERT_AFTER_ROW, 1);\n        clearCalls();\n        st.execute(\n            \"insert into testtrig (c2, c3) select c2, c3 from testtrig where c1 < 0\");\n        checkCallCount(1);\n        checkCalls(Trigger.INSERT_AFTER, 1);\n        checkCalls(Trigger.INSERT_BEFORE_ROW, 0);\n        checkCalls(Trigger.INSERT_AFTER_ROW, 0);"
           }

       },

       {
           "id": "clone_402",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "150",
               "end_line": "175",
               "source_code": "        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n// --\n        sql = \"select count(*) from test where name = ''\";\n        rs  = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like ''\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n        // --\n        sql = \"SELECT t.name FROM test t WHERE ((SELECT t2.name from test t2 where t2.name=?) like '%name5000%')\";\n        pstmt = conn.prepareStatement(sql);\n\n        pstmt.setString(1, \"name5000\");\n\n        rs = pstmt.executeQuery();"
           },

           "clone": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "120",
               "end_line": "144",
               "source_code": "        assertEquals(\"\\\"\" + sql + \"\\\"\", countOne, countTwo );\n\n//\n        sql = \"select count(*) from test where name = (select max(name) from empty)\";\n        rs = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql = \"select count(*) from test where name like (select min(name) from empty)\";\n        pstmt = conn.prepareStatement(sql);\n        rs    = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n        sql = \"select count(*) from test where (select max(name) from empty where empty.name = test.name and empty.name > ?) like '%ame11%'\";\n        pstmt = conn.prepareStatement(sql);\n\n        pstmt.setString(1, \"n\");\n\n        rs = pstmt.executeQuery();"
           }

       },

       {
           "id": "clone_403",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3330",
               "end_line": "3349",
               "source_code": "                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_DOUBLE;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                if (!nodes[0].dataType.isNumberType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                if (!nodes[1].dataType.isCharacterType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                dataType = Type.SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;\n                break;\n\n            case FUNC_SESSIONTIMEZONE :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3310",
               "end_line": "3329",
               "source_code": "                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_DOUBLE;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                if (!nodes[0].dataType.isNumberType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                if (!nodes[1].dataType.isCharacterType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                dataType = Type.SQL_INTERVAL_DAY_TO_SECOND_MAX_PRECISION;\n                break;\n\n            case FUNC_NUMTOYMINTERVAL :"
           }

       },

       {
           "id": "clone_404",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAcl.java",
               "start_line": "185",
               "end_line": "207",
               "source_code": "        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclDenyLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclDenyLocalNets.length; i++) {\n                aclDenyLocalNets[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclDenyLocalhost1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Deny Localhost test ACL\n\");\n        pw.println(\"deny 127.0.0.1/32\");\n        pw.println(\"allow 0.0.0.0/0\");"
           },

           "clone": {
               "file": "TestAcl.java",
               "start_line": "162",
               "end_line": "184",
               "source_code": "        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclPermitLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclPermitLocalNets.length; i++) {\n                aclPermitLocalNets[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclDenyLocalNet1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Deny Local Net test ACL\n\");\n        pw.println(\"deny 127.0.0.0/24\");\n        pw.println(\"allow 0.0.0.0/0\");"
           }

       },

       {
           "id": "clone_405",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionAggregate.java",
               "start_line": "103",
               "end_line": "127",
               "source_code": "                break;\n\n            case OpTypes.SOME :\n                sb.append(' ').append(Tokens.T_SOME).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.STDDEV_POP :\n                sb.append(' ').append(Tokens.T_STDDEV_POP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.STDDEV_SAMP :\n                sb.append(' ').append(Tokens.T_STDDEV_SAMP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.VAR_POP :\n                sb.append(' ').append(Tokens.T_VAR_POP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.VAR_SAMP :\n                sb.append(' ').append(Tokens.T_VAR_SAMP).append('(');\n                sb.append(left).append(')');"
           },

           "clone": {
               "file": "ExpressionAggregate.java",
               "start_line": "78",
               "end_line": "102",
               "source_code": "                break;\n\n            case OpTypes.SUM :\n                sb.append(' ').append(Tokens.T_SUM).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.MIN :\n                sb.append(' ').append(Tokens.T_MIN).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.MAX :\n                sb.append(' ').append(Tokens.T_MAX).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.AVG :\n                sb.append(' ').append(Tokens.T_AVG).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.EVERY :\n                sb.append(' ').append(Tokens.T_EVERY).append('(');\n                sb.append(left).append(')');"
           }

       },

       {
           "id": "clone_406",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "942",
               "end_line": "963",
               "source_code": "        public ClientThreadProcedure(int number_of_txns, String url,\n                                     String user, String password,\n                                     int transactionMode) {\n\n            System.out.println(number_of_txns);\n\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n\n            if (Conn == null) {\n                return;\n            }\n\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n            }\n        }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "772",
               "end_line": "792",
               "source_code": "        public ClientThread(int number_of_txns, String url, String user,\n                            String password, int transactionMode) {\n\n            System.out.println(number_of_txns);\n\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n\n            if (Conn == null) {\n                return;\n            }\n\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n            }\n        }"
           }

       },

       {
           "id": "clone_407",

           "clone_type": "type-2",

           "origin": {
               "file": "TextTable.java",
               "start_line": "355",
               "end_line": "364",
               "source_code": "        String header = getHeader();\n\n        if (header == null) {\n            return null;\n        }\n\n        StringBuffer sb = new StringBuffer(128);\n\n        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');\n        sb.append(getName().getSchemaQualifiedStatementName());"
           },

           "clone": {
               "file": "TextTable.java",
               "start_line": "332",
               "end_line": "341",
               "source_code": "        String dataSource = getDataSource();\n\n        if (dataSource == null) {\n            return null;\n        }\n\n        StringBuffer sb = new StringBuffer(128);\n\n        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');\n        sb.append(getName().getSchemaQualifiedStatementName());"
           }

       },

       {
           "id": "clone_408",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "801",
               "end_line": "810",
               "source_code": "                charWriter.reset(charBuffer);\n                scanStringPart('\"');\n\n                if (token.isMalformed) {\n                    return;\n                }\n\n                token.tokenType   = Tokens.X_DELIMITED_IDENTIFIER;\n                token.tokenString = charWriter.toString();\n                token.isDelimiter = true;"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "787",
               "end_line": "796",
               "source_code": "                    charWriter.reset(charBuffer);\n                    scanStringPart('`');\n\n                    if (token.isMalformed) {\n                        return;\n                    }\n\n                    token.tokenType = Tokens.X_DELIMITED_IDENTIFIER;\n                    token.tokenString = charWriter.toString();\n                    token.isDelimiter = true;"
           }

       },

       {
           "id": "clone_409",

           "clone_type": "type-2",

           "origin": {
               "file": "TestMultiInsert.java",
               "start_line": "114",
               "end_line": "120",
               "source_code": "            // insert via a prepared statement - both single and multi rows\n            pstmnt = connection.prepareStatement(\"INSERT INTO T VALUES (?,?,?)\");\n            pstmnt.setString(1, null);\n            pstmnt.setString(2, \"prepared1\");\n            pstmnt.setString(3, \"test1\");\n            pstmnt.executeUpdate();\n            pstmnt = connection.prepareStatement(\"INSERT INTO T VALUES (?,?,?),(null,?,?)\");"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "319",
               "end_line": "328",
               "source_code": "                // test identity with PreparedStatement\n                pstmnt = connection.prepareStatement(\n                    \"INSERT INTO T VALUES (?,?,?)\");\n\n                pstmnt.setString(1, null);\n                pstmnt.setString(2, \"test\");\n                pstmnt.setString(3, \"test2\");\n                pstmnt.executeUpdate();\n\n                pstmnt = connection.prepareStatement(\"call identity()\");"
           }

       },

       {
           "id": "clone_410",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2491",
               "end_line": "2497",
               "source_code": "        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);\n        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);\n        commandSet.put(T_LESS, Tokens.LESS);\n        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);\n        commandSet.put(T_MINUS, Tokens.MINUS);\n        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);\n        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2482",
               "end_line": "2489",
               "source_code": "        //\n        commandSet.put(T_ASTERISK, Tokens.ASTERISK);\n        commandSet.put(T_CLOSEBRACKET, CLOSEBRACKET);\n        commandSet.put(T_COLON, Tokens.COLON);\n        commandSet.put(T_COMMA, Tokens.COMMA);\n        commandSet.put(T_CONCAT, Tokens.CONCAT);\n        commandSet.put(T_DIVIDE, Tokens.DIVIDE);\n        commandSet.put(T_EQUALS, Tokens.EQUALS);"
           }

       },

       {
           "id": "clone_411",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "186",
               "end_line": "198",
               "source_code": "            case StatementTypes.SET_SESSION_SQL_IGNORECASE :\n                isLogged = true;\n                group    = StatementTypes.X_HSQLDB_SESSION;\n                break;\n\n            // logged by session if necessary\n            case StatementTypes.COMMIT_WORK :\n            case StatementTypes.RELEASE_SAVEPOINT :\n            case StatementTypes.ROLLBACK_SAVEPOINT :\n            case StatementTypes.ROLLBACK_WORK :\n            case StatementTypes.SAVEPOINT :\n            case StatementTypes.SET_TRANSACTION :\n            case StatementTypes.START_TRANSACTION :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "121",
               "end_line": "133",
               "source_code": "            case StatementTypes.SET_DATABASE_FILES_EVENT_LOG :\n                isTransactionStatement = false;\n                group                  = StatementTypes.X_HSQLDB_SETTING;\n                break;\n\n//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :"
           }

       },

       {
           "id": "clone_412",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "3859",
               "end_line": "3866",
               "source_code": "                        case java.sql.Types.VARBINARY :\n                        case java.sql.Types.VARCHAR :\n                        case java.sql.Types.BLOB :\n                        case java.sql.Types.CLOB :\n                        case java.sql.Types.LONGVARBINARY :\n                        case java.sql.Types.LONGVARCHAR :\n                            autonulls[insi] = false;\n                            break;"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "3850",
               "end_line": "3857",
               "source_code": "                        case java.sql.Types.FLOAT :\n                        case java.sql.Types.INTEGER :\n                        case java.sql.Types.NUMERIC :\n                        case java.sql.Types.REAL :\n                        case java.sql.Types.SMALLINT :\n                        case java.sql.Types.TINYINT :\n                            rightJust[insi] = true;\n                            break;"
           }

       },

       {
           "id": "clone_413",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "150",
               "end_line": "164",
               "source_code": "            case StatementTypes.CREATE_SCHEMA :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                break;\n\n            case StatementTypes.CREATE_ROLE :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_ROUTINE :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 7;\n                break;\n\n            case StatementTypes.CREATE_SEQUENCE :"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "131",
               "end_line": "145",
               "source_code": "            case StatementTypes.DROP_COLUMN :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.GRANT :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                order = 10;\n                break;\n\n            case StatementTypes.GRANT_ROLE :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                order = 10;\n                break;\n\n            case StatementTypes.REVOKE :"
           }

       },

       {
           "id": "clone_414",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5874",
               "end_line": "5920",
               "source_code": "        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;\n        final int declared_data_type                     = 82;\n        final int declared_numeric_precision             = 83;\n        final int declared_numeric_scale                 = 84;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_415",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "3679",
               "end_line": "3691",
               "source_code": "            case bestRowTemporary :\n                scopeIn = BRI_TEMPORARY_SCOPE_IN_LIST;\n\n                break;\n            case bestRowTransaction :\n                scopeIn = BRI_TRANSACTION_SCOPE_IN_LIST;\n\n                break;\n            case bestRowSession :\n                scopeIn = BRI_SESSION_SCOPE_IN_LIST;\n\n                break;\n            default :"
           },

           "clone": {
               "file": "HsqlDatabaseProperties.java",
               "start_line": "833",
               "end_line": "845",
               "source_code": "            case FILES_NOT_MODIFIED :\n                value = MODIFIED_NO;\n                break;\n\n            case FILES_MODIFIED :\n                value = MODIFIED_YES;\n                break;\n\n            case FILES_MODIFIED_NEW :\n                value = MODIFIED_YES_NEW;\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_416",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "254",
               "end_line": "261",
               "source_code": "                break;\n\n            case Types.SQL_ARRAY :\n                o = readArray(type);\n                break;\n\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "205",
               "end_line": "212",
               "source_code": "                break;\n\n            case Types.SQL_DATE :\n                o = readDate(type);\n                break;\n\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :"
           }

       },

       {
           "id": "clone_417",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1176",
               "end_line": "1196",
               "source_code": "                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_concat_nulls;\n                        break;\n\n                    case Tokens.NULLS :\n                        read();\n\n                        if (readIfThis(Tokens.FIRST)) {\n                            property = HsqlDatabaseProperties.sql_nulls_first;\n                        } else {\n                            readThis(Tokens.ORDER);\n\n                            property = HsqlDatabaseProperties.sql_nulls_order;\n                        }\n\n                        flag = processTrueOrFalseObject();\n                        break;\n\n                    case Tokens.UNIQUE :\n                        read();\n                        readThis(Tokens.NULLS);"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1144",
               "end_line": "1164",
               "source_code": "                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_enforce_types;\n                        break;\n\n                    case Tokens.TDC :\n                        read();\n\n                        if (readIfThis(Tokens.DELETE)) {\n                            property = HsqlDatabaseProperties.sql_enforce_tdcd;\n                        } else {\n                            readThis(Tokens.UPDATE);\n\n                            property = HsqlDatabaseProperties.sql_enforce_tdcu;\n                        }\n\n                        flag = processTrueOrFalseObject();\n                        break;\n\n                    case Tokens.TRANSLATE :\n                        read();\n                        readThis(Tokens.TTI);"
           }

       },

       {
           "id": "clone_418",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1339",
               "end_line": "1369",
               "source_code": "            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n                endType = Types.SQL_INTERVAL_MONTH;\n                break;\n\n            case Types.SQL_INTERVAL_MONTH :\n                endType = Types.SQL_INTERVAL_MONTH;\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n                endType = Types.SQL_INTERVAL_DAY;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;"
           },

           "clone": {
               "file": "ParserBase.java",
               "start_line": "251",
               "end_line": "281",
               "source_code": "                case Tokens.X_MALFORMED_BINARY_STRING :\n                    errorCode = ErrorCode.X_42587;\n                    break;\n\n                case Tokens.X_MALFORMED_BIT_STRING :\n                    errorCode = ErrorCode.X_42588;\n                    break;\n\n                case Tokens.X_MALFORMED_UNICODE_STRING :\n                    errorCode = ErrorCode.X_42586;\n                    break;\n\n                case Tokens.X_MALFORMED_STRING :\n                    errorCode = ErrorCode.X_42584;\n                    break;\n\n                case Tokens.X_UNKNOWN_TOKEN :\n                    errorCode = ErrorCode.X_42582;\n                    break;\n\n                case Tokens.X_MALFORMED_NUMERIC :\n                    errorCode = ErrorCode.X_42585;\n                    break;\n\n                case Tokens.X_MALFORMED_COMMENT :\n                    errorCode = ErrorCode.X_42589;\n                    break;\n\n                case Tokens.X_MALFORMED_IDENTIFIER :\n                    errorCode = ErrorCode.X_42583;\n                    break;"
           }

       },

       {
           "id": "clone_419",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "366",
               "end_line": "375",
               "source_code": "        assertEquals(3, queryRowCount(\"SELECT i FROM tsttbl\"));\n\n        // Remember that inserts must change after adding a column.\n        execSQL(\"ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0);\n        execSQL(\"ALTER TABLE tsttbl DROP COLUMN vco1\", 0);\n        execSQL(\"CREATE UNIQUE INDEX tstind ON tsttbl (i)\", 0);\n        execSQL(\"SET AUTOCOMMIT true\", 0);\n        execSQL(\"SET AUTOCOMMIT false\", 0);\n        execSQL(\"SET IGNORECASE true\", 0);\n        execSQL(\"SET IGNORECASE false\", 0);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "344",
               "end_line": "352",
               "source_code": "        assertEquals(\n            2, queryRowCount(\"SELECT i FROM tsttbl WHERE i IN (1, 2, 3)\"));\n        execSQL(\"ALTER SEQUENCE tstseq RESTART WITH 13\", 0);\n        execSQL(\"ALTER TABLE playtbl RENAME TO renamedtbl\", 0);\n        execSQL(\"ALTER TABLE renamedtbl RENAME TO playtbl\", 0);\n        execSQL(\"DROP INDEX tstind\", 0);\n        execSQL(\"DROP TABLE bigtbl\", 0);\n        execSQL(\"DROP SEQUENCE tstseq\", 0);\n        execSQL(\"SET FILES LOG SIZE 5\", 0);"
           }

       },

       {
           "id": "clone_420",

           "clone_type": "type-2",

           "origin": {
               "file": "Session.java",
               "start_line": "164",
               "end_line": "168",
               "source_code": "        database                    = db;\n        this.user                   = user;\n        this.sessionUser            = user;\n        this.zoneString             = zoneString;\n        this.sessionTimeZoneSeconds = timeZoneSeconds;"
           },

           "clone": {
               "file": "Routine.java",
               "start_line": "143",
               "end_line": "147",
               "source_code": "        dataImpact            = impact;\n        this.ranges           = ranges;\n        this.triggerTable     = table;\n        this.triggerType      = triggerType;\n        this.triggerOperation = operationType;"
           }

       },

       {
           "id": "clone_421",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4242",
               "end_line": "4296",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"PARAMETER_MODE\", CHARACTER_DATA);\n            addColumn(t, \"IS_RESULT\", YES_OR_NO);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"PARAMETER_NAME\", SQL_IDENTIFIER);\n\n            //\n            addColumn(t, \"FROM_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"FROM_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"FROM_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n\n            //\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n\n            //\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[PARAMETERS].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3\n            }, false);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2541",
               "end_line": "2592",
               "source_code": "            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            // order: TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION\n            // added for unique: TABLE_CAT\n            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLUMNS].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                3, 2, 1, 4\n            }, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_422",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "115",
               "end_line": "124",
               "source_code": "            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                return java.sql.Time.class;\n\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                return java.sql.Timestamp.class;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"DateTimeType\");"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "253",
               "end_line": "262",
               "source_code": "            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return java.lang.Double.class;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                return java.math.BigDecimal.class;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
           }

       },

       {
           "id": "clone_423",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1896",
               "end_line": "1906",
               "source_code": "            case Tokens.RESULT : {\n                read();\n                readThis(Tokens.MEMORY);\n                readThis(Tokens.ROWS);\n\n                Integer  size = readIntegerObject();\n                Object[] args = new Object[]{ size };\n\n                return new StatementSession(\n                    StatementTypes.SET_SESSION_RESULT_MEMORY_ROWS, args);\n            }"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "418",
               "end_line": "428",
               "source_code": "            case Tokens.RESULT : {\n                read();\n                readThis(Tokens.MEMORY);\n                readThis(Tokens.ROWS);\n\n                Integer  size = readIntegerObject();\n                Object[] args = new Object[]{ size };\n\n                return new StatementCommand(\n                    StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS, args);\n            }"
           }

       },

       {
           "id": "clone_424",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5840",
               "end_line": "5886",
               "source_code": "        final int routine_schema                         = 4;\n        final int routine_name                           = 5;\n        final int routine_type                           = 6;\n        final int module_catalog                         = 7;\n        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_425",

           "clone_type": "type-2",

           "origin": {
               "file": "Tree.java",
               "start_line": "480",
               "end_line": "496",
               "source_code": "            String   key    = s[0];\n            String   folder = s[2];\n            int      ci     = currentindent;\n\n            for (; ci > 0; ci--) {\n                if (key.startsWith(root[ci])) {\n                    break;\n                }\n            }\n\n            if (root[ci].length() < key.length()) {\n                ci++;\n            }\n\n            if (closed && ci > currentindent) {\n                continue;\n            }"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "350",
               "end_line": "366",
               "source_code": "            String   data   = s[1];\n            String   folder = s[2];\n            int      ci     = currentindent;\n\n            for (; ci > 0; ci--) {\n                if (key.startsWith(root[ci])) {\n                    break;\n                }\n            }\n\n            if (root[ci].length() < key.length()) {\n                ci++;\n            }\n\n            if (closed && ci > currentindent) {\n                continue;\n            }"
           }

       },

       {
           "id": "clone_426",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4765",
               "end_line": "4772",
               "source_code": "        final int routine_catalog  = 6;\n        final int routine_schema   = 7;\n        final int routine_name     = 8;\n        final int privilege_type   = 9;\n        final int is_grantable     = 10;\n\n        //\n        return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1551",
               "end_line": "1557",
               "source_code": "        final int constraint_catalog = 0;\n        final int constraint_schema  = 1;\n        final int constraint_name    = 2;\n        final int is_deferrable      = 3;\n        final int initially_deferred = 4;\n\n        return t;"
           }

       },

       {
           "id": "clone_427",

           "clone_type": "type-2",

           "origin": {
               "file": "Table.java",
               "start_line": "187",
               "end_line": "193",
               "source_code": "                isSessionBased   = true;\n                isView           = true;\n                break;\n\n            case RESULT_TABLE :\n                persistenceScope = SCOPE_SESSION;\n                isSessionBased   = true;"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "180",
               "end_line": "186",
               "source_code": "                isSchemaBased = true;\n                isText        = true;\n                break;\n\n            case VIEW_TABLE :\n                persistenceScope = SCOPE_STATEMENT;\n                isSchemaBased    = true;"
           }

       },

       {
           "id": "clone_428",

           "clone_type": "type-2",

           "origin": {
               "file": "DTIType.java",
               "start_line": "424",
               "end_line": "438",
               "source_code": "                return Tokens.T_QUARTER;\n\n            case DAY_OF_MONTH :\n                return Tokens.T_DAY_OF_MONTH;\n\n            case DAY_OF_WEEK :\n                return Tokens.T_DAY_OF_WEEK;\n\n            case DAY_OF_YEAR :\n                return Tokens.T_DAY_OF_YEAR;\n\n            case WEEK_OF_YEAR :\n                return Tokens.T_WEEK_OF_YEAR;\n\n            case SECONDS_MIDNIGHT :"
           },

           "clone": {
               "file": "DTIType.java",
               "start_line": "409",
               "end_line": "423",
               "source_code": "                return Tokens.T_SECOND;\n\n            case TIMEZONE_HOUR :\n                return Tokens.T_TIMEZONE_HOUR;\n\n            case TIMEZONE_MINUTE :\n                return Tokens.T_TIMEZONE_MINUTE;\n\n            case DAY_NAME :\n                return Tokens.T_DAY_NAME;\n\n            case MONTH_NAME :\n                return Tokens.T_MONTH_NAME;\n\n            case QUARTER :"
           }

       },

       {
           "id": "clone_429",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "6278",
               "end_line": "6289",
               "source_code": "    String getConnectionDefaultSchema() throws SQLException {\n\n        ResultSet rs = execute(\"CALL CURRENT_SCHEMA\");\n\n        rs.next();\n\n        String result = rs.getString(1);\n\n        rs.close();\n\n        return result;\n    }"
           },

           "clone": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "348",
               "end_line": "365",
               "source_code": "    /**\n     * Retrieves the user name as known to this database.\n     *\n     * @return the database user name\n     * @exception SQLException if a database access error occurs\n     */\n    public String getUserName() throws SQLException {\n\n        ResultSet rs = execute(\"CALL USER()\");\n\n        rs.next();\n\n        String result = rs.getString(1);\n\n        rs.close();\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_430",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4512",
               "end_line": "4517",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.OTHER :\n                throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));\n            default :\n                setParameter(i, Long.valueOf(value));"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4480",
               "end_line": "4485",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.OTHER :\n                throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));\n            default :\n                setParameter(i, Integer.valueOf(value));"
           }

       },

       {
           "id": "clone_431",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "702",
               "end_line": "724",
               "source_code": "            st1 = conn.createStatement();\n            rs  = st1.executeQuery(\"select sum(bbalance) from branches\");\n\n            rs.next();\n\n            bbalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(tbalance) from tellers\");\n\n            rs.next();\n\n            tbalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\n                \"select sum(abalance), count(abalance) from accounts\");\n\n            rs.next();\n\n            abalancesum   = rs.getInt(1);"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "793",
               "end_line": "814",
               "source_code": "            st1 = conn.createStatement();\n            rs  = st1.executeQuery(\"select sum(bbalance) from branches\");\n\n            rs.next();\n\n            bbalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(tbalance) from tellers\");\n\n            rs.next();\n\n            tbalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(abalance) from accounts\");\n\n            rs.next();\n\n            abalancesum = rs.getInt(1);"
           }

       },

       {
           "id": "clone_432",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "782",
               "end_line": "791",
               "source_code": "            case Types.SQL_BLOB :\n            case Types.SQL_CLOB :\n            case Types.NCLOB :\n            case Types.JAVA_OBJECT :\n            case Types.STRUCT :\n            case Types.OTHER :\n            case Types.ROWID :\n                return false;\n\n            case Types.SQL_ARRAY :"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "594",
               "end_line": "603",
               "source_code": "            case OpTypes.AVG :\n            case OpTypes.EVERY :\n            case OpTypes.SOME :\n            case OpTypes.STDDEV_POP :\n            case OpTypes.STDDEV_SAMP :\n            case OpTypes.VAR_POP :\n            case OpTypes.VAR_SAMP :\n                return false;\n\n            case OpTypes.ROW_SUBQUERY :"
           }

       },

       {
           "id": "clone_433",

           "clone_type": "type-2",

           "origin": {
               "file": "Token.java",
               "start_line": "97",
               "end_line": "104",
               "source_code": "            case IDENT :\n            case STRING :\n            case NUMBER : {\n                return true;\n            }\n            default : {\n                return false;\n            }"
           },

           "clone": {
               "file": "Token.java",
               "start_line": "84",
               "end_line": "91",
               "source_code": "            case OR :\n            case XOR :\n            case NOT : {\n                return true;\n            }\n            default : {\n                return false;\n            }"
           }

       },

       {
           "id": "clone_434",

           "clone_type": "type-2",

           "origin": {
               "file": "AllTests.java",
               "start_line": "66",
               "end_line": "81",
               "source_code": "        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);\n        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);\n        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);\n        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);\n        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);\n        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);\n        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);\n\n        // Suites that extend TestCase\n        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);\n        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);\n        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);\n        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);\n        suite.addTestSuite(org.hsqldb.test.TestCascade.class);\n        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);\n        suite.addTestSuite(org.hsqldb.test.TestSqlPersistent.class);     // Sometimes hangs on Connection.close after SHUTDOWN problem"
           },

           "clone": {
               "file": "AllTests.java",
               "start_line": "50",
               "end_line": "65",
               "source_code": "        suite.addTestSuite(org.hsqldb.test.TestBug1191815.class);\n        suite.addTestSuite(org.hsqldb.test.TestBug778213.class);\n        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);\n        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);\n        suite.addTestSuite(org.hsqldb.test.TestCollation.class);\n        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);\n        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);\n        suite.addTestSuite(org.hsqldb.test\n            .TestINPredicateParameterizationAndCorrelation.class);\n        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);\n        suite.addTestSuite(\n            org.hsqldb.test.TestLikePredicateOptimizations.class);\n        suite.addTestSuite(org.hsqldb.test.TestLobs.class);\n        suite.addTestSuite(org.hsqldb.test.TestMerge.class);\n        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);\n        suite.addTestSuite(org.hsqldb.test.TestSql.class);"
           }

       },

       {
           "id": "clone_435",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "471",
               "end_line": "499",
               "source_code": "    public void testDerivedStringSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT i, cv || 'appendage' app, 4\n\"\n                    + \"FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(String.class, rs.getObject(\"app\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(\"cdappendage\", rs.getString(\"app\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "441",
               "end_line": "469",
               "source_code": "    public void testFixedStringSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT i, 'fixed str' fs, cv\n\"\n                    + \"FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(String.class, rs.getObject(\"fs\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(\"fixed str\", rs.getString(\"fs\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_436",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "6307",
               "end_line": "6339",
               "source_code": "            throws SqlToolError {\n        char[] readBfr = new char[1024];\n        int i;\n        StringWriter sWriter = new StringWriter();\n        InputStreamReader isr = null;\n        String str;\n        try {\n            InputStream is = (bottomHtmlFile == null)\n                    ? getClass().getResourceAsStream(\n                    \"sqltool/bottom-boilerplate.html\")\n                    : new FileInputStream(bottomHtmlFile);\n            if (is == null)\n                throw new IOException(\"Missing resource: \"\n                    + ((bottomHtmlFile == null)\n                    ? bottomHtmlFile\n                    : \"sqltool/bottom-boilerplate\"));\n            isr = new InputStreamReader(is);\n            while ((i = isr.read(readBfr)) > -1) sWriter.write(readBfr, 0, i);\n            readBfr = null;\n            str = sWriter.toString();\n            sWriter.close();\n        } catch (Exception e) {\n            throw new SqlToolError(\n                    SqltoolRB.file_writefail.getString(filePath), e);\n        } finally {\n            try {\n                if (isr != null) isr.close();\n            } catch (IOException ioe) {\n                // TODO: Throw appropriate exception\n            }\n        }\n        pwQuery.write(dereference(str.replaceAll(\"\\r?\\n\", LS), true));\n    }"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "6268",
               "end_line": "6301",
               "source_code": "            throws BadSpecial, SqlToolError {\n        char[] readBfr = new char[1024];\n        int i;\n        StringWriter sWriter = new StringWriter();\n        InputStreamReader isr = null;\n        String str;\n        try {\n            InputStream is = (topHtmlFile == null)\n                    ? getClass().getResourceAsStream(\n                    \"sqltool/top-boilerplate.html\")\n                    : new FileInputStream(topHtmlFile);\n            if (is == null)\n                throw new IOException(\"Missing resource: \"\n                    + ((topHtmlFile == null)\n                    ? topHtmlFile\n                    : \"sqltool/top-boilerplate\"));\n            isr = new InputStreamReader(is);\n            while ((i = isr.read(readBfr)) > -1)\n                sWriter.write(readBfr, 0, i);\n            readBfr = null;\n            str = sWriter.toString();\n            sWriter.close();\n        } catch (Exception e) {\n            throw new BadSpecial(\n                    SqltoolRB.file_writefail.getString(filePath), e);\n        } finally {\n            try {\n                if (isr != null) isr.close();\n            } catch (IOException ioe) {\n                // TODO: Throw appropriate exception\n            }\n        }\n        pWriter.write(dereference(str.replaceAll(\"\\r?\\n\", LS), true));\n    }"
           }

       },

       {
           "id": "clone_437",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "627",
               "end_line": "637",
               "source_code": "        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE UNIQUE INDEX tstinda \" + pref + \"ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TRIGGER tsttrigz AFTER \" + pref\n                + \"INSERT ON triggedtbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", expect);\n        execSQL(\"CREATE VIEW tstviewx AS SELECT * \" + pref\n                + \"FROM tsttbl WHERE i < 10\", expect);\n\n        execSQL(\"CREATE USER tstuserc PASSWORD \" + pref + \"fake\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "617",
               "end_line": "626",
               "source_code": "        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE \" + pref + \"INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TRIGGER tsttrigy \" + pref\n                + \"AFTER INSERT ON triggedtbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", expect);\n        execSQL(\"CREATE USER tstuserb \" + pref + \"PASSWORD fake\", expect);\n        execSQL(\"CREATE VIEW tstviewx AS \" + pref\n                + \"SELECT * FROM tsttbl WHERE i < 10\", expect);"
           }

       },

       {
           "id": "clone_438",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "110",
               "end_line": "116",
               "source_code": "            case Types.SQL_INTEGER :\n                typeWidth = INTEGER_WIDTH;\n                break;\n\n            case Types.SQL_BIGINT :\n                typeWidth = BIGINT_WIDTH;\n                break;"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "102",
               "end_line": "108",
               "source_code": "            case Types.TINYINT :\n                typeWidth = TINYINT_WIDTH;\n                break;\n\n            case Types.SQL_SMALLINT :\n                typeWidth = SMALLINT_WIDTH;\n                break;"
           }

       },

       {
           "id": "clone_439",

           "clone_type": "type-2",

           "origin": {
               "file": "RangeVariableResolver.java",
               "start_line": "124",
               "end_line": "128",
               "source_code": "        firstLeftJoinIndex    = rangeVariables.length;\n        firstRightJoinIndex   = rangeVariables.length;\n        firstLateralJoinIndex = rangeVariables.length;\n        firstOuterJoinIndex   = rangeVariables.length;\n        inExpressions         = new Expression[rangeVariables.length];"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "213",
               "end_line": "217",
               "source_code": "        fkConstraints     = Constraint.emptyArray;\n        fkMainConstraints = Constraint.emptyArray;\n        checkConstraints  = Constraint.emptyArray;\n        triggerList       = TriggerDef.emptyArray;\n        triggerLists      = new TriggerDef[TriggerDef.NUM_TRIGS][];"
           }

       },

       {
           "id": "clone_440",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "190",
               "end_line": "210",
               "source_code": "            case OpTypes.ADD :\n                sb.append(\"ADD \");\n                break;\n\n            case OpTypes.SUBTRACT :\n                sb.append(\"SUBTRACT \");\n                break;\n\n            case OpTypes.MULTIPLY :\n                sb.append(\"MULTIPLY \");\n                break;\n\n            case OpTypes.DIVIDE :\n                sb.append(\"DIVIDE \");\n                break;\n\n            case OpTypes.CONCAT :\n                sb.append(\"CONCAT \");\n                break;\n\n            case OpTypes.CAST :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "556",
               "end_line": "576",
               "source_code": "            case OpTypes.GREATER_EQUAL_PRE :\n                sb.append(\"GREATER_EQUAL\");\n                break;\n\n            case OpTypes.GREATER :\n                sb.append(\"GREATER\");\n                break;\n\n            case OpTypes.SMALLER :\n                sb.append(\"SMALLER\");\n                break;\n\n            case OpTypes.SMALLER_EQUAL :\n                sb.append(\"SMALLER_EQUAL\");\n                break;\n\n            case OpTypes.NOT_EQUAL :\n                sb.append(\"NOT_EQUAL\");\n                break;\n\n            case OpTypes.AND :"
           }

       },

       {
           "id": "clone_441",

           "clone_type": "type-2",

           "origin": {
               "file": "OdbcUtil.java",
               "start_line": "255",
               "end_line": "278",
               "source_code": "            octet = 0;\n            c = hexChars.charAt(i);\n            if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new IllegalArgumentException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n            }\n            octet = octet << 4;\n            c = hexChars.charAt(++i);\n            if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new IllegalArgumentException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n            }"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "6148",
               "end_line": "6171",
               "source_code": "            octet = 0;\n            c = hexChars.charAt(i);\n            if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new NumberFormatException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n            }\n            octet = octet << 4;\n            c = hexChars.charAt(++i);\n            if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new NumberFormatException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n            }"
           }

       },

       {
           "id": "clone_442",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "169",
               "end_line": "183",
               "source_code": "            case Types.TINYINT :\n                return tinyintPrecision;\n\n            case Types.SQL_SMALLINT :\n                return smallintPrecision;\n\n            case Types.SQL_INTEGER :\n                return integerPrecision;\n\n            case Types.SQL_BIGINT :\n                return bigintPrecision;\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "833",
               "end_line": "847",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_FLOAT :\n            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :"
           }

       },

       {
           "id": "clone_443",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "415",
               "end_line": "426",
               "source_code": "            case LobResultTypes.RESPONSE_GET_CHARS :\n                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;\n\n            case LobResultTypes.RESPONSE_SET :\n            case LobResultTypes.RESPONSE_CREATE_BYTES :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "392",
               "end_line": "403",
               "source_code": "            case LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION :\n                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;\n\n            case LobResultTypes.REQUEST_GET_LENGTH :\n            case LobResultTypes.REQUEST_TRUNCATE :"
           }

       },

       {
           "id": "clone_444",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "370",
               "end_line": "378",
               "source_code": "            ResultSet         rs  = ps2.executeQuery();\n\n            rs.next();\n\n            Clob clob1 = rs.getClob(4);\n\n            rs.next();\n\n            Clob clob2 = rs.getClob(4);"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "290",
               "end_line": "298",
               "source_code": "            ResultSet rs = ps.executeQuery();\n\n            rs.next();\n\n            Clob clob1 = rs.getClob(2);\n\n            rs.next();\n\n            Clob   clob2  = rs.getClob(2);"
           }

       },

       {
           "id": "clone_445",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2322",
               "end_line": "2344",
               "source_code": "        // column number mappings\n        // JDBC 1\n        final int itable_cat   = 0;\n        final int itable_schem = 1;\n        final int itable_name  = 2;\n        final int itable_type  = 3;\n        final int iremark      = 4;\n\n        // JDBC 3.0\n        final int itype_cat   = 5;\n        final int itype_schem = 6;\n        final int itype_name  = 7;\n        final int isref_cname = 8;\n        final int iref_gen    = 9;\n\n        // hsqldb ext\n        final int ihsqldb_type   = 10;\n        final int iread_only     = 11;\n        final int icommit_action = 12;\n\n        // Initialization\n        tables = allTables();\n        ti     = new DITableInfo();"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "905",
               "end_line": "925",
               "source_code": "        final int iremark            = 11;\n        final int icolumn_def        = 12;\n        final int isql_data_type     = 13;\n        final int isql_datetime_sub  = 14;\n        final int ichar_octet_length = 15;\n        final int iordinal_position  = 16;\n        final int iis_nullable       = 17;\n        final int iscope_cat         = 18;\n        final int iscope_schem       = 19;\n        final int iscope_table       = 20;\n        final int isource_data_type  = 21;\n\n        // JDBC 4.0\n        final int iis_autoinc = 22;\n\n        // JDBC 4.1\n        final int iis_generated = 23;\n\n        // Initialization\n        tables = allTables();\n        ti     = new DITableInfo();"
           }

       },

       {
           "id": "clone_446",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "112",
               "end_line": "121",
               "source_code": "                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                return (int) precision + 4;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                return (int) precision + 7 + (scale == 0 ? 0\n                                                         : scale + 1);\n\n            case Types.SQL_INTERVAL_MINUTE :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "102",
               "end_line": "111",
               "source_code": "                return (int) precision + 4;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return (int) precision + 7;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return (int) precision + 10 + (scale == 0 ? 0\n                                                          : scale + 1);\n\n            case Types.SQL_INTERVAL_HOUR :"
           }

       },

       {
           "id": "clone_447",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "1753",
               "end_line": "1759",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return SQL_NUMERIC_DEFAULT_INT;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "774",
               "end_line": "780",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return a;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_448",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3249",
               "end_line": "3261",
               "source_code": "            case FUNC_LAST_DAY :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }\n\n                if (!nodes[0].dataType.isDateOrTimestampType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_MONTHS_BETWEEN :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3220",
               "end_line": "3232",
               "source_code": "            case FUNC_ADD_MONTHS :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }\n\n                if (!nodes[0].dataType.isDateOrTimestampType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_DBTIMEZONE :"
           }

       },

       {
           "id": "clone_449",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5865",
               "end_line": "5911",
               "source_code": "        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_450",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5739",
               "end_line": "5785",
               "source_code": "            addColumn(t, \"ROUTINE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_451",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2498",
               "end_line": "2504",
               "source_code": "            addColumn(t, \"LITERAL_PREFIX\", CHARACTER_DATA);\n            addColumn(t, \"LITERAL_SUFFIX\", CHARACTER_DATA);\n            addColumn(t, \"CREATE_PARAMS\", CHARACTER_DATA);\n            addColumn(t, \"NULLABLE\", Type.SQL_SMALLINT);\n            addColumn(t, \"CASE_SENSITIVE\", Type.SQL_BOOLEAN);\n            addColumn(t, \"SEARCHABLE\", Type.SQL_INTEGER);\n            addColumn(t, \"UNSIGNED_ATTRIBUTE\", Type.SQL_BOOLEAN);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1211",
               "end_line": "1217",
               "source_code": "            addColumn(t, \"FIELD_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"VARCHAR_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"LONGVARCHAR_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"IS_IGNORE_FIRST\", Type.SQL_BOOLEAN);\n            addColumn(t, \"IS_ALL_QUOTED\", Type.SQL_BOOLEAN);\n            addColumn(t, \"IS_QUOTED\", Type.SQL_BOOLEAN);\n            addColumn(t, \"IS_DESC\", Type.SQL_BOOLEAN);"
           }

       },

       {
           "id": "clone_452",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "1669",
               "end_line": "1703",
               "source_code": "        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {\n            return String.valueOf(database.sqlIgnoreCase);\n        }\n\n        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {\n            return String.valueOf(database.sqlLongvarIsLob);\n        }\n\n        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {\n            return String.valueOf(database.sqlNullsFirst);\n        }\n\n        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {\n            return String.valueOf(database.sqlNullsOrder);\n        }\n\n        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {\n            return String.valueOf(database.sqlSyntaxDb2);\n        }\n\n        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {\n            return String.valueOf(database.sqlSyntaxMss);\n        }\n\n        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {\n            return String.valueOf(database.sqlSyntaxMys);\n        }\n\n        if (HsqlDatabaseProperties.sql_syntax_ora.equals(name)) {\n            return String.valueOf(database.sqlSyntaxOra);\n        }\n\n        if (HsqlDatabaseProperties.sql_syntax_pgs.equals(name)) {\n            return String.valueOf(database.sqlSyntaxPgs);\n        }"
           },

           "clone": {
               "file": "Logger.java",
               "start_line": "1633",
               "end_line": "1667",
               "source_code": "        if (HsqlDatabaseProperties.sql_concat_nulls.equals(name)) {\n            return String.valueOf(database.sqlConcatNulls);\n        }\n\n        if (HsqlDatabaseProperties.sql_convert_trunc.equals(name)) {\n            return String.valueOf(database.sqlConvertTruncate);\n        }\n\n        if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {\n            return String.valueOf(database.sqlDoubleNaN);\n        }\n\n        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {\n            return String.valueOf(database.sqlEnforceNames);\n        }\n\n        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {\n            return String.valueOf(database.sqlEnforceRefs);\n        }\n\n        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {\n            return String.valueOf(database.sqlEnforceSize);\n        }\n\n        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {\n            return String.valueOf(database.sqlEnforceTDCD);\n        }\n\n        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {\n            return String.valueOf(database.sqlEnforceTDCU);\n        }\n\n        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {\n            return String.valueOf(database.sqlEnforceTypes);\n        }"
           }

       },

       {
           "id": "clone_453",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "5141",
               "end_line": "5146",
               "source_code": "            case Tokens.RELEASE :\n                read();\n                break;\n\n            default :\n                throw unexpectedToken();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "4718",
               "end_line": "4723",
               "source_code": "                    case Tokens.FUNCTION :\n                        read();\n                        break;\n\n                    default :\n                        throw unexpectedToken();"
           }

       },

       {
           "id": "clone_454",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "1386",
               "end_line": "1393",
               "source_code": "                    break;\n\n                case Tokens.FULL :\n                    read();\n                    readIfThis(Tokens.OUTER);\n                    readThis(Tokens.JOIN);\n\n                    left  = true;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "1378",
               "end_line": "1385",
               "source_code": "                    break;\n\n                case Tokens.RIGHT :\n                    read();\n                    readIfThis(Tokens.OUTER);\n                    readThis(Tokens.JOIN);\n\n                    right = true;"
           }

       },

       {
           "id": "clone_455",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "1074",
               "end_line": "1093",
               "source_code": "            case SQL: {\n              yybegin(YYINITIAL);\n    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);\n            }\n            case 119: break;\n            case EDIT: {\n              yybegin(YYINITIAL);\n    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);\n            }\n            case 120: break;\n            case PL: {\n              yybegin(YYINITIAL);\n    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);\n            }\n            case 121: break;\n            case MACRO: {\n              yybegin(YYINITIAL);\n    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);\n            }\n            case 122: break;"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "1054",
               "end_line": "1073",
               "source_code": "            case SPECIAL: {\n              yybegin(YYINITIAL);\n    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);\n            }\n            case 115: break;\n            case SQL_DOUBLE_QUOTED: {\n              yybegin(YYINITIAL);\n    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);\n            }\n            case 116: break;\n            case SQL_SINGLE_QUOTED: {\n              yybegin(YYINITIAL);\n    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);\n            }\n            case 117: break;\n            case RAW: {\n              yybegin(YYINITIAL);\n    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);\n            }\n            case 118: break;"
           }

       },

       {
           "id": "clone_456",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchemaDefinition.java",
               "start_line": "155",
               "end_line": "164",
               "source_code": "                    case StatementTypes.CREATE_ROUTINE :\n                        cs                    = session.parser.compileCreate();\n                        cs.isSchemaDefinition = true;\n\n                        cs.setSchemaHsqlName(schemaDefinitionName);\n\n                        if (session.parser.token.tokenType\n                                != Tokens.X_ENDPARSE) {\n                            throw session.parser.unexpectedToken();\n                        }"
           },

           "clone": {
               "file": "StatementSchemaDefinition.java",
               "start_line": "115",
               "end_line": "124",
               "source_code": "                    case StatementTypes.CREATE_TABLE :\n                        cs                    = session.parser.compileCreate();\n                        cs.isSchemaDefinition = true;\n\n                        cs.setSchemaHsqlName(schemaDefinitionName);\n\n                        if (session.parser.token.tokenType\n                                != Tokens.X_ENDPARSE) {\n                            throw session.parser.unexpectedToken();\n                        }"
           }

       },

       {
           "id": "clone_457",

           "clone_type": "type-2",

           "origin": {
               "file": "TestHarness.java",
               "start_line": "245",
               "end_line": "255",
               "source_code": "                Statement stmt = con.createStatement();\n\n                stmt.execute(\"SET PASSWORD 'password'\");\n                stmt.execute(\"CREATE USER abcd PASSWORD 'dcba'\");\n                stmt.execute(\"CREATE SEQUENCE MySeq\");\n                stmt.execute(\n                    \"CREATE TABLE MyTable (Id INT PRIMARY KEY, Name VARCHAR(100) NOT NULL)\");\n                stmt.execute(\"CREATE TABLE Dummy (Blah VARCHAR(100) NOT NULL)\");\n                stmt.execute(\n                    \"INSERT INTO Dummy (Blah) VALUES ('dummy value')\");\n                stmt.execute(\"GRANT ALL ON MyTable TO abcd\");"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "692",
               "end_line": "702",
               "source_code": "        Statement st = connection.createStatement();\n\n        st.execute(\"DROP TABLE t1 if exists;\");\n        st.execute(\"DROP TABLE t2 if exists;\");\n        st.execute(\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\n        st.execute(\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");"
           }

       },

       {
           "id": "clone_458",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3209",
               "end_line": "3312",
               "source_code": "    final Table SYSTEM_SEQUENCES(Session session, PersistentStore store) {\n\n        Table t = sysTables[SYSTEM_SEQUENCES];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SYSTEM_SEQUENCES]);\n\n            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            // HSQLDB-specific\n            addColumn(t, \"START_WITH\", CHARACTER_DATA);\n            addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);\n\n            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME\n            // false PK, as CATALOG may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_SEQUENCES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }\n\n        //\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n\n        //\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }\n\n        return t;\n    }"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3032",
               "end_line": "3207",
               "source_code": "    /**\n     * The SEQUENCES view has one row for each external sequence\n     * generator. <p>\n     *\n     * <b>Definition:</b> <p>\n     *\n     * <pre class=\"SqlCodeExample\">\n     *\n     *      SEQUENCE_CATALOG     VARCHAR NULL,\n     *      SEQUENCE_SCHEMA      VARCHAR NULL,\n     *      SEQUENCE_NAME        VARCHAR NOT NULL,\n     *      DATA_TYPE            CHARACTER_DATA\n     *      DATA_TYPE            CHARACTER_DATA\n     *      NUMERIC_PRECISION    CARDINAL_NUMBER\n     *      NUMERIC_PRECISION_RADIX CARDINAL_NUMBER\n     *      NUMERIC_SCALE        CARDINAL_NUMBER\n     *      MAXIMUM_VALUE        VARCHAR NOT NULL,\n     *      MINIMUM_VALUE        VARCHAR NOT NULL,\n     *      INCREMENT            VARCHAR NOT NULL,\n     *      CYCLE_OPTION         VARCHAR {'YES', 'NO'},\n     *      START_WITH           VARCHAR NOT NULL,\n     *      DECLARED_DATA_TYPE   CHARACTER_DATA\n     *      DECLARED_NUMERIC_PRECISION CARDINAL_NUMBER\n     *      DECLARED_NUMERIC_SCALE     CARDINAL_NUMBER\n     *\n     * </pre>\n     *\n     * <b>DESCRIPTION:</b><p>\n     *\n     * <ol>\n     * <li> The values of SEQUENCE_CATALOG, SEQUENCE_SCHEMA, and\n     *      SEQUENCE_NAME are the catalog name, unqualified schema name,\n     *      and qualified identifier, respectively, of the sequence generator\n     *      being described. <p>\n     *\n     * <li> The values of SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, and\n     *      DTD_IDENTIFIER are the values of OBJECT_CATALOG, OBJECT_SCHEMA,\n     *      OBJECT_NAME, and DTD_IDENTIFIER, respectively, of the row in\n     *      DATA_TYPE_DESCRIPTOR (not yet implemented) that describes the data\n     *      type of the sequence generator. <p>\n     *\n     * <li> The values of MAXIMUM_VALUE, MINIMUM_VALUE, and INCREMENT are the\n     *      character representations of maximum value, minimum value,\n     *      and increment, respectively, of the sequence generator being\n     *      described. <p>\n     *\n     * <li> The values of CYCLE_OPTION have the following meanings: <p>\n     *\n     *      <table border cellpadding=\"3\">\n     *          <tr>\n     *              <td nowrap>YES</td>\n     *              <td nowrap>The cycle option of the sequence generator\n     *                         is CYCLE.</td>\n     *          <tr>\n     *              <td nowrap>NO</td>\n     *              <td nowrap>The cycle option of the sequence generator is\n     *                         NO CYCLE.</td>\n     *          </tr>\n     *      </table> <p>\n     *\n     * <li> The value of START_WITH is HSQLDB-specific (not in the SQL 200n\n     *      spec).  <p>\n     *\n     *      It is the character representation of the START WITH value. <p>\n     *\n     * <li> The value of NEXT_VALUE is HSQLDB-specific (not in the SQL 200n)<p>\n     *      This is the character representation of the value that\n     *      would be generated by NEXT VALUE FOR when this sequence\n     *      is materialized in an SQL statement. <p>\n     * </ol>\n     *\n     * @return Table\n     */\n    final Table SEQUENCES(Session session, PersistentStore store) {\n\n        Table t = sysTables[SEQUENCES];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SEQUENCES]);\n\n            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            // HSQLDB-specific\n            addColumn(t, \"START_WITH\", CHARACTER_DATA);\n            addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);\n\n            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME\n            // false PK, as CATALOG may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }\n\n        //\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n\n        //\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }\n\n        return t;\n    }"
           }

       },

       {
           "id": "clone_459",

           "clone_type": "type-2",

           "origin": {
               "file": "TarFileInputStream.java",
               "start_line": "143",
               "end_line": "158",
               "source_code": "        switch (compressionType) {\n\n            case TarFileOutputStream.Compression.NO_COMPRESSION :\n                readStream = new FileInputStream(sourceFile);\n                break;\n\n            case TarFileOutputStream.Compression.GZIP_COMPRESSION :\n                readStream =\n                    new GZIPInputStream(new FileInputStream(sourceFile),\n                                        readBuffer.length);\n                break;\n\n            default :\n                throw new IllegalArgumentException(\n                    RB.compression_unknown.getString(compressionType));\n        }"
           },

           "clone": {
               "file": "TarFileOutputStream.java",
               "start_line": "161",
               "end_line": "176",
               "source_code": "        switch (compressionType) {\n\n            case TarFileOutputStream.Compression.NO_COMPRESSION :\n                writeStream = new FileOutputStream(writeFile);\n                break;\n\n            case TarFileOutputStream.Compression.GZIP_COMPRESSION :\n                writeStream =\n                    new GZIPOutputStream(new FileOutputStream(writeFile),\n                                         writeBuffer.length);\n                break;\n\n            default :\n                throw new IllegalArgumentException(\n                    RB.compression_unknown.getString(compressionType));\n        }"
           }

       },

       {
           "id": "clone_460",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "1652",
               "end_line": "1694",
               "source_code": "        switch (sourceType.typeCode) {\n\n            case Types.SQL_ARRAY :\n                return getArray(columnIndex);\n            case Types.SQL_DATE :\n                return getDate(columnIndex);\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                return getTime(columnIndex);\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                return getTimestamp(columnIndex);\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                return getBytes(columnIndex);\n            case Types.SQL_BIT : {\n                boolean b = getBoolean(columnIndex);\n\n                return wasNull() ? null\n                                 : b ? Boolean.TRUE\n                                     : Boolean.FALSE;\n            }\n            case Types.SQL_CLOB :\n                return getClob(columnIndex);\n            case Types.SQL_BLOB :\n                return getBlob(columnIndex);\n            case Types.OTHER :\n            case Types.JAVA_OBJECT : {\n                Object o = getColumnInType(columnIndex, sourceType);\n\n                if (o == null) {\n                    return null;\n                }\n\n                try {\n                    return ((JavaObjectData) o).getObject();\n                } catch (HsqlException e) {\n                    throw JDBCUtil.sqlException(e);\n                }\n            }\n            default :\n                return getColumnInType(columnIndex, sourceType);\n        }"
           },

           "clone": {
               "file": "JDBCCallableStatement.java",
               "start_line": "898",
               "end_line": "940",
               "source_code": "        switch (sourceType.typeCode) {\n\n            case Types.SQL_ARRAY :\n                return getArray(parameterIndex);\n            case Types.SQL_DATE :\n                return getDate(parameterIndex);\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                return getTime(parameterIndex);\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                return getTimestamp(parameterIndex);\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                return getBytes(parameterIndex);\n            case Types.SQL_BIT : {\n                boolean b = getBoolean(parameterIndex);\n\n                return wasNull() ? null\n                                 : b ? Boolean.TRUE\n                                     : Boolean.FALSE;\n            }\n            case Types.SQL_CLOB :\n                return getClob(parameterIndex);\n            case Types.SQL_BLOB :\n                return getBlob(parameterIndex);\n            case Types.OTHER :\n            case Types.JAVA_OBJECT : {\n                Object o = getColumnInType(parameterIndex, sourceType);\n\n                if (o == null) {\n                    return null;\n                }\n\n                try {\n                    return ((JavaObjectData) o).getObject();\n                } catch (HsqlException e) {\n                    throw JDBCUtil.sqlException(e);\n                }\n            }\n            default :\n                return getColumnInType(parameterIndex, sourceType);\n        }"
           }

       },

       {
           "id": "clone_461",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "2268",
               "end_line": "2277",
               "source_code": "        params[GET_LOB_PART.LOB_ID] = ValuePool.getLong(lobID);\n\n        sysLobSession.sessionContext.pushDynamicArguments(params);\n\n        Result result = getLastPart.execute(sysLobSession);\n\n        sysLobSession.sessionContext.pop();\n\n        RowSetNavigator navigator = result.getNavigator();\n        int             size      = navigator.getSize();"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "1950",
               "end_line": "1959",
               "source_code": "        params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getLong(limit);\n\n        sysLobSession.sessionContext.pushDynamicArguments(params);\n\n        Result result = getSpanningParts.execute(sysLobSession);\n\n        sysLobSession.sessionContext.pop();\n\n        RowSetNavigator navigator = result.getNavigator();\n        int             size      = navigator.getSize();"
           }

       },

       {
           "id": "clone_462",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "116",
               "end_line": "121",
               "source_code": "                break;\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                typeWidth = DOUBLE_WIDTH;"
           },

           "clone": {
               "file": "RangeVariable.java",
               "start_line": "1835",
               "end_line": "1840",
               "source_code": "                    break;\n\n                case OpTypes.GREATER :\n                case OpTypes.GREATER_EQUAL :\n                case OpTypes.GREATER_EQUAL_PRE :\n                    indexCond = exprList;"
           }

       },

       {
           "id": "clone_463",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "129",
               "end_line": "136",
               "source_code": "            case StatementTypes.DROP_INDEX :\n            case StatementTypes.DROP_CONSTRAINT :\n            case StatementTypes.DROP_COLUMN :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.GRANT :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "161",
               "end_line": "170",
               "source_code": "            //\n            case StatementTypes.PREPARABLE_DYNAMIC_DELETE_CURSOR :\n            case StatementTypes.PREPARABLE_DYNAMIC_UPDATE_CURSOR :\n            case StatementTypes.PREPARE :\n                group = StatementTypes.X_SQL_DYNAMIC;\n                break;\n\n            // logged by session\n            case StatementTypes.DISCONNECT :\n                group = StatementTypes.X_SQL_CONNECTION;"
           }

       },

       {
           "id": "clone_464",

           "clone_type": "type-2",

           "origin": {
               "file": "ConstraintCore.java",
               "start_line": "78",
               "end_line": "91",
               "source_code": "        ConstraintCore copy = new ConstraintCore();\n\n        copy.refName      = refName;\n        copy.mainName     = mainName;\n        copy.uniqueName   = uniqueName;\n        copy.mainTable    = mainTable;\n        copy.mainCols     = mainCols;\n        copy.mainIndex    = mainIndex;\n        copy.refTable     = refTable;\n        copy.refCols      = refCols;\n        copy.refIndex     = refIndex;\n        copy.deleteAction = deleteAction;\n        copy.updateAction = updateAction;\n        copy.matchType    = matchType;"
           },

           "clone": {
               "file": "Token.java",
               "start_line": "94",
               "end_line": "107",
               "source_code": "        Token token = new Token();\n\n        token.tokenString              = tokenString;\n        token.tokenType                = tokenType;\n        token.dataType                 = dataType;\n        token.tokenValue               = tokenValue;\n        token.namePrefix               = namePrefix;\n        token.namePrePrefix            = namePrePrefix;\n        token.namePrePrePrefix         = namePrePrePrefix;\n        token.charsetSchema            = charsetSchema;\n        token.charsetName              = charsetName;\n        token.fullString               = fullString;\n        token.lobMultiplierType        = lobMultiplierType;\n        token.isDelimiter              = isDelimiter;"
           }

       },

       {
           "id": "clone_465",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1307",
               "end_line": "1328",
               "source_code": "        // calculated column values\n        String  tableCatalog;\n        String  tableSchema;\n        String  tableName;\n        Boolean nonUnique;\n        String  indexQualifier;\n        String  indexName;\n        Integer indexType;\n\n        //Integer ordinalPosition;\n        //String  columnName;\n        //String  ascOrDesc;\n        Integer cardinality;\n        Integer pages;\n        String  filterCondition;\n        Integer rowCardinality;\n\n        // Intermediate holders\n        Iterator tables;\n        Table    table;\n        int      indexCount;\n        int[]    cols;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1111",
               "end_line": "1127",
               "source_code": "        String  fkTableSchema;\n        String  fkTableName;\n        String  fkColumnName;\n        Integer keySequence;\n        Integer updateRule;\n        Integer deleteRule;\n        String  fkName;\n        String  pkName;\n        Integer deferrability;\n\n        // Intermediate holders\n        Iterator      tables;\n        Table         table;\n        Table         fkTable;\n        Table         pkTable;\n        int           columnCount;\n        int[]         mainCols;"
           }

       },

       {
           "id": "clone_466",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5838",
               "end_line": "5884",
               "source_code": "        final int specific_name                          = 2;\n        final int routine_catalog                        = 3;\n        final int routine_schema                         = 4;\n        final int routine_name                           = 5;\n        final int routine_type                           = 6;\n        final int module_catalog                         = 7;\n        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_467",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSubQueriesInPreparedStatements.java",
               "start_line": "115",
               "end_line": "135",
               "source_code": "        while (rs.next()) {\n            System.out.println(rs.getInt(1));\n        }\n\n        System.out.println(\"Expecting: 15\");\n        pstmnt.setInt(2, 6);\n\n        rs = pstmnt.executeQuery();\n\n        while (rs.next()) {\n            System.out.println(rs.getInt(1));\n        }\n\n        pstmnt = conn.prepareStatement(\n            \"select * from (select i as c1 from t where i < ?) a, (select i as c2 from t where i < ?) b\");\n\n        System.out.println(\"Expecting: (0,0)\");\n        pstmnt.setInt(1, 1);\n        pstmnt.setInt(2, 1);\n\n        rs = pstmnt.executeQuery();"
           },

           "clone": {
               "file": "TestSubQueriesInPreparedStatements.java",
               "start_line": "93",
               "end_line": "113",
               "source_code": "        while (rs.next()) {\n            System.out.println(rs.getInt(1));\n        }\n\n        System.out.println(\"Expecting: 0..4\");\n        pstmnt.setInt(1, 5);\n\n        rs = pstmnt.executeQuery();\n\n        while (rs.next()) {\n            System.out.println(rs.getInt(1));\n        }\n\n        pstmnt = conn.prepareStatement(\n            \"select sum(i) from (select i from t where i between ? and ?)\");\n\n        System.out.println(\"Expecting: 9\");\n        pstmnt.setInt(1, 4);\n        pstmnt.setInt(2, 5);\n\n        rs = pstmnt.executeQuery();"
           }

       },

       {
           "id": "clone_468",

           "clone_type": "type-2",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "334",
               "end_line": "343",
               "source_code": "        CallableStatement cs = conn.prepareCall(\n            \"call get_columns_and_table('TABLES', 'INFORMATION_SCHEMA')\");\n        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "219",
               "end_line": "228",
               "source_code": "        CallableStatement cs =\n            conn.prepareCall(\"call proc_inout_result_two(varone)\");\n        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();"
           }

       },

       {
           "id": "clone_469",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "310",
               "end_line": "315",
               "source_code": "            //\n            case StatementTypes.OPEN :\n            case StatementTypes.PREPARABLE_DYNAMIC_DELETE_CURSOR :\n            case StatementTypes.PREPARABLE_DYNAMIC_UPDATE_CURSOR :\n            case StatementTypes.PREPARE :\n                return Result.updateZeroResult;"
           },

           "clone": {
               "file": "StatementDMQL.java",
               "start_line": "494",
               "end_line": "498",
               "source_code": "            case StatementTypes.DELETE_WHERE :\n            case StatementTypes.INSERT :\n            case StatementTypes.UPDATE_WHERE :\n            case StatementTypes.MERGE :\n                return ResultMetaData.emptyResultMetaData;"
           }

       },

       {
           "id": "clone_470",

           "clone_type": "type-2",

           "origin": {
               "file": "RCData.java",
               "start_line": "491",
               "end_line": "496",
               "source_code": "            case Connection.TRANSACTION_REPEATABLE_READ:\n                return \"TRANSACTION_REPEATABLE_READ\";\n            case Connection.TRANSACTION_SERIALIZABLE:\n                return \"TRANSACTION_SERIALIZABLE\";\n            case Connection.TRANSACTION_NONE:\n                return \"TRANSACTION_NONE\";"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "223",
               "end_line": "230",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return \"DAY TO HOUR\";\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return \"DAY TO MINUTE\";\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return \"DAY TO SECOND\";"
           }

       },

       {
           "id": "clone_471",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "241",
               "end_line": "248",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n                return Tokens.T_MINUTE;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                return \"MINUTE TO SECOND\";\n\n            case Types.SQL_INTERVAL_SECOND :\n                return Tokens.T_SECOND;"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "211",
               "end_line": "218",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n                return Tokens.T_YEAR;\n\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n                return \"YEAR TO MONTH\";\n\n            case Types.SQL_INTERVAL_MONTH :\n                return Tokens.T_MONTH;"
           }

       },

       {
           "id": "clone_472",

           "clone_type": "type-2",

           "origin": {
               "file": "DTIType.java",
               "start_line": "363",
               "end_line": "385",
               "source_code": "            case Tokens.MONTH_NAME :\n                return MONTH_NAME;\n\n            case Tokens.QUARTER :\n                return QUARTER;\n\n            case Tokens.DAY_OF_MONTH :\n                return DAY_OF_MONTH;\n\n            case Tokens.DAY_OF_WEEK :\n                return DAY_OF_WEEK;\n\n            case Tokens.DAY_OF_YEAR :\n                return DAY_OF_YEAR;\n\n            case Tokens.WEEK_OF_YEAR :\n                return WEEK_OF_YEAR;\n\n            case Tokens.SECONDS_MIDNIGHT :\n                return SECONDS_MIDNIGHT;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"DTIType\");"
           },

           "clone": {
               "file": "Right.java",
               "start_line": "600",
               "end_line": "622",
               "source_code": "            case GrantConstants.DELETE :\n                return isFullDelete;\n\n            case GrantConstants.SELECT :\n                return isFullSelect;\n\n            case GrantConstants.INSERT :\n                return isFullInsert;\n\n            case GrantConstants.UPDATE :\n                return isFullUpdate;\n\n            case GrantConstants.REFERENCES :\n                return isFullReferences;\n\n            case GrantConstants.TRIGGER :\n                return isFullTrigger;\n\n            case GrantConstants.EXECUTE :\n                return isFull;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"Right\");"
           }

       },

       {
           "id": "clone_473",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "240",
               "end_line": "246",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                return true;\n\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "440",
               "end_line": "446",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return false;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_474",

           "clone_type": "type-2",

           "origin": {
               "file": "PersistentStoreCollectionSession.java",
               "start_line": "306",
               "end_line": "314",
               "source_code": "            case TableBase.SCOPE_TRANSACTION :\n                store = (PersistentStore) rowStoreMapTransaction.get(\n                    table.getPersistenceId());\n                break;\n\n            case TableBase.SCOPE_SESSION :\n                store = (PersistentStore) rowStoreMapSession.get(\n                    table.getPersistenceId());\n                break;"
           },

           "clone": {
               "file": "PersistentStoreCollectionSession.java",
               "start_line": "294",
               "end_line": "302",
               "source_code": "            case TableBase.SCOPE_ROUTINE :\n                store = (PersistentStore) rowStoreMapRoutine.get(\n                    table.getPersistenceId());\n                break;\n\n            case TableBase.SCOPE_STATEMENT :\n                store = (PersistentStore) rowStoreMapStatement.get(\n                    table.getPersistenceId());\n                break;"
           }

       },

       {
           "id": "clone_475",

           "clone_type": "type-2",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "169",
               "end_line": "177",
               "source_code": "        st.execute(\"set table tident source off\");\n        st.execute(\"set table tsingle source off\");\n\n        st.execute(\"alter table tsingle add unique(c1)\");\n\n        st.execute(\"alter table tident add foreign key (c1) references tmsingle(c1)\");\n\n        st.execute(\"set table tident source on\");\n        st.execute(\"set table tsingle source on\");"
           },

           "clone": {
               "file": "TestHarness.java",
               "start_line": "250",
               "end_line": "257",
               "source_code": "                stmt.execute(\n                    \"CREATE TABLE MyTable (Id INT PRIMARY KEY, Name VARCHAR(100) NOT NULL)\");\n                stmt.execute(\"CREATE TABLE Dummy (Blah VARCHAR(100) NOT NULL)\");\n                stmt.execute(\n                    \"INSERT INTO Dummy (Blah) VALUES ('dummy value')\");\n                stmt.execute(\"GRANT ALL ON MyTable TO abcd\");\n                stmt.execute(\"GRANT ALL ON Dummy TO abcd\");\n                stmt.execute(\"GRANT ALL ON SEQUENCE MySeq TO abcd\");"
           }

       },

       {
           "id": "clone_476",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5493",
               "end_line": "5598",
               "source_code": "    /**\n     * SQL:2008 VIEW<p>\n     *\n     * The ROUTINE_SEQUENCE_USAGE view has one row for each SEQUENCE\n     * referenced in the body of a routine.<p>\n     *\n     * <b>Definition:</b><p>\n     *\n     *      SPECIFIC_CATALOG    VARCHAR ,\n     *      SPECIFIC_SCHEMA     VARCHAR ,\n     *      SPECIFIC_NAME       VARCHAR ,\n     *      SEQUENCE_CATALOG    VARCHAR ,\n     *      SEQUENCE_SCHEMA     VARCHAR ,\n     *      SEQUENCE_NAME       VARCHAR ,\n     *\n     * </pre>\n     *\n     * <b>Description:</b> <p>\n     *\n     * <ol>\n     * <li> The values of SPECIFIC_CATALOG, SPECIFIC_SCHEMA and\n     *      SPECIFIC_NAME are the catalog name, schema name,\n     *      specific routine identifier, respectively, of the routine. <p>\n     * <li> The values of SEQUENCE_CATALOG, SEQUENCE_SCHEMA and SEQUENCE_NAME\n     *      are the catalog name, schema name and\n     *      identifier, respectively, of a SEQUENCE\n     *      reference in the routine body.<>\n     *\n     * <1i> Referenced sequences are reported only if the user or one of its roles is\n     *      the authorization (owner) of the SEQUENCE.\n     *\n     * </ol>\n     *\n     * @return Table\n     */\n    Table ROUTINE_SEQUENCE_USAGE(Session session, PersistentStore store) {\n\n        Table t = sysTables[ROUTINE_SEQUENCE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ROUTINE_SEQUENCE_USAGE]);\n\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINE_SEQUENCE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int sequence_catalog = 3;\n        final int sequence_schema  = 4;\n        final int sequence_name    = 5;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SPECIFIC_ROUTINE);\n\n        while (it.hasNext()) {\n            Routine        routine = (Routine) it.next();\n            OrderedHashSet set     = routine.getReferences();\n\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName refName = (HsqlName) set.get(i);\n\n                if (refName.type != SchemaObject.SEQUENCE) {\n                    continue;\n                }\n\n                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;\n                row[specific_name]    = routine.getSpecificName().name;\n                row[sequence_catalog] = database.getCatalogName().name;\n                row[sequence_schema]  = refName.schema.name;\n                row[sequence_name]    = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}\n            }\n        }\n\n        return t;\n    }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5386",
               "end_line": "5491",
               "source_code": "    /**\n     * SQL:2008 VIEW<p>\n     *\n     * The ROUTINE_ROUTINE_USAGE view has one row for each routine\n     * referenced in the body of a routine.<p>\n     *\n     * <b>Definition:</b><p>\n     *\n     *      SPECIFIC_CATALOG    VARCHAR ,\n     *      SPECIFIC_SCHEMA     VARCHAR ,\n     *      SPECIFIC_NAME       VARCHAR ,\n     *      ROUTINE_CATALOG     VARCHAR ,\n     *      ROUTINE_SCHEMA      VARCHAR ,\n     *      ROUTINE_NAME        VARCHAR ,\n     *\n     * </pre>\n     *\n     * <b>Description:</b> <p>\n     *\n     * <ol>\n     * <li> The values of SPECIFIC_CATALOG, SPECIFIC_SCHEMA and\n     *      SPECIFIC_NAME are the catalog name, schema name,\n     *      specific routine identifier, respectively, of the routine\n     *      which contains the reference. <p>\n     * <li> The values of ROUTINE_CATALOG, ROUTINE_SCHEMA and ROUTINE_NAME\n     *      are the catalog name, schema name and\n     *      identifier, respectively, of the routine that is referenced.<p>\n     *\n     * <1i> Referenced routines are reported only if the user or one of its roles is\n     *      the authorization (owner) of the referenced routine.\n     *\n     * </ol>\n     *\n     * @return Table\n     */\n    Table ROUTINE_ROUTINE_USAGE(Session session, PersistentStore store) {\n\n        Table t = sysTables[ROUTINE_ROUTINE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ROUTINE_ROUTINE_USAGE]);\n\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINE_ROUTINE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int routine_catalog  = 3;\n        final int routine_schema   = 4;\n        final int routine_name     = 5;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SPECIFIC_ROUTINE);\n\n        while (it.hasNext()) {\n            Routine        routine = (Routine) it.next();\n            OrderedHashSet set     = routine.getReferences();\n\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName refName = (HsqlName) set.get(i);\n\n                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {\n                    continue;\n                }\n\n                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;\n                row[specific_name]    = routine.getSpecificName().name;\n                row[routine_catalog]  = database.getCatalogName().name;\n                row[routine_schema]   = refName.schema.name;\n                row[routine_name]     = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}\n            }\n        }\n\n        return t;\n    }"
           }

       },

       {
           "id": "clone_477",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcService.java",
               "start_line": "213",
               "end_line": "225",
               "source_code": "            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"first\", rs.getString(4));\n            assertEquals(15, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"fifteen\", rs.getString(3));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(21, rs.getInt(1));\n            assertEquals(\"twenty one\", rs.getString(3));\n            assertEquals(\"first\", rs.getString(4));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcService.java",
               "start_line": "96",
               "end_line": "108",
               "source_code": "            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(5, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"five\", rs.getString(3));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(40, rs.getInt(1));\n            assertEquals(\"forty\", rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertFalse(\"Too many rows fetched\", rs.next());"
           }

       },

       {
           "id": "clone_478",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "890",
               "end_line": "897",
               "source_code": "                    Query  += \"WHERE  Tid = ?\";\n                    pstmt3 = Conn.prepareStatement(Query);\n                    Query  = \"UPDATE branches \";\n                    Query  += \"SET    Bbalance = Bbalance + ? \";\n                    Query  += \"WHERE  Bid = ?\";\n                    pstmt4 = Conn.prepareStatement(Query);\n                    Query  = \"INSERT INTO history(Tid, Bid, Aid, delta) \";\n                    Query  += \"VALUES (?,?,?,?)\";"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "882",
               "end_line": "889",
               "source_code": "                    Query  += \"WHERE   Aid = ?\";\n                    pstmt1 = Conn.prepareStatement(Query);\n                    Query  = \"SELECT Abalance \";\n                    Query  += \"FROM   accounts \";\n                    Query  += \"WHERE  Aid = ?\";\n                    pstmt2 = Conn.prepareStatement(Query);\n                    Query  = \"UPDATE tellers \";\n                    Query  += \"SET    Tbalance = Tbalance + ? \";"
           }

       },

       {
           "id": "clone_479",

           "clone_type": "type-2",

           "origin": {
               "file": "Transfer.java",
               "start_line": "457",
               "end_line": "484",
               "source_code": "            if ((iTransferMode == TRFM_RESTORE)\n                    || (iTransferMode == TRFM_TRANSFER)) {\n                targetDb = new TransferDb(\n                    ConnectionDialog.createConnection(\n                        fMain, \"Target Database\"), this);\n\n                if (!targetDb.isConnected()) {\n                    exit();\n\n                    return;\n                }\n            } else {\n                FileDialog f = new FileDialog(fMain, \"Dump FileName\",\n                                              FileDialog.SAVE);\n\n                f.show();\n\n                String sFileName = f.getFile();\n                String Path      = f.getDirectory();\n\n                if ((sFileName == null) || (sFileName.equals(\"\"))) {\n                    exit();\n\n                    return;\n                } else {\n                    targetDb = new TransferSQLText(Path + sFileName, this);\n                }\n            }"
           },

           "clone": {
               "file": "Transfer.java",
               "start_line": "428",
               "end_line": "455",
               "source_code": "            if ((iTransferMode == TRFM_DUMP)\n                    || (iTransferMode == TRFM_TRANSFER)) {\n                sourceDb = new TransferDb(\n                    ConnectionDialog.createConnection(\n                        fMain, \"Source Database\"), this);\n\n                if (!sourceDb.isConnected()) {\n                    exit();\n\n                    return;\n                }\n            } else {\n                FileDialog f = new FileDialog(fMain, \"Restore FileName\",\n                                              FileDialog.LOAD);\n\n                f.show();\n\n                String sFileName = f.getFile();\n                String Path      = f.getDirectory();\n\n                if ((sFileName == null) || (sFileName.equals(\"\"))) {\n                    exit();\n\n                    return;\n                } else {\n                    sourceDb = new TransferSQLText(Path + sFileName, this);\n                }\n            }"
           }

       },

       {
           "id": "clone_480",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1537",
               "end_line": "1549",
               "source_code": "            case Types.SQL_TIMESTAMP :\n                if (scale == DTIType.defaultTimestampFractionPrecision) {\n                    return SQL_TIMESTAMP;\n                }\n\n                return new DateTimeType(Types.SQL_TIMESTAMP, type, scale);\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                if (scale == DTIType.defaultTimestampFractionPrecision) {\n                    return SQL_TIMESTAMP_WITH_TIME_ZONE;\n                }\n\n                return new DateTimeType(Types.SQL_TIMESTAMP, type, scale);"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "1523",
               "end_line": "1535",
               "source_code": "            case Types.SQL_TIME :\n                if (scale == DTIType.defaultTimeFractionPrecision) {\n                    return SQL_TIME;\n                }\n\n                return new DateTimeType(Types.SQL_TIME, type, scale);\n\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                if (scale == DTIType.defaultTimeFractionPrecision) {\n                    return SQL_TIME_WITH_TIME_ZONE;\n                }\n\n                return new DateTimeType(Types.SQL_TIME, type, scale);"
           }

       },

       {
           "id": "clone_481",

           "clone_type": "type-2",

           "origin": {
               "file": "RangeVariable.java",
               "start_line": "1847",
               "end_line": "1852",
               "source_code": "                    opTypeEnd     = OpTypes.MAX;\n                    opTypesEnd[0] = OpTypes.MAX;\n                    break;\n\n                case OpTypes.SMALLER :\n                case OpTypes.SMALLER_EQUAL :"
           },

           "clone": {
               "file": "RangeVariable.java",
               "start_line": "1833",
               "end_line": "1838",
               "source_code": "                    opTypeEnd     = OpTypes.MAX;\n                    opTypesEnd[0] = OpTypes.MAX;\n                    break;\n\n                case OpTypes.GREATER :\n                case OpTypes.GREATER_EQUAL :"
           }

       },

       {
           "id": "clone_482",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "1348",
               "end_line": "1355",
               "source_code": "                    read();\n                    readThis(Tokens.JOIN);\n                    break;\n\n                case Tokens.UNION :\n                    if (natural) {\n                        throw unexpectedToken();\n                    }"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "1339",
               "end_line": "1346",
               "source_code": "                    read();\n                    readThis(Tokens.JOIN);\n                    break;\n\n                case Tokens.CROSS :\n                    if (natural) {\n                        throw unexpectedToken();\n                    }"
           }

       },

       {
           "id": "clone_483",

           "clone_type": "type-2",

           "origin": {
               "file": "Statement.java",
               "start_line": "221",
               "end_line": "227",
               "source_code": "            case StatementTypes.X_SQL_SCHEMA_DEFINITION :\n            case StatementTypes.X_SQL_SCHEMA_MANIPULATION :\n            case StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION :\n                return true;\n\n            default :\n                return false;"
           },

           "clone": {
               "file": "Types.java",
               "start_line": "704",
               "end_line": "710",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                return true;\n\n            default :\n                return false;"
           }

       },

       {
           "id": "clone_484",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1015",
               "end_line": "1020",
               "source_code": "            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIME :\n                sb.append(Tokens.T_TIME);\n                break;\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "588",
               "end_line": "593",
               "source_code": "            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :\n                sb.append(Tokens.T_MATCH);\n                break;\n\n            case OpTypes.IS_NULL :"
           }

       },

       {
           "id": "clone_485",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "557",
               "end_line": "582",
               "source_code": "            Statement Stmt = Conn.createStatement();\n            String    Query;\n\n            Query = \"DELETE FROM history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            if (transactions) {\n                Conn.commit();\n            }"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "428",
               "end_line": "453",
               "source_code": "            Statement Stmt = Conn.createStatement();\n            String    Query;\n\n            Query = \"DROP TABLE history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            if (transactions) {\n                Conn.commit();\n            }"
           }

       },

       {
           "id": "clone_486",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1497",
               "end_line": "1510",
               "source_code": "                    break;\n\n                case Tokens.MERGE :\n                    if (label != null) {\n                        throw unexpectedToken();\n                    }\n\n                    cs = compileMergeStatement(rangeGroups);\n                    break;\n\n                case Tokens.SET :\n                    if (label != null) {\n                        throw unexpectedToken();\n                    }"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1481",
               "end_line": "1494",
               "source_code": "                    break;\n\n                case Tokens.DELETE :\n                    if (label != null) {\n                        throw unexpectedToken();\n                    }\n\n                    cs = compileDeleteStatement(rangeGroups);\n                    break;\n\n                case Tokens.TRUNCATE :\n                    if (label != null) {\n                        throw unexpectedToken();\n                    }"
           }

       },

       {
           "id": "clone_487",

           "clone_type": "type-2",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "150",
               "end_line": "158",
               "source_code": "        st.execute(\"set table tsingle read write\");\n\n        st.execute(\"SHUTDOWN SCRIPT\");\n\n        conn = newConnection();\n\n        st = conn.createStatement();\n\n        st.execute(\"create memory table tmsingle (c1 int primary key)\");"
           },

           "clone": {
               "file": "TestTextTables.java",
               "start_line": "135",
               "end_line": "141",
               "source_code": "        st.execute(\"set table tsingle read only\");\n        st.execute(\"SHUTDOWN SCRIPT\");\n\n        conn = newConnection();\n        st   = conn.createStatement();\n\n        st.execute(\"SHUTDOWN SCRIPT\");"
           }

       },

       {
           "id": "clone_488",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5752",
               "end_line": "5798",
               "source_code": "            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_489",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1850",
               "end_line": "1863",
               "source_code": "        //\n        final int procedure_catalog = 0;\n        final int procedure_schema  = 1;\n        final int procedure_name    = 2;\n        final int col_4             = 3;\n        final int col_5             = 4;\n        final int col_6             = 5;\n        final int remarks           = 6;\n        final int procedure_type    = 7;\n        final int specific_name     = 8;\n\n        //\n        Iterator it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SPECIFIC_ROUTINE);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7900",
               "end_line": "7912",
               "source_code": "        final int datetime_precision         = 24;\n        final int interval_type              = 25;\n        final int interval_precision         = 26;\n        final int source_dtd_identifier      = 27;\n        final int ref_dtd_identifier         = 28;\n        final int declared_data_type         = 29;\n        final int declared_numeric_precision = 30;\n        final int declared_numeric_scale     = 31;\n        final int maximum_cardinality        = 32;\n\n        //\n        Iterator it =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TYPE);"
           }

       },

       {
           "id": "clone_490",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "522",
               "end_line": "528",
               "source_code": "                break;\n\n            case OpTypes.PREFIX :\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"ExpressionOp\");"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "2100",
               "end_line": "2107",
               "source_code": "                break;\n\n            case OpTypes.EQUAL :\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500,\n                                         \"ExpressionLogical\");"
           }

       },

       {
           "id": "clone_491",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5179",
               "end_line": "5203",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ROUTINE_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n\n            //\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINE_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5053",
               "end_line": "5076",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ROUTINE_COLUMN_USAGE]);\n\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINE_COLUMN_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                3, 4, 5, 0, 1, 2, 6, 7, 8, 9\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_492",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2505",
               "end_line": "2512",
               "source_code": "            addColumn(t, \"FIXED_PREC_SCALE\", Type.SQL_BOOLEAN);\n            addColumn(t, \"AUTO_INCREMENT\", Type.SQL_BOOLEAN);\n            addColumn(t, \"LOCAL_TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MINIMUM_SCALE\", Type.SQL_SMALLINT);\n            addColumn(t, \"MAXIMUM_SCALE\", Type.SQL_SMALLINT);\n            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);\n            addColumn(t, \"NUM_PREC_RADIX\", Type.SQL_INTEGER);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1619",
               "end_line": "1626",
               "source_code": "            addColumn(t, \"COLUMN_TYPE\", Type.SQL_SMALLINT);         // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not null\n            addColumn(t, \"PRECISION\", Type.SQL_INTEGER);            // 7\n            addColumn(t, \"LENGTH\", Type.SQL_INTEGER);               // 8\n            addColumn(t, \"SCALE\", Type.SQL_SMALLINT);               // 9\n            addColumn(t, \"RADIX\", Type.SQL_SMALLINT);               // 10\n            addColumn(t, \"NULLABLE\", Type.SQL_SMALLINT);            // not null"
           }

       },

       {
           "id": "clone_493",

           "clone_type": "type-2",

           "origin": {
               "file": "QueryExpression.java",
               "start_line": "699",
               "end_line": "705",
               "source_code": "                case UNION :\n                    rowSet.union(session, tempNavigator);\n                    break;\n\n                case UNION_ALL :\n                    rowSet.unionAll(session, tempNavigator);\n                    break;"
           },

           "clone": {
               "file": "QueryExpression.java",
               "start_line": "630",
               "end_line": "636",
               "source_code": "            case UNION :\n                navigator.union(session, rightNavigator);\n                break;\n\n            case UNION_ALL :\n                navigator.unionAll(session, rightNavigator);\n                break;"
           }

       },

       {
           "id": "clone_494",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "628",
               "end_line": "639",
               "source_code": "        execSQL(\"CREATE UNIQUE INDEX tstinda \" + pref + \"ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TRIGGER tsttrigz AFTER \" + pref\n                + \"INSERT ON triggedtbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", expect);\n        execSQL(\"CREATE VIEW tstviewx AS SELECT * \" + pref\n                + \"FROM tsttbl WHERE i < 10\", expect);\n\n        execSQL(\"CREATE USER tstuserc PASSWORD \" + pref + \"fake\", expect);\n\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "618",
               "end_line": "627",
               "source_code": "        execSQL(\"CREATE \" + pref + \"INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TRIGGER tsttrigy \" + pref\n                + \"AFTER INSERT ON triggedtbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", expect);\n        execSQL(\"CREATE USER tstuserb \" + pref + \"PASSWORD fake\", expect);\n        execSQL(\"CREATE VIEW tstviewx AS \" + pref\n                + \"SELECT * FROM tsttbl WHERE i < 10\", expect);\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset"
           }

       },

       {
           "id": "clone_495",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1193",
               "end_line": "1209",
               "source_code": "            case Tokens.CONTINUE :\n                read();\n\n                handlerType = StatementHandler.CONTINUE;\n                break;\n\n            case Tokens.EXIT :\n                read();\n\n                handlerType = StatementHandler.EXIT;\n                break;\n\n            case Tokens.UNDO :\n                read();\n\n                handlerType = StatementHandler.UNDO;\n                break;"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1317",
               "end_line": "1333",
               "source_code": "                    case Tokens.MVCC :\n                        read();\n\n                        mode = TransactionManager.MVCC;\n                        break;\n\n                    case Tokens.MVLOCKS :\n                        read();\n\n                        mode = TransactionManager.MVLOCKS;\n                        break;\n\n                    case Tokens.LOCKS :\n                        read();\n\n                        mode = TransactionManager.LOCKS;\n                        break;"
           }

       },

       {
           "id": "clone_496",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "558",
               "end_line": "588",
               "source_code": "            case FUNC_REVERSE :\n            case FUNC_ROUNDMAGIC :\n            case FUNC_SIGN :\n            case FUNC_SIN :\n            case FUNC_SOUNDEX :\n            case FUNC_SPACE :\n            case FUNC_SYS_EXTRACT_UTC :\n            case FUNC_TAN :\n            case FUNC_TIMESTAMP_WITH_ZONE :\n            case FUNC_TO_DSINTERVAL :\n            case FUNC_TO_YMINTERVAL :\n            case FUNC_TO_NUMBER :\n                parseList = singleParamList;\n                break;\n\n            case FUNC_ADD_MONTHS :\n            case FUNC_ATAN2 :\n            case FUNC_CONCAT :\n            case FUNC_CRYPT_KEY :\n            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :\n            case FUNC_DIFFERENCE :\n            case FUNC_FROM_TZ :\n            case FUNC_LEFT :\n            case FUNC_MONTHS_BETWEEN :\n            case FUNC_NEXT_DAY :\n            case FUNC_NUMTODSINTERVAL :\n            case FUNC_NUMTOYMINTERVAL :\n            case FUNC_REGEXP_MATCHES :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "527",
               "end_line": "557",
               "source_code": "            case FUNC_ISREADONLYDATABASE :\n            case FUNC_ISREADONLYDATABASEFILES :\n            case FUNC_ISREADONLYSESSION :\n            case FUNC_PI :\n            case FUNC_SESSION_ID :\n            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_SESSION_TIMEZONE :\n            case FUNC_SESSIONTIMEZONE :\n            case FUNC_TIMEZONE :\n            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n                parseList = emptyParamList;\n                break;\n\n            case FUNC_ACOS :\n            case FUNC_ASCII :\n            case FUNC_ASIN :\n            case FUNC_ATAN :\n            case FUNC_BITNOT :\n            case FUNC_CHAR :\n            case FUNC_COS :\n            case FUNC_COT :\n            case FUNC_DEGREES :\n            case FUNC_DAYS :\n            case FUNC_HEXTORAW :\n            case FUNC_LAST_DAY :\n            case FUNC_LOB_ID :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_RAWTOHEX :"
           }

       },

       {
           "id": "clone_497",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "413",
               "end_line": "418",
               "source_code": "                s += INT_STORE_SIZE;\n                s += ((BinaryData) o).length(null);\n                break;\n\n            case Types.SQL_CLOB :\n            case Types.SQL_BLOB :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "407",
               "end_line": "412",
               "source_code": "                s += INT_STORE_SIZE;\n                s += ((BinaryData) o).length(null);\n                break;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :"
           }

       },

       {
           "id": "clone_498",

           "clone_type": "type-2",

           "origin": {
               "file": "TestMerge.java",
               "start_line": "415",
               "end_line": "421",
               "source_code": "        TestCase   testG  = new TestMerge(\"testMerge7\");\n        TestCase   testH  = new TestMerge(\"testMerge8\");\n        TestCase   testI  = new TestMerge(\"testMerge9\");\n\n        testA.run(result);\n        testB.run(result);\n        testC.run(result);"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "928",
               "end_line": "934",
               "source_code": "        TestCase   testA  = new TestSql(\"testMetaData\");\n        TestCase   testB  = new TestSql(\"testDoubleNaN\");\n        TestCase   testC  = new TestSql(\"testAny\");\n\n        testA.run(result);\n        testB.run(result);\n        testC.run(result);"
           }

       },

       {
           "id": "clone_499",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8346",
               "end_line": "8360",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                = t.getEmptyRowData();\n                row[view_catalog]  = database.getCatalogName().name;\n                row[view_schema]   = table.getSchemaName().name;\n                row[view_name]     = table.getName().name;\n                row[table_catalog] = database.getCatalogName().name;\n                row[table_schema]  = refName.schema.name;\n                row[table_name]    = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8227",
               "end_line": "8241",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[view_catalog]     = database.getCatalogName().name;\n                row[view_schema]      = table.getSchemaName().name;\n                row[view_name]        = table.getName().name;\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = refName.schema.name;\n                row[specific_name]    = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           }

       },

       {
           "id": "clone_500",

           "clone_type": "type-2",

           "origin": {
               "file": "Type.java",
               "start_line": "997",
               "end_line": "1004",
               "source_code": "            case Types.SQL_BIT_VARYING :\n                return Types.BIT;\n\n            case Types.SQL_ARRAY :\n                return Types.ARRAY;\n\n            default :\n                return type;"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "959",
               "end_line": "966",
               "source_code": "            case Types.BLOB :\n                return Types.SQL_BLOB;\n\n            case Types.ARRAY :\n                return Types.SQL_ARRAY;\n\n            default :\n                return jdbcTypeNumber;"
           }

       },

       {
           "id": "clone_501",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "1135",
               "end_line": "1140",
               "source_code": "                rowOut.writeString(mainString);\n                rowOut.writeString(subString);\n                rowOut.writeInt(errorCode);\n                break;\n\n            case ResultConstants.CONNECTACKNOWLEDGE :"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "1128",
               "end_line": "1133",
               "source_code": "                rowOut.writeString(subString);\n                rowOut.writeString(zoneString);\n                rowOut.writeInt(updateCount);\n                break;\n\n            case ResultConstants.ERROR :"
           }

       },

       {
           "id": "clone_502",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "603",
               "end_line": "612",
               "source_code": "            for (int i = 0; i < 100; i++) {\n                reader = dataClob.getCharacterStream();\n\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "530",
               "end_line": "539",
               "source_code": "            for (int i = 0; i < 1000; i++) {\n                reader = dataClob.getCharacterStream();\n\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }"
           }

       },

       {
           "id": "clone_503",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8561",
               "end_line": "8572",
               "source_code": "            t = createBlankTable(\n                sysTableHsqlNames[ROLE_AUTHORIZATION_DESCRIPTORS]);\n\n            addColumn(t, \"ROLE_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);      // not null\n\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROLE_AUTHORIZATION_DESCRIPTORS].name, false,\n                SchemaObject.INDEX);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6406",
               "end_line": "6414",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[SQL_SIZING]);\n\n            addColumn(t, \"SIZING_ID\", CARDINAL_NUMBER);\n            addColumn(t, \"SIZING_NAME\", CHARACTER_DATA);\n            addColumn(t, \"SUPPORTED_VALUE\", CARDINAL_NUMBER);\n            addColumn(t, \"COMMENTS\", CHARACTER_DATA);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SQL_SIZING].name, false, SchemaObject.INDEX);"
           }

       },

       {
           "id": "clone_504",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "4985",
               "end_line": "5015",
               "source_code": "                return \"NUMERIC\";\n\n            case java.sql.Types.OTHER :\n                return \"OTHER\";\n\n            case java.sql.Types.REAL :\n                return \"REAL\";\n\n            case java.sql.Types.REF :\n                return \"REF\";\n\n            case java.sql.Types.SMALLINT :\n                return \"SMALLINT\";\n\n            case java.sql.Types.STRUCT :\n                return \"STRUCT\";\n\n            case java.sql.Types.TIME :\n                return \"TIME\";\n\n            case java.sql.Types.TIMESTAMP :\n                return \"TIMESTAMP\";\n\n            case java.sql.Types.TINYINT :\n                return \"TINYINT\";\n\n            case java.sql.Types.VARBINARY :\n                return \"VARBINARY\";\n\n            case java.sql.Types.VARCHAR :\n                return \"VARCHAR\";"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "4952",
               "end_line": "4982",
               "source_code": "                return \"DATALINK\";\n\n            case java.sql.Types.DATE :\n                return \"DATE\";\n\n            case java.sql.Types.DECIMAL :\n                return \"DECIMAL\";\n\n            case java.sql.Types.DISTINCT :\n                return \"DISTINCT\";\n\n            case java.sql.Types.DOUBLE :\n                return \"DOUBLE\";\n\n            case java.sql.Types.FLOAT :\n                return \"FLOAT\";\n\n            case java.sql.Types.INTEGER :\n                return \"INTEGER\";\n\n            case java.sql.Types.JAVA_OBJECT :\n                return \"JAVA_OBJECT\";\n\n            case java.sql.Types.LONGVARBINARY :\n                return \"LONGVARBINARY\";\n\n            case java.sql.Types.LONGVARCHAR :\n                return \"LONGVARCHAR\";\n\n            case java.sql.Types.NULL :\n                return \"NULL\";"
           }

       },

       {
           "id": "clone_505",

           "clone_type": "type-2",

           "origin": {
               "file": "Server.java",
               "start_line": "703",
               "end_line": "709",
               "source_code": "            case ServerConstants.SERVER_STATE_CLOSING :\n                state = \"CLOSING\";\n                break;\n\n            case ServerConstants.SERVER_STATE_ONLINE :\n                state = \"ONLINE\";\n                break;"
           },

           "clone": {
               "file": "Server.java",
               "start_line": "695",
               "end_line": "701",
               "source_code": "            case ServerConstants.SERVER_STATE_SHUTDOWN :\n                state = \"SHUTDOWN\";\n                break;\n\n            case ServerConstants.SERVER_STATE_OPENING :\n                state = \"OPENING\";\n                break;"
           }

       },

       {
           "id": "clone_506",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementInsert.java",
               "start_line": "87",
               "end_line": "96",
               "source_code": "        super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,\n              session.getCurrentSchemaHsqlName());\n\n        this.targetTable = targetTable;\n        this.baseTable   = targetTable.isTriggerInsertable() ? targetTable\n                                                             : targetTable\n                                                             .getBaseTable();\n        this.insertColumnMap    = columnMap;\n        this.insertCheckColumns = checkColumns;\n        this.queryExpression    = queryExpression;"
           },

           "clone": {
               "file": "StatementInsert.java",
               "start_line": "60",
               "end_line": "69",
               "source_code": "        super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,\n              session.getCurrentSchemaHsqlName());\n\n        this.targetTable = targetTable;\n        this.baseTable   = targetTable.isTriggerInsertable() ? targetTable\n                                                             : targetTable\n                                                             .getBaseTable();\n        this.insertColumnMap    = columnMap;\n        this.insertCheckColumns = checkColumns;\n        this.insertExpression   = insertExpression;"
           }

       },

       {
           "id": "clone_507",

           "clone_type": "type-2",

           "origin": {
               "file": "TestMerge.java",
               "start_line": "409",
               "end_line": "414",
               "source_code": "        TestCase   testA  = new TestMerge(\"testMerge1\");\n        TestCase   testB  = new TestMerge(\"testMerge2\");\n        TestCase   testC  = new TestMerge(\"testMerge3\");\n        TestCase   testD  = new TestMerge(\"testMerge4\");\n        TestCase   testE  = new TestMerge(\"testMerge5\");\n        TestCase   testF  = new TestMerge(\"testMerge6\");"
           },

           "clone": {
               "file": "TransferDb.java",
               "start_line": "438",
               "end_line": "443",
               "source_code": "        String    alterCreate    = new String(\"\");\n        String    alterDrop      = new String(\"\");\n        String    ConstraintName = new String(\"\");\n        String    RefTableName   = new String(\"\");\n        String    foreignKeyName = new String(\"\");\n        String    columnName     = new String(\"\");"
           }

       },

       {
           "id": "clone_508",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqlDeque.java",
               "start_line": "188",
               "end_line": "202",
               "source_code": "    public boolean add(Object o) {\n\n        resetCapacity();\n\n        if (endindex == list.length) {\n            endindex = 0;\n        }\n\n        list[endindex] = o;\n\n        elementCount++;\n        endindex++;\n\n        return true;\n    }"
           },

           "clone": {
               "file": "LongDeque.java",
               "start_line": "136",
               "end_line": "150",
               "source_code": "    public boolean add(long value) {\n\n        resetCapacity();\n\n        if (endindex == list.length) {\n            endindex = 0;\n        }\n\n        list[endindex] = value;\n\n        elementCount++;\n        endindex++;\n\n        return true;\n    }"
           }

       },

       {
           "id": "clone_509",

           "clone_type": "type-2",

           "origin": {
               "file": "RowStoreAVLDisk.java",
               "start_line": "273",
               "end_line": "281",
               "source_code": "                break;\n\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n\n                // remove info after delete but before removing persistence\n                database.txManager.removeTransactionInfo(row);\n                remove(row);\n                break;"
           },

           "clone": {
               "file": "RowStoreAVLDisk.java",
               "start_line": "248",
               "end_line": "256",
               "source_code": "                break;\n\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n\n                // remove info after delete but before removing persistence\n                database.txManager.removeTransactionInfo(row);\n                remove(row);\n                break;"
           }

       },

       {
           "id": "clone_510",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "352",
               "end_line": "356",
               "source_code": "            String dml0 = \"insert into clobtest values(default, ?, ?, ?)\";\n            String            dql0 = \"select * from clobtest;\";\n            PreparedStatement ps   = connection.prepareStatement(dml0);\n            String            data = \"Testing clob insert and select ops\";\n            Clob              clob = new JDBCClob(data);"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "272",
               "end_line": "276",
               "source_code": "            String dml0 = \"insert into clobtest(clobfield) values(?)\";\n            String            dql0 = \"select * from clobtest;\";\n            PreparedStatement ps   = connection.prepareStatement(dml0);\n            String            data = \"Testing clob insert and select ops\";\n            Clob              clob = new JDBCClob(data);"
           }

       },

       {
           "id": "clone_511",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "111",
               "end_line": "118",
               "source_code": "                typeWidth = INTEGER_WIDTH;\n                break;\n\n            case Types.SQL_BIGINT :\n                typeWidth = BIGINT_WIDTH;\n                break;\n\n            case Types.SQL_REAL :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "103",
               "end_line": "110",
               "source_code": "                typeWidth = TINYINT_WIDTH;\n                break;\n\n            case Types.SQL_SMALLINT :\n                typeWidth = SMALLINT_WIDTH;\n                break;\n\n            case Types.SQL_INTEGER :"
           }

       },

       {
           "id": "clone_512",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "287",
               "end_line": "293",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                writeBinary((BinaryData) o);\n                break;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "223",
               "end_line": "229",
               "source_code": "            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                writeReal((Double) o);\n                break;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_513",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "260",
               "end_line": "266",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                o = readBinary();\n                break;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "197",
               "end_line": "203",
               "source_code": "            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                o = readReal();\n                break;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_514",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3455",
               "end_line": "3480",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TABLES]);\n\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"SELF_REFERENCING_COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"REFERENCE_GENERATION\", CHARACTER_DATA);\n            addColumn(t, \"USER_DEFINED_TYPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"USER_DEFINED_TYPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"USER_DEFINED_TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_INSERTABLE_INTO\", YES_OR_NO);\n            addColumn(t, \"IS_TYPED\", YES_OR_NO);\n            addColumn(t, \"COMMIT_ACTION\", CHARACTER_DATA);\n\n            //\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TABLES].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2,\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6707",
               "end_line": "6732",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TRANSLATIONS]);\n\n            addColumn(t, \"TRANSLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRANSLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRANSLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SOURCE_CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SOURCE_CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SOURCE_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TARGET_CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TARGET_CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TARGET_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TRANSLATION_SOURCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRANSLATION_SOURCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRANSLATION_SOURCE_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TRANSLATIONS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_515",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7921",
               "end_line": "7926",
               "source_code": "            Object[] row = t.getEmptyRowData();\n\n            row[user_defined_type_catalog]  = database.getCatalogName().name;\n            row[user_defined_type_schema]   = type.getSchemaName().name;\n            row[user_defined_type_name]     = type.getName().name;\n            row[data_type]                  = type.getFullNameString();"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3433",
               "end_line": "3438",
               "source_code": "            Object[] row = t.getEmptyRowData();\n\n            row[domain_catalog] = database.getCatalogName().name;\n            row[domain_schema]  = type.getSchemaName().name;\n            row[domain_name]    = type.getName().name;\n            row[data_type]      = type.getFullNameString();"
           }

       },

       {
           "id": "clone_516",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1307",
               "end_line": "1316",
               "source_code": "            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                startType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                startType = Types.SQL_INTERVAL_MINUTE;\n                break;"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "196",
               "end_line": "205",
               "source_code": "            case StatementTypes.SAVEPOINT :\n            case StatementTypes.SET_TRANSACTION :\n            case StatementTypes.START_TRANSACTION :\n                group = StatementTypes.X_SQL_TRANSACTION;\n                break;\n\n            case StatementTypes.DECLARE_SESSION_TABLE :\n            case StatementTypes.DROP_TABLE :\n                group = StatementTypes.X_SQL_SESSION;\n                break;"
           }

       },

       {
           "id": "clone_517",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2313",
               "end_line": "2320",
               "source_code": "            case Tokens.X_VALUE :\n                e = new ExpressionValue(token.tokenValue, token.dataType);\n\n                read();\n\n                return e;\n\n            case Tokens.COLON :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2242",
               "end_line": "2249",
               "source_code": "            case Tokens.X_VALUE :\n                e = new ExpressionValue(token.tokenValue, token.dataType);\n\n                read();\n\n                return e;\n\n            case Tokens.X_DELIMITED_IDENTIFIER :"
           }

       },

       {
           "id": "clone_518",

           "clone_type": "type-2",

           "origin": {
               "file": "CharacterType.java",
               "start_line": "165",
               "end_line": "179",
               "source_code": "    public String getDefinition() {\n\n        if (precision == 0) {\n            return getNameString();\n        }\n\n        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n\n        return sb.toString();\n    }"
           },

           "clone": {
               "file": "BitType.java",
               "start_line": "93",
               "end_line": "107",
               "source_code": "    public String getDefinition() {\n\n        if (precision == 0) {\n            return getNameString();\n        }\n\n        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n\n        return sb.toString();\n    }"
           }

       },

       {
           "id": "clone_519",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "3479",
               "end_line": "3492",
               "source_code": "                            cs = new StatementSchema(sql, statementType);\n                            break;\n\n                        case Tokens.FUNCTION :\n                            statementType = StatementTypes.CREATE_ROUTINE;\n                            sql = getStatementForRoutine(\n                                position, startStatementTokensSchema);\n                            cs = new StatementSchema(sql, statementType);\n                            break;\n\n                        case Tokens.PROCEDURE :\n                            statementType = StatementTypes.CREATE_ROUTINE;\n                            sql = getStatementForRoutine(\n                                position, startStatementTokensSchema);"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3465",
               "end_line": "3478",
               "source_code": "                            cs = new StatementSchema(sql, statementType);\n                            break;\n\n                        case Tokens.TRIGGER :\n                            statementType = StatementTypes.CREATE_TRIGGER;\n                            sql = getStatement(position,\n                                               startStatementTokensSchema);\n                            cs = new StatementSchema(sql, statementType);\n                            break;\n\n                        case Tokens.VIEW :\n                            statementType = StatementTypes.CREATE_VIEW;\n                            sql = getStatement(position,\n                                               startStatementTokensSchema);"
           }

       },

       {
           "id": "clone_520",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3329",
               "end_line": "3347",
               "source_code": "            case FUNC_NUMTOYMINTERVAL :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_DOUBLE;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                if (!nodes[0].dataType.isNumberType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                if (!nodes[1].dataType.isCharacterType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                dataType = Type.SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;\n                break;"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3309",
               "end_line": "3327",
               "source_code": "            case FUNC_NUMTODSINTERVAL :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_DOUBLE;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                if (!nodes[0].dataType.isNumberType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                if (!nodes[1].dataType.isCharacterType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                dataType = Type.SQL_INTERVAL_DAY_TO_SECOND_MAX_PRECISION;\n                break;"
           }

       },

       {
           "id": "clone_521",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1313",
               "end_line": "1323",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                startType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_SECOND :\n                startType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"IntervalType\");"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3910",
               "end_line": "3920",
               "source_code": "            case Tokens.ANY :\n            case Tokens.SOME :\n                exprSubType = OpTypes.ANY_QUANTIFIED;\n                break;\n\n            case Tokens.ALL :\n                exprSubType = OpTypes.ALL_QUANTIFIED;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"ParserDQL\");"
           }

       },

       {
           "id": "clone_522",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "1393",
               "end_line": "1400",
               "source_code": "                    left  = true;\n                    right = true;\n                    break;\n\n                case Tokens.JOIN :\n                    read();\n\n                    type = Tokens.INNER;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "515",
               "end_line": "522",
               "source_code": "                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            case Tokens.TABLE :\n                read();\n\n                statementType = StatementTypes.DROP_TABLE;"
           }

       },

       {
           "id": "clone_523",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "597",
               "end_line": "608",
               "source_code": "            case FUNC_LOAD_FILE :\n            case FUNC_ROUND :\n            case FUNC_TIMESTAMP :\n            case FUNC_TO_DATE :\n            case FUNC_TO_TIMESTAMP :\n            case FUNC_TO_TIMESTAMP_TZ :\n            case FUNC_TRUNC :\n            case FUNC_TRUNCATE :\n                parseList = optionalDoubleParamList;\n                break;\n\n            case FUNC_DATEDIFF :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "562",
               "end_line": "573",
               "source_code": "            case FUNC_SOUNDEX :\n            case FUNC_SPACE :\n            case FUNC_SYS_EXTRACT_UTC :\n            case FUNC_TAN :\n            case FUNC_TIMESTAMP_WITH_ZONE :\n            case FUNC_TO_DSINTERVAL :\n            case FUNC_TO_YMINTERVAL :\n            case FUNC_TO_NUMBER :\n                parseList = singleParamList;\n                break;\n\n            case FUNC_ADD_MONTHS :"
           }

       },

       {
           "id": "clone_524",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3376",
               "end_line": "3386",
               "source_code": "                break;\n\n            case FUNC_TO_YMINTERVAL :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;\n                break;\n\n            case FUNC_TO_TIMESTAMP_TZ :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3352",
               "end_line": "3362",
               "source_code": "                break;\n\n            case FUNC_SYS_EXTRACT_UTC :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;\n                }\n\n                dataType = Type.SQL_TIMESTAMP;\n                break;\n\n            case FUNC_SYSDATE :"
           }

       },

       {
           "id": "clone_525",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6613",
               "end_line": "6629",
               "source_code": "        String       schem;\n        Object[]     row;\n\n        // column number mappings\n        final int constraint_catalog = 0;\n        final int constraint_schema  = 1;\n        final int constraint_name    = 2;\n        final int constraint_type    = 3;\n        final int table_catalog      = 4;\n        final int table_schema       = 5;\n        final int table_name         = 6;\n        final int is_deferable       = 7;\n        final int initially_deferred = 8;\n\n        // initialization\n        tables =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4047",
               "end_line": "4064",
               "source_code": "        // Intermediate holders\n        Iterator tables;\n        Object[] row;\n\n        // column number mappings\n        final int constraint_catalog            = 0;\n        final int constraint_schema             = 1;\n        final int constraint_name               = 2;\n        final int table_catalog                 = 3;\n        final int table_schema                  = 4;\n        final int table_name                    = 5;\n        final int column_name                   = 6;\n        final int ordinal_position              = 7;\n        final int position_in_unique_constraint = 8;\n\n        // Initialization\n        tables =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);"
           }

       },

       {
           "id": "clone_526",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5737",
               "end_line": "5783",
               "source_code": "            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_527",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "4765",
               "end_line": "4793",
               "source_code": "                read();\n\n                objectType = SchemaObject.TYPE;\n                break;\n\n            case Tokens.DOMAIN :\n                if (!isUsage && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();\n\n                objectType = SchemaObject.DOMAIN;\n                break;\n\n            case Tokens.SEQUENCE :\n                if (!isUsage && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();\n\n                objectType = SchemaObject.SEQUENCE;\n                break;\n\n            case Tokens.CHARACTER :\n                if (!isUsage && !isAll) {\n                    throw unexpectedToken();\n                }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "4735",
               "end_line": "4763",
               "source_code": "                read();\n\n                objectType = SchemaObject.FUNCTION;\n                break;\n\n            case Tokens.PROCEDURE :\n                if (!isExec && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();\n\n                objectType = SchemaObject.PROCEDURE;\n                break;\n\n            case Tokens.ROUTINE :\n                if (!isExec && !isAll) {\n                    throw unexpectedToken();\n                }\n\n                read();\n\n                objectType = SchemaObject.ROUTINE;\n                break;\n\n            case Tokens.TYPE :\n                if (!isUsage && !isAll) {\n                    throw unexpectedToken();\n                }"
           }

       },

       {
           "id": "clone_528",

           "clone_type": "type-2",

           "origin": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "225",
               "end_line": "232",
               "source_code": "        buttons.add(Box.createHorizontalGlue());\n        buttons.add(Box.createHorizontalStrut(20));\n\n        okCancel = new JButton(\"  Cancel   \");\n\n        okCancel.setActionCommand(\"ConnectCancel\");\n        okCancel.addActionListener(this);\n        buttons.add(okCancel);"
           },

           "clone": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "215",
               "end_line": "223",
               "source_code": "        // The button bar\n        buttons.add(Box.createHorizontalGlue());\n        buttons.add(Box.createHorizontalStrut(10));\n\n        okCancel = new JButton(\"     Ok      \");\n\n        okCancel.setActionCommand(\"ConnectOk\");\n        okCancel.addActionListener(this);\n        buttons.add(okCancel);"
           }

       },

       {
           "id": "clone_529",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "584",
               "end_line": "597",
               "source_code": "            case Types.SQL_VARCHAR :\n                return Type.SQL_VARCHAR_DEFAULT;\n\n            case Types.SQL_CLOB :\n                return Type.SQL_CLOB;\n\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                return Type.SQL_VARBINARY_DEFAULT;\n\n            case Types.SQL_BLOB :\n                return Type.SQL_BLOB;\n\n            case Types.SQL_BIT :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "949",
               "end_line": "962",
               "source_code": "            case Types.BINARY :\n                return Types.SQL_BINARY;\n\n            case Types.BIT :\n                return Types.SQL_BIT_VARYING;\n\n            case Types.VARBINARY :\n            case Types.LONGVARBINARY :\n                return Types.SQL_VARBINARY;\n\n            case Types.BLOB :\n                return Types.SQL_BLOB;\n\n            case Types.ARRAY :"
           }

       },

       {
           "id": "clone_530",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "119",
               "end_line": "132",
               "source_code": "            // logged by statement\n            case StatementTypes.SET_SCHEMA :\n                group    = StatementTypes.X_SQL_SESSION;\n                isLogged = true;\n                break;\n\n            case StatementTypes.DECLARE_VARIABLE :\n                group    = StatementTypes.X_HSQLDB_SESSION;\n                isLogged = true;\n                break;\n\n            // cursor\n            case StatementTypes.ALLOCATE_CURSOR :\n                group = StatementTypes.X_SQL_DATA;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2997",
               "end_line": "3008",
               "source_code": "                case Tokens.PLUS :\n                    type  = OpTypes.ADD;\n                    boole = false;\n                    break;\n\n                case Tokens.MINUS :\n                    type  = OpTypes.SUBTRACT;\n                    boole = false;\n                    break;\n\n                case Tokens.CONCAT :\n                    type  = OpTypes.CONCAT;"
           }

       },

       {
           "id": "clone_531",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "523",
               "end_line": "542",
               "source_code": "            Query = \"DELETE FROM history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n            Conn.commit();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "417",
               "end_line": "436",
               "source_code": "            Query = \"DROP TABLE history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n            Conn.commit();"
           }

       },

       {
           "id": "clone_532",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "466",
               "end_line": "476",
               "source_code": "            case OpTypes.IN :\n                sb.append(left).append(' ').append(Tokens.T_IN).append(\n                    ' ').append(right);\n\n                return sb.toString();\n\n            case OpTypes.MATCH_SIMPLE :\n                sb.append(left).append(' ').append(Tokens.T_MATCH).append(\n                    ' ').append(right);\n\n                return sb.toString();"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "454",
               "end_line": "464",
               "source_code": "            case OpTypes.AND :\n                sb.append(left).append(' ').append(Tokens.T_AND).append(\n                    ' ').append(right);\n\n                return sb.toString();\n\n            case OpTypes.OR :\n                sb.append(left).append(' ').append(Tokens.T_OR).append(\n                    ' ').append(right);\n\n                return sb.toString();"
           }

       },

       {
           "id": "clone_533",

           "clone_type": "type-2",

           "origin": {
               "file": "WebServerConnection.java",
               "start_line": "333",
               "end_line": "344",
               "source_code": "            int             databaseID = dataIn.readInt();\n            long            sessionID  = dataIn.readLong();\n            int             mode       = dataIn.readByte();\n            Session session = DatabaseManager.getSession(databaseID,\n                sessionID);\n            Result resultIn = Result.newResult(session, mode, dataIn, rowIn);\n\n            resultIn.setDatabaseId(databaseID);\n            resultIn.setSessionId(sessionID);\n\n            //\n            Result resultOut;"
           },

           "clone": {
               "file": "Servlet.java",
               "start_line": "258",
               "end_line": "269",
               "source_code": "                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n\n                Result resultOut;"
           }

       },

       {
           "id": "clone_534",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2086",
               "end_line": "2098",
               "source_code": "        PersistentStore store = t.getRowStore(session);\n\n        // column number mappings\n        final int icat       = 0;\n        final int ischem     = 1;\n        final int iname      = 2;\n        final int icol_name  = 3;\n        final int icol_type  = 4;\n        final int idata_type = 5;\n        final int itype_name = 6;\n        final int iprec      = 7;\n        final int ilength    = 8;\n        final int iscale     = 9;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1993",
               "end_line": "2005",
               "source_code": "        PersistentStore store = t.getRowStore(session);\n\n        // column number mappings\n        final int icat          = 0;\n        final int ischem        = 1;\n        final int ipname        = 2;\n        final int iinput_parms  = 3;\n        final int ioutput_parms = 4;\n        final int iresult_sets  = 5;\n        final int iremark       = 6;\n        final int iptype        = 7;\n        final int isn           = 8;\n        final int iporigin      = 9;"
           }

       },

       {
           "id": "clone_535",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1309",
               "end_line": "1320",
               "source_code": "            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                startType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                startType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_SECOND :\n                startType = Types.SQL_INTERVAL_SECOND;\n                break;"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "693",
               "end_line": "704",
               "source_code": "                case SchemaObject.FUNCTION :\n                    set = schema.functionLookup;\n                    break;\n\n                case SchemaObject.DOMAIN :\n                case SchemaObject.TYPE :\n                    set = schema.typeLookup;\n                    break;\n\n                case SchemaObject.INDEX :\n                    set = schema.indexLookup;\n                    break;"
           }

       },

       {
           "id": "clone_536",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "861",
               "end_line": "873",
               "source_code": "            case Tokens.MINUS_EXCEPT :\n                read();\n\n                unionType = QueryExpression.EXCEPT;\n\n                if (token.tokenType == Tokens.ALL) {\n                    unionType = QueryExpression.EXCEPT_ALL;\n\n                    read();\n                } else if (token.tokenType == Tokens.DISTINCT) {\n                    read();\n                }\n                break;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "846",
               "end_line": "858",
               "source_code": "            case Tokens.INTERSECT :\n                read();\n\n                unionType = QueryExpression.INTERSECT;\n\n                if (token.tokenType == Tokens.ALL) {\n                    unionType = QueryExpression.INTERSECT_ALL;\n\n                    read();\n                } else if (token.tokenType == Tokens.DISTINCT) {\n                    read();\n                }\n                break;"
           }

       },

       {
           "id": "clone_537",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "407",
               "end_line": "415",
               "source_code": "            case LobResultTypes.RESPONSE_GET_BYTES :\n                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.byteBlock   = new byte[(int) result.blockLength];\n\n                dataInput.readFully(result.byteBlock);\n                break;\n\n            case LobResultTypes.RESPONSE_GET_CHARS :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "383",
               "end_line": "391",
               "source_code": "            case LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION :\n                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.byteBlock   = new byte[(int) result.blockLength];\n\n                dataInput.readFully(result.byteBlock);\n                break;\n\n            case LobResultTypes.REQUEST_SET_CHARS :"
           }

       },

       {
           "id": "clone_538",

           "clone_type": "type-2",

           "origin": {
               "file": "Schema.java",
               "start_line": "264",
               "end_line": "286",
               "source_code": "            case SchemaObject.VIEW :\n                return tableLookup;\n\n            case SchemaObject.CHARSET :\n                return charsetLookup;\n\n            case SchemaObject.COLLATION :\n                return collationLookup;\n\n            case SchemaObject.PROCEDURE :\n                return procedureLookup;\n\n            case SchemaObject.FUNCTION :\n                return functionLookup;\n\n            case SchemaObject.ROUTINE :\n                return functionLookup;\n\n            case SchemaObject.SPECIFIC_ROUTINE :\n                return specificRoutineLookup;\n\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "824",
               "end_line": "846",
               "source_code": "            case Types.SQL_CHAR :\n                return SQL_CHAR_DEFAULT;\n\n            case Types.SQL_VARCHAR :\n                return SQL_VARCHAR_DEFAULT;\n\n            case Types.SQL_CLOB :\n                return SQL_CLOB;\n\n            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_FLOAT :\n            case Types.SQL_REAL :"
           }

       },

       {
           "id": "clone_539",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1634",
               "end_line": "1640",
               "source_code": "                            break;\n\n                        case Tokens.REPEATABLE :\n                            read();\n                            readThis(Tokens.READ);\n\n                            level = SessionInterface.TX_REPEATABLE_READ;"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1117",
               "end_line": "1123",
               "source_code": "                        break;\n\n                    case Tokens.REGULAR :\n                        read();\n                        readThis(Tokens.NAMES);\n\n                        property = HsqlDatabaseProperties.sql_regular_names;"
           }

       },

       {
           "id": "clone_540",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "886",
               "end_line": "891",
               "source_code": "        // intermediate holders\n        int         columnCount;\n        Iterator    tables;\n        Table       table;\n        Object[]    row;\n        DITableInfo ti;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3587",
               "end_line": "3593",
               "source_code": "        //\n        // intermediate holders\n        int            columnCount;\n        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        OrderedHashSet columnList;"
           }

       },

       {
           "id": "clone_541",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1620",
               "end_line": "1629",
               "source_code": "            case Types.SQL_DATE :\n                return 1;\n\n            case Types.SQL_TIME :\n                return 2;\n\n            case Types.SQL_TIMESTAMP :\n                return 3;\n\n            default :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "221",
               "end_line": "230",
               "source_code": "            case Types.SQL_INTEGER :\n                return 11;                   // decimal precision + \"-\".length();\n\n            case Types.SQL_SMALLINT :\n                return 6;                    // decimal precision + \"-\".length();\n\n            case Types.TINYINT :\n                return 4;                    // decimal precision + \"-\".length();\n\n            default :"
           }

       },

       {
           "id": "clone_542",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "143",
               "end_line": "150",
               "source_code": "                nodes                = new Expression[UNARY];\n                nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);\n                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP,\n                        e.dataType.scale);\n                break;\n\n            case Types.SQL_TIME :"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "135",
               "end_line": "142",
               "source_code": "                nodes                = new Expression[UNARY];\n                nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);\n                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(Types.SQL_TIME,\n                        e.dataType.scale);\n                break;\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           }

       },

       {
           "id": "clone_543",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5743",
               "end_line": "5789",
               "source_code": "            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_544",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "5470",
               "end_line": "5497",
               "source_code": "    private Expression readGreatestExpressionOrNull() {\n\n        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        Expression casewhen = null;\n\n        do {\n            casewhen = readValue(casewhen, OpTypes.GREATER);\n\n            if (token.tokenType == Tokens.COMMA) {\n                readThis(Tokens.COMMA);\n            } else {\n                break;\n            }\n        } while (true);\n\n        readThis(Tokens.CLOSEBRACKET);\n\n        return casewhen;\n    }"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "5441",
               "end_line": "5468",
               "source_code": "    private Expression readLeastExpressionOrNull() {\n\n        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        Expression casewhen = null;\n\n        do {\n            casewhen = readValue(casewhen, OpTypes.SMALLER);\n\n            if (token.tokenType == Tokens.COMMA) {\n                readThis(Tokens.COMMA);\n            } else {\n                break;\n            }\n        } while (true);\n\n        readThis(Tokens.CLOSEBRACKET);\n\n        return casewhen;\n    }"
           }

       },

       {
           "id": "clone_545",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementInsert.java",
               "start_line": "94",
               "end_line": "101",
               "source_code": "        this.insertColumnMap    = columnMap;\n        this.insertCheckColumns = checkColumns;\n        this.queryExpression    = queryExpression;\n        this.overrideUserValue  = override;\n\n        setupChecks();\n        setDatabseObjects(session, compileContext);\n        checkAccessRights(session);"
           },

           "clone": {
               "file": "StatementDML.java",
               "start_line": "159",
               "end_line": "166",
               "source_code": "        this.insertExpression     = insertExpr;\n        this.updateExpressions    = updateExpr;\n        this.targetRangeVariables = targetRangeVars;\n        this.condition            = mergeCondition;\n\n        setupChecks();\n        setDatabseObjects(session, compileContext);\n        checkAccessRights(session);"
           }

       },

       {
           "id": "clone_546",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionAggregate.java",
               "start_line": "115",
               "end_line": "132",
               "source_code": "            case OpTypes.STDDEV_SAMP :\n                sb.append(' ').append(Tokens.T_STDDEV_SAMP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.VAR_POP :\n                sb.append(' ').append(Tokens.T_VAR_POP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.VAR_SAMP :\n                sb.append(' ').append(Tokens.T_VAR_SAMP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500,\n                                         \"ExpressionAggregate\");"
           },

           "clone": {
               "file": "ExpressionArrayAggregate.java",
               "start_line": "106",
               "end_line": "123",
               "source_code": "            case OpTypes.ARRAY_AGG :\n                sb.append(' ').append(Tokens.T_ARRAY_AGG).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.GROUP_CONCAT :\n                sb.append(' ').append(Tokens.T_GROUP_CONCAT).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.MEDIAN :\n                sb.append(' ').append(Tokens.T_MEDIAN).append('(');\n                sb.append(left).append(')');\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500,\n                                         \"ExpressionAggregate\");"
           }

       },

       {
           "id": "clone_547",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "536",
               "end_line": "541",
               "source_code": "            case LobResultTypes.RESPONSE_CREATE_CHARS :\n            case LobResultTypes.RESPONSE_TRUNCATE :\n                dataOut.writeLong(blockLength);\n                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "517",
               "end_line": "522",
               "source_code": "            case LobResultTypes.REQUEST_GET_LENGTH :\n            case LobResultTypes.REQUEST_TRUNCATE :\n                dataOut.writeLong(blockOffset);\n                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTES :"
           }

       },

       {
           "id": "clone_548",

           "clone_type": "type-2",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "140",
               "end_line": "155",
               "source_code": "        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n        //\n        expectedCount = 1;\n        sql = \"select count(*) from test a where ? in(select b.id from test b where a.id = b.id)\";\n        pstmt = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "124",
               "end_line": "139",
               "source_code": "        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n        //\n        expectedCount = 10;\n        sql = \"select count(*) from test a, test b where ? in(?, b.id)\";\n        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);"
           }

       },

       {
           "id": "clone_549",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7885",
               "end_line": "7912",
               "source_code": "        final int ordering_routine_schema    = 9;\n        final int ordering_routine_name      = 10;\n        final int reference_type             = 11;\n        final int data_type                  = 12;\n        final int character_maximum_length   = 13;\n        final int character_octet_length     = 14;\n        final int character_set_catalog      = 15;\n        final int character_set_schema       = 16;\n        final int character_set_name         = 17;\n        final int collation_catalog          = 18;\n        final int collation_schema           = 19;\n        final int collation_name             = 20;\n        final int numeric_precision          = 21;\n        final int numeric_precision_radix    = 22;\n        final int numeric_scale              = 23;\n        final int datetime_precision         = 24;\n        final int interval_type              = 25;\n        final int interval_precision         = 26;\n        final int source_dtd_identifier      = 27;\n        final int ref_dtd_identifier         = 28;\n        final int declared_data_type         = 29;\n        final int declared_numeric_precision = 30;\n        final int declared_numeric_scale     = 31;\n        final int maximum_cardinality        = 32;\n\n        //\n        Iterator it =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TYPE);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3392",
               "end_line": "3420",
               "source_code": "        final int domain_catalog             = 0;\n        final int domain_schema              = 1;\n        final int domain_name                = 2;\n        final int data_type                  = 3;\n        final int character_maximum_length   = 4;\n        final int character_octet_length     = 5;\n        final int character_set_catalog      = 6;\n        final int character_set_schema       = 7;\n        final int character_set_name         = 8;\n        final int collation_catalog          = 9;\n        final int collation_schema           = 10;\n        final int collation_name             = 11;\n        final int numeric_precision          = 12;\n        final int numeric_precision_radix    = 13;\n        final int numeric_scale              = 14;\n        final int datetime_precision         = 15;\n        final int interval_type              = 16;\n        final int interval_precision         = 17;\n        final int domain_default             = 18;\n        final int maximum_cardinality        = 19;\n        final int dtd_identifier             = 20;\n        final int declared_data_type         = 21;\n        final int declared_numeric_precision = 22;\n        final int declared_numeric_scale     = 23;\n\n        //\n        //\n        Iterator it =\n            database.schemaManager.databaseObjectIterator(SchemaObject.DOMAIN);"
           }

       },

       {
           "id": "clone_550",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqlDatabaseProperties.java",
               "start_line": "425",
               "end_line": "461",
               "source_code": "        dbMeta.put(sql_double_nan,\n                   HsqlProperties.getMeta(sql_double_nan, SQL_PROPERTY, true));\n        dbMeta.put(sql_syntax_db2,\n                   HsqlProperties.getMeta(sql_syntax_db2, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_syntax_mss,\n                   HsqlProperties.getMeta(sql_syntax_mss, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_syntax_mys,\n                   HsqlProperties.getMeta(sql_syntax_mys, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_syntax_ora,\n                   HsqlProperties.getMeta(sql_syntax_ora, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_syntax_pgs,\n                   HsqlProperties.getMeta(sql_syntax_pgs, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_compare_in_locale,\n                   HsqlProperties.getMeta(sql_compare_in_locale, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_longvar_is_lob,\n                   HsqlProperties.getMeta(sql_longvar_is_lob, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_pad_space,\n                   HsqlProperties.getMeta(sql_pad_space, SQL_PROPERTY, true));\n        dbMeta.put(sql_ignore_case,\n                   HsqlProperties.getMeta(sql_ignore_case, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(hsqldb_write_delay,\n                   HsqlProperties.getMeta(hsqldb_write_delay, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(hsqldb_large_data,\n                   HsqlProperties.getMeta(hsqldb_large_data, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(hsqldb_files_space,\n                   HsqlProperties.getMeta(hsqldb_files_space, SQL_PROPERTY,\n                                          false));"
           },

           "clone": {
               "file": "HsqlDatabaseProperties.java",
               "start_line": "379",
               "end_line": "421",
               "source_code": "        dbMeta.put(sql_ref_integrity,\n                   HsqlProperties.getMeta(sql_ref_integrity, SQL_PROPERTY,\n                                          true));\n\n        // SQL reserved words not allowed as some identifiers\n        dbMeta.put(sql_enforce_names,\n                   HsqlProperties.getMeta(sql_enforce_names, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_regular_names,\n                   HsqlProperties.getMeta(sql_regular_names, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(sql_enforce_refs,\n                   HsqlProperties.getMeta(sql_enforce_refs, SQL_PROPERTY,\n                                          false));\n\n        // char padding to size and exception if data is too long\n        dbMeta.put(sql_enforce_size,\n                   HsqlProperties.getMeta(sql_enforce_size, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(sql_enforce_types,\n                   HsqlProperties.getMeta(sql_enforce_types, SQL_PROPERTY,\n                                          false));\n        dbMeta.put(sql_enforce_tdcd,\n                   HsqlProperties.getMeta(sql_enforce_tdcd, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(sql_enforce_tdcu,\n                   HsqlProperties.getMeta(sql_enforce_tdcu, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(sql_concat_nulls,\n                   HsqlProperties.getMeta(sql_concat_nulls, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(sql_nulls_first,\n                   HsqlProperties.getMeta(sql_nulls_first, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(sql_nulls_order,\n                   HsqlProperties.getMeta(sql_nulls_order, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(sql_unique_nulls,\n                   HsqlProperties.getMeta(sql_unique_nulls, SQL_PROPERTY,\n                                          true));\n        dbMeta.put(sql_convert_trunc,\n                   HsqlProperties.getMeta(sql_convert_trunc, SQL_PROPERTY,\n                                          true));"
           }

       },

       {
           "id": "clone_551",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2434",
               "end_line": "2478",
               "source_code": "        Table t = sysTables[COLUMN_UDT_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[COLUMN_UDT_USAGE]);\n\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);    // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLUMN_UDT_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int udt_catalog   = 0;\n        final int udt_schema    = 1;\n        final int udt_name      = 2;\n        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;\n        final int column_name   = 6;\n\n        // intermediate holders\n        int      columnCount;\n        Iterator tables;\n        Table    table;\n        Object[] row;\n        Type     type;\n        HsqlName tableName;\n\n        // Initialization\n        tables = allTables();\n\n        Grantee grantee = session.getGrantee();"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2316",
               "end_line": "2360",
               "source_code": "        Table t = sysTables[COLUMN_DOMAIN_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[COLUMN_DOMAIN_USAGE]);\n\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);    // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLUMN_DOMAIN_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int domain_catalog = 0;\n        final int domain_schema  = 1;\n        final int domain_name    = 2;\n        final int table_catalog  = 3;\n        final int table_schema   = 4;\n        final int table_name     = 5;\n        final int column_name    = 6;\n\n        // intermediate holders\n        int      columnCount;\n        Iterator tables;\n        Table    table;\n        Object[] row;\n        Type     type;\n        HsqlName tableName;\n\n        // Initialization\n        tables = allTables();\n\n        Grantee grantee = session.getGrantee();"
           }

       },

       {
           "id": "clone_552",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "184",
               "end_line": "197",
               "source_code": "        execSQL(\"ALTER TABLE \" + prefix\n                + \"playtbl ADD CONSTRAINT ucons9 UNIQUE (i9)\", 0);\n\n        // Drop table command\n        execSQL(\"DROP TABLE \" + prefix + \"playtbl\", 0);\n\n        // Set table readonly command\n        execSQL(\"SET TABLE \" + prefix + \"tsttbl READONLY true\", 0);\n        execSQL(\"SET TABLE \" + prefix + \"tsttbl READONLY false\", 0);\n\n        // Create table commands\n        execSQL(\"CREATE TABLE \" + prefix + \"tsttbly (i INT, vc VARCHAR(100))\", 0);\n        execSQL(\"CREATE CACHED TABLE \" + prefix\n                + \"tsttblx (i INT, vc VARCHAR(100))\", 0);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "172",
               "end_line": "180",
               "source_code": "        execSQL(\"ALTER TABLE \" + prefix + \"tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0);\n        execSQL(\"ALTER TABLE \" + prefix + \"tsttbl DROP COLUMN vco1\", 0);\n        execSQL(\"ALTER TABLE \" + prefix + \"tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0);\n        execSQL(\"ALTER TABLE \" + prefix\n                + \"tsttbl ALTER COLUMN vco1 RENAME TO j1\", 0);\n        execSQL(\"ALTER TABLE \" + prefix\n                + \"constrainedtbl DROP CONSTRAINT con1\", 0);\n        execSQL(\"ALTER TABLE \" + prefix + \"foreigntbl DROP CONSTRAINT tstfk\",\n                0);"
           }

       },

       {
           "id": "clone_553",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "429",
               "end_line": "434",
               "source_code": "                result.blockLength = dataInput.readLong();\n                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION :\n            case LobResultTypes.RESPONSE_GET_CHAR_PATTERN_POSITION :\n                result.blockOffset = dataInput.readLong();"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "379",
               "end_line": "384",
               "source_code": "                result.blockLength = dataInput.readLong();\n                break;\n\n            case LobResultTypes.REQUEST_SET_BYTES :\n            case LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION :\n                result.blockOffset = dataInput.readLong();"
           }

       },

       {
           "id": "clone_554",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "372",
               "end_line": "383",
               "source_code": "                break;\n\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                s += 12;\n                break;\n\n            case Types.SQL_TIMESTAMP :\n                s += 12;\n                break;\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                s += 16;"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "360",
               "end_line": "371",
               "source_code": "                break;\n\n            case Types.SQL_BOOLEAN :\n                s += 1;\n                break;\n\n            case Types.SQL_DATE :\n                s += 8;\n                break;\n\n            case Types.SQL_TIME :\n                s += 8;"
           }

       },

       {
           "id": "clone_555",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputText.java",
               "start_line": "167",
               "end_line": "182",
               "source_code": "    protected void writeLongVarString(String s) {\n\n        s = checkConvertString(s, longvarSep);\n\n        if (s == null) {\n            return;\n        }\n\n        // writeBytes(s);\n        byte[] bytes = getBytes(s);\n\n        write(bytes, 0, bytes.length);\n\n        nextSep    = longvarSep;\n        nextSepEnd = longvarSepEnd;\n    }"
           },

           "clone": {
               "file": "RowOutputText.java",
               "start_line": "150",
               "end_line": "165",
               "source_code": "    protected void writeVarString(String s) {\n\n        s = checkConvertString(s, varSep);\n\n        if (s == null) {\n            return;\n        }\n\n        // writeBytes(s);\n        byte[] bytes = getBytes(s);\n\n        write(bytes, 0, bytes.length);\n\n        nextSep    = varSep;\n        nextSepEnd = varSepEnd;\n    }"
           }

       },

       {
           "id": "clone_556",

           "clone_type": "type-2",

           "origin": {
               "file": "DTIType.java",
               "start_line": "354",
               "end_line": "384",
               "source_code": "            case Tokens.TIMEZONE_HOUR :\n                return TIMEZONE_HOUR;\n\n            case Tokens.TIMEZONE_MINUTE :\n                return TIMEZONE_MINUTE;\n\n            case Tokens.DAY_NAME :\n                return DAY_NAME;\n\n            case Tokens.MONTH_NAME :\n                return MONTH_NAME;\n\n            case Tokens.QUARTER :\n                return QUARTER;\n\n            case Tokens.DAY_OF_MONTH :\n                return DAY_OF_MONTH;\n\n            case Tokens.DAY_OF_WEEK :\n                return DAY_OF_WEEK;\n\n            case Tokens.DAY_OF_YEAR :\n                return DAY_OF_YEAR;\n\n            case Tokens.WEEK_OF_YEAR :\n                return WEEK_OF_YEAR;\n\n            case Tokens.SECONDS_MIDNIGHT :\n                return SECONDS_MIDNIGHT;\n\n            default :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "901",
               "end_line": "931",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return SQL_INTERVAL_DAY_TO_HOUR;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return SQL_INTERVAL_DAY_TO_MINUTE;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return SQL_INTERVAL_DAY_TO_SECOND;\n\n            case Types.SQL_INTERVAL_HOUR :\n                return SQL_INTERVAL_HOUR;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                return SQL_INTERVAL_HOUR_TO_MINUTE;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                return SQL_INTERVAL_HOUR_TO_SECOND;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                return SQL_INTERVAL_MINUTE;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                return SQL_INTERVAL_MINUTE_TO_SECOND;\n\n            case Types.SQL_INTERVAL_SECOND :\n                return SQL_INTERVAL_SECOND;\n\n            case Types.OTHER :\n                return OTHER;\n\n            default :"
           }

       },

       {
           "id": "clone_557",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqlDateTime.java",
               "start_line": "509",
               "end_line": "514",
               "source_code": "            case Types.SQL_INTERVAL_HOUR :\n                cal.set(Calendar.MINUTE, 0);\n            case Types.SQL_INTERVAL_MINUTE :\n                cal.set(Calendar.SECOND, 0);\n            case Types.SQL_INTERVAL_SECOND :\n                cal.set(Calendar.MILLISECOND, 0);"
           },

           "clone": {
               "file": "HsqlDateTime.java",
               "start_line": "503",
               "end_line": "508",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n                cal.set(Calendar.MONTH, 0);\n            case Types.SQL_INTERVAL_MONTH :\n                cal.set(Calendar.DAY_OF_MONTH, 1);\n            case Types.SQL_INTERVAL_DAY :\n                cal.set(Calendar.HOUR_OF_DAY, 0);"
           }

       },

       {
           "id": "clone_558",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "314",
               "end_line": "326",
               "source_code": "            updateLobUsage = sysLobSession.compileStatement(updateLobUsageSQL);\n            getNextLobId   = sysLobSession.compileStatement(getNextLobIdSQL);\n            deleteUnusedLobs =\n                sysLobSession.compileStatement(deleteUnusedCallSQL);\n            mergeUnusedSpace =\n                sysLobSession.compileStatement(mergeUnusedSpaceSQL);\n            getLobUseLimit = sysLobSession.compileStatement(getLobUseLimitSQL);\n            getLobCount    = sysLobSession.compileStatement(getLobCountSQL);\n\n            //\n            getSpanningParts = sysLobSession.compileStatement(getPartsSQL);\n            getLastPart      = sysLobSession.compileStatement(getLastPartSQL);\n            createPart       = sysLobSession.compileStatement(createPartSQL);"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "300",
               "end_line": "313",
               "source_code": "            getLob            = sysLobSession.compileStatement(getLobSQL);\n            getSpanningBlocks = sysLobSession.compileStatement(getLobPartSQL);\n            createLob         = sysLobSession.compileStatement(createLobSQL);\n            createLobPartCall =\n                sysLobSession.compileStatement(createLobPartCallSQL);\n            createSingleLobPartCall =\n                sysLobSession.compileStatement(createSingleLobPartCallSQL);\n            divideLobPartCall =\n                sysLobSession.compileStatement(divideLobPartCallSQL);\n            deleteLobCall = sysLobSession.compileStatement(deleteLobCallSQL);\n            deleteLobPartCall =\n                sysLobSession.compileStatement(deleteLobPartCallSQL);\n            updateLobLength =\n                sysLobSession.compileStatement(updateLobLengthSQL);"
           }

       },

       {
           "id": "clone_559",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberSequence.java",
               "start_line": "562",
               "end_line": "573",
               "source_code": "        NumberSequence copy = new NumberSequence();\n\n        copy.name       = name;\n        copy.startValue = startValue;\n        copy.currValue  = currValue;\n        copy.lastValue  = lastValue;\n        copy.increment  = increment;\n        copy.dataType   = dataType;\n        copy.minValue   = minValue;\n        copy.maxValue   = maxValue;\n        copy.isCycle    = isCycle;\n        copy.isAlways   = isAlways;"
           },

           "clone": {
               "file": "ConstraintCore.java",
               "start_line": "78",
               "end_line": "89",
               "source_code": "        ConstraintCore copy = new ConstraintCore();\n\n        copy.refName      = refName;\n        copy.mainName     = mainName;\n        copy.uniqueName   = uniqueName;\n        copy.mainTable    = mainTable;\n        copy.mainCols     = mainCols;\n        copy.mainIndex    = mainIndex;\n        copy.refTable     = refTable;\n        copy.refCols      = refCols;\n        copy.refIndex     = refIndex;\n        copy.deleteAction = deleteAction;"
           }

       },

       {
           "id": "clone_560",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5756",
               "end_line": "5802",
               "source_code": "            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_561",

           "clone_type": "type-2",

           "origin": {
               "file": "TestJDBCGeneratedColumns.java",
               "start_line": "249",
               "end_line": "258",
               "source_code": "            ps.close();\n\n            ps = c.prepareStatement(s, new String[]{ \"C\", \"I\" });\n\n            ps.addBatch();\n            ps.addBatch();\n            ps.executeBatch();\n\n\n            rs = ps.getGeneratedKeys();"
           },

           "clone": {
               "file": "TestJDBCGeneratedColumns.java",
               "start_line": "229",
               "end_line": "237",
               "source_code": "            ps.close();\n\n            ps = c.prepareStatement(s, new String[]{ \"I\", \"C\" });\n\n            ps.addBatch();\n            ps.addBatch();\n            ps.executeBatch();\n\n            rs = ps.getGeneratedKeys();"
           }

       },

       {
           "id": "clone_562",

           "clone_type": "type-2",

           "origin": {
               "file": "RCData.java",
               "start_line": "487",
               "end_line": "493",
               "source_code": "            case Connection.TRANSACTION_READ_UNCOMMITTED:\n                return \"TRANSACTION_READ_UNCOMMITTED\";\n            case Connection.TRANSACTION_READ_COMMITTED:\n                return \"TRANSACTION_READ_COMMITTED\";\n            case Connection.TRANSACTION_REPEATABLE_READ:\n                return \"TRANSACTION_REPEATABLE_READ\";\n            case Connection.TRANSACTION_SERIALIZABLE:"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "223",
               "end_line": "232",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return \"DAY TO HOUR\";\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return \"DAY TO MINUTE\";\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return \"DAY TO SECOND\";\n\n            case Types.SQL_INTERVAL_HOUR :"
           }

       },

       {
           "id": "clone_563",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4218",
               "end_line": "4223",
               "source_code": "                return;\n            case Types.SQL_DATE :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :"
           },

           "clone": {
               "file": "ExpressionColumn.java",
               "start_line": "305",
               "end_line": "311",
               "source_code": "                return;\n\n            case OpTypes.MULTICOLUMN :\n            case OpTypes.DYNAMIC_PARAM :\n            case OpTypes.ASTERISK :\n            case OpTypes.SIMPLE_COLUMN :\n            case OpTypes.COALESCE :"
           }

       },

       {
           "id": "clone_564",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "501",
               "end_line": "520",
               "source_code": "            case Tokens.COLLATION :\n                read();\n\n                statementType = StatementTypes.DROP_COLLATION;\n                objectType    = SchemaObject.COLLATION;\n                canCascade    = false;\n                useIfExists   = true;\n                break;\n\n            case Tokens.VIEW :\n                read();\n\n                statementType = StatementTypes.DROP_VIEW;\n                objectType    = SchemaObject.VIEW;\n                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            case Tokens.TABLE :\n                read();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "473",
               "end_line": "492",
               "source_code": "            case Tokens.DOMAIN :\n                read();\n\n                statementType = StatementTypes.DROP_DOMAIN;\n                objectType    = SchemaObject.DOMAIN;\n                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            case Tokens.TYPE :\n                read();\n\n                statementType = StatementTypes.DROP_TYPE;\n                objectType    = SchemaObject.TYPE;\n                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            case Tokens.CHARACTER :\n                read();"
           }

       },

       {
           "id": "clone_565",

           "clone_type": "type-2",

           "origin": {
               "file": "TestViewAsterisks.java",
               "start_line": "74",
               "end_line": "79",
               "source_code": "            m_statement  = m_connection.createStatement();\n\n            executeStatement(\"DROP TABLE ABC IF EXISTS CASCADE\");\n            executeStatement(\"DROP TABLE TABLE_A IF EXISTS CASCADE\");\n            executeStatement(\"DROP TABLE TABLE_B IF EXISTS CASCADE\");\n            executeStatement(\"DROP VIEW V1 IF EXISTS CASCADE\"); // V1 is created by a previous test case"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "188",
               "end_line": "193",
               "source_code": "        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");\n        println(\"featuring temp (transient) table\");\n        println(\"***************************************\");"
           }

       },

       {
           "id": "clone_566",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "157",
               "end_line": "176",
               "source_code": "            case StatementTypes.HOLD_LOCATOR :\n                group = StatementTypes.X_SQL_DATA;\n                break;\n\n            //\n            case StatementTypes.PREPARABLE_DYNAMIC_DELETE_CURSOR :\n            case StatementTypes.PREPARABLE_DYNAMIC_UPDATE_CURSOR :\n            case StatementTypes.PREPARE :\n                group = StatementTypes.X_SQL_DYNAMIC;\n                break;\n\n            // logged by session\n            case StatementTypes.DISCONNECT :\n                group = StatementTypes.X_SQL_CONNECTION;\n                break;\n\n            //\n            case StatementTypes.SET_COLLATION :\n            case StatementTypes.SET_CONNECTION :\n            case StatementTypes.SET_CONSTRAINT :"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "130",
               "end_line": "148",
               "source_code": "            // cursor\n            case StatementTypes.ALLOCATE_CURSOR :\n                group = StatementTypes.X_SQL_DATA;\n                break;\n\n            case StatementTypes.ALLOCATE_DESCRIPTOR :\n            case StatementTypes.DEALLOCATE_DESCRIPTOR :\n            case StatementTypes.DEALLOCATE_PREPARE :\n                group = StatementTypes.X_SQL_DYNAMIC;\n                break;\n\n            //\n            case StatementTypes.DYNAMIC_DELETE_CURSOR :\n                group = StatementTypes.X_SQL_DATA_CHANGE;\n                break;\n\n            case StatementTypes.DYNAMIC_CLOSE :\n            case StatementTypes.DYNAMIC_FETCH :\n            case StatementTypes.DYNAMIC_OPEN :"
           }

       },

       {
           "id": "clone_567",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "375",
               "end_line": "383",
               "source_code": "            //\n            case LobResultTypes.REQUEST_GET_BYTES :\n            case LobResultTypes.REQUEST_GET_CHARS :\n                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                break;\n\n            case LobResultTypes.REQUEST_SET_BYTES :\n            case LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "366",
               "end_line": "373",
               "source_code": "            case LobResultTypes.REQUEST_CREATE_BYTES :\n            case LobResultTypes.REQUEST_CREATE_CHARS :\n                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                break;\n\n            case LobResultTypes.REQUEST_GET_LOB :\n            case LobResultTypes.REQUEST_DUPLICATE_LOB :"
           }

       },

       {
           "id": "clone_568",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1003",
               "end_line": "1030",
               "source_code": "            int diff = collation.compare(aString, bString);\n\n            if (diff != 0) {\n                return diff;\n            }\n\n            aOffset++;\n            bOffset++;\n\n            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {\n                aOffset = 0;\n\n                aIndex++;\n            }\n\n            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {\n                bOffset = 0;\n\n                bIndex++;\n            }\n\n            if (aIndex == aAddresses.length) {\n                break;\n            }\n\n            if (bIndex == bAddresses.length) {\n                break;\n            }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "913",
               "end_line": "940",
               "source_code": "            int    result    = ArrayUtil.compare(aBytes, bBytes);\n\n            if (result != 0) {\n                return result;\n            }\n\n            aOffset++;\n            bOffset++;\n\n            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {\n                aOffset = 0;\n\n                aIndex++;\n            }\n\n            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {\n                bOffset = 0;\n\n                bIndex++;\n            }\n\n            if (aIndex == aAddresses.length) {\n                break;\n            }\n\n            if (bIndex == bAddresses.length) {\n                break;\n            }"
           }

       },

       {
           "id": "clone_569",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqlDeque.java",
               "start_line": "208",
               "end_line": "227",
               "source_code": "    public boolean addFirst(Object o) {\n\n        resetCapacity();\n\n        firstindex--;\n\n        if (firstindex < 0) {\n            firstindex = list.length - 1;\n\n            if (endindex == 0) {\n                endindex = list.length;\n            }\n        }\n\n        list[firstindex] = o;\n\n        elementCount++;\n\n        return true;\n    }"
           },

           "clone": {
               "file": "LongDeque.java",
               "start_line": "156",
               "end_line": "175",
               "source_code": "    public boolean addFirst(long value) {\n\n        resetCapacity();\n\n        firstindex--;\n\n        if (firstindex < 0) {\n            firstindex = list.length - 1;\n\n            if (endindex == 0) {\n                endindex = list.length;\n            }\n        }\n\n        list[firstindex] = value;\n\n        elementCount++;\n\n        return true;\n    }"
           }

       },

       {
           "id": "clone_570",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionAggregate.java",
               "start_line": "105",
               "end_line": "128",
               "source_code": "            case OpTypes.SOME :\n                sb.append(' ').append(Tokens.T_SOME).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.STDDEV_POP :\n                sb.append(' ').append(Tokens.T_STDDEV_POP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.STDDEV_SAMP :\n                sb.append(' ').append(Tokens.T_STDDEV_SAMP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.VAR_POP :\n                sb.append(' ').append(Tokens.T_VAR_POP).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.VAR_SAMP :\n                sb.append(' ').append(Tokens.T_VAR_SAMP).append('(');\n                sb.append(left).append(')');\n                break;"
           },

           "clone": {
               "file": "ExpressionAggregate.java",
               "start_line": "80",
               "end_line": "103",
               "source_code": "            case OpTypes.SUM :\n                sb.append(' ').append(Tokens.T_SUM).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.MIN :\n                sb.append(' ').append(Tokens.T_MIN).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.MAX :\n                sb.append(' ').append(Tokens.T_MAX).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.AVG :\n                sb.append(' ').append(Tokens.T_AVG).append('(');\n                sb.append(left).append(')');\n                break;\n\n            case OpTypes.EVERY :\n                sb.append(' ').append(Tokens.T_EVERY).append('(');\n                sb.append(left).append(')');\n                break;"
           }

       },

       {
           "id": "clone_571",

           "clone_type": "type-2",

           "origin": {
               "file": "BitType.java",
               "start_line": "177",
               "end_line": "185",
               "source_code": "                break;\n\n            case Types.SQL_BIT_VARYING :\n                newType = other;\n                break;\n\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_BLOB :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "112",
               "end_line": "120",
               "source_code": "                break;\n\n            case Types.SQL_BIGINT :\n                typeWidth = BIGINT_WIDTH;\n                break;\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :"
           }

       },

       {
           "id": "clone_572",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "464",
               "end_line": "472",
               "source_code": "            case Tokens.ROLE : {\n                read();\n\n                statementType = StatementTypes.DROP_ROLE;\n                objectType    = SchemaObject.GRANTEE;\n                canCascade    = true;\n\n                break;\n            }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "455",
               "end_line": "463",
               "source_code": "            case Tokens.USER : {\n                read();\n\n                statementType = StatementTypes.DROP_USER;\n                objectType    = SchemaObject.GRANTEE;\n                canCascade    = true;\n\n                break;\n            }"
           }

       },

       {
           "id": "clone_573",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "2068",
               "end_line": "2077",
               "source_code": "                    break;\n\n                case Tokens.COMPRESSED :\n                    if (compression != null) {\n                        throw unexpectedToken();\n                    }\n\n                    compression = Boolean.TRUE;\n\n                    read();"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "2058",
               "end_line": "2067",
               "source_code": "                    break;\n\n                case Tokens.SCRIPT :\n                    if (scriptMode != null) {\n                        throw unexpectedToken();\n                    }\n\n                    scriptMode = Boolean.TRUE;\n\n                    read();"
           }

       },

       {
           "id": "clone_574",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "682",
               "end_line": "708",
               "source_code": "    public void testBitVaryingSimpleRead() {\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(\"10\", rs.getString(\"btv\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "653",
               "end_line": "680",
               "source_code": "    public void testBitSimpleRead() {\n        // This test is failing because of a BIT padding bug in the engine.\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(\"100000000\", rs.getString(\"bt\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_575",

           "clone_type": "type-2",

           "origin": {
               "file": "Type.java",
               "start_line": "1168",
               "end_line": "1194",
               "source_code": "        //\n        jdbcConvertTypes = new IntKeyHashMap(37);\n\n        jdbcConvertTypes.put(Tokens.SQL_CHAR, Type.SQL_CHAR_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_VARCHAR, Type.SQL_VARCHAR_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_LONGVARCHAR, Type.SQL_VARCHAR_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_NVARCHAR, Type.SQL_VARCHAR_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_DATE, Type.SQL_DATE);\n        jdbcConvertTypes.put(Tokens.SQL_TIME, Type.SQL_TIME);\n        jdbcConvertTypes.put(Tokens.SQL_TIMESTAMP, Type.SQL_TIMESTAMP);\n        jdbcConvertTypes.put(Tokens.SQL_TINYINT, Type.TINYINT);\n        jdbcConvertTypes.put(Tokens.SQL_SMALLINT, Type.SQL_SMALLINT);\n        jdbcConvertTypes.put(Tokens.SQL_INTEGER, Type.SQL_INTEGER);\n        jdbcConvertTypes.put(Tokens.SQL_BIGINT, Type.SQL_BIGINT);\n        jdbcConvertTypes.put(Tokens.SQL_REAL, Type.SQL_DOUBLE);\n        jdbcConvertTypes.put(Tokens.SQL_FLOAT, Type.SQL_DOUBLE);\n        jdbcConvertTypes.put(Tokens.SQL_DOUBLE, Type.SQL_DOUBLE);\n        jdbcConvertTypes.put(Tokens.SQL_NUMERIC, Type.SQL_NUMERIC);\n        jdbcConvertTypes.put(Tokens.SQL_DECIMAL, Type.SQL_DECIMAL);\n        jdbcConvertTypes.put(Tokens.SQL_BOOLEAN, Type.SQL_BOOLEAN);\n        jdbcConvertTypes.put(Tokens.SQL_BINARY, Type.SQL_BINARY_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_VARBINARY, Type.SQL_VARBINARY_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_LONGVARBINARY,\n                             Type.SQL_VARBINARY_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_CLOB, Type.SQL_CLOB);\n        jdbcConvertTypes.put(Tokens.SQL_BLOB, Type.SQL_BLOB);\n        jdbcConvertTypes.put(Tokens.SQL_BIT, Type.SQL_BIT);"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1130",
               "end_line": "1154",
               "source_code": "        typeNames = new IntValueHashMap(37);\n\n        typeNames.put(Tokens.T_CHARACTER, Types.SQL_CHAR);\n        typeNames.put(Tokens.T_VARCHAR, Types.SQL_VARCHAR);\n        typeNames.put(Tokens.T_VARCHAR_IGNORECASE, Types.VARCHAR_IGNORECASE);\n        typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);\n        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);\n        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);\n        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);\n        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);\n        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);\n        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);\n        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);\n        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);\n        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);\n        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);\n        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);\n        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);\n        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);\n        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);\n        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);\n        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);\n        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);\n        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);\n        typeNames.put(Tokens.T_BIT, Types.SQL_BIT);"
           }

       },

       {
           "id": "clone_576",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "4951",
               "end_line": "4958",
               "source_code": "            case JDBC3_DATALINK :\n                return \"DATALINK\";\n\n            case java.sql.Types.DATE :\n                return \"DATE\";\n\n            case java.sql.Types.DECIMAL :\n                return \"DECIMAL\";"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "4942",
               "end_line": "4949",
               "source_code": "            case JDBC3_BOOLEAN :\n                return \"BOOLEAN\";\n\n            case java.sql.Types.CHAR :\n                return \"CHAR\";\n\n            case java.sql.Types.CLOB :\n                return \"CLOB\";"
           }

       },

       {
           "id": "clone_577",

           "clone_type": "type-2",

           "origin": {
               "file": "Expression.java",
               "start_line": "233",
               "end_line": "243",
               "source_code": "            case OpTypes.TABLE_SUBQUERY :\n                opType = OpTypes.TABLE_SUBQUERY;\n                break;\n\n            case OpTypes.ROW_SUBQUERY :\n            case OpTypes.SCALAR_SUBQUERY :\n                opType = OpTypes.ROW_SUBQUERY;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "198",
               "end_line": "209",
               "source_code": "            case StatementTypes.START_TRANSACTION :\n                group = StatementTypes.X_SQL_TRANSACTION;\n                break;\n\n            case StatementTypes.DECLARE_SESSION_TABLE :\n            case StatementTypes.DROP_TABLE :\n                group = StatementTypes.X_SQL_SESSION;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500,\n                                         \"StatementSession\");"
           }

       },

       {
           "id": "clone_578",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "1917",
               "end_line": "1937",
               "source_code": "            int columnIndex) throws SQLException {\n\n        checkColumn(columnIndex);\n\n        Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];\n        Object o          = getColumnInType(columnIndex, sourceType);\n\n        if (o == null) {\n            return null;\n        }\n\n        if (o instanceof ClobDataID) {\n            return ((ClobDataID) o).getCharacterStream(session);\n        } else if (o instanceof Clob) {\n            return ((Clob) o).getCharacterStream();\n        } else if (o instanceof String) {\n            return new StringReader((String) o);\n        }\n\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n    }"
           },

           "clone": {
               "file": "JDBCCallableStatement.java",
               "start_line": "4259",
               "end_line": "4279",
               "source_code": "    public Reader getCharacterStream(int parameterIndex) throws SQLException {\n\n        checkGetParameterIndex(parameterIndex);\n\n        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];\n        Object o          = getColumnInType(parameterIndex, sourceType);\n\n        if (o == null) {\n            return null;\n        }\n\n        if (o instanceof ClobDataID) {\n            return ((ClobDataID) o).getCharacterStream(session);\n        } else if (o instanceof Clob) {\n            return ((Clob) o).getCharacterStream();\n        } else if (o instanceof String) {\n            return new StringReader((String) o);\n        }\n\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n    }"
           }

       },

       {
           "id": "clone_579",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCSQLXML.java",
               "start_line": "789",
               "end_line": "822",
               "source_code": "    /**\n     * Returns a string representation of the XML value designated by this SQLXML instance.\n     * The format of this String is defined by org.xml.sax.InputSource,\n     * where the characters in the stream represent the unicode code points for\n     * XML according to section 2 and appendix B of the XML 1.0 specification.\n     * Although an encoding declaration other than unicode may be present,\n     * the encoding of the String is unicode.\n     * The behavior of this method is the same as ResultSet.getString()\n     * when the designated column of the ResultSet has a type java.sql.Types of SQLXML.\n     * <p>\n     * The SQL XML object becomes not readable when this method is called and\n     * may also become not writable depending on implementation.\n     *\n     * @return a string representation of the XML value designated by this SQLXML instance.\n     * @throws SQLException if there is an error processing the XML value.\n     *   The getCause() method of the exception may provide a more detailed exception, for example,\n     *   if the stream does not contain valid characters.\n     *   An exception is thrown if the state is not readable.\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since JDK 1.6\n     */\n    public synchronized String getString() throws SQLException {\n\n        checkClosed();\n        checkReadable();\n\n        String value = getStringImpl();\n\n        setReadable(false);\n        setWritable(false);\n\n        return value;\n    }"
           },

           "clone": {
               "file": "JDBCSQLXML.java",
               "start_line": "754",
               "end_line": "787",
               "source_code": "    /**\n     * Retrieves a stream to be used to write the XML value that this SQLXML instance represents.\n     * The format of this stream is defined by org.xml.sax.InputSource,\n     * where the characters in the stream represent the unicode code points for\n     * XML according to section 2 and appendix B of the XML 1.0 specification.\n     * Although an encoding declaration other than unicode may be present,\n     * the encoding of the stream is unicode.\n     * The behavior of this method is the same as ResultSet.updateCharacterStream()\n     * when the designated column of the ResultSet has a type java.sql.Types of SQLXML.\n     * <p>\n     * The SQL XML object becomes not writeable when this method is called and\n     * may also become not readable depending on implementation.\n     *\n     * @return a stream to which data can be written.\n     * @throws SQLException if there is an error processing the XML value.\n     *   The getCause() method of the exception may provide a more detailed exception, for example,\n     *   if the stream does not contain valid characters.\n     *   An exception is thrown if the state is not writable.\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since JDK 1.6 Build 79\n     */\n    public synchronized Writer setCharacterStream() throws SQLException {\n\n        checkClosed();\n        checkWritable();\n\n        Writer writer = setCharacterStreamImpl();\n\n        setReadable(true);\n        setWritable(false);\n\n        return writer;\n    }"
           }

       },

       {
           "id": "clone_580",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "2527",
               "end_line": "2534",
               "source_code": "                        break;\n\n                    case Tokens.NOT :\n                        read();\n                        readThis(Tokens.NULL);\n\n                        isNullable = false;\n                        break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "118",
               "end_line": "125",
               "source_code": "                break;\n\n            case Tokens.MEMORY :\n                read();\n                readThis(Tokens.TABLE);\n\n                isTable = true;\n                break;"
           }

       },

       {
           "id": "clone_581",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5757",
               "end_line": "5803",
               "source_code": "            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_582",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "135",
               "end_line": "141",
               "source_code": "            case OpTypes.MULTIPLY :\n                sb.append(left).append('*').append(right);\n                break;\n\n            case OpTypes.DIVIDE :\n                sb.append(left).append('/').append(right);\n                break;"
           },

           "clone": {
               "file": "ExpressionArithmetic.java",
               "start_line": "127",
               "end_line": "133",
               "source_code": "            case OpTypes.ADD :\n                sb.append(left).append('+').append(right);\n                break;\n\n            case OpTypes.SUBTRACT :\n                sb.append(left).append('-').append(right);\n                break;"
           }

       },

       {
           "id": "clone_583",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberSequence.java",
               "start_line": "564",
               "end_line": "575",
               "source_code": "        copy.name       = name;\n        copy.startValue = startValue;\n        copy.currValue  = currValue;\n        copy.lastValue  = lastValue;\n        copy.increment  = increment;\n        copy.dataType   = dataType;\n        copy.minValue   = minValue;\n        copy.maxValue   = maxValue;\n        copy.isCycle    = isCycle;\n        copy.isAlways   = isAlways;\n\n        return copy;"
           },

           "clone": {
               "file": "ConstraintCore.java",
               "start_line": "82",
               "end_line": "93",
               "source_code": "        copy.uniqueName   = uniqueName;\n        copy.mainTable    = mainTable;\n        copy.mainCols     = mainCols;\n        copy.mainIndex    = mainIndex;\n        copy.refTable     = refTable;\n        copy.refCols      = refCols;\n        copy.refIndex     = refIndex;\n        copy.deleteAction = deleteAction;\n        copy.updateAction = updateAction;\n        copy.matchType    = matchType;\n\n        return copy;"
           }

       },

       {
           "id": "clone_584",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5841",
               "end_line": "5887",
               "source_code": "        final int routine_name                           = 5;\n        final int routine_type                           = 6;\n        final int module_catalog                         = 7;\n        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_585",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5869",
               "end_line": "5915",
               "source_code": "        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_586",

           "clone_type": "type-2",

           "origin": {
               "file": "Grantee.java",
               "start_line": "500",
               "end_line": "518",
               "source_code": "        HsqlName name = object.getName();\n\n        if (object instanceof Routine) {\n            name = ((Routine) object).getSpecificName();\n        }\n\n        Iterator rights = grantedRightsMap.get(name);\n\n        if (rights.hasNext()) {\n            OrderedHashSet set = new OrderedHashSet();\n\n            while (rights.hasNext()) {\n                set.add(rights.next());\n            }\n\n            return set;\n        }\n\n        return Right.emptySet;"
           },

           "clone": {
               "file": "Grantee.java",
               "start_line": "477",
               "end_line": "495",
               "source_code": "        HsqlName name = object.getName();\n\n        if (object instanceof Routine) {\n            name = ((Routine) object).getSpecificName();\n        }\n\n        Iterator rights = directRightsMap.get(name);\n\n        if (rights.hasNext()) {\n            OrderedHashSet set = new OrderedHashSet();\n\n            while (rights.hasNext()) {\n                set.add(rights.next());\n            }\n\n            return set;\n        }\n\n        return Right.emptySet;"
           }

       },

       {
           "id": "clone_587",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "406",
               "end_line": "411",
               "source_code": "                result.mainString = in.readString();\n                result.subString  = in.readString();\n                result.errorCode  = in.readInt();\n                break;\n\n            case ResultConstants.CONNECTACKNOWLEDGE :"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "399",
               "end_line": "404",
               "source_code": "                result.subString    = in.readString();\n                result.zoneString   = in.readString();\n                result.updateCount  = in.readInt();\n                break;\n\n            case ResultConstants.ERROR :"
           }

       },

       {
           "id": "clone_588",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "679",
               "end_line": "705",
               "source_code": "            case Types.SQL_BIT_VARYING :\n            case Types.SQL_BLOB :\n            case Types.SQL_CHAR :\n            case Types.SQL_NCHAR :\n            case Types.SQL_CLOB :\n            case Types.NCLOB :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_VARCHAR :\n            case Types.SQL_NVARCHAR :\n            case Types.VARCHAR_IGNORECASE :\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_FLOAT :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "126",
               "end_line": "155",
               "source_code": "//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :\n            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :"
           }

       },

       {
           "id": "clone_589",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2289",
               "end_line": "2312",
               "source_code": "            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SELF_REFERENCING_COL_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"REF_GENERATION\", CHARACTER_DATA);\n\n            // -------------------------------------------------------------\n            // extended\n            // ------------------------------------------------------------\n            addColumn(t, \"HSQLDB_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"READ_ONLY\", Type.SQL_BOOLEAN);      // not null\n            addColumn(t, \"COMMIT_ACTION\", CHARACTER_DATA);    // not null\n\n            // ------------------------------------------------------------\n            // order TABLE_TYPE, TABLE_SCHEM and TABLE_NAME\n            // added for unique: TABLE_CAT\n            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_TABLES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                3, 1, 2, 0\n            }, false);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1446",
               "end_line": "1464",
               "source_code": "            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"KEY_SEQ\", Type.SQL_SMALLINT);     // not null\n            addColumn(t, \"PK_NAME\", SQL_IDENTIFIER);\n\n            // order: COLUMN_NAME\n            // added for unique: TABLE_NAME, TABLE_SCHEM, TABLE_CAT\n            // false PK, as  TABLE_SCHEM and/or TABLE_CAT may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_PRIMARYKEYS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                3, 2, 1, 0\n            }, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_590",

           "clone_type": "type-2",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "692",
               "end_line": "706",
               "source_code": "                        // Executed by psqlodbc immediately after connecting.\n                        server.printWithThread(\n                            \"Simulating 'select oid, typbasetype...'\");\n                        /*\n                         * This query is run as \"a hack to get the oid of our\n                         * large object oid type.\n                         */\n                        outPacket.writeShort(2);              // Num cols.\n                        outPacket.write(\"oid\");               // Col. name\n                        outPacket.writeInt(101);              // table ID\n                        outPacket.writeShort(102);            // column id\n                        outPacket.writeInt(26);               // Datatype ID  [adtid]\n                        outPacket.writeShort(4);              // Datatype size  [adtsize]\n                        outPacket.writeInt(-1);               // Var size [atttypmod]\n                        outPacket.writeShort(0);              // text \"format code\""
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "667",
               "end_line": "677",
               "source_code": "                        // Executed by psqlodbc after every user-specified query.\n                        server.printWithThread(\n                            \"Swallowing 'select n.nspname,...'\");\n                        outPacket.writeShort(1);              // Num cols.\n                        outPacket.write(\"oid\");\n                        outPacket.writeInt(201);\n                        outPacket.writeShort(1);\n                        outPacket.writeInt(23);\n                        outPacket.writeShort(4);\n                        outPacket.writeInt(-1);\n                        outPacket.writeShort(0);"
           }

       },

       {
           "id": "clone_591",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3932",
               "end_line": "3936",
               "source_code": "            case Tokens.WITH :\n            case Tokens.TABLE :\n            case Tokens.VALUES :\n            case Tokens.SELECT :\n                rewind(position);"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "822",
               "end_line": "826",
               "source_code": "            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :\n                resolveTypesForAllAny(session);"
           }

       },

       {
           "id": "clone_592",

           "clone_type": "type-2",

           "origin": {
               "file": "Schema.java",
               "start_line": "80",
               "end_line": "86",
               "source_code": "        charsetLookup    = new SchemaObjectSet(SchemaObject.CHARSET);\n        collationLookup  = new SchemaObjectSet(SchemaObject.COLLATION);\n        procedureLookup  = new SchemaObjectSet(SchemaObject.PROCEDURE);\n        functionLookup   = new SchemaObjectSet(SchemaObject.FUNCTION);\n        specificRoutineLookup =\n            new SchemaObjectSet(SchemaObject.SPECIFIC_ROUTINE);\n        assertionLookup = new SchemaObjectSet(SchemaObject.ASSERTION);"
           },

           "clone": {
               "file": "Schema.java",
               "start_line": "74",
               "end_line": "79",
               "source_code": "        triggerLookup    = new SchemaObjectSet(SchemaObject.TRIGGER);\n        indexLookup      = new SchemaObjectSet(SchemaObject.INDEX);\n        constraintLookup = new SchemaObjectSet(SchemaObject.CONSTRAINT);\n        tableLookup      = new SchemaObjectSet(SchemaObject.TABLE);\n        sequenceLookup   = new SchemaObjectSet(SchemaObject.SEQUENCE);\n        typeLookup       = new SchemaObjectSet(SchemaObject.TYPE);"
           }

       },

       {
           "id": "clone_593",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "237",
               "end_line": "243",
               "source_code": "                    case Tokens.TEXT :\n                        typeNumber     = Types.LONGVARCHAR;\n                        readByteOrChar = true;\n                        break;\n\n                    case Tokens.MEDIUMTEXT :\n                    case Tokens.LONGTEXT :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "113",
               "end_line": "119",
               "source_code": "            case StatementTypes.DATABASE_BACKUP :\n                group    = StatementTypes.X_HSQLDB_DATABASE_OPERATION;\n                isLogged = false;\n                break;\n\n            case StatementTypes.SET_DATABASE_UNIQUE_NAME :\n            case StatementTypes.SET_DATABASE_FILES_WRITE_DELAY :"
           }

       },

       {
           "id": "clone_594",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5853",
               "end_line": "5899",
               "source_code": "        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_595",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "4781",
               "end_line": "4800",
               "source_code": "        catalog       = translateCatalog(catalog);\n        schemaPattern = translateSchema(schemaPattern);\n\n        StringBuffer select =\n            toQueryPrefix(\"SYSTEM_UDTS\").append(and(\"TYPE_CAT\", \"=\",\n                catalog)).append(and(\"TYPE_SCHEM\", \"LIKE\",\n                                     schemaPattern)).append(and(\"TYPE_NAME\",\n                                         \"LIKE\", typeNamePattern));\n\n        if (types == null) {\n\n            // do not use to narrow search\n        } else {\n            select.append(\" AND DATA_TYPE IN (\").append(\n                StringUtil.getList(types, \",\", \"\")).append(')');\n        }\n\n        // By default, the query already returns a result ordered by\n        // DATA_TYPE, TYPE_SCHEM, and TYPE_NAME...\n        return execute(select.toString());"
           },

           "clone": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "3133",
               "end_line": "3185",
               "source_code": "        catalog       = translateCatalog(catalog);\n        schemaPattern = translateSchema(schemaPattern);\n\n        StringBuffer select =\n            toQueryPrefix(\"SYSTEM_TABLES\").append(and(\"TABLE_CAT\", \"=\",\n                catalog)).append(and(\"TABLE_SCHEM\", \"LIKE\",\n                                     schemaPattern)).append(and(\"TABLE_NAME\",\n                                         \"LIKE\", tableNamePattern));\n\n        if (types == null) {\n\n            // do not use to narrow search\n        } else {\n\n            // JDBC4 clarification:\n            // fredt - we shouldn't impose this test as it breaks compatibility with tools\n/*\n            String[] allowedTypes = new String[] {\n                \"GLOBAL TEMPORARY\", \"SYSTEM TABLE\", \"TABLE\", \"VIEW\"\n            };\n            int      illegalIndex = 0;\n            String   illegalType  = null;\n\n            outer_loop:\n            for (int i = 0; i < types.length; i++) {\n                for (int j = 0; j < allowedTypes.length; j++) {\n                    if (allowedTypes[j].equals(types[i])) {\n                        continue outer_loop;\n                    }\n                }\n\n                illegalIndex = i;\n                illegalType  = types[illegalIndex];\n\n                break;\n            }\n\n            if (illegalType != null) {\n                throw Util.sqlException(Trace.JDBC_INVALID_ARGUMENT,\n                                        \"types[\" + illegalIndex + \"]=>\\\"\"\n                                        + illegalType + \"\\\"\");\n            }\n*/\n\n            // end JDBC4 clarification\n            //\n            select.append(\" AND TABLE_TYPE IN (\").append(\n                StringUtil.getList(types, \",\", \"'\")).append(')');\n        }\n\n        // By default, query already returns result ordered by\n        // TABLE_TYPE, TABLE_SCHEM and TABLE_NAME...\n        return execute(select.toString());"
           }

       },

       {
           "id": "clone_596",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSubQueriesInPreparedStatements.java",
               "start_line": "151",
               "end_line": "159",
               "source_code": "        System.out.println(\"Expecting: ((0,0) .. (3,3)\");\n        pstmnt.setInt(1, 4);\n        pstmnt.setInt(2, 4);\n\n        rs = pstmnt.executeQuery();\n\n        while (rs.next()) {\n            System.out.println(\"(\" + rs.getInt(1) + \",\" + rs.getInt(2) + \")\");\n        }"
           },

           "clone": {
               "file": "TestSubQueriesInPreparedStatements.java",
               "start_line": "141",
               "end_line": "149",
               "source_code": "        System.out.println(\"Expecting: ((0,0), (0,1), (1,0), (1,1)\");\n        pstmnt.setInt(1, 2);\n        pstmnt.setInt(2, 2);\n\n        rs = pstmnt.executeQuery();\n\n        while (rs.next()) {\n            System.out.println(\"(\" + rs.getInt(1) + \",\" + rs.getInt(2) + \")\");\n        }"
           }

       },

       {
           "id": "clone_597",

           "clone_type": "type-2",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "139",
               "end_line": "153",
               "source_code": "        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n        //\n        expectedCount = 1;\n        sql = \"select count(*) from test a where ? in(select b.id from test b where a.id = b.id)\";\n        pstmt = conn.prepareStatement(sql);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "123",
               "end_line": "137",
               "source_code": "        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n        //\n        expectedCount = 10;\n        sql = \"select count(*) from test a, test b where ? in(?, b.id)\";\n        pstmt         = conn.prepareStatement(sql);"
           }

       },

       {
           "id": "clone_598",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5835",
               "end_line": "5882",
               "source_code": "        // column number mappings\n        final int specific_catalog                       = 0;\n        final int specific_schema                        = 1;\n        final int specific_name                          = 2;\n        final int routine_catalog                        = 3;\n        final int routine_schema                         = 4;\n        final int routine_name                           = 5;\n        final int routine_type                           = 6;\n        final int module_catalog                         = 7;\n        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_599",

           "clone_type": "type-2",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "134",
               "end_line": "148",
               "source_code": "        //\n        expectedCount = 10;\n        sql = \"select count(*) from test a, test b where ? in(?, b.id)\";\n        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "118",
               "end_line": "132",
               "source_code": "        //\n        expectedCount = 20;\n        sql = \"select count(*) from test a, test b where a.id in(?, ?)\";\n        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_600",

           "clone_type": "type-2",

           "origin": {
               "file": "RCData.java",
               "start_line": "489",
               "end_line": "495",
               "source_code": "            case Connection.TRANSACTION_READ_COMMITTED:\n                return \"TRANSACTION_READ_COMMITTED\";\n            case Connection.TRANSACTION_REPEATABLE_READ:\n                return \"TRANSACTION_REPEATABLE_READ\";\n            case Connection.TRANSACTION_SERIALIZABLE:\n                return \"TRANSACTION_SERIALIZABLE\";\n            case Connection.TRANSACTION_NONE:"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "223",
               "end_line": "232",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return \"DAY TO HOUR\";\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return \"DAY TO MINUTE\";\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return \"DAY TO SECOND\";\n\n            case Types.SQL_INTERVAL_HOUR :"
           }

       },

       {
           "id": "clone_601",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2612",
               "end_line": "2616",
               "source_code": "            case Tokens.DATE :\n            case Tokens.TIME :\n            case Tokens.TIMESTAMP :\n            case Tokens.INTERVAL :\n                e = readDateTimeIntervalLiteral(session);"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "233",
               "end_line": "237",
               "source_code": "            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                o = readDaySecondInterval(type);"
           }

       },

       {
           "id": "clone_602",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "447",
               "end_line": "466",
               "source_code": "        readSetClauseList(rangeVars, targetSet, colIndexList, exprList);\n\n        if (exprList.size() > 1) {\n            throw Error.parseError(ErrorCode.X_42602, null,\n                                   scanner.getLineNumber());\n        }\n\n        Expression expression = (Expression) exprList.get(0);\n\n        if (expression.getDegree() != targetSet.size()) {\n            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);\n        }\n\n        int[] columnMap = new int[colIndexList.size()];\n\n        colIndexList.toArray(columnMap);\n\n        Expression[] targets = new Expression[targetSet.size()];\n\n        targetSet.toArray(targets);"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "386",
               "end_line": "405",
               "source_code": "        readGetClauseList(rangeVars, targetSet, colIndexList, exprList);\n\n        if (exprList.size() > 1) {\n            throw Error.parseError(ErrorCode.X_42602, null,\n                                   scanner.getLineNumber());\n        }\n\n        Expression expression = (Expression) exprList.get(0);\n\n        if (expression.getDegree() != targetSet.size()) {\n            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);\n        }\n\n        int[] columnMap = new int[colIndexList.size()];\n\n        colIndexList.toArray(columnMap);\n\n        Expression[] targets = new Expression[targetSet.size()];\n\n        targetSet.toArray(targets);"
           }

       },

       {
           "id": "clone_603",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2547",
               "end_line": "2574",
               "source_code": "            case Tokens.CONCAT_WORD : {\n                e = readConcatExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CONCAT_WS : {\n                e = readConcatSeparatorExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CASEWHEN : {\n                e = readCaseWhenExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CASE :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2520",
               "end_line": "2547",
               "source_code": "            case Tokens.LEAST : {\n                e = readLeastExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.GREATEST : {\n                e = readGreatestExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.DECODE : {\n                e = readDecodeExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CONCAT_WORD :"
           }

       },

       {
           "id": "clone_604",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3274",
               "end_line": "3288",
               "source_code": "                if (!nodes[1].dataType.isDateOrTimestampType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                dataType = Type.SQL_DECIMAL_DEFAULT;\n                break;\n\n            case FUNC_NEW_TIME :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3254",
               "end_line": "3268",
               "source_code": "                if (!nodes[0].dataType.isDateOrTimestampType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n\n                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_MONTHS_BETWEEN :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }"
           }

       },

       {
           "id": "clone_605",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1080",
               "end_line": "1088",
               "source_code": "            addColumn(t, \"FKTABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"FKTABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"FKCOLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"KEY_SEQ\", Type.SQL_SMALLINT);          // not null\n            addColumn(t, \"UPDATE_RULE\", Type.SQL_SMALLINT);      // not null\n            addColumn(t, \"DELETE_RULE\", Type.SQL_SMALLINT);      // not null\n            addColumn(t, \"FK_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"PK_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DEFERRABILITY\", Type.SQL_SMALLINT);    // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1037",
               "end_line": "1047",
               "source_code": "            addColumn(t, \"SESSION_ID\", CARDINAL_NUMBER);\n            addColumn(t, \"CONNECTED\", TIME_STAMP);\n            addColumn(t, \"USER_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_ADMIN\", Type.SQL_BOOLEAN);\n            addColumn(t, \"AUTOCOMMIT\", Type.SQL_BOOLEAN);\n            addColumn(t, \"READONLY\", Type.SQL_BOOLEAN);\n\n            // Note: some sessions may have a NULL LAST_IDENTITY value\n            addColumn(t, \"LAST_IDENTITY\", CARDINAL_NUMBER);\n            addColumn(t, \"SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRANSACTION\", Type.SQL_BOOLEAN);"
           }

       },

       {
           "id": "clone_606",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "703",
               "end_line": "709",
               "source_code": "                    case Tokens.PRIMARY :\n                        read();\n                        readThis(Tokens.KEY);\n\n                        return compileAlterTableAddPrimaryKey(t, cname);\n\n                    case Tokens.COLUMN :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "686",
               "end_line": "693",
               "source_code": "                    case Tokens.FOREIGN :\n                        read();\n                        readThis(Tokens.KEY);\n\n                        return compileAlterTableAddForeignKeyConstraint(t,\n                                cname);\n\n                    case Tokens.UNIQUE :"
           }

       },

       {
           "id": "clone_607",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1123",
               "end_line": "1128",
               "source_code": "                        property = HsqlDatabaseProperties.sql_regular_names;\n                        flag     = processTrueOrFalseObject();\n                        break;\n\n                    case Tokens.REFERENCES :\n                        read();"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1115",
               "end_line": "1120",
               "source_code": "                        property = HsqlDatabaseProperties.sql_enforce_names;\n                        flag     = processTrueOrFalseObject();\n                        break;\n\n                    case Tokens.REGULAR :\n                        read();"
           }

       },

       {
           "id": "clone_608",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "135",
               "end_line": "144",
               "source_code": "            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                return \"java.sql.Time\";\n\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                return \"java.sql.Timestamp\";\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"DateTimeType\");"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "279",
               "end_line": "288",
               "source_code": "            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return \"java.lang.Double\";\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                return \"java.math.BigDecimal\";\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
           }

       },

       {
           "id": "clone_609",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "2217",
               "end_line": "2225",
               "source_code": "            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_DATABASE_VERSION :\n                dataType = Type.SQL_VARCHAR_DEFAULT;\n\n                return;\n\n            case FUNC_TIMEZONE :\n            case FUNC_SESSION_TIMEZONE :\n            case FUNC_DATABASE_TIMEZONE :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2208",
               "end_line": "2216",
               "source_code": "            case FUNC_ISREADONLYDATABASE :\n            case FUNC_ISREADONLYDATABASEFILES :\n                dataType = Type.SQL_BOOLEAN;\n\n                return;\n\n            case FUNC_ISOLATION_LEVEL :\n            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_DATABASE_ISOLATION_LEVEL :"
           }

       },

       {
           "id": "clone_610",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "695",
               "end_line": "715",
               "source_code": "                    break;\n\n                case SchemaObject.DOMAIN :\n                case SchemaObject.TYPE :\n                    set = schema.typeLookup;\n                    break;\n\n                case SchemaObject.INDEX :\n                    set = schema.indexLookup;\n                    break;\n\n                case SchemaObject.CONSTRAINT :\n                    set = schema.constraintLookup;\n                    break;\n\n                case SchemaObject.TRIGGER :\n                    set = schema.triggerLookup;\n                    break;\n\n                case SchemaObject.SPECIFIC_ROUTINE :\n                    set = schema.specificRoutineLookup;"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "674",
               "end_line": "694",
               "source_code": "                    break;\n\n                case SchemaObject.TABLE :\n                case SchemaObject.VIEW :\n                    set = schema.tableLookup;\n                    break;\n\n                case SchemaObject.CHARSET :\n                    set = schema.charsetLookup;\n                    break;\n\n                case SchemaObject.COLLATION :\n                    set = schema.collationLookup;\n                    break;\n\n                case SchemaObject.PROCEDURE :\n                    set = schema.procedureLookup;\n                    break;\n\n                case SchemaObject.FUNCTION :\n                    set = schema.functionLookup;"
           }

       },

       {
           "id": "clone_611",

           "clone_type": "type-2",

           "origin": {
               "file": "Token.java",
               "start_line": "68",
               "end_line": "72",
               "source_code": "            case EQ :\n            case LT :\n            case GT :\n            case LTE :\n            case GTE :"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "2041",
               "end_line": "2045",
               "source_code": "            case FUNC_SESSION_USER :\n            case FUNC_SYSTEM_USER :\n            case FUNC_USER :\n            case FUNC_CURRENT_DATE :\n            case FUNC_VALUE :"
           }

       },

       {
           "id": "clone_612",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3652",
               "end_line": "3667",
               "source_code": "            case FUNC_DBTIMEZONE :\n            case FUNC_SESSIONTIMEZONE :\n            case FUNC_SYSDATE :\n            case FUNC_SYSTIMESTAMP :\n            case FUNC_SYS_EXTRACT_UTC :\n            case FUNC_LAST_DAY :\n            case FUNC_NEXT_DAY :\n            case FUNC_TO_DSINTERVAL :\n            case FUNC_TO_YMINTERVAL :\n            case FUNC_ADD_MONTHS :\n            case FUNC_FROM_TZ :\n            case FUNC_MONTHS_BETWEEN :\n            case FUNC_NUMTODSINTERVAL :\n            case FUNC_NUMTOYMINTERVAL :\n            case FUNC_NEW_TIME :\n            case FUNC_TRANSLATE :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3598",
               "end_line": "3613",
               "source_code": "            case FUNC_COS :\n            case FUNC_COT :\n            case FUNC_DAYS :\n            case FUNC_DEGREES :\n            case FUNC_SIN :\n            case FUNC_TAN :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_ROUNDMAGIC :\n            case FUNC_SIGN :\n            case FUNC_SOUNDEX :\n            case FUNC_SPACE :\n            case FUNC_REVERSE :\n            case FUNC_HEXTORAW :\n            case FUNC_RAWTOHEX :\n            case FUNC_LOB_ID :"
           }

       },

       {
           "id": "clone_613",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "814",
               "end_line": "826",
               "source_code": "                        case StatementTypes.DROP_TRIGGER :\n                            dropObject(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_TYPE :\n                            dropType(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_DOMAIN :\n                            dropDomain(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_ROUTINE :"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "796",
               "end_line": "808",
               "source_code": "                        case StatementTypes.DROP_ROLE :\n                            dropRole(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_USER :\n                            dropUser(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_SCHEMA :\n                            dropSchema(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_ASSERTION :"
           }

       },

       {
           "id": "clone_614",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "2867",
               "end_line": "2873",
               "source_code": "                        break;\n\n                    case Types.SQL_BIT :\n                    case Types.SQL_BIT_VARYING :\n                        break;\n\n                    default :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "827",
               "end_line": "833",
               "source_code": "                break;\n\n            case OpTypes.UNIQUE :\n            case OpTypes.EXISTS :\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_615",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "411",
               "end_line": "415",
               "source_code": "            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n                s += INT_STORE_SIZE;\n                s += ((BinaryData) o).length(null);\n                break;"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "405",
               "end_line": "409",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                s += INT_STORE_SIZE;\n                s += ((BinaryData) o).length(null);\n                break;"
           }

       },

       {
           "id": "clone_616",

           "clone_type": "type-2",

           "origin": {
               "file": "Transfer.java",
               "start_line": "1045",
               "end_line": "1064",
               "source_code": "        cCreateIndex = new Checkbox(\"Create destination index\", true);\n\n        cCreateIndex.addItemListener(this);\n\n        cDelete = new Checkbox(\"Delete rows in destination table\", true);\n\n        cDelete.addItemListener(this);\n\n        cInsert = new Checkbox(\"Insert into destination\", true);\n\n        cInsert.addItemListener(this);\n\n        cFKForced = new Checkbox(\"force FK_ prefix for foreign key names\",\n                                 false);\n\n        cFKForced.addItemListener(this);\n\n        cAlter = new Checkbox(\"Alter destination table\", true);\n\n        cAlter.addItemListener(this);"
           },

           "clone": {
               "file": "Transfer.java",
               "start_line": "1023",
               "end_line": "1043",
               "source_code": "        cTransfer = new Checkbox(\"Transfer to destination table\", true);\n\n        cTransfer.addItemListener(this);\n\n        cDrop = new Checkbox(\"Drop destination table (ignore error)\", true);\n\n        cDrop.addItemListener(this);\n\n        cCreate = new Checkbox(\"Create destination table\", true);\n\n        cCreate.addItemListener(this);\n\n        cDropIndex = new Checkbox(\"Drop destination index (ignore error)\",\n                                  true);\n\n        cDropIndex.addItemListener(this);\n\n        cIdxForced = new Checkbox(\"force Idx_ prefix for indexes names\",\n                                  false);\n\n        cIdxForced.addItemListener(this);"
           }

       },

       {
           "id": "clone_617",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "252",
               "end_line": "257",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return java.lang.Double.class;\n\n            case Types.SQL_NUMERIC :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "244",
               "end_line": "249",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n                return java.lang.Integer.class;\n\n            case Types.SQL_BIGINT :"
           }

       },

       {
           "id": "clone_618",

           "clone_type": "type-2",

           "origin": {
               "file": "ValuePoolHashMap.java",
               "start_line": "166",
               "end_line": "182",
               "source_code": "        if (hashIndex.elementCount >= threshold) {\n            reset();\n\n            return getOrAddLong(longKey);\n        }\n\n        lookup                 = hashIndex.linkNode(index, lastLookup);\n        testValue              = Long.valueOf(longKey);\n        objectKeyTable[lookup] = testValue;\n\n        if (accessCount > ACCESS_MAX) {\n            resetAccessCount();\n        }\n\n        accessTable[lookup] = accessCount++;\n\n        return testValue;"
           },

           "clone": {
               "file": "ValuePoolHashMap.java",
               "start_line": "124",
               "end_line": "140",
               "source_code": "        if (hashIndex.elementCount >= threshold) {\n            reset();\n\n            return getOrAddInteger(intKey);\n        }\n\n        lookup                 = hashIndex.linkNode(index, lastLookup);\n        testValue              = Integer.valueOf(intKey);\n        objectKeyTable[lookup] = testValue;\n\n        if (accessCount > ACCESS_MAX) {\n            resetAccessCount();\n        }\n\n        accessTable[lookup] = accessCount++;\n\n        return testValue;"
           }

       },

       {
           "id": "clone_619",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5867",
               "end_line": "5913",
               "source_code": "        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_620",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1526",
               "end_line": "1531",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n                limit = DTIType.precisionLimits[(int) precision] * 60;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                limit = DTIType.precisionLimits[(int) precision] * 60;"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1481",
               "end_line": "1486",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n                limit = DTIType.precisionLimits[(int) precision] * 12;\n                break;\n\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n                limit = DTIType.precisionLimits[(int) precision] * 12;"
           }

       },

       {
           "id": "clone_621",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "256",
               "end_line": "265",
               "source_code": "            case Types.SQL_ARRAY :\n                o = readArray(type);\n                break;\n\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                o = readBinary();\n                break;\n\n            case Types.SQL_BIT :"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "179",
               "end_line": "188",
               "source_code": "            case Types.SQL_VARCHAR :\n                o = readChar(type);\n                break;\n\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n                o = readSmallint();\n                break;\n\n            case Types.SQL_INTEGER :"
           }

       },

       {
           "id": "clone_622",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDataStructures.java",
               "start_line": "86",
               "end_line": "90",
               "source_code": "        int           tempCommandCode;\n        int           tempPosition;\n        boolean       arrayListException = false;\n        boolean       dequeException     = false;\n        boolean       vectorException    = false;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "350",
               "end_line": "354",
               "source_code": "        int          objectType;\n        int          statementType;\n        boolean      canCascade  = false;\n        boolean      cascade     = false;\n        boolean      useIfExists = false;"
           }

       },

       {
           "id": "clone_623",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBug1191815.java",
               "start_line": "105",
               "end_line": "127",
               "source_code": "    public static void main(String[] args) throws Exception {\n\n        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration exceptions;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();\n        test   = new TestBug1191815(\"test\");\n\n        test.run(result);\n\n        count = result.failureCount();\n\n        System.out.println(\"TestBug1192000 failure count: \" + count);\n\n        failures = result.failures();\n\n        while (failures.hasMoreElements()) {\n            System.out.println(failures.nextElement());\n        }\n    }"
           },

           "clone": {
               "file": "TestBug785429.java",
               "start_line": "162",
               "end_line": "184",
               "source_code": "    public static void main(String[] args) throws Exception {\n\n        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration exceptions;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();\n        test   = new TestBug785429(\"test\");\n\n        test.run(result);\n\n        count = result.failureCount();\n\n        System.out.println(\"TestBug785429 failure count: \" + count);\n\n        failures = result.failures();\n\n        while (failures.hasMoreElements()) {\n            System.out.println(failures.nextElement());\n        }\n    }"
           }

       },

       {
           "id": "clone_624",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5876",
               "end_line": "5922",
               "source_code": "        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;\n        final int declared_data_type                     = 82;\n        final int declared_numeric_precision             = 83;\n        final int declared_numeric_scale                 = 84;\n        final int result_cast_from_declared_data_type    = 85;\n        final int result_cast_declared_numeric_precision = 86;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_625",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "527",
               "end_line": "550",
               "source_code": "    public long createClob(Session session, long length) {\n\n        writeLock.lock();\n\n        try {\n            Long           lobID    = getNewLobID();\n            ResultMetaData meta     = createLob.getParametersMetaData();\n            Object         params[] = new Object[meta.getColumnCount()];\n\n            params[LOB_IDS.LOB_ID]          = lobID;\n            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);\n            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;\n            params[LOB_IDS.LOB_TYPE]        = ValuePool.getInt(Types.SQL_CLOB);\n\n            Result result = sysLobSession.executeCompiledStatement(createLob,\n                params, 0);\n\n            usageChanged = true;\n\n            return lobID.longValue();\n        } finally {\n            writeLock.unlock();\n        }\n    }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "502",
               "end_line": "525",
               "source_code": "    public long createBlob(Session session, long length) {\n\n        writeLock.lock();\n\n        try {\n            Long           lobID    = getNewLobID();\n            ResultMetaData meta     = createLob.getParametersMetaData();\n            Object         params[] = new Object[meta.getColumnCount()];\n\n            params[LOB_IDS.LOB_ID]          = lobID;\n            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);\n            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;\n            params[LOB_IDS.LOB_TYPE]        = ValuePool.getInt(Types.SQL_BLOB);\n\n            Result result = sysLobSession.executeCompiledStatement(createLob,\n                params, 0);\n\n            usageChanged = true;\n\n            return lobID.longValue();\n        } finally {\n            writeLock.unlock();\n        }\n    }"
           }

       },

       {
           "id": "clone_626",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "234",
               "end_line": "240",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                o = readDaySecondInterval(type);\n                break;\n\n            case Types.SQL_BOOLEAN :"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "221",
               "end_line": "227",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n                o = readYearMonthInterval(type);\n                break;\n\n            case Types.SQL_INTERVAL_DAY :"
           }

       },

       {
           "id": "clone_627",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "1952",
               "end_line": "2113",
               "source_code": "        reservedKeys.put(Tokens.T_LOWER, LOWER);\n        reservedKeys.put(Tokens.T_MATCH, MATCH);\n        reservedKeys.put(Tokens.T_MAX, MAX);\n        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);\n        reservedKeys.put(Tokens.T_MEMBER, MEMBER);\n        reservedKeys.put(Tokens.T_MERGE, MERGE);\n        reservedKeys.put(Tokens.T_METHOD, METHOD);\n        reservedKeys.put(Tokens.T_MIN, MIN);\n        reservedKeys.put(Tokens.T_MINUTE, MINUTE);\n        reservedKeys.put(Tokens.T_MOD, MOD);\n        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);\n        reservedKeys.put(Tokens.T_MODULE, MODULE);\n        reservedKeys.put(Tokens.T_MONTH, MONTH);\n        reservedKeys.put(Tokens.T_MULTISET, MULTISET);\n        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);\n        reservedKeys.put(Tokens.T_NATURAL, NATURAL);\n        reservedKeys.put(Tokens.T_NCHAR, NCHAR);\n        reservedKeys.put(Tokens.T_NCLOB, NCLOB);\n        reservedKeys.put(Tokens.T_NEW, NEW);\n        reservedKeys.put(Tokens.T_NO, NO);\n        reservedKeys.put(Tokens.T_NONE, NONE);\n        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);\n        reservedKeys.put(Tokens.T_NOT, NOT);\n        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);\n        reservedKeys.put(Tokens.T_NTILE, NTILE);\n        reservedKeys.put(Tokens.T_NULL, NULL);\n        reservedKeys.put(Tokens.T_NULLIF, NULLIF);\n        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);\n        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);\n        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);\n        reservedKeys.put(Tokens.T_OF, OF);\n        reservedKeys.put(Tokens.T_OFFSET, OFFSET);\n        reservedKeys.put(Tokens.T_OLD, OLD);\n        reservedKeys.put(Tokens.T_ON, ON);\n        reservedKeys.put(Tokens.T_ONLY, ONLY);\n        reservedKeys.put(Tokens.T_OPEN, OPEN);\n        reservedKeys.put(Tokens.T_OR, OR);\n        reservedKeys.put(Tokens.T_ORDER, ORDER);\n        reservedKeys.put(Tokens.T_OUT, OUT);\n        reservedKeys.put(Tokens.T_OUTER, OUTER);\n        reservedKeys.put(Tokens.T_OVER, OVER);\n        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);\n        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);\n        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);\n        reservedKeys.put(Tokens.T_PARTITION, PARTITION);\n        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);\n        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);\n        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);\n        reservedKeys.put(Tokens.T_POSITION, POSITION);\n        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);\n        reservedKeys.put(Tokens.T_POWER, POWER);\n        reservedKeys.put(Tokens.T_PRECISION, PRECISION);\n        reservedKeys.put(Tokens.T_PREPARE, PREPARE);\n        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);\n        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);\n        reservedKeys.put(Tokens.T_RANGE, RANGE);\n        reservedKeys.put(Tokens.T_RANK, RANK);\n        reservedKeys.put(Tokens.T_READS, READS);\n        reservedKeys.put(Tokens.T_REAL, REAL);\n        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);\n        reservedKeys.put(Tokens.T_REF, REF);\n        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);\n        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);\n        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);\n        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);\n        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);\n        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);\n        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);\n        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);\n        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);\n        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);\n        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);\n        reservedKeys.put(Tokens.T_RELEASE, RELEASE);\n        reservedKeys.put(Tokens.T_REPEAT, REPEAT);\n        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);\n        reservedKeys.put(Tokens.T_RETURN, RETURN);\n        reservedKeys.put(Tokens.T_RETURNS, RETURNS);\n        reservedKeys.put(Tokens.T_REVOKE, REVOKE);\n        reservedKeys.put(Tokens.T_RIGHT, RIGHT);\n        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);\n        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);\n        reservedKeys.put(Tokens.T_ROW, ROW);\n        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);\n        reservedKeys.put(Tokens.T_ROWS, ROWS);\n        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);\n        reservedKeys.put(Tokens.T_SCOPE, SCOPE);\n        reservedKeys.put(Tokens.T_SCROLL, SCROLL);\n        reservedKeys.put(Tokens.T_SEARCH, SEARCH);\n        reservedKeys.put(Tokens.T_SECOND, SECOND);\n        reservedKeys.put(Tokens.T_SELECT, SELECT);\n        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);\n        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);\n        reservedKeys.put(Tokens.T_SET, SET);\n        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);\n        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);\n        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);\n        reservedKeys.put(Tokens.T_SOME, SOME);\n        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);\n        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);\n        reservedKeys.put(Tokens.T_SQL, SQL);\n        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);\n        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);\n        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);\n        reservedKeys.put(Tokens.T_SQRT, SQRT);\n        reservedKeys.put(Tokens.T_STACKED, STACKED);\n        reservedKeys.put(Tokens.T_START, START);\n        reservedKeys.put(Tokens.T_STATIC, STATIC);\n        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);\n        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);\n        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);\n        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);\n        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);\n        reservedKeys.put(Tokens.T_SUM, SUM);\n        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);\n        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);\n        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);\n        reservedKeys.put(Tokens.T_TABLE, TABLE);\n        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);\n        reservedKeys.put(Tokens.T_THEN, THEN);\n        reservedKeys.put(Tokens.T_TIME, TIME);\n        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);\n        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);\n        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);\n        reservedKeys.put(Tokens.T_TO, TO);\n        reservedKeys.put(Tokens.T_TRAILING, TRAILING);\n        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);\n        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);\n        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);\n        reservedKeys.put(Tokens.T_TREAT, TREAT);\n        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);\n        reservedKeys.put(Tokens.T_TRIM, TRIM);\n        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);\n        reservedKeys.put(Tokens.T_TRUE, TRUE);\n        reservedKeys.put(Tokens.T_TRUNCATE, TRUNCATE);\n        reservedKeys.put(Tokens.T_UESCAPE, UESCAPE);\n        reservedKeys.put(Tokens.T_UNDO, UNDO);\n        reservedKeys.put(Tokens.T_UNION, UNION);\n        reservedKeys.put(Tokens.T_UNIQUE, UNIQUE);\n        reservedKeys.put(Tokens.T_UNKNOWN, UNKNOWN);\n        reservedKeys.put(Tokens.T_UNNEST, UNNEST);\n        reservedKeys.put(Tokens.T_UNTIL, UNTIL);\n        reservedKeys.put(Tokens.T_UPDATE, UPDATE);\n        reservedKeys.put(Tokens.T_UPPER, UPPER);\n        reservedKeys.put(Tokens.T_USER, USER);\n        reservedKeys.put(Tokens.T_USING, USING);\n        reservedKeys.put(Tokens.T_VALUE, VALUE);\n        reservedKeys.put(Tokens.T_VALUES, VALUES);\n        reservedKeys.put(Tokens.T_VAR_POP, VAR_POP);\n        reservedKeys.put(Tokens.T_VAR_SAMP, VAR_SAMP);\n        reservedKeys.put(Tokens.T_VARBINARY, VARBINARY);\n        reservedKeys.put(Tokens.T_VARCHAR, VARCHAR);\n        reservedKeys.put(Tokens.T_VARYING, VARYING);\n        reservedKeys.put(Tokens.T_WHEN, WHEN);\n        reservedKeys.put(Tokens.T_WHENEVER, WHENEVER);\n        reservedKeys.put(Tokens.T_WHERE, WHERE);\n        reservedKeys.put(Tokens.T_WIDTH_BUCKET, WIDTH_BUCKET);\n        reservedKeys.put(Tokens.T_WINDOW, WINDOW);\n        reservedKeys.put(Tokens.T_WITH, WITH);\n        reservedKeys.put(Tokens.T_WITHIN, WITHIN);\n        reservedKeys.put(Tokens.T_WITHOUT, WITHOUT);\n        reservedKeys.put(Tokens.T_WHILE, WHILE);\n        reservedKeys.put(Tokens.T_YEAR, YEAR);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "1788",
               "end_line": "1951",
               "source_code": "        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);\n        reservedKeys.put(Tokens.T_ALL, ALL);\n        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);\n        reservedKeys.put(Tokens.T_ALTER, ALTER);\n        reservedKeys.put(Tokens.T_AND, AND);\n        reservedKeys.put(Tokens.T_ANY, ANY);\n        reservedKeys.put(Tokens.T_ARE, ARE);\n        reservedKeys.put(Tokens.T_ARRAY, ARRAY);\n        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);\n        reservedKeys.put(Tokens.T_AS, AS);\n        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);\n        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);\n        reservedKeys.put(Tokens.T_AT, AT);\n        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);\n        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);\n        reservedKeys.put(Tokens.T_AVG, AVG);\n        reservedKeys.put(Tokens.T_BEGIN, BEGIN);\n        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);\n        reservedKeys.put(Tokens.T_BIGINT, BIGINT);\n        reservedKeys.put(Tokens.T_BINARY, BINARY);\n        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);\n        reservedKeys.put(Tokens.T_BLOB, BLOB);\n        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);\n        reservedKeys.put(Tokens.T_BOTH, BOTH);\n        reservedKeys.put(Tokens.T_BY, BY);\n        reservedKeys.put(Tokens.T_CALL, CALL);\n        reservedKeys.put(Tokens.T_CALLED, CALLED);\n        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);\n        reservedKeys.put(Tokens.T_CASCADED, CASCADED);\n        reservedKeys.put(Tokens.T_CASE, CASE);\n        reservedKeys.put(Tokens.T_CAST, CAST);\n        reservedKeys.put(Tokens.T_CEIL, CEIL);\n        reservedKeys.put(Tokens.T_CEILING, CEILING);\n        reservedKeys.put(Tokens.T_CHAR, CHAR);\n        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);\n        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);\n        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);\n        reservedKeys.put(Tokens.T_CHECK, CHECK);\n        reservedKeys.put(Tokens.T_CLOB, CLOB);\n        reservedKeys.put(Tokens.T_CLOSE, CLOSE);\n        reservedKeys.put(Tokens.T_COALESCE, COALESCE);\n        reservedKeys.put(Tokens.T_COLLATE, COLLATE);\n        reservedKeys.put(Tokens.T_COLLECT, COLLECT);\n        reservedKeys.put(Tokens.T_COLUMN, COLUMN);\n        reservedKeys.put(Tokens.T_COMMIT, COMMIT);\n        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);\n        reservedKeys.put(Tokens.T_CONDITION, CONDITION);\n        reservedKeys.put(Tokens.T_CONNECT, CONNECT);\n        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);\n        reservedKeys.put(Tokens.T_CONVERT, CONVERT);\n        reservedKeys.put(Tokens.T_CORR, CORR);\n        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);\n        reservedKeys.put(Tokens.T_COUNT, COUNT);\n        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);\n        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);\n        reservedKeys.put(Tokens.T_CREATE, CREATE);\n        reservedKeys.put(Tokens.T_CROSS, CROSS);\n        reservedKeys.put(Tokens.T_CUBE, CUBE);\n        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);\n        reservedKeys.put(Tokens.T_CURRENT, CURRENT);\n        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);\n        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);\n        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,\n                         CURRENT_DEFAULT_TRANSFORM_GROUP);\n        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);\n        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);\n        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);\n        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);\n        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);\n        reservedKeys.put(Tokens.T_DO, DO);\n        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,\n                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);\n        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);\n        reservedKeys.put(Tokens.T_CURSOR, CURSOR);\n        reservedKeys.put(Tokens.T_CYCLE, CYCLE);\n        reservedKeys.put(Tokens.T_DATE, DATE);\n        reservedKeys.put(Tokens.T_DAY, DAY);\n        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);\n        reservedKeys.put(Tokens.T_DEC, DEC);\n        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);\n        reservedKeys.put(Tokens.T_DECLARE, DECLARE);\n        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);\n        reservedKeys.put(Tokens.T_DELETE, DELETE);\n        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);\n        reservedKeys.put(Tokens.T_DEREF, DEREF);\n        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);\n        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);\n        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);\n        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);\n        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);\n        reservedKeys.put(Tokens.T_DROP, DROP);\n        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);\n        reservedKeys.put(Tokens.T_EACH, EACH);\n        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);\n        reservedKeys.put(Tokens.T_ELSE, ELSE);\n        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);\n        reservedKeys.put(Tokens.T_END, END);\n        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);\n        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);\n        reservedKeys.put(Tokens.T_EVERY, EVERY);\n        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);\n        reservedKeys.put(Tokens.T_EXEC, EXEC);\n        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);\n        reservedKeys.put(Tokens.T_EXISTS, EXISTS);\n        reservedKeys.put(Tokens.T_EXIT, EXIT);\n        reservedKeys.put(Tokens.T_EXP, EXP);\n        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);\n        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);\n        reservedKeys.put(Tokens.T_FALSE, FALSE);\n        reservedKeys.put(Tokens.T_FETCH, FETCH);\n        reservedKeys.put(Tokens.T_FILTER, FILTER);\n        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);\n        reservedKeys.put(Tokens.T_FLOAT, FLOAT);\n        reservedKeys.put(Tokens.T_FLOOR, FLOOR);\n        reservedKeys.put(Tokens.T_FOR, FOR);\n        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);\n        reservedKeys.put(Tokens.T_FREE, FREE);\n        reservedKeys.put(Tokens.T_FROM, FROM);\n        reservedKeys.put(Tokens.T_FULL, FULL);\n        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);\n        reservedKeys.put(Tokens.T_FUSION, FUSION);\n        reservedKeys.put(Tokens.T_GET, GET);\n        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);\n        reservedKeys.put(Tokens.T_GRANT, GRANT);\n        reservedKeys.put(Tokens.T_GROUP, GROUP);\n        reservedKeys.put(Tokens.T_GROUPING, GROUPING);\n        reservedKeys.put(Tokens.T_HANDLER, HANDLER);\n        reservedKeys.put(Tokens.T_HAVING, HAVING);\n        reservedKeys.put(Tokens.T_HOLD, HOLD);\n        reservedKeys.put(Tokens.T_HOUR, HOUR);\n        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);\n        reservedKeys.put(Tokens.T_IF, IF);\n        reservedKeys.put(Tokens.T_IMPORT, IMPORT);\n        reservedKeys.put(Tokens.T_IN, IN);\n        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);\n        reservedKeys.put(Tokens.T_INNER, INNER);\n        reservedKeys.put(Tokens.T_INOUT, INOUT);\n        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);\n        reservedKeys.put(Tokens.T_INSERT, INSERT);\n        reservedKeys.put(Tokens.T_INT, INT);\n        reservedKeys.put(Tokens.T_INTEGER, INTEGER);\n        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);\n        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);\n        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);\n        reservedKeys.put(Tokens.T_INTO, INTO);\n        reservedKeys.put(Tokens.T_IS, IS);\n        reservedKeys.put(Tokens.T_ITERATE, ITERATE);\n        reservedKeys.put(Tokens.T_JOIN, JOIN);\n        reservedKeys.put(Tokens.T_LAG, LAG);\n        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);\n        reservedKeys.put(Tokens.T_LARGE, LARGE);\n        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);\n        reservedKeys.put(Tokens.T_LATERAL, LATERAL);\n        reservedKeys.put(Tokens.T_LEAD, LEAD);\n        reservedKeys.put(Tokens.T_LEADING, LEADING);\n        reservedKeys.put(Tokens.T_LEAVE, LEAVE);\n        reservedKeys.put(Tokens.T_LEFT, LEFT);\n        reservedKeys.put(Tokens.T_LIKE, LIKE);\n        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);\n        reservedKeys.put(Tokens.T_LN, LN);\n        reservedKeys.put(Tokens.T_LOCAL, LOCAL);\n        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);\n        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);\n        reservedKeys.put(Tokens.T_LOOP, LOOP);"
           }

       },

       {
           "id": "clone_628",

           "clone_type": "type-2",

           "origin": {
               "file": "Table.java",
               "start_line": "182",
               "end_line": "192",
               "source_code": "                break;\n\n            case VIEW_TABLE :\n                persistenceScope = SCOPE_STATEMENT;\n                isSchemaBased    = true;\n                isSessionBased   = true;\n                isView           = true;\n                break;\n\n            case RESULT_TABLE :\n                persistenceScope = SCOPE_SESSION;"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "146",
               "end_line": "156",
               "source_code": "                break;\n\n            case TEMP_TABLE :\n                persistenceScope = SCOPE_TRANSACTION;\n                isTemp           = true;\n                isSchemaBased    = true;\n                isSessionBased   = true;\n                break;\n\n            case TEMP_TEXT_TABLE :\n                persistenceScope = SCOPE_SESSION;"
           }

       },

       {
           "id": "clone_629",

           "clone_type": "type-2",

           "origin": {
               "file": "CharacterType.java",
               "start_line": "307",
               "end_line": "314",
               "source_code": "            case Types.SQL_ALL_TYPES :\n                return this;\n\n            case Types.SQL_CHAR :\n                newType = this;\n                break;\n\n            case Types.SQL_VARCHAR :"
           },

           "clone": {
               "file": "BitType.java",
               "start_line": "172",
               "end_line": "179",
               "source_code": "            case Types.SQL_ALL_TYPES :\n                return this;\n\n            case Types.SQL_BIT :\n                newType = this;\n                break;\n\n            case Types.SQL_BIT_VARYING :"
           }

       },

       {
           "id": "clone_630",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2494",
               "end_line": "2507",
               "source_code": "                if (!grantee.isFullyAccessibleByRole(type.getName())) {\n                    continue;\n                }\n\n                row                = t.getEmptyRowData();\n                row[udt_catalog]   = database.getCatalogName().name;\n                row[udt_schema]    = type.getSchemaName().name;\n                row[udt_name]      = type.getName().name;\n                row[table_catalog] = database.getCatalogName().name;\n                row[table_schema]  = tableName.schema.name;\n                row[table_name]    = tableName.name;\n                row[column_name]   = column.getNameString();\n\n                t.insertSys(session, store, row);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2376",
               "end_line": "2389",
               "source_code": "                if (!grantee.isFullyAccessibleByRole(type.getName())) {\n                    continue;\n                }\n\n                row                 = t.getEmptyRowData();\n                row[domain_catalog] = database.getCatalogName().name;\n                row[domain_schema]  = type.getSchemaName().name;\n                row[domain_name]    = type.getName().name;\n                row[table_catalog]  = database.getCatalogName().name;\n                row[table_schema]   = tableName.schema.name;\n                row[table_name]     = tableName.name;\n                row[column_name]    = column.getNameString();\n\n                t.insertSys(session, store, row);"
           }

       },

       {
           "id": "clone_631",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "6252",
               "end_line": "6257",
               "source_code": "          case '<':\n            sb.append(\"&lt;\");\n            break;\n          case '>':\n            sb.append(\"&gt;\");\n            break;"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "6245",
               "end_line": "6251",
               "source_code": "          case '\\'':\n            // This case not supported by Commons Lang's escapeHtml\n            sb.append(\"&apos;\");\n            break;\n          case '&':\n            sb.append(\"&amp;\");\n            break;"
           }

       },

       {
           "id": "clone_632",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "992",
               "end_line": "997",
               "source_code": "                        continue;\n                    case Token.EDIT_TYPE:\n                        // Scanner only returns EDIT_TYPEs in interactive mode\n                        processBuffHist(token);\n                        continue;\n                    case Token.BUFFER_TYPE:"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "975",
               "end_line": "979",
               "source_code": "                        continue;\n                    case Token.MACRO_TYPE:\n                        processMacro(token);\n                        continue;\n                    case Token.PL_TYPE:"
           }

       },

       {
           "id": "clone_633",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionColumn.java",
               "start_line": "852",
               "end_line": "859",
               "source_code": "                break;\n\n            case OpTypes.SEQUENCE :\n                sb.append(Tokens.T_SEQUENCE).append(\": \");\n                sb.append(sequence.getName().name);\n                break;\n\n            case OpTypes.MULTICOLUMN :"
           },

           "clone": {
               "file": "ExpressionColumn.java",
               "start_line": "824",
               "end_line": "831",
               "source_code": "                break;\n\n            case OpTypes.PARAMETER :\n                sb.append(Tokens.T_PARAMETER).append(\": \");\n                sb.append(column.getName().name);\n                break;\n\n            case OpTypes.COALESCE :"
           }

       },

       {
           "id": "clone_634",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "3285",
               "end_line": "3421",
               "source_code": "    /**\n     * Retrieves a description of table columns available in\n     * the specified catalog.\n     *\n     * <P>Only column descriptions matching the catalog, schema, table\n     * and column name criteria are returned.  They are ordered by\n     * JDBC 4.1[<code>TABLE_CAT</code>, ]<code>TABLE_SCHEM</code>,\n     * <code>TABLE_NAME</code>, and <code>ORDINAL_POSITION</code>.\n     *\n     * <P>Each column description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => table name\n     *  <LI><B>COLUMN_NAME</B> String => column name\n     *  <LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types\n     *  <LI><B>TYPE_NAME</B> String => Data source dependent type name,\n     *  for a UDT the type name is fully qualified\n     *  <LI><B>COLUMN_SIZE</B> int => column size.\n     *  <LI><B>BUFFER_LENGTH</B> is not used.\n     *  <LI><B>DECIMAL_DIGITS</B> int => the number of fractional digits. Null is returned for data types where\n     * DECIMAL_DIGITS is not applicable.\n     *  <LI><B>NUM_PREC_RADIX</B> int => Radix (typically either 10 or 2)\n     *  <LI><B>NULLABLE</B> int => is NULL allowed.\n     *      <UL>\n     *      <LI> columnNoNulls - might not allow <code>NULL</code> values\n     *      <LI> columnNullable - definitely allows <code>NULL</code> values\n     *      <LI> columnNullableUnknown - nullability unknown\n     *      </UL>\n     *  <LI><B>REMARKS</B> String => comment describing column (may be <code>null</code>)\n     *  <LI><B>COLUMN_DEF</B> String => (JDBC4 clarification:) default value for the column, which should be interpreted as a string when the value is enclosed in quotes (may be <code>null</code>)\n     *  <LI><B>SQL_DATA_TYPE</B> int => unused\n     *\n     *        <p>HSQLDB-specific: CLI type from SQL 2003 Table 37,\n     *        tables 6-9 Annex A1, and/or addendums in other\n     *        documents, such as:<br>\n     *        SQL 2003 Part 9: Management of External Data (SQL/MED) : DATALINK<br>\n     *        SQL 2003 Part 14: XML-Related Specifications (SQL/XML) : XML<p>\n     *\n     *  <LI><B>SQL_DATETIME_SUB</B> int => unused (HSQLDB-specific: SQL 2003 CLI datetime/interval subcode)\n     *  <LI><B>CHAR_OCTET_LENGTH</B> int => for char types the\n     *       maximum number of bytes in the column\n     *  <LI><B>ORDINAL_POSITION</B> int => index of column in table\n     *      (starting at 1)\n     *  <LI><B>IS_NULLABLE</B> String  => ISO rules are used to determine the nullability for a column.\n     *       <UL>\n     *       <LI> YES           --- if the column can include NULLs\n     *       <LI> NO            --- if the column cannot include NULLs\n     *       <LI> empty string  --- if the nullability for the\n     * column is unknown\n     *       </UL>\n     *  <LI>JDBC 4.1 Deleted[<B>SCOPE_CATLOG</B>] JDBC 4.1 Added[<B>SCOPE_CATALOG</B>] String => catalog of table that is the scope\n     *      of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)\n     *  <LI><B>SCOPE_SCHEMA</B> String => schema of table that is the scope\n     *      of a reference attribute (<code>null</code> if the DATA_TYPE isn't REF)\n     *  <LI><B>SCOPE_TABLE</B> String => table name that this the scope\n     *      of a reference attribute (<code>null</code> if the DATA_TYPE isn't REF)\n     *  <LI><B>SOURCE_DATA_TYPE</B> short => source type of a distinct type or user-generated\n     *      Ref type, SQL type from java.sql.Types (<code>null</code> if DATA_TYPE\n     *      isn't DISTINCT or user-generated REF)\n     *   <LI><B>IS_AUTOINCREMENT</B> String  => Indicates whether this column is auto incremented\n     *       <UL>\n     *       <LI> YES           --- if the column is auto incremented\n     *       <LI> NO            --- if the column is not auto incremented\n     *       <LI> empty string  --- if it cannot be determined whether the column is auto incremented\n     *       </UL>\n     *   <LI(JDBC 4.1 New:)<B>IS_GENERATEDCOLUMN</B> String  => Indicates whether this is a generated column\n     *       <UL>\n     *       <LI> YES           --- if this a generated column\n     *       <LI> NO            --- if this not a generated column\n     *       <LI> empty string  --- if it cannot be determined whether this is a generated column\n     *       </UL>\n     *  </OL>\n     *\n     * <p>(JDBC4 clarification:) The COLUMN_SIZE column represents the specified column size for the given column.\n     * For numeric data, this is the maximum precision.  For character data, this is the [declared or implicit maximum] length in characters.\n     * For datetime datatypes, this is the [maximum] length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the [maximum] length in bytes.  For the ROWID datatype,\n     * this is the length in bytes[, as returned by the implementation-specific java.sql.RowId.getBytes() method]. JDBC 4.1 Deleted[0] JDBC 4.1 Added[Null] is returned for data types where the\n     * column size is not applicable. <p>\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports the SQL Standard. It treats unquoted identifiers as\n     * case insensitive in SQL and stores\n     * them in upper case; it treats quoted identifiers as case sensitive and\n     * stores them verbatim. All JDBCDatabaseMetaData methods perform\n     * case-sensitive comparison between name (pattern) arguments and the\n     * corresponding identifier values as they are stored in the database.\n     * Therefore, care must be taken to specify name arguments precisely\n     * (including case) as they are stored in the database. <p>\n     *\n     * This feature is supported by default. If the jar is\n     * compiled without org.hsqldb.dbinfo.DatabaseInformationMain, the feature is\n     * not supported. The default implementation is\n     * {@link org.hsqldb.dbinfo.DatabaseInformationMain}.\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param tableNamePattern a table name pattern; must match the\n     *        table name as it is stored in the database\n     * @param columnNamePattern a column name pattern; must match the column\n     *        name as it is stored in the database\n     * @return <code>ResultSet</code> - each row is a column description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     */\n    public ResultSet getColumns(String catalog, String schemaPattern,\n                                String tableNamePattern,\n                                String columnNamePattern) throws SQLException {\n\n        if (wantsIsNull(tableNamePattern) || wantsIsNull(columnNamePattern)) {\n            return executeSelect(\"SYSTEM_COLUMNS\", \"0=1\");\n        }\n        catalog       = translateCatalog(catalog);\n        schemaPattern = translateSchema(schemaPattern);\n\n        StringBuffer select = toQueryPrefix(\"SYSTEM_COLUMNS\").append(\n            and(\"TABLE_CAT\", \"=\", catalog)).append(\n            and(\"TABLE_SCHEM\", \"LIKE\", schemaPattern)).append(\n            and(\"TABLE_NAME\", \"LIKE\", tableNamePattern)).append(\n            and(\"COLUMN_NAME\", \"LIKE\", columnNamePattern));\n\n        // by default, query already returns the result ordered\n        // by TABLE_SCHEM, TABLE_NAME and ORDINAL_POSITION\n        return execute(select.toString());\n    }"
           },

           "clone": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "2907",
               "end_line": "3052",
               "source_code": "    /**\n     * Retrieves a description of the given catalog's stored procedure parameter\n     * and result columns.\n     *\n     * <P>Only descriptions matching the schema, procedure and\n     * parameter name criteria are returned.  They are ordered by\n     * JDBC 4.1[PROCEDURE_CAT,] PROCEDURE_SCHEM, PROCEDURE_NAME and SPECIFIC_NAME. Within this, the return value,\n     * if any, is first. Next are the parameter descriptions in call\n     * order. The column descriptions follow in column number order.\n     *\n     * <P>Each row in the <code>ResultSet</code> is a parameter description or\n     * column description with the following fields:\n     *  <OL>\n     *  <LI><B>PROCEDURE_CAT</B> String => procedure catalog (may be <code>null</code>)\n     *  <LI><B>PROCEDURE_SCHEM</B> String => procedure schema (may be <code>null</code>)\n     *  <LI><B>PROCEDURE_NAME</B> String => procedure name\n     *  <LI><B>COLUMN_NAME</B> String => column/parameter name\n     *  <LI><B>COLUMN_TYPE</B> Short => kind of column/parameter:\n     *      <UL>\n     *      <LI> procedureColumnUnknown - nobody knows\n     *      <LI> procedureColumnIn - IN parameter\n     *      <LI> procedureColumnInOut - INOUT parameter\n     *      <LI> procedureColumnOut - OUT parameter\n     *      <LI> procedureColumnReturn - procedure return value\n     *      <LI> procedureColumnResult - result column in <code>ResultSet</code>\n     *      </UL>\n     *  <LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types\n     *  <LI><B>TYPE_NAME</B> String => SQL type name, for a UDT type the\n     *  type name is fully qualified\n     *  <LI><B>PRECISION</B> int => precision\n     *  <LI><B>LENGTH</B> int => length in bytes of data\n     *  <LI><B>SCALE</B> short => scale -  null is returned for data types where\n     * SCALE is not applicable.\n     *  <LI><B>RADIX</B> short => radix\n     *  <LI><B>NULLABLE</B> short => can it contain NULL.\n     *      <UL>\n     *      <LI> procedureNoNulls - does not allow NULL values\n     *      <LI> procedureNullable - allows NULL values\n     *      <LI> procedureNullableUnknown - nullability unknown\n     *      </UL>\n     *  <LI><B>REMARKS</B> String => comment describing parameter/column\n     *  <LI><B>COLUMN_DEF</B> String => default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be <code>null</code>)\n     *      <UL>\n     *      <LI> The string NULL (not enclosed in quotes) - if NULL was specified as the default value\n     *      <LI> TRUNCATE (not enclosed in quotes)        - if the specified default value cannot be represented without truncation\n     *      <LI> NULL                                     - if a default value was not specified\n     *      </UL>\n     *  <LI><B>SQL_DATA_TYPE</B> int  => (JDBC4 new:) Reserved for future use\n     *\n     *        <p>HSQLDB-specific: CLI type from SQL 2003 Table 37,\n     *        tables 6-9 Annex A1, and/or addendums in other\n     *        documents, such as:<br>\n     *        SQL 2003 Part 9: Management of External Data (SQL/MED) : DATALINK<br>\n     *        SQL 2003 Part 14: XML-Related Specifications (SQL/XML) : XML<p>\n     *\n     *  <LI><B>SQL_DATETIME_SUB</B> int  => (JDBC4 new:) reserved for future use\n     *\n     *        <p>HSQLDB-specific: CLI SQL_DATETIME_SUB from SQL 2003 Table 37\n     *\n     *  <LI><B>CHAR_OCTET_LENGTH</B> int  => (JDBC4 new:) the maximum length of binary and character based columns.  For any other datatype the returned value is a\n     * NULL\n     *  <LI><B>ORDINAL_POSITION</B> int  => (JDBC4 new:) the ordinal position, starting from 1, for the input and output parameters for a procedure. A value of 0\n     * is returned if this row describes the procedure's return value. JDBC 4.1[For result set columns, it is the\n     * ordinal position of the column in the result set starting from 1.  If there are\n     * multiple result sets, the column ordinal positions are implementation\n     * defined.]\n     *  <LI><B>IS_NULLABLE</B> String  => ISO rules are used to determine the nullability for a column.\n     *       <UL>\n     *       <LI> YES           --- if the parameter or result column can include NULLs\n     *       <LI> NO            --- if the parameter or result column cannot include NULLs\n     *       <LI> empty string  --- if the nullability for the\n     * parameter or result column is unknown\n     *       </UL>\n     *  <LI><B>SPECIFIC_NAME</B> String  => (JDBC4 new:) the name which uniquely identifies this procedure within its schema.\n     * </OL>\n     *\n     * <P><B>Note:</B> Some databases may not return the column\n     * descriptions for a procedure. Additional columns beyond (JDBC4 modified:)\n     * SPECIFIC_NAME can be defined by the database and must be accessed by their <B>column name</B>.\n     *\n     * <p>(JDBC4 clarification:)\n     * <p>The PRECISION column represents the specified column size for the given column.\n     * For numeric data, this is the maximum precision.  For character data, this is the [declared or implicit maximum] length in characters.\n     * For datetime datatypes, this is the [maximum] length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the [maximum] length in bytes.  For the ROWID datatype,\n     * this is the length in bytes[, as returned by the implementation-specific java.sql.RowId.getBytes() method]. JDBC 4.1 Deleted[0] JDBC 4.1 Added[Null] is returned for data types where the\n     * column size is not applicable.\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports the SQL Standard. It treats unquoted identifiers as\n     * case insensitive in SQL and stores\n     * them in upper case; it treats quoted identifiers as case sensitive and\n     * stores them verbatim. All JDBCDatabaseMetaData methods perform\n     * case-sensitive comparison between name (pattern) arguments and the\n     * corresponding identifier values as they are stored in the database.\n     * Therefore, care must be taken to specify name arguments precisely\n     * (including case) as they are stored in the database. <p>\n     *\n     * Since 1.7.2, this feature is supported by default. If the jar is\n     * compiled without org.hsqldb.dbinfo.DatabaseInformationMain, the feature is\n     * not supported. The default implementation is\n     * {@link org.hsqldb.dbinfo.DatabaseInformationFull}.\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param procedureNamePattern a procedure name pattern; must match the\n     *        procedure name as it is stored in the database\n     * @param columnNamePattern a column name pattern; must match the column name\n     *        as it is stored in the database\n     * @return <code>ResultSet</code> - each row describes a stored procedure parameter or\n     *      column\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     */\n    public ResultSet getProcedureColumns(String catalog, String schemaPattern,\n            String procedureNamePattern,\n            String columnNamePattern) throws SQLException {\n\n        if (wantsIsNull(procedureNamePattern)\n                || wantsIsNull(columnNamePattern)) {\n            return executeSelect(\"SYSTEM_PROCEDURECOLUMNS\", \"0=1\");\n        }\n        catalog       = translateCatalog(catalog);\n        schemaPattern = translateSchema(schemaPattern);\n\n        StringBuffer select = toQueryPrefix(\"SYSTEM_PROCEDURECOLUMNS\").append(\n            and(\"PROCEDURE_CAT\", \"=\", catalog)).append(\n            and(\"PROCEDURE_SCHEM\", \"LIKE\", schemaPattern)).append(\n            and(\"PROCEDURE_NAME\", \"LIKE\", procedureNamePattern)).append(\n            and(\"COLUMN_NAME\", \"LIKE\", columnNamePattern));\n\n        // By default, query already returns result ordered by\n        // PROCEDURE_SCHEM and PROCEDURE_NAME...\n        return execute(select.toString());\n    }"
           }

       },

       {
           "id": "clone_635",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "893",
               "end_line": "921",
               "source_code": "        // column number mappings\n        final int itable_cat         = 0;\n        final int itable_schem       = 1;\n        final int itable_name        = 2;\n        final int icolumn_name       = 3;\n        final int idata_type         = 4;\n        final int itype_name         = 5;\n        final int icolumn_size       = 6;\n        final int ibuffer_length     = 7;\n        final int idecimal_digits    = 8;\n        final int inum_prec_radix    = 9;\n        final int inullable          = 10;\n        final int iremark            = 11;\n        final int icolumn_def        = 12;\n        final int isql_data_type     = 13;\n        final int isql_datetime_sub  = 14;\n        final int ichar_octet_length = 15;\n        final int iordinal_position  = 16;\n        final int iis_nullable       = 17;\n        final int iscope_cat         = 18;\n        final int iscope_schem       = 19;\n        final int iscope_table       = 20;\n        final int isource_data_type  = 21;\n\n        // JDBC 4.0\n        final int iis_autoinc = 22;\n\n        // JDBC 4.1\n        final int iis_generated = 23;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7885",
               "end_line": "7908",
               "source_code": "        final int ordering_routine_schema    = 9;\n        final int ordering_routine_name      = 10;\n        final int reference_type             = 11;\n        final int data_type                  = 12;\n        final int character_maximum_length   = 13;\n        final int character_octet_length     = 14;\n        final int character_set_catalog      = 15;\n        final int character_set_schema       = 16;\n        final int character_set_name         = 17;\n        final int collation_catalog          = 18;\n        final int collation_schema           = 19;\n        final int collation_name             = 20;\n        final int numeric_precision          = 21;\n        final int numeric_precision_radix    = 22;\n        final int numeric_scale              = 23;\n        final int datetime_precision         = 24;\n        final int interval_type              = 25;\n        final int interval_precision         = 26;\n        final int source_dtd_identifier      = 27;\n        final int ref_dtd_identifier         = 28;\n        final int declared_data_type         = 29;\n        final int declared_numeric_precision = 30;\n        final int declared_numeric_scale     = 31;\n        final int maximum_cardinality        = 32;"
           }

       },

       {
           "id": "clone_636",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2494",
               "end_line": "2499",
               "source_code": "        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);\n        commandSet.put(T_MINUS, Tokens.MINUS);\n        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);\n        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);\n        commandSet.put(T_OPENBRACKET, OPENBRACKET);\n        commandSet.put(T_PLUS, Tokens.PLUS);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2488",
               "end_line": "2493",
               "source_code": "        commandSet.put(T_DIVIDE, Tokens.DIVIDE);\n        commandSet.put(T_EQUALS, Tokens.EQUALS);\n        commandSet.put(T_GREATER, Tokens.GREATER);\n        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);\n        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);\n        commandSet.put(T_LESS, Tokens.LESS);"
           }

       },

       {
           "id": "clone_637",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1467",
               "end_line": "1480",
               "source_code": "        // calculated column values\n        String tableCatalog;\n        String tableSchema;\n        String tableName;\n\n        //String  columnName;\n        //Integer keySequence;\n        String primaryKeyName;\n\n        // Intermediate holders\n        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        Constraint     constraint;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8060",
               "end_line": "8070",
               "source_code": "        // Calculated column values\n        String viewCatalog;\n        String viewSchema;\n        String viewName;\n\n        // Intermediate holders\n        Iterator tables;\n        View     view;\n        Table    table;\n        Object[] row;\n        Iterator iterator;"
           }

       },

       {
           "id": "clone_638",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1231",
               "end_line": "1243",
               "source_code": "                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_longvar_is_lob;\n                        break;\n\n                    case Tokens.IGNORECASE :\n                        read();\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_ignore_case;\n                        break;\n\n                    case Tokens.SYNTAX :\n                        read();"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1137",
               "end_line": "1149",
               "source_code": "                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_enforce_size;\n                        break;\n\n                    case Tokens.TYPES :\n                        read();\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_enforce_types;\n                        break;\n\n                    case Tokens.TDC :\n                        read();"
           }

       },

       {
           "id": "clone_639",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3286",
               "end_line": "3300",
               "source_code": "                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                if (nodes[2].dataType == null) {\n                    nodes[2].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_NEXT_DAY :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3238",
               "end_line": "3252",
               "source_code": "                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;\n                break;\n\n            case FUNC_LAST_DAY :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }"
           }

       },

       {
           "id": "clone_640",

           "clone_type": "type-2",

           "origin": {
               "file": "LdapAuthBean.java",
               "start_line": "680",
               "end_line": "686",
               "source_code": "        String principalTemplate = p.getProperty(\"principalTemplate\");\n        String initialContextFactory = p.getProperty(\"initialContextFactory\");\n        String saslRealm = p.getProperty(\"saslRealm\");\n        String parentDn = p.getProperty(\"parentDn\");\n        String rdnAttribute = p.getProperty(\"rdnAttribute\");\n        String rolesSchemaAttribute = p.getProperty(\"rolesSchemaAttribute\");\n        String accessAttribute = p.getProperty(\"accessAttribute\");"
           },

           "clone": {
               "file": "LdapAuthBean.java",
               "start_line": "672",
               "end_line": "679",
               "source_code": "        String trustStore = p.getProperty(\"trustStore\");\n        String startTlsString = p.getProperty(\"startTls\");\n        String ldapPortString = p.getProperty(\"ldapPort\");\n        String roleSchemaValuePatternString =\n                p.getProperty(\"roleSchemaValuePattern\");\n        String accessValuePatternString = p.getProperty(\"accessValuePattern\");\n        String securityMechanism = p.getProperty(\"securityMechanism\");\n        String ldapHost = p.getProperty(\"ldapHost\");"
           }

       },

       {
           "id": "clone_641",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "1877",
               "end_line": "1891",
               "source_code": "        sb.append(Tokens.T_NULLS).append(' ');\n        sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE\n                                          : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_CONVERT).append(' ');\n        sb.append(Tokens.T_TRUNCATE).append(' ');\n        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE\n                                              : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_AVG).append(' ');\n        sb.append(Tokens.T_SCALE).append(' ');"
           },

           "clone": {
               "file": "Logger.java",
               "start_line": "1821",
               "end_line": "1835",
               "source_code": "        sb.append(Tokens.T_TYPES).append(' ');\n        sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE\n                                           : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_TDC).append(' ');\n        sb.append(Tokens.T_DELETE).append(' ');\n        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE\n                                          : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_TDC).append(' ');\n        sb.append(Tokens.T_UPDATE).append(' ');"
           }

       },

       {
           "id": "clone_642",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2145",
               "end_line": "2154",
               "source_code": "                row             = t.getEmptyRowData();\n                pName           = (String) l.get(i);\n                row[icat]       = cat;\n                row[ischem]     = schem;\n                row[iname]      = pName;\n                row[icol_name]  = cName;\n                row[icol_type]  = cType;\n                row[idata_type] = dType;\n                row[itype_name] = tName;\n                row[iprec]      = prec;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2025",
               "end_line": "2034",
               "source_code": "                row                = t.getEmptyRowData();\n                pName              = (String) l.get(i);\n                row[icat]          = cat;\n                row[ischem]        = schem;\n                row[ipname]        = pName;\n                row[iinput_parms]  = ip;\n                row[ioutput_parms] = op;\n                row[iresult_sets]  = rs;\n                row[iremark]       = remark;\n                row[iptype]        = pType;"
           }

       },

       {
           "id": "clone_643",

           "clone_type": "type-2",

           "origin": {
               "file": "PersistentStoreCollectionSession.java",
               "start_line": "163",
               "end_line": "174",
               "source_code": "                return store;\n\n            case TableBase.SCOPE_SESSION :\n                store = (PersistentStore) rowStoreMapSession.get(\n                    table.getPersistenceId());\n\n                if (store == null) {\n                    store = session.database.logger.newStore(session, this,\n                            table);\n                }\n\n                return store;"
           },

           "clone": {
               "file": "PersistentStoreCollectionSession.java",
               "start_line": "134",
               "end_line": "145",
               "source_code": "                return store;\n\n            case TableBase.SCOPE_STATEMENT :\n                store = (PersistentStore) rowStoreMapStatement.get(\n                    table.getPersistenceId());\n\n                if (store == null) {\n                    store = session.database.logger.newStore(session, this,\n                            table);\n                }\n\n                return store;"
           }

       },

       {
           "id": "clone_644",

           "clone_type": "type-2",

           "origin": {
               "file": "DataFileCache.java",
               "start_line": "468",
               "end_line": "477",
               "source_code": "                dataFile.seek(LONG_EMPTY_SIZE);\n\n                freesize = dataFile.readLong();\n\n                dataFile.seek(LONG_FREE_POS_POS);\n\n                fileFreePosition      = dataFile.readLong();\n                fileStartFreePosition = fileFreePosition;\n\n                dataFile.seek(FLAGS_POS);"
           },

           "clone": {
               "file": "DataFileCache.java",
               "start_line": "358",
               "end_line": "367",
               "source_code": "                dataFile.seek(LONG_EMPTY_SIZE);\n\n                lostSpaceSize = dataFile.readLong();\n\n                dataFile.seek(LONG_FREE_POS_POS);\n\n                fileFreePosition      = dataFile.readLong();\n                fileStartFreePosition = fileFreePosition;\n\n                dataFile.seek(INT_SPACE_LIST_POS);"
           }

       },

       {
           "id": "clone_645",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSubQueriesInPreparedStatements.java",
               "start_line": "147",
               "end_line": "155",
               "source_code": "        while (rs.next()) {\n            System.out.println(\"(\" + rs.getInt(1) + \",\" + rs.getInt(2) + \")\");\n        }\n\n        System.out.println(\"Expecting: ((0,0) .. (3,3)\");\n        pstmnt.setInt(1, 4);\n        pstmnt.setInt(2, 4);\n\n        rs = pstmnt.executeQuery();"
           },

           "clone": {
               "file": "TestSubQueriesInPreparedStatements.java",
               "start_line": "137",
               "end_line": "145",
               "source_code": "        while (rs.next()) {\n            System.out.println(\"(\" + rs.getInt(1) + \",\" + rs.getInt(2) + \")\");\n        }\n\n        System.out.println(\"Expecting: ((0,0), (0,1), (1,0), (1,1)\");\n        pstmnt.setInt(1, 2);\n        pstmnt.setInt(2, 2);\n\n        rs = pstmnt.executeQuery();"
           }

       },

       {
           "id": "clone_646",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1386",
               "end_line": "1426",
               "source_code": "    public void testTimestampWComplex() {\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        Timestamp aTimestamp = Timestamp.valueOf(\"2009-03-27 17:18:19\");\n\n        try {\n            ps = netConn.prepareStatement(\n                \"INSERT INTO alltypes(id, tsw) VALUES(?, ?)\");\n            ps.setInt(1, 3);\n            ps.setTimestamp(2, aTimestamp);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();\n            ps = netConn.prepareStatement(\n                \"SELECT * FROM alltypes WHERE tsw = ?\");\n            ps.setTimestamp(1, aTimestamp);\n            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with tsw = aTimestamp\", rs.next());\n            assertEquals(Timestamp.class, rs.getObject(\"tsw\").getClass());\n            assertTrue(\"Got only one row with tsw = aTimestamp\", rs.next());\n            assertEquals(aTimestamp, rs.getTimestamp(\"tsw\"));\n            assertFalse(\"Got too many rows with tsw = aTimestamp\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1344",
               "end_line": "1384",
               "source_code": "    public void testTimestampComplex() {\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        Timestamp aTimestamp = Timestamp.valueOf(\"2009-03-27 17:18:19\");\n\n        try {\n            ps = netConn.prepareStatement(\n                \"INSERT INTO alltypes(id, ts) VALUES(?, ?)\");\n            ps.setInt(1, 3);\n            ps.setTimestamp(2, aTimestamp);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();\n            ps = netConn.prepareStatement(\n                \"SELECT * FROM alltypes WHERE ts = ?\");\n            ps.setTimestamp(1, aTimestamp);\n            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with ts = aTimestamp\", rs.next());\n            assertEquals(Timestamp.class, rs.getObject(\"ts\").getClass());\n            assertTrue(\"Got only one row with ts = aTimestamp\", rs.next());\n            assertEquals(aTimestamp, rs.getTimestamp(\"ts\"));\n            assertFalse(\"Got too many rows with ts = aTimestamp\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_647",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "595",
               "end_line": "605",
               "source_code": "                break;\n\n            case OpTypes.UNIQUE :\n                sb.append(Tokens.T_UNIQUE);\n                break;\n\n            case OpTypes.EXISTS :\n                sb.append(Tokens.T_EXISTS);\n                break;\n\n            case OpTypes.OVERLAPS :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "574",
               "end_line": "584",
               "source_code": "                break;\n\n            case OpTypes.AND :\n                sb.append(Tokens.T_AND);\n                break;\n\n            case OpTypes.OR :\n                sb.append(Tokens.T_OR);\n                break;\n\n            case OpTypes.MATCH_SIMPLE :"
           }

       },

       {
           "id": "clone_648",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSql.java",
               "start_line": "583",
               "end_line": "591",
               "source_code": "            pstmt.setInt(1, 1);\n\n            rs = pstmt.executeQuery();\n\n            rs.next();\n\n            count = rs.getInt(1);\n\n            assertEquals(20, count);"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "574",
               "end_line": "582",
               "source_code": "            pstmt.setInt(1, 0);\n\n            rs = pstmt.executeQuery();\n\n            rs.next();\n\n            count = rs.getInt(1);\n\n            assertEquals(10, count);"
           }

       },

       {
           "id": "clone_649",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "1023",
               "end_line": "1028",
               "source_code": "                    Query = \"UPDATE branches \";\n                    Query += \"SET    Bbalance = Bbalance + \" + delta + \" \";\n                    Query += \"WHERE  Bid = \" + bid;\n\n                    Stmt.executeUpdate(Query);\n                    Stmt.clearWarnings();"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "1016",
               "end_line": "1021",
               "source_code": "                    Query = \"UPDATE tellers \";\n                    Query += \"SET    Tbalance = Tbalance + \" + delta + \" \";\n                    Query += \"WHERE  Tid = \" + tid;\n\n                    Stmt.executeUpdate(Query);\n                    Stmt.clearWarnings();"
           }

       },

       {
           "id": "clone_650",

           "clone_type": "type-2",

           "origin": {
               "file": "View.java",
               "start_line": "234",
               "end_line": "240",
               "source_code": "            case StatementTypes.INSERT :\n                isTriggerInsertable = false;\n                break;\n\n            case StatementTypes.DELETE_WHERE :\n                isTriggerDeletable = false;\n                break;"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1083",
               "end_line": "1089",
               "source_code": "                    case Tokens.LEADING :\n                        leading = true;\n                        break;\n\n                    case Tokens.TRAILING :\n                        trailing = true;\n                        break;"
           }

       },

       {
           "id": "clone_651",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2347",
               "end_line": "2353",
               "source_code": "                case SchemaObject.TYPE :\n                    set    = schema.typeLookup;\n                    object = set.getObject(name.name);\n                    break;\n\n                case SchemaObject.INDEX :\n                    set = schema.indexLookup;"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "2288",
               "end_line": "2294",
               "source_code": "                case SchemaObject.CHARSET :\n                    set    = schema.charsetLookup;\n                    object = set.getObject(name.name);\n                    break;\n\n                case SchemaObject.COLLATION :\n                    set    = schema.collationLookup;"
           }

       },

       {
           "id": "clone_652",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "157",
               "end_line": "164",
               "source_code": "                break;\n\n            case Types.SQL_TIMESTAMP :\n                nodes                = new Expression[BINARY];\n                nodes[LEFT]          = e;\n                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(\n                    Types.SQL_TIMESTAMP_WITH_TIME_ZONE, e.dataType.scale);"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "148",
               "end_line": "156",
               "source_code": "                break;\n\n            case Types.SQL_TIME :\n                nodes                = new Expression[BINARY];\n                nodes[LEFT]          = e;\n                nodes[LEFT].dataType = e.dataType;\n                dataType =\n                    DateTimeType.getDateTimeType(Types.SQL_TIME_WITH_TIME_ZONE,\n                                                 e.dataType.scale);"
           }

       },

       {
           "id": "clone_653",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcService.java",
               "start_line": "198",
               "end_line": "207",
               "source_code": "            ResultSet rs = netConn.createStatement().executeQuery(\n                \"SELECT i, 3, vc, xtra FROM nullmix ORDER BY i\");\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"second\", rs.getString(4));\n            assertEquals(5, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"five\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcService.java",
               "start_line": "160",
               "end_line": "168",
               "source_code": "        ResultSet rs = netConn.createStatement().executeQuery(\n            \"SELECT i, 3, vc, 'str' FROM nullmix WHERE i > 20 ORDER BY i\");\n        assertTrue(\"No rows fetched\", rs.next());\n        assertEquals(\"str\", rs.getString(4));\n        assertEquals(21, rs.getInt(1));\n        assertEquals(3, rs.getInt(2));\n        assertEquals(\"twenty one\", rs.getString(3));\n\n        assertTrue(\"Not enough rows fetched\", rs.next());"
           }

       },

       {
           "id": "clone_654",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5177",
               "end_line": "5219",
               "source_code": "        Table t = sysTables[ROUTINE_PRIVILEGES];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ROUTINE_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n\n            //\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINE_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int grantor          = 0;\n        final int grantee          = 1;\n        final int specific_catalog = 2;\n        final int specific_schema  = 3;\n        final int specific_name    = 4;\n        final int routine_catalog  = 5;\n        final int routine_schema   = 6;\n        final int routine_name     = 7;\n        final int privilege_type   = 8;\n        final int is_grantable     = 9;\n\n        //\n        // calculated column values\n        Grantee granteeObject;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5051",
               "end_line": "5091",
               "source_code": "        Table t = sysTables[ROUTINE_COLUMN_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ROUTINE_COLUMN_USAGE]);\n\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINE_COLUMN_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                3, 4, 5, 0, 1, 2, 6, 7, 8, 9\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int routine_catalog  = 3;\n        final int routine_schema   = 4;\n        final int routine_name     = 5;\n        final int table_catalog    = 6;\n        final int table_schema     = 7;\n        final int table_name       = 8;\n        final int column_name      = 9;\n\n        //\n        Iterator it;"
           }

       },

       {
           "id": "clone_655",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "753",
               "end_line": "768",
               "source_code": "        execSQL(\"ALTER TABLE bigtbl \" + pref\n                + \"ALTER COLUMN i106 RENAME TO j3\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER \" + pref\n                + \"COLUMN i107 RENAME TO j4\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER COLUMN i108 \" + pref\n                + \"RENAME TO j5\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER COLUMN i109 RENAME \" + pref\n                + \"TO j6\", expect);\n        execSQL(\n            pref\n            + \"ALTER TABLE constrainedtbl ADD CONSTRAINT con2 CHECK (i6 > 4)\", expect);\n        execSQL(\n            \"ALTER \" + pref\n            + \"TABLE constrainedtbl ADD CONSTRAINT con3 CHECK (i6 > 4)\", expect);\n        execSQL(\"ALTER TABLE constrainedtbl \" + pref\n                + \"ADD CONSTRAINT con4 CHECK (i6 > 4)\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "729",
               "end_line": "735",
               "source_code": "        execSQL(\"ALTER \" + pref + \"SEQUENCE tstseq RESTART WITH 13\", expect);\n        execSQL(\"ALTER SEQUENCE tstseq \" + pref + \"RESTART WITH 13\", expect);\n        execSQL(\"ALTER SEQUENCE tstseq RESTART \" + pref + \"WITH 13\", expect);\n        execSQL(\"ALTER USER tstuser SET PASSWORD \" + pref + \"frank\", expect);\n        execSQL(pref + \"ALTER USER tstuser SET PASSWORD frank\", expect);\n        execSQL(\"ALTER \" + pref + \"USER tstuser SET PASSWORD frank\", expect);\n        execSQL(\"ALTER USER tstuser \" + pref + \"SET PASSWORD frank\", expect);"
           }

       },

       {
           "id": "clone_656",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionColumn.java",
               "start_line": "307",
               "end_line": "316",
               "source_code": "            case OpTypes.MULTICOLUMN :\n            case OpTypes.DYNAMIC_PARAM :\n            case OpTypes.ASTERISK :\n            case OpTypes.SIMPLE_COLUMN :\n            case OpTypes.COALESCE :\n                break;\n\n            case OpTypes.PARAMETER :\n            case OpTypes.VARIABLE :\n                break;"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2862",
               "end_line": "2871",
               "source_code": "                    case Types.SQL_NUMERIC :\n                    case Types.SQL_BIGINT :\n                    case Types.SQL_INTEGER :\n                    case Types.SQL_SMALLINT :\n                    case Types.TINYINT :\n                        break;\n\n                    case Types.SQL_BIT :\n                    case Types.SQL_BIT_VARYING :\n                        break;"
           }

       },

       {
           "id": "clone_657",

           "clone_type": "type-2",

           "origin": {
               "file": "FileArchiver.java",
               "start_line": "193",
               "end_line": "200",
               "source_code": "                    break;\n\n                case COMPRESSION_NONE :\n                    break;\n\n                default :\n                    throw new RuntimeException(\"FileArchiver: \"\n                                               + compressionType);"
           },

           "clone": {
               "file": "FileArchiver.java",
               "start_line": "116",
               "end_line": "123",
               "source_code": "                    break;\n\n                case COMPRESSION_NONE :\n                    break;\n\n                default :\n                    throw new RuntimeException(\"FileArchiver\"\n                                               + compressionType);"
           }

       },

       {
           "id": "clone_658",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "124",
               "end_line": "134",
               "source_code": "                case Tokens.USER :\n                case Tokens.CURRENT_USER :\n                case Tokens.CURRENT_ROLE :\n                case Tokens.SESSION_USER :\n                case Tokens.SYSTEM_USER :\n                case Tokens.CURRENT_CATALOG :\n                case Tokens.CURRENT_SCHEMA :\n                case Tokens.CURRENT_PATH :\n                    FunctionSQL function =\n                        FunctionSQL.newSQLFunction(token.tokenString,\n                                                   compileContext);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3231",
               "end_line": "3241",
               "source_code": "            case Tokens.LN :\n            case Tokens.EXP :\n            case Tokens.POWER :\n            case Tokens.SQRT :\n            case Tokens.FLOOR :\n            case Tokens.CEILING :\n            case Tokens.CEIL :\n            case Tokens.WIDTH_BUCKET :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);"
           }

       },

       {
           "id": "clone_659",

           "clone_type": "type-2",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "164",
               "end_line": "170",
               "source_code": "        ResultSet rs = st.executeQuery(\"select count(*) from tident\");\n\n        assertTrue(rs.next());\n        assertEquals(0, rs.getInt(1));\n\n        st.execute(\"set table tident source off\");\n        st.execute(\"set table tsingle source off\");"
           },

           "clone": {
               "file": "TestTextTables.java",
               "start_line": "131",
               "end_line": "136",
               "source_code": "        ResultSet rs = st.executeQuery(\"select count(*) from tsingle\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));\n        st.execute(\"set table tsingle read only\");\n        st.execute(\"SHUTDOWN SCRIPT\");"
           }

       },

       {
           "id": "clone_660",

           "clone_type": "type-2",

           "origin": {
               "file": "KMPSearchAlgorithm.java",
               "start_line": "180",
               "end_line": "230",
               "source_code": "                              int[] table) throws IOException {\n\n        if (reader == null || pattern == null || pattern.length == 0) {\n            return -1;\n        }\n\n        //\n        final int patternLength = pattern.length;\n\n        //\n        long streamIndex = -1;\n        int  currentCharacter;\n\n        if (patternLength == 1) {\n            final int characterToFind = pattern[0];\n\n            while (-1 != (currentCharacter = reader.read())) {\n                streamIndex++;\n\n                if (currentCharacter == characterToFind) {\n                    return streamIndex;\n                }\n            }\n\n            return -1;\n        }\n\n        int patternIndex = 0;\n\n        if (table == null) {\n            table = computeTable(pattern);\n        }\n\n        while (-1 != (currentCharacter = reader.read())) {\n            streamIndex++;\n\n            if (currentCharacter == pattern[patternIndex]) {\n                patternIndex++;\n            } else if (patternIndex > 0) {\n                patternIndex = table[patternIndex];\n\n                patternIndex++;\n            }\n\n            if (patternIndex == patternLength) {\n                return streamIndex - (patternLength - 1);\n            }\n        }\n\n        return -1;\n    }"
           },

           "clone": {
               "file": "KMPSearchAlgorithm.java",
               "start_line": "111",
               "end_line": "161",
               "source_code": "                              int[] table) throws IOException {\n\n        if (inputStream == null || pattern == null || pattern.length == 0) {\n            return -1;\n        }\n\n        //\n        final int patternLength = pattern.length;\n\n        //\n        long streamIndex = -1;\n        int  currentByte;\n\n        if (patternLength == 1) {\n            final int byteToFind = pattern[0];\n\n            while (-1 != (currentByte = inputStream.read())) {\n                streamIndex++;\n\n                if (currentByte == byteToFind) {\n                    return streamIndex;\n                }\n            }\n\n            return -1;\n        }\n\n        int patternIndex = 0;\n\n        if (table == null) {\n            table = computeTable(pattern);\n        }\n\n        while (-1 != (currentByte = inputStream.read())) {\n            streamIndex++;\n\n            if (currentByte == pattern[patternIndex]) {\n                patternIndex++;\n            } else if (patternIndex > 0) {\n                patternIndex = table[patternIndex];\n\n                patternIndex++;\n            }\n\n            if (patternIndex == patternLength) {\n                return streamIndex - (patternLength - 1);\n            }\n        }\n\n        return -1;\n    }"
           }

       },

       {
           "id": "clone_661",

           "clone_type": "type-2",

           "origin": {
               "file": "BlobDataID.java",
               "start_line": "57",
               "end_line": "69",
               "source_code": "    public BlobData duplicate(SessionInterface session) {\n\n        ResultLob resultOut = ResultLob.newLobDuplicateRequest(id);\n        Result    resultIn  = session.execute(resultOut);\n\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n\n        long lobID = ((ResultLob) resultIn).getLobID();\n\n        return new BlobDataID(lobID);\n    }"
           },

           "clone": {
               "file": "ClobDataID.java",
               "start_line": "98",
               "end_line": "110",
               "source_code": "    public ClobData duplicate(SessionInterface session) {\n\n        ResultLob resultOut = ResultLob.newLobDuplicateRequest(id);\n        Result    resultIn  = session.execute(resultOut);\n\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n\n        long lobID = ((ResultLob) resultIn).getLobID();\n\n        return new ClobDataID(lobID);\n    }"
           }

       },

       {
           "id": "clone_662",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1617",
               "end_line": "1622",
               "source_code": "            addColumn(t, \"PROCEDURE_NAME\", SQL_IDENTIFIER);         // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);            // not null\n            addColumn(t, \"COLUMN_TYPE\", Type.SQL_SMALLINT);         // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not null\n            addColumn(t, \"PRECISION\", Type.SQL_INTEGER);            // 7"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1284",
               "end_line": "1291",
               "source_code": "            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ASC_OR_DESC\", CHARACTER_DATA);\n            addColumn(t, \"CARDINALITY\", Type.SQL_INTEGER);\n            addColumn(t, \"PAGES\", Type.SQL_INTEGER);\n            addColumn(t, \"FILTER_CONDITION\", CHARACTER_DATA);\n\n            // HSQLDB extension\n            addColumn(t, \"ROW_CARDINALITY\", Type.SQL_INTEGER);"
           }

       },

       {
           "id": "clone_663",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "98",
               "end_line": "105",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return (int) precision + 4;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return (int) precision + 7;"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "89",
               "end_line": "96",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n                return (int) precision + 4;\n\n            case Types.SQL_INTERVAL_MONTH :\n                return (int) precision + 1;"
           }

       },

       {
           "id": "clone_664",

           "clone_type": "type-2",

           "origin": {
               "file": "CodeSwitcher.java",
               "start_line": "378",
               "end_line": "404",
               "source_code": "                    } else if (line.startsWith(\"//#ifndef \")) {\n                        if (state != 0) {\n                            printError(\n                                \"'#ifndef' not allowed inside '#ifdef'\");\n\n                            return false;\n                        }\n\n                        state = 1;\n\n                        String s = line.substring(10);\n\n                        if (vSwitchOff.indexOf(s) != -1) {\n                            working   = true;\n                            switchoff = false;\n                        } else if (vSwitchOn.indexOf(s) != -1) {\n                            working = true;\n\n                            v.insertElementAt(\"/*\", ++i);\n\n                            switchoff = true;\n                        }\n\n                        if (vSwitches.indexOf(s) == -1) {\n                            vSwitches.addElement(s);\n                        }\n                    }"
           },

           "clone": {
               "file": "CodeSwitcher.java",
               "start_line": "353",
               "end_line": "378",
               "source_code": "                    if (line.startsWith(\"//#ifdef \")) {\n                        if (state != 0) {\n                            printError(\"'#ifdef' not allowed inside '#ifdef'\");\n\n                            return false;\n                        }\n\n                        state = 1;\n\n                        String s = line.substring(9);\n\n                        if (vSwitchOn.indexOf(s) != -1) {\n                            working   = true;\n                            switchoff = false;\n                        } else if (vSwitchOff.indexOf(s) != -1) {\n                            working = true;\n\n                            v.insertElementAt(\"/*\", ++i);\n\n                            switchoff = true;\n                        }\n\n                        if (vSwitches.indexOf(s) == -1) {\n                            vSwitches.addElement(s);\n                        }\n                    }"
           }

       },

       {
           "id": "clone_665",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "560",
               "end_line": "586",
               "source_code": "            case Tokens.SCHEMA : {\n                read();\n\n                Expression e = XreadValueSpecificationOrNull();\n\n                if (e == null) {\n                    HsqlName name = readSchemaName();\n                    Object[] args = new Object[]{ name };\n\n                    return new StatementSession(StatementTypes.SET_SCHEMA,\n                                                args);\n                }\n\n                if (!e.getDataType().isCharacterType()) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n\n                if (e.getType() != OpTypes.VALUE\n                        && (e.getType() != OpTypes.SQL_FUNCTION\n                            || !((FunctionSQL) e).isValueFunction())) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n\n                Expression[] args = new Expression[]{ e };\n\n                return new StatementSession(StatementTypes.SET_SCHEMA, args);\n            }"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "533",
               "end_line": "559",
               "source_code": "            case Tokens.CATALOG : {\n                read();\n\n                Expression e = XreadValueSpecificationOrNull();\n\n                if (e == null) {\n                    HsqlName name = readSchemaName();\n                    Object[] args = new Object[]{ name };\n\n                    return new StatementSession(StatementTypes.SET_CATALOG,\n                                                args);\n                }\n\n                if (!e.getDataType().isCharacterType()) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n\n                if (e.getType() != OpTypes.VALUE\n                        && (e.getType() != OpTypes.SQL_FUNCTION\n                            || !((FunctionSQL) e).isValueFunction())) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n\n                Expression[] args = new Expression[]{ e };\n\n                return new StatementSession(StatementTypes.SET_CATALOG, args);\n            }"
           }

       },

       {
           "id": "clone_666",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSqlPersistent.java",
               "start_line": "99",
               "end_line": "105",
               "source_code": "        Object  stringValue        = null;\n        Object  integerValue       = null;\n        Object  arrayValue         = null;\n        Object  bytearrayValue     = null;\n        Object  stringValueResult  = null;\n        Object  integerValueResult = null;\n        Object  arrayValueResult   = null;"
           },

           "clone": {
               "file": "SqlTool.java",
               "start_line": "309",
               "end_line": "315",
               "source_code": "        String  rcParams         = null;\n        String  rcUrl            = null;\n        String  rcUsername       = null;\n        String  rcPassword       = null;\n        String  rcCharset        = null;\n        String  rcTruststore     = null;\n        String  rcTransIso       = null;"
           }

       },

       {
           "id": "clone_667",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1612",
               "end_line": "1620",
               "source_code": "            // ----------------------------------------------------------------\n            // required\n            // ----------------------------------------------------------------\n            addColumn(t, \"PROCEDURE_CAT\", SQL_IDENTIFIER);          // 0\n            addColumn(t, \"PROCEDURE_SCHEM\", SQL_IDENTIFIER);        // 1\n            addColumn(t, \"PROCEDURE_NAME\", SQL_IDENTIFIER);         // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);            // not null\n            addColumn(t, \"COLUMN_TYPE\", Type.SQL_SMALLINT);         // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not null"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1079",
               "end_line": "1084",
               "source_code": "            addColumn(t, \"FKTABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"FKTABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"FKTABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"FKCOLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"KEY_SEQ\", Type.SQL_SMALLINT);          // not null\n            addColumn(t, \"UPDATE_RULE\", Type.SQL_SMALLINT);      // not null"
           }

       },

       {
           "id": "clone_668",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "671",
               "end_line": "676",
               "source_code": "        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(pref + \"CREATE TABLE t1 (i INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE \" + pref + \"TABLE t1 (i INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "664",
               "end_line": "670",
               "source_code": "        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset\n        execSQL(pref + \"CREATE UNIQUE INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE TABLE t1 (i INT, vc \" + pref + \"VARCHAR)\", expect);"
           }

       },

       {
           "id": "clone_669",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "112",
               "end_line": "135",
               "source_code": "            case StatementTypes.DROP_ASSERTION :\n            case StatementTypes.DROP_CHARACTER_SET :\n            case StatementTypes.DROP_COLLATION :\n            case StatementTypes.DROP_TYPE :\n            case StatementTypes.DROP_DOMAIN :\n            case StatementTypes.DROP_ROLE :\n            case StatementTypes.DROP_USER :\n            case StatementTypes.DROP_ROUTINE :\n            case StatementTypes.DROP_SCHEMA :\n            case StatementTypes.DROP_SEQUENCE :\n            case StatementTypes.DROP_TABLE :\n            case StatementTypes.DROP_TRANSFORM :\n            case StatementTypes.DROP_TRANSLATION :\n            case StatementTypes.DROP_TRIGGER :\n            case StatementTypes.DROP_CAST :\n            case StatementTypes.DROP_ORDERING :\n            case StatementTypes.DROP_VIEW :\n            case StatementTypes.DROP_INDEX :\n            case StatementTypes.DROP_CONSTRAINT :\n            case StatementTypes.DROP_COLUMN :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.GRANT :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "134",
               "end_line": "159",
               "source_code": "            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :\n                group = StatementTypes.X_HSQLDB_SETTING;\n                break;\n\n            case StatementTypes.SET_TABLE_CLUSTERED :"
           }

       },

       {
           "id": "clone_670",

           "clone_type": "type-2",

           "origin": {
               "file": "Expression.java",
               "start_line": "125",
               "end_line": "141",
               "source_code": "        subqueryAggregateExpressionSet.add(OpTypes.MIN);\n        subqueryAggregateExpressionSet.add(OpTypes.MAX);\n        subqueryAggregateExpressionSet.add(OpTypes.AVG);\n        subqueryAggregateExpressionSet.add(OpTypes.EVERY);\n        subqueryAggregateExpressionSet.add(OpTypes.SOME);\n        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_POP);\n        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_SAMP);\n        subqueryAggregateExpressionSet.add(OpTypes.VAR_POP);\n        subqueryAggregateExpressionSet.add(OpTypes.VAR_SAMP);\n        subqueryAggregateExpressionSet.add(OpTypes.GROUP_CONCAT);\n        subqueryAggregateExpressionSet.add(OpTypes.ARRAY_AGG);\n        subqueryAggregateExpressionSet.add(OpTypes.MEDIAN);\n        subqueryAggregateExpressionSet.add(OpTypes.USER_AGGREGATE);\n\n        //\n        subqueryAggregateExpressionSet.add(OpTypes.TABLE_SUBQUERY);\n        subqueryAggregateExpressionSet.add(OpTypes.ROW_SUBQUERY);"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "87",
               "end_line": "101",
               "source_code": "        aggregateFunctionSet.add(OpTypes.COUNT);\n        aggregateFunctionSet.add(OpTypes.SUM);\n        aggregateFunctionSet.add(OpTypes.MIN);\n        aggregateFunctionSet.add(OpTypes.MAX);\n        aggregateFunctionSet.add(OpTypes.AVG);\n        aggregateFunctionSet.add(OpTypes.EVERY);\n        aggregateFunctionSet.add(OpTypes.SOME);\n        aggregateFunctionSet.add(OpTypes.STDDEV_POP);\n        aggregateFunctionSet.add(OpTypes.STDDEV_SAMP);\n        aggregateFunctionSet.add(OpTypes.VAR_POP);\n        aggregateFunctionSet.add(OpTypes.VAR_SAMP);\n        aggregateFunctionSet.add(OpTypes.GROUP_CONCAT);\n        aggregateFunctionSet.add(OpTypes.ARRAY_AGG);\n        aggregateFunctionSet.add(OpTypes.MEDIAN);\n        aggregateFunctionSet.add(OpTypes.USER_AGGREGATE);"
           }

       },

       {
           "id": "clone_671",

           "clone_type": "type-2",

           "origin": {
               "file": "Transfer.java",
               "start_line": "1007",
               "end_line": "1021",
               "source_code": "        tDestDropIndex = new TextField();\n\n        tDestDropIndex.addActionListener(this);\n\n        tSourceSelect = new TextField();\n\n        tSourceSelect.addActionListener(this);\n\n        tDestInsert = new TextField();\n\n        tDestInsert.addActionListener(this);\n\n        tDestAlter = new TextField();\n\n        tDestAlter.addActionListener(this);"
           },

           "clone": {
               "file": "Transfer.java",
               "start_line": "991",
               "end_line": "1005",
               "source_code": "        tDestDrop = new TextField();\n\n        tDestDrop.addActionListener(this);\n\n        tDestCreate = new TextField();\n\n        tDestCreate.addActionListener(this);\n\n        tDestDelete = new TextField();\n\n        tDestDelete.addActionListener(this);\n\n        tDestCreateIndex = new TextField();\n\n        tDestCreateIndex.addActionListener(this);"
           }

       },

       {
           "id": "clone_672",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "204",
               "end_line": "211",
               "source_code": "            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP :\n                if (scale == DTIType.defaultTimestampFractionPrecision) {\n                    return getNameString();\n                }\n\n                token = Tokens.T_TIMESTAMP;\n                break;"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "195",
               "end_line": "202",
               "source_code": "            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIME :\n                if (scale == DTIType.defaultTimeFractionPrecision) {\n                    return getNameString();\n                }\n\n                token = Tokens.T_TIME;\n                break;"
           }

       },

       {
           "id": "clone_673",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "990",
               "end_line": "999",
               "source_code": "                case '4' :\n                case '5' :\n                case '6' :\n                case '7' :\n                case '8' :\n                case '9' :\n                    hasDigit = true;\n                    break;\n\n                case '.' :"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "754",
               "end_line": "762",
               "source_code": "        case '\n':\n        case '\u000B':\n        case '\u000C':\n        case '\u0085':\n        case '\u2028':\n        case '\u2029':\n          zzAtBOL = true;\n          break;\n        case '\r':"
           }

       },

       {
           "id": "clone_674",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "4773",
               "end_line": "4830",
               "source_code": "    /**\n     * <!-- start generic documentation -->\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Time</code>\n     * object in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the time if the underlying database does not store\n     * timezone information.\n     * <!-- end generic documentation -->\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * The JDBC specification for this method is vague. HSQLDB interprets the\n     * specification as follows:\n     *\n     * <ol>\n     * <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value\n     * of the returned java.sql.Time object is the UTC of the SQL value without\n     * modification. In other words, the Calendar object is not used.</li>\n     * <li>If the SQL type of the column is WITHOUT TIME ZONE, then the UTC\n     * value of the returned java.sql.Time is correct for the given Calendar\n     * object.</li>\n     * <li>If the cal argument is null, it it ignored and the method returns\n     * the same Object as the method without the Calendar parameter.</li>\n     * </ol>\n     * </div>\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the time\n     * @return the column value as a <code>java.sql.Time</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for\n     *   JDBCResultSet)\n     */\n    public Time getTime(int columnIndex, Calendar cal) throws SQLException {\n\n        TimeData t = (TimeData) getColumnInType(columnIndex, Type.SQL_TIME);\n\n        if (t == null) {\n            return null;\n        }\n\n        long millis = DateTimeType.normaliseTime(t.getSeconds()) * 1000;\n\n        if (!resultMetaData.columnTypes[--columnIndex]\n                .isDateTimeTypeWithZone()) {\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n\n            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);\n            millis = HsqlDateTime.getNormalisedTime(millis);\n        }\n\n        return new Time(millis);\n    }"
           },

           "clone": {
               "file": "JDBCCallableStatement.java",
               "start_line": "1300",
               "end_line": "1357",
               "source_code": "    /**\n     * <!-- start generic documentation -->\n     *\n     * Retrieves the value of the designated JDBC <code>TIME</code> parameter as a\n     * <code>java.sql.Time</code> object, using\n     * the given <code>Calendar</code> object\n     * to construct the time.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the time taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     * <!-- end generic documentation -->\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports this feature. <p>\n     *\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the time\n     * @return the parameter value; if the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setTime\n     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for\n     *    JDBCParameterMetaData)\n     */\n    public synchronized Time getTime(int parameterIndex,\n                                     Calendar cal) throws SQLException {\n\n        TimeData t = (TimeData) getColumnInType(parameterIndex, Type.SQL_TIME);\n\n        if (t == null) {\n            return null;\n        }\n\n        long millis = DateTimeType.normaliseTime(t.getSeconds()) * 1000;\n\n        if (!parameterMetaData.columnTypes[--parameterIndex]\n                .isDateTimeTypeWithZone()) {\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n\n            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);\n            millis = HsqlDateTime.getNormalisedTime(millis);\n        }\n\n        return new Time(millis);\n    }"
           }

       },

       {
           "id": "clone_675",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "245",
               "end_line": "281",
               "source_code": "                break;\n\n            case Tokens.COMMENT :\n                cs = compileComment();\n                break;\n\n            // HSQL SESSION\n            case Tokens.LOCK :\n                cs = compileLock();\n                break;\n\n            case Tokens.CONNECT :\n                cs = compileConnect();\n                break;\n\n            case Tokens.DISCONNECT :\n                cs = compileDisconnect();\n                break;\n\n            // HSQL COMMAND\n            case Tokens.SCRIPT :\n                cs = compileScript();\n                break;\n\n            case Tokens.SHUTDOWN :\n                cs = compileShutdown();\n                break;\n\n            case Tokens.BACKUP :\n                cs = compileBackup();\n                break;\n\n            case Tokens.CHECKPOINT :\n                cs = compileCheckpoint();\n                break;\n\n            case Tokens.EXPLAIN :"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "207",
               "end_line": "242",
               "source_code": "                break;\n\n            case Tokens.START :\n                cs = compileStartTransaction();\n                break;\n\n            case Tokens.COMMIT :\n                cs = compileCommit();\n                break;\n\n            case Tokens.ROLLBACK :\n                cs = compileRollback();\n                break;\n\n            case Tokens.SAVEPOINT :\n                cs = compileSavepoint();\n                break;\n\n            case Tokens.RELEASE :\n                cs = compileReleaseSavepoint();\n                break;\n\n            // DDL\n            case Tokens.CREATE :\n                cs = compileCreate();\n                break;\n\n            case Tokens.ALTER :\n                cs = compileAlter();\n                break;\n\n            case Tokens.DROP :\n                cs = compileDrop();\n                break;\n\n            case Tokens.GRANT :"
           }

       },

       {
           "id": "clone_676",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqlDatabaseProperties.java",
               "start_line": "839",
               "end_line": "847",
               "source_code": "                break;\n\n            case FILES_MODIFIED_NEW :\n                value = MODIFIED_YES_NEW;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500,\n                                         \"HsqlDatabaseProperties\");"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "714",
               "end_line": "721",
               "source_code": "                break;\n\n            case FUNC_RAND :\n                parseList = optionalSingleParamList;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"FunctionCustom\");"
           }

       },

       {
           "id": "clone_677",

           "clone_type": "type-2",

           "origin": {
               "file": "RangeVariable.java",
               "start_line": "1340",
               "end_line": "1348",
               "source_code": "                            case OpTypes.NOT :\n                                value = null;\n                                break;\n\n                            default :\n                                it = conditions[condIndex].rangeIndex\n                                    .emptyIterator();\n\n                                return;"
           },

           "clone": {
               "file": "RangeVariable.java",
               "start_line": "1327",
               "end_line": "1335",
               "source_code": "                            case OpTypes.GREATER_EQUAL_PRE :\n                                value = null;\n                                break;\n\n                            default :\n                                it = conditions[condIndex].rangeIndex\n                                    .emptyIterator();\n\n                                return;"
           }

       },

       {
           "id": "clone_678",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "339",
               "end_line": "346",
               "source_code": "            case SchemaObject.TABLE :\n                return Tokens.T_TABLE;\n\n            case SchemaObject.SEQUENCE :\n                return Tokens.T_SEQUENCE;\n\n            case SchemaObject.CHARSET :\n                return Tokens.T_CHARACTER + ' ' + Tokens.T_SET;"
           },

           "clone": {
               "file": "TriggerDef.java",
               "start_line": "356",
               "end_line": "363",
               "source_code": "            case TriggerDef.BEFORE :\n                return Tokens.T_BEFORE;\n\n            case TriggerDef.AFTER :\n                return Tokens.T_AFTER;\n\n            case TriggerDef.INSTEAD :\n                return Tokens.T_INSTEAD + ' ' + Tokens.T_OF;"
           }

       },

       {
           "id": "clone_679",

           "clone_type": "type-2",

           "origin": {
               "file": "TestTypeConversion.java",
               "start_line": "146",
               "end_line": "150",
               "source_code": "            ps.setBoolean(1, false);\n            ps.setBytes(2, data);\n            ps.setBytes(3, data);\n            ps.setBytes(4, data);\n            ps.executeUpdate();"
           },

           "clone": {
               "file": "TestTypeConversion.java",
               "start_line": "137",
               "end_line": "141",
               "source_code": "            ps.setBoolean(1, true);\n            ps.setBytes(2, data);\n            ps.setBytes(3, data);\n            ps.setBytes(4, data);\n            ps.executeUpdate();"
           }

       },

       {
           "id": "clone_680",

           "clone_type": "type-2",

           "origin": {
               "file": "ClosableByteArrayOutputStream.java",
               "start_line": "157",
               "end_line": "177",
               "source_code": "                                   int len) throws IOException {\n\n        checkClosed();\n\n        if ((off < 0) || (off > b.length) || (len < 0)\n                || ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n\n        int newcount = count + len;\n\n        if (newcount > buf.length) {\n            buf = copyOf(buf, Math.max(buf.length << 1, newcount));\n        }\n\n        System.arraycopy(b, off, buf, count, len);\n\n        count = newcount;\n    }"
           },

           "clone": {
               "file": "ClosableCharArrayWriter.java",
               "start_line": "152",
               "end_line": "172",
               "source_code": "                                   int len) throws IOException {\n\n        checkClosed();\n\n        if ((off < 0) || (off > c.length) || (len < 0)\n                || ((off + len) > c.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n\n        int newcount = count + len;\n\n        if (newcount > buf.length) {\n            buf = copyOf(buf, Math.max(buf.length << 1, newcount));\n        }\n\n        System.arraycopy(c, off, buf, count, len);\n\n        count = newcount;\n    }"
           }

       },

       {
           "id": "clone_681",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5765",
               "end_line": "5811",
               "source_code": "            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_682",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5850",
               "end_line": "5896",
               "source_code": "        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_683",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8564",
               "end_line": "8578",
               "source_code": "            addColumn(t, \"ROLE_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);      // not null\n\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROLE_AUTHORIZATION_DESCRIPTORS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1\n            }, true);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6252",
               "end_line": "6265",
               "source_code": "            addColumn(t, \"SUB_FEATURE_NAME\", CHARACTER_DATA);\n            addColumn(t, \"IS_SUPPORTED\", YES_OR_NO);\n            addColumn(t, \"IS_VERIFIED_BY\", CHARACTER_DATA);\n            addColumn(t, \"COMMENTS\", CHARACTER_DATA);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SQL_FEATURES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 2\n            }, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_684",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "252",
               "end_line": "258",
               "source_code": "            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n                writeYearMonthInterval((IntervalMonthData) o, t);\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "241",
               "end_line": "247",
               "source_code": "            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                writeTime((TimeData) o, t);\n                break;\n\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           }

       },

       {
           "id": "clone_685",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "2241",
               "end_line": "2262",
               "source_code": "            s = expandBuffer.toString();\n            b = s.indexOf(\"*{\");\n\n            if (b < 0) break; // No more unexpanded variable uses\n\n            e = s.indexOf('}', b + 2);\n\n            if (e == b + 2)\n                throw new SqlToolError(SqltoolRB.plvar_nameempty.getString());\n\n            if (e < 0)\n                throw new SqlToolError(\n                        SqltoolRB.plvar_unterminated.getString());\n\n            permitUnset = (s.charAt(b + 2) == ':');\n\n            varName = s.substring(b + (permitUnset ? 3 : 2), e);\n            if (iterations++ > 100000)\n                throw new SqlToolError(\n                        SqltoolRB.var_infinite.getString(varName));\n            // TODO:  Use a smarter algorithm to handle (or prohibit)\n            // recursion without this clumsy detection tactic."
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "2205",
               "end_line": "2224",
               "source_code": "            s = expandBuffer.toString();\n            b = s.indexOf(\"${\");\n\n            if (b < 0) break; // No more unexpanded variable uses\n\n            e = s.indexOf('}', b + 2);\n\n            if (e == b + 2)\n                throw new SqlToolError(SqltoolRB.sysprop_empty.getString());\n\n            if (e < 0)\n                throw new SqlToolError(\n                        SqltoolRB.sysprop_unterminated.getString());\n\n            permitUnset = (s.charAt(b + 2) == ':');\n\n            varName = s.substring(b + (permitUnset ? 3 : 2), e);\n            if (iterations++ > 10000)\n                throw new\n                    SqlToolError(SqltoolRB.var_infinite.getString(varName));"
           }

       },

       {
           "id": "clone_686",

           "clone_type": "type-2",

           "origin": {
               "file": "Schema.java",
               "start_line": "286",
               "end_line": "302",
               "source_code": "            case SchemaObject.TYPE :\n                return typeLookup;\n\n            case SchemaObject.ASSERTION :\n                return assertionLookup;\n\n            case SchemaObject.TRIGGER :\n                return triggerLookup;\n\n            case SchemaObject.INDEX :\n                return indexLookup;\n\n            case SchemaObject.CONSTRAINT :\n                return constraintLookup;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"Schema\");"
           },

           "clone": {
               "file": "DTIType.java",
               "start_line": "369",
               "end_line": "385",
               "source_code": "            case Tokens.DAY_OF_MONTH :\n                return DAY_OF_MONTH;\n\n            case Tokens.DAY_OF_WEEK :\n                return DAY_OF_WEEK;\n\n            case Tokens.DAY_OF_YEAR :\n                return DAY_OF_YEAR;\n\n            case Tokens.WEEK_OF_YEAR :\n                return WEEK_OF_YEAR;\n\n            case Tokens.SECONDS_MIDNIGHT :\n                return SECONDS_MIDNIGHT;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"DTIType\");"
           }

       },

       {
           "id": "clone_687",

           "clone_type": "type-2",

           "origin": {
               "file": "RowAction.java",
               "start_line": "771",
               "end_line": "780",
               "source_code": "                case SessionInterface.TX_READ_UNCOMMITTED :\n                    threshold = Long.MAX_VALUE;\n                    break;\n\n                case SessionInterface.TX_READ_COMMITTED :\n                    threshold = session.actionTimestamp;\n                    break;\n\n                case SessionInterface.TX_REPEATABLE_READ :\n                case SessionInterface.TX_SERIALIZABLE :"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "229",
               "end_line": "238",
               "source_code": "            case OpTypes.ARRAY_SUBQUERY :\n                opType = OpTypes.ARRAY_SUBQUERY;\n                break;\n\n            case OpTypes.TABLE_SUBQUERY :\n                opType = OpTypes.TABLE_SUBQUERY;\n                break;\n\n            case OpTypes.ROW_SUBQUERY :\n            case OpTypes.SCALAR_SUBQUERY :"
           }

       },

       {
           "id": "clone_688",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2838",
               "end_line": "2842",
               "source_code": "            addColumn(t, \"USER_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ADMIN\", Type.SQL_BOOLEAN);\n            addColumn(t, \"INITIAL_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"AUTHENTICATION\", SQL_IDENTIFIER);\n            addColumn(t, \"PASSWORD_DIGEST\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1046",
               "end_line": "1050",
               "source_code": "            addColumn(t, \"SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRANSACTION\", Type.SQL_BOOLEAN);\n            addColumn(t, \"TRANSACTION_SIZE\", CARDINAL_NUMBER);\n            addColumn(t, \"WAITING_FOR_THIS\", CHARACTER_DATA);\n            addColumn(t, \"THIS_WAITING_FOR\", CHARACTER_DATA);"
           }

       },

       {
           "id": "clone_689",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "132",
               "end_line": "139",
               "source_code": "            case Types.SQL_DATE :\n                return \"java.sql.Date\";\n\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                return \"java.sql.Time\";\n\n            case Types.SQL_TIMESTAMP :"
           },

           "clone": {
               "file": "DITableInfo.java",
               "start_line": "226",
               "end_line": "233",
               "source_code": "            case TableBase.VIEW_TABLE :\n                return \"VIEW\";\n\n            case TableBase.TEMP_TABLE :\n            case TableBase.TEMP_TEXT_TABLE :\n                return \"GLOBAL TEMPORARY\";\n\n            case TableBase.INFO_SCHEMA_TABLE :"
           }

       },

       {
           "id": "clone_690",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "936",
               "end_line": "943",
               "source_code": "                        if (Tokens.T_FALSE.equals(token.tokenString)) {\n                            token.tokenString = Tokens.T_FALSE;\n                            token.tokenType   = Tokens.X_VALUE;\n                            token.tokenValue  = Boolean.FALSE;\n                            token.dataType    = Type.SQL_BOOLEAN;\n\n                            return false;\n                        }"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "924",
               "end_line": "931",
               "source_code": "                        if (Tokens.T_TRUE.equals(token.tokenString)) {\n                            token.tokenString = Tokens.T_TRUE;\n                            token.tokenType   = Tokens.X_VALUE;\n                            token.tokenValue  = Boolean.TRUE;\n                            token.dataType    = Type.SQL_BOOLEAN;\n\n                            return false;\n                        }"
           }

       },

       {
           "id": "clone_691",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1011",
               "end_line": "1016",
               "source_code": "            case Types.SQL_DATE :\n                sb.append(Tokens.T_DATE);\n                break;\n\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIME :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "580",
               "end_line": "585",
               "source_code": "            case OpTypes.OR :\n                sb.append(Tokens.T_OR);\n                break;\n\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :"
           }

       },

       {
           "id": "clone_692",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDML.java",
               "start_line": "1081",
               "end_line": "1088",
               "source_code": "            if (insertExpressions.size() != 0) {\n                throw Error.error(ErrorCode.X_42548);\n            }\n\n            read();\n            readThis(Tokens.MATCHED);\n            readThis(Tokens.THEN);\n            readThis(Tokens.INSERT);"
           },

           "clone": {
               "file": "ParserDML.java",
               "start_line": "1070",
               "end_line": "1077",
               "source_code": "            if (updateExpressions.size() != 0) {\n                throw Error.error(ErrorCode.X_42547);\n            }\n\n            read();\n            readThis(Tokens.THEN);\n            readThis(Tokens.UPDATE);\n            readThis(Tokens.SET);"
           }

       },

       {
           "id": "clone_693",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "999",
               "end_line": "1011",
               "source_code": "        case 61: break;\n        case 24: \n          { requestedState = YYINITIAL;\n    yybegin(PROMPT_CHANGE_STATE);\n    pushbackTrim();\n    return new Token(Token.EDIT_TYPE, commandBuffer, yyline);\n          }\n        case 62: break;\n        case 7: \n          { debug (\"-- Comment\", yytext());\n          }\n        case 63: break;\n        case 15:"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "981",
               "end_line": "994",
               "source_code": "        case 58: break;\n        case 23: \n          { requestedState = YYINITIAL;\n    yybegin(PROMPT_CHANGE_STATE);\n    pushbackTrim();\n    return new Token(Token.PL_TYPE, commandBuffer, yyline);\n          }\n        case 59: break;\n        case 6: \n          { /* Ignore top-level white space */\n    debug(\"Whitespace\", yytext());\n          }\n        case 60: break;\n        case 12:"
           }

       },

       {
           "id": "clone_694",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "5918",
               "end_line": "5922",
               "source_code": "                case SchemaObject.VARIABLE :\n                case SchemaObject.GRANTEE :\n                case SchemaObject.CATALOG :\n                    throw unexpectedToken();\n                case SchemaObject.CURSOR :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3413",
               "end_line": "3418",
               "source_code": "                        // not in schema definition\n                        case Tokens.SCHEMA :\n                        case Tokens.USER :\n                        case Tokens.UNIQUE :\n                            throw unexpectedToken();\n                        case Tokens.INDEX :"
           }

       },

       {
           "id": "clone_695",

           "clone_type": "type-2",

           "origin": {
               "file": "WebServer.java",
               "start_line": "141",
               "end_line": "156",
               "source_code": "        HsqlProperties argProps = null;\n\n        argProps = HsqlProperties.argArrayToProps(args,\n                ServerProperties.sc_key_prefix);\n\n        String[] errors = argProps.getErrorKeys();\n\n        if (errors.length != 0) {\n            System.out.println(\"no value for argument:\" + errors[0]);\n            printHelp(\"webserver.help\");\n\n            return;\n        }\n\n        String propsPath = argProps.getProperty(ServerProperties.sc_key_props);\n        String propsExtension = \"\";"
           },

           "clone": {
               "file": "Server.java",
               "start_line": "2467",
               "end_line": "2482",
               "source_code": "        HsqlProperties argProps = null;\n\n        argProps = HsqlProperties.argArrayToProps(args,\n                ServerProperties.sc_key_prefix);\n\n        String[] errors = argProps.getErrorKeys();\n\n        if (errors.length != 0) {\n            System.out.println(\"no value for argument:\" + errors[0]);\n            printHelp(\"server.help\");\n\n            return;\n        }\n\n        String propsPath = argProps.getProperty(ServerProperties.sc_key_props);\n        String propsExtension = \"\";"
           }

       },

       {
           "id": "clone_696",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "889",
               "end_line": "896",
               "source_code": "                    Query  += \"SET    Tbalance = Tbalance + ? \";\n                    Query  += \"WHERE  Tid = ?\";\n                    pstmt3 = Conn.prepareStatement(Query);\n                    Query  = \"UPDATE branches \";\n                    Query  += \"SET    Bbalance = Bbalance + ? \";\n                    Query  += \"WHERE  Bid = ?\";\n                    pstmt4 = Conn.prepareStatement(Query);\n                    Query  = \"INSERT INTO history(Tid, Bid, Aid, delta) \";"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "881",
               "end_line": "888",
               "source_code": "                    Query  += \"SET     Abalance = Abalance + ? \";\n                    Query  += \"WHERE   Aid = ?\";\n                    pstmt1 = Conn.prepareStatement(Query);\n                    Query  = \"SELECT Abalance \";\n                    Query  += \"FROM   accounts \";\n                    Query  += \"WHERE  Aid = ?\";\n                    pstmt2 = Conn.prepareStatement(Query);\n                    Query  = \"UPDATE tellers \";"
           }

       },

       {
           "id": "clone_697",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLibSpeed.java",
               "start_line": "217",
               "end_line": "231",
               "source_code": "            System.out.println(\"emptyOp \" + sw.elapsedTime());\n            sw.zero();\n\n            for (int j = 0; j < count; j++) {\n                for (int i = 0; i < sNumeric.length; i++) {\n                    int r = randomgen.nextInt(sNumeric.length);\n\n                    doubleIntLookup.findFirstEqualKeyIndex(r);\n\n                    dummy += r;\n                }\n            }\n\n            System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());\n            sw.zero();"
           },

           "clone": {
               "file": "TestLibSpeed.java",
               "start_line": "179",
               "end_line": "193",
               "source_code": "            System.out.println(\"IntKeyHashMap Lookup \" + sw.elapsedTime());\n            sw.zero();\n\n            for (int j = 0; j < count; j++) {\n                for (int i = 0; i < sNumeric.length; i++) {\n                    int r = randomgen.nextInt(sNumeric.length);\n\n                    doubleIntLookup.findFirstEqualKeyIndex(r);\n\n                    dummy += r;\n                }\n            }\n\n            System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());\n            sw.zero();"
           }

       },

       {
           "id": "clone_698",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5851",
               "end_line": "5897",
               "source_code": "        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_699",

           "clone_type": "type-2",

           "origin": {
               "file": "Calculator.java",
               "start_line": "321",
               "end_line": "329",
               "source_code": "        uV.put(\"one\", \"1\");\n        uV.put(\"two\", \"2\");\n        uV.put(\"three\", \"3\");\n        uV.put(\"four\", \"4\");\n        uV.put(\"five\", \"5\");\n        uV.put(\"six\", \"6\");\n        uV.put(\"seven\", \"7\");\n        uV.put(\"eight\", \"8\");\n        uV.put(\"nine\", \"9\");"
           },

           "clone": {
               "file": "Collation.java",
               "start_line": "156",
               "end_line": "164",
               "source_code": "        nameToJavaName.put(\"Tatar\", \"tt-RU\");\n        nameToJavaName.put(\"Ukrainian\", \"uk-UA\");\n        nameToJavaName.put(\"Urdu\", \"ur-PK\");\n        nameToJavaName.put(\"Uzbek_Latin\", \"uz-UZ\");\n        nameToJavaName.put(\"Venda\", \"ven-ZA\");\n        nameToJavaName.put(\"Vietnamese\", \"vi-VN\");\n        nameToJavaName.put(\"Yoruba\", \"yo-NG\");\n        nameToJavaName.put(\"Chinese\", \"zh-CN\");\n        nameToJavaName.put(\"Zulu\", \"zu-ZA\");"
           }

       },

       {
           "id": "clone_700",

           "clone_type": "type-2",

           "origin": {
               "file": "TestUtil.java",
               "start_line": "395",
               "end_line": "408",
               "source_code": "            case 'o' :\n                return new ResultSetOutputParsedSection(sectionLines);\n\n            case 'c' :\n                return new CountParsedSection(sectionLines);\n\n            case 'd' :\n                return new DisplaySection(sectionLines);\n\n            case 'e' :\n                return new ExceptionParsedSection(sectionLines);\n\n            case ' ' :\n                return new BlankParsedSection(sectionLines);"
           },

           "clone": {
               "file": "TestUtil.java",
               "start_line": "380",
               "end_line": "393",
               "source_code": "            case 'u' :\n                return new UpdateParsedSection(sectionLines);\n\n            case 's' :\n                return new SilentParsedSection(sectionLines);\n\n            case 'w' :\n                return new WaitSection(sectionLines);\n\n            case 'p' :\n                return new ProceedSection(sectionLines);\n\n            case 'r' :\n                return new ResultSetParsedSection(sectionLines);"
           }

       },

       {
           "id": "clone_701",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7507",
               "end_line": "7527",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[UDT_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[UDT_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "538",
               "end_line": "559",
               "source_code": "        if (t == null) {\n            t = createBlankTable(\n                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE]);\n\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);    //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_702",

           "clone_type": "type-2",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "1330",
               "end_line": "1347",
               "source_code": "                        rowNum++;\n\n                        Object[] rowData = navigator.getCurrent();\n\n                        if (rowData == null) {\n                            throw new RecoverableOdbcFailure(\"Null row?\");\n                        }\n\n                        if (rowData.length < colCount) {\n                            throw new RecoverableOdbcFailure(\n                                \"Data element mismatch. \" + colCount\n                                + \" metadata cols, yet \" + rowData.length\n                                + \" data elements for row \" + rowNum);\n                        }\n\n                        //server.printWithThread(\"Row \" + rowNum + \" has \"\n                        //+ rowData.length + \" elements\");\n                        outPacket.writeShort(colCount);"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "820",
               "end_line": "840",
               "source_code": "                            rowNum++;\n\n                            Object[] rowData = navigator.getCurrent();\n\n                            // Row.getData().  Don't know why *Data.getCurrent()\n                            //                 method returns Object instead of O[].\n                            //  TODO:  Remove the assertion here:\n                            if (rowData == null) {\n                                throw new RecoverableOdbcFailure(\"Null row?\");\n                            }\n\n                            if (rowData.length < columnCount) {\n                                throw new RecoverableOdbcFailure(\n                                    \"Data element mismatch. \" + columnCount\n                                    + \" metadata cols, yet \" + rowData.length\n                                    + \" data elements for row \" + rowNum);\n                            }\n\n                            //server.printWithThread(\"Row \" + rowNum + \" has \"\n                            //+ rowData.length + \" elements\");\n                            outPacket.writeShort(columnCount);"
           }

       },

       {
           "id": "clone_703",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "428",
               "end_line": "445",
               "source_code": "    protected IntervalSecondData readDaySecondInterval(Type type)\n    throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        return (IntervalSecondData) scanner.newInterval(s,\n                (IntervalType) type);\n    }"
           },

           "clone": {
               "file": "RowInputText.java",
               "start_line": "410",
               "end_line": "426",
               "source_code": "    protected IntervalMonthData readYearMonthInterval(Type type)\n    throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        return (IntervalMonthData) scanner.newInterval(s, (IntervalType) type);\n    }"
           }

       },

       {
           "id": "clone_704",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "866",
               "end_line": "876",
               "source_code": "            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2860",
               "end_line": "2870",
               "source_code": "                    case Types.SQL_DOUBLE :\n                    case Types.SQL_DECIMAL :\n                    case Types.SQL_NUMERIC :\n                    case Types.SQL_BIGINT :\n                    case Types.SQL_INTEGER :\n                    case Types.SQL_SMALLINT :\n                    case Types.TINYINT :\n                        break;\n\n                    case Types.SQL_BIT :\n                    case Types.SQL_BIT_VARYING :"
           }

       },

       {
           "id": "clone_705",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "2007",
               "end_line": "2012",
               "source_code": "        intervalPosition  = 0;\n        fractionPrecision = 0;\n        dateTimeType      = null;\n        intervalString    = s;\n\n        scanDateParts(5);"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1976",
               "end_line": "1981",
               "source_code": "        intervalPosition  = 0;\n        fractionPrecision = 0;\n        dateTimeType      = null;\n        intervalString    = s;\n\n        scanDateParts(2);"
           }

       },

       {
           "id": "clone_706",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDbBackup.java",
               "start_line": "446",
               "end_line": "497",
               "source_code": "            // #5:  DEFAULT -> *.tar\n            caught = false;\n            try {\n                conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                        + baseDir.getAbsolutePath()\n                        + \"/x/bad.tar' BLOCKING\");\n            } catch (SQLException se) {\n                caught = true;\n            }\n            if (!caught) {\n                fail(\"BACKUP did not throw even though requested default \"\n                        + \"to file '/x/bad.tar'\");\n            }\n            // #6:  COMPRESSION -> *.tar\n            caught = false;\n            try {\n                conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                        + baseDir.getAbsolutePath()\n                        + \"/x/bad.tar' BLOCKING COMPRESSED\");\n            } catch (SQLException se) {\n                caught = true;\n            }\n            if (!caught) {\n                fail(\"BACKUP did not throw even though requested compression \"\n                        + \"to file '/x/bad.tar'\");\n            }\n            // #7:  NOT COMPRESSED -> *.tar.gz\n            caught = false;\n            try {\n                conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                        + baseDir.getAbsolutePath()\n                        + \"/x/bad.tar.gz' BLOCKING NOT COMPRESSED\");\n            } catch (SQLException se) {\n                caught = true;\n            }\n            if (!caught) {\n                fail(\"BACKUP did not throw even though requested \"\n                        + \"non-compression to file '/x/bad.tar.gz'\");\n            }\n            // #8:  NOT COMPRESSED -> *.tgz\n            caught = false;\n            try {\n                conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                        + baseDir.getAbsolutePath()\n                        + \"/x/bad.tgz' BLOCKING NOT COMPRESSED\");\n            } catch (SQLException se) {\n                caught = true;\n            }\n            if (!caught) {\n                fail(\"BACKUP did not throw even though requested \"\n                        + \"non-compression to file '/x/bad.tgz'\");\n            }"
           },

           "clone": {
               "file": "TestDbBackup.java",
               "start_line": "394",
               "end_line": "445",
               "source_code": "            // #1:  COMPRESSED -> no-extension\n            caught = false;\n            try {\n                conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                        + baseDir.getAbsolutePath()\n                        + \"/x/bad' BLOCKING COMPRESSED\");\n            } catch (SQLException se) {\n                caught = true;\n            }\n            if (!caught) {\n                fail(\"BACKUP did not throw even though requested compression \"\n                        + \"to file '/x/bad'\");\n            }\n            // #2:  NOT COMPRESSED -> no-extension\n            caught = false;\n            try {\n                conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                        + baseDir.getAbsolutePath()\n                        + \"/x/bad' BLOCKING NOT COMPRESSED\");\n            } catch (SQLException se) {\n                caught = true;\n            }\n            if (!caught) {\n                fail(\"BACKUP did not throw even though requested \"\n                        + \"no-compression to file '/x/bad'\");\n            }\n            // #3:  COMPRESSED -> *.txt\n            caught = false;\n            try {\n                conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                        + baseDir.getAbsolutePath()\n                        + \"/x/bad.txt' BLOCKING COMPRESSED\");\n            } catch (SQLException se) {\n                caught = true;\n            }\n            if (!caught) {\n                fail(\"BACKUP did not throw even though requested compression \"\n                        + \"to file '/x/bad.txt'\");\n            }\n            // #4:  NOT COMPRESSED -> *.txt\n            caught = false;\n            try {\n                conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                        + baseDir.getAbsolutePath()\n                        + \"/x/bad.txt' BLOCKING NOT COMPRESSED\");\n            } catch (SQLException se) {\n                caught = true;\n            }\n            if (!caught) {\n                fail(\"BACKUP did not throw even though requested \"\n                        + \"no-compression to file '/x/bad.txt'\");\n            }"
           }

       },

       {
           "id": "clone_707",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "864",
               "end_line": "873",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "516",
               "end_line": "525",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                break;"
           }

       },

       {
           "id": "clone_708",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5845",
               "end_line": "5891",
               "source_code": "        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_709",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "562",
               "end_line": "592",
               "source_code": "            case FUNC_SOUNDEX :\n            case FUNC_SPACE :\n            case FUNC_SYS_EXTRACT_UTC :\n            case FUNC_TAN :\n            case FUNC_TIMESTAMP_WITH_ZONE :\n            case FUNC_TO_DSINTERVAL :\n            case FUNC_TO_YMINTERVAL :\n            case FUNC_TO_NUMBER :\n                parseList = singleParamList;\n                break;\n\n            case FUNC_ADD_MONTHS :\n            case FUNC_ATAN2 :\n            case FUNC_CONCAT :\n            case FUNC_CRYPT_KEY :\n            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :\n            case FUNC_DIFFERENCE :\n            case FUNC_FROM_TZ :\n            case FUNC_LEFT :\n            case FUNC_MONTHS_BETWEEN :\n            case FUNC_NEXT_DAY :\n            case FUNC_NUMTODSINTERVAL :\n            case FUNC_NUMTOYMINTERVAL :\n            case FUNC_REGEXP_MATCHES :\n            case FUNC_REGEXP_SUBSTRING :\n            case FUNC_REGEXP_SUBSTRING_ARRAY :\n            case FUNC_REPEAT :\n            case FUNC_RIGHT :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "531",
               "end_line": "561",
               "source_code": "            case FUNC_SESSION_ID :\n            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_SESSION_TIMEZONE :\n            case FUNC_SESSIONTIMEZONE :\n            case FUNC_TIMEZONE :\n            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n                parseList = emptyParamList;\n                break;\n\n            case FUNC_ACOS :\n            case FUNC_ASCII :\n            case FUNC_ASIN :\n            case FUNC_ATAN :\n            case FUNC_BITNOT :\n            case FUNC_CHAR :\n            case FUNC_COS :\n            case FUNC_COT :\n            case FUNC_DEGREES :\n            case FUNC_DAYS :\n            case FUNC_HEXTORAW :\n            case FUNC_LAST_DAY :\n            case FUNC_LOB_ID :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_RAWTOHEX :\n            case FUNC_REVERSE :\n            case FUNC_ROUNDMAGIC :\n            case FUNC_SIGN :\n            case FUNC_SIN :"
           }

       },

       {
           "id": "clone_710",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "1552",
               "end_line": "1588",
               "source_code": "            } else if (token.tokenType == Tokens.UPDATE) {\n                read();\n\n                if (token.tokenType == Tokens.SET) {\n                    read();\n\n                    switch (token.tokenType) {\n\n                        case Tokens.DEFAULT : {\n                            read();\n\n                            updateAction =\n                                SchemaObject.ReferentialAction.SET_DEFAULT;\n\n                            break;\n                        }\n                        case Tokens.NULL :\n                            read();\n\n                            updateAction =\n                                SchemaObject.ReferentialAction.SET_NULL;\n                            break;\n\n                        default :\n                            throw unexpectedToken();\n                    }\n                } else if (token.tokenType == Tokens.CASCADE) {\n                    read();\n\n                    updateAction = SchemaObject.ReferentialAction.CASCADE;\n                } else if (token.tokenType == Tokens.RESTRICT) {\n                    read();\n                } else {\n                    readThis(Tokens.NO);\n                    readThis(Tokens.ACTION);\n                }\n            }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "1516",
               "end_line": "1552",
               "source_code": "            if (token.tokenType == Tokens.DELETE) {\n                read();\n\n                if (token.tokenType == Tokens.SET) {\n                    read();\n\n                    switch (token.tokenType) {\n\n                        case Tokens.DEFAULT : {\n                            read();\n\n                            deleteAction =\n                                SchemaObject.ReferentialAction.SET_DEFAULT;\n\n                            break;\n                        }\n                        case Tokens.NULL :\n                            read();\n\n                            deleteAction =\n                                SchemaObject.ReferentialAction.SET_NULL;\n                            break;\n\n                        default :\n                            throw unexpectedToken();\n                    }\n                } else if (token.tokenType == Tokens.CASCADE) {\n                    read();\n\n                    deleteAction = SchemaObject.ReferentialAction.CASCADE;\n                } else if (token.tokenType == Tokens.RESTRICT) {\n                    read();\n                } else {\n                    readThis(Tokens.NO);\n                    readThis(Tokens.ACTION);\n                }\n            }"
           }

       },

       {
           "id": "clone_711",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "2013",
               "end_line": "2020",
               "source_code": "        sb.append(Tokens.T_ON).append(' ');\n        sb.append(Tokens.T_CONFLICT).append(' ');\n        sb.append(database.txConflictRollback ? Tokens.T_TRUE\n                                              : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_TEXT).append(' ');\n        sb.append(Tokens.T_TABLE).append(' ').append(Tokens.T_DEFAULTS);"
           },

           "clone": {
               "file": "Logger.java",
               "start_line": "1834",
               "end_line": "1841",
               "source_code": "        sb.append(Tokens.T_TDC).append(' ');\n        sb.append(Tokens.T_UPDATE).append(' ');\n        sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE\n                                          : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_TRANSLATE).append(' ').append(Tokens.T_TTI);"
           }

       },

       {
           "id": "clone_712",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "678",
               "end_line": "704",
               "source_code": "            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n            case Types.SQL_BLOB :\n            case Types.SQL_CHAR :\n            case Types.SQL_NCHAR :\n            case Types.SQL_CLOB :\n            case Types.NCLOB :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_VARCHAR :\n            case Types.SQL_NVARCHAR :\n            case Types.VARCHAR_IGNORECASE :\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_FLOAT :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "126",
               "end_line": "155",
               "source_code": "//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :\n            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :"
           }

       },

       {
           "id": "clone_713",

           "clone_type": "type-2",

           "origin": {
               "file": "HSQLBug.java",
               "start_line": "88",
               "end_line": "96",
               "source_code": "        query.append(\"SELECT Timec, Value FROM Table1, Table2 \");\n        query.append(\"WHERE Table1.Id = Table2.Id  \");\n        query.append(\"AND Table1.Timec = \");    // The equals sign causes the CPU to go to 100% for a while\n\n//                      query.append( \"AND Table1.Time IN \" );  // The work-around is to replace it with IN\n        query.append(\"(\");\n        query.append(\n            \"SELECT MAX(Timec) FROM Table1 WHERE Timec <= '2020-01-01 00:00:00'\");\n        query.append(\")\");"
           },

           "clone": {
               "file": "TestBatchBug.java",
               "start_line": "130",
               "end_line": "137",
               "source_code": "        sql.append(\" (\");\n        sql.append(\"Id integer IDENTITY\");\n        sql.append(\", \");\n        sql.append(\"Kennung varchar(20) NOT NULL\");\n\n// etwas andere Schreibweise von CURRENT TIMESTAMP\n        sql.append(\", last_update TIMESTAMP \");\n        sql.append(\"DEFAULT CURRENT_TIMESTAMP NOT NULL\");"
           }

       },

       {
           "id": "clone_714",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5768",
               "end_line": "5814",
               "source_code": "            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DTD_IDENTIFIER\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_715",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "669",
               "end_line": "674",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                return intervalSecondToString(a);\n\n            default :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "225",
               "end_line": "230",
               "source_code": "            case Tokens.AGGREGATE :\n            case Tokens.FUNCTION :\n            case Tokens.PROCEDURE :\n                return compileCreateProcedureOrFunction(isOrReplace);\n\n            default :"
           }

       },

       {
           "id": "clone_716",

           "clone_type": "type-2",

           "origin": {
               "file": "Table.java",
               "start_line": "123",
               "end_line": "129",
               "source_code": "            // fall through\n            case SYSTEM_TABLE :\n                persistenceScope = SCOPE_FULL;\n                isSchemaBased    = true;\n                break;\n\n            case CACHED_TABLE :"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "115",
               "end_line": "120",
               "source_code": "            case SYSTEM_SUBQUERY :\n                persistenceScope = SCOPE_STATEMENT;\n                isSessionBased   = true;\n                break;\n\n            case INFO_SCHEMA_TABLE :"
           }

       },

       {
           "id": "clone_717",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1224",
               "end_line": "1236",
               "source_code": "                        break;\n\n                    case Tokens.LONGVAR :\n                        read();\n                        readThis(Tokens.IS);\n                        readThis(Tokens.LOB);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_longvar_is_lob;\n                        break;\n\n                    case Tokens.IGNORECASE :\n                        read();"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1160",
               "end_line": "1173",
               "source_code": "                        break;\n\n                    case Tokens.TRANSLATE :\n                        read();\n                        readThis(Tokens.TTI);\n                        readThis(Tokens.TYPES);\n\n                        flag = processTrueOrFalseObject();\n                        property =\n                            HsqlDatabaseProperties.jdbc_translate_tti_types;\n                        break;\n\n                    case Tokens.CONCAT_WORD :\n                        read();"
           }

       },

       {
           "id": "clone_718",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "1292",
               "end_line": "1310",
               "source_code": "            case OpTypes.OR : {\n                Boolean r1 = (Boolean) nodes[LEFT].getValue(session);\n\n                if (Boolean.TRUE.equals(r1)) {\n                    return Boolean.TRUE;\n                }\n\n                Boolean r2 = (Boolean) nodes[RIGHT].getValue(session);\n\n                if (Boolean.TRUE.equals(r2)) {\n                    return Boolean.TRUE;\n                }\n\n                if (r1 == null || r2 == null) {\n                    return null;\n                }\n\n                return Boolean.FALSE;\n            }"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "1273",
               "end_line": "1291",
               "source_code": "            case OpTypes.AND : {\n                Boolean r1 = (Boolean) nodes[LEFT].getValue(session);\n\n                if (Boolean.FALSE.equals(r1)) {\n                    return Boolean.FALSE;\n                }\n\n                Boolean r2 = (Boolean) nodes[RIGHT].getValue(session);\n\n                if (Boolean.FALSE.equals(r2)) {\n                    return Boolean.FALSE;\n                }\n\n                if (r1 == null || r2 == null) {\n                    return null;\n                }\n\n                return Boolean.TRUE;\n            }"
           }

       },

       {
           "id": "clone_719",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "812",
               "end_line": "821",
               "source_code": "        execSQL(\"ALTER TABLE playtbl RENAME \" + pref + \"TO renamedtbl\",\n                expect);\n        execSQL(pref + \"ALTER TABLE constrainedtbl DROP CONSTRAINT con1\",\n                expect);\n        execSQL(\"ALTER \" + pref + \"TABLE constrainedtbl DROP CONSTRAINT con2\",\n                expect);\n        execSQL(\"ALTER TABLE constrainedtbl \" + pref + \"DROP CONSTRAINT con3\",\n                expect);\n        execSQL(\"ALTER TABLE constrainedtbl DROP \" + pref + \"CONSTRAINT con4\",\n                expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "736",
               "end_line": "743",
               "source_code": "        execSQL(\"ALTER USER tstuser SET \" + pref + \"PASSWORD frank\", expect);\n        execSQL(pref + \"ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR\", expect);\n        execSQL(\"ALTER \" + pref + \"TABLE tsttbl ADD COLUMN vco2 VARCHAR\",\n                expect);\n        execSQL(\"ALTER TABLE tsttbl \" + pref + \"ADD COLUMN vco3 VARCHAR\",\n                expect);\n        execSQL(\"ALTER TABLE tsttbl ADD \" + pref + \"COLUMN vco4 VARCHAR\",\n                expect);"
           }

       },

       {
           "id": "clone_720",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2574",
               "end_line": "2583",
               "source_code": "            case Tokens.CASE :\n                return readCaseExpression();\n\n            case Tokens.NULLIF :\n                return readNullIfExpression();\n\n            case Tokens.COALESCE :\n                return readCoalesceExpression();\n\n            case Tokens.IFNULL :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "181",
               "end_line": "191",
               "source_code": "            // other objects\n            case Tokens.ALIAS :\n                return compileCreateAlias();\n\n            case Tokens.SEQUENCE :\n                return compileCreateSequence();\n\n            case Tokens.SCHEMA :\n                return compileCreateSchema();\n\n            case Tokens.TRIGGER :"
           }

       },

       {
           "id": "clone_721",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1826",
               "end_line": "1833",
               "source_code": "        String name;\n\n        read();\n        checkIsSimpleName();\n\n        name = token.tokenString;\n\n        read();"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "904",
               "end_line": "911",
               "source_code": "                String value;\n\n                read();\n                checkIsValue();\n\n                value = token.tokenString;\n\n                read();"
           }

       },

       {
           "id": "clone_722",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6072",
               "end_line": "6076",
               "source_code": "            row[last_altered]                           = null;\n            row[new_savepoint_level]                    = \"YES\";\n            row[is_udt_dependent]                       = null;\n            row[result_cast_from_data_type]             = null;\n            row[result_cast_as_locator]                 = null;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6064",
               "end_line": "6068",
               "source_code": "            row[is_implicitly_invocable]                = null;\n            row[security_type]                          = \"DEFINER\";\n            row[to_sql_specific_catalog]                = null;\n            row[to_sql_specific_schema]                 = null;\n            row[to_sql_specific_name]                   = null;"
           }

       },

       {
           "id": "clone_723",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDbBackup.java",
               "start_line": "577",
               "end_line": "585",
               "source_code": "        TestSuite newSuite = new TestSuite();\n\n        newSuite.addTest(new TestDbBackup(\"testSanity\"));\n        newSuite.addTest(new TestDbBackup(\"testBasicBackup\"));\n        newSuite.addTest(new TestDbBackup(\"testMainAlreadyOpen\"));\n        newSuite.addTest(new TestDbBackup(\"testGzip\"));\n        newSuite.addTest(new TestDbBackup(\"testOnlineBackup\"));\n        newSuite.addTest(new TestDbBackup(\"testTarFileNames\"));\n        newSuite.addTest(new TestDbBackup(\"testAutoNaming\"));"
           },

           "clone": {
               "file": "TestAcl.java",
               "start_line": "409",
               "end_line": "417",
               "source_code": "        TestSuite newSuite = new TestSuite();\n\n        newSuite.addTest(new TestAcl(\"testDefaultWithNames\"));\n        newSuite.addTest(new TestAcl(\"testDefaultWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testDenyAllWithNames\"));\n        newSuite.addTest(new TestAcl(\"testDenyAllWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testLocalhostOnlyWithNames\"));\n        newSuite.addTest(new TestAcl(\"testLocalhostOnlyWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalhostOnlyWithNames\"));"
           }

       },

       {
           "id": "clone_724",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "506",
               "end_line": "526",
               "source_code": "            Query += \"Bid         INTEGER, \";\n            Query += \"Abalance    INTEGER, \";\n            Query += \"filler      CHAR(84))\";    /* pad to 100 bytes */\n\n            if (createExtension.length() > 0) {\n                Query += createExtension;\n            }\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            if (tableExtension.length() > 0) {\n                Query = tableExtension + \" history (\";\n            } else {\n                Query = \"CREATE TABLE history (\";\n            }\n\n            Query += \"Tid         INTEGER, \";\n            Query += \"Bid         INTEGER, \";\n            Query += \"Aid         INTEGER, \";\n            Query += \"delta       INTEGER, \";"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "470",
               "end_line": "490",
               "source_code": "            Query += \"Bid         INTEGER NOT NULL PRIMARY KEY, \";\n            Query += \"Bbalance    INTEGER,\";\n            Query += \"filler      CHAR(88))\";    /* pad to 100 bytes */\n\n            if (createExtension.length() > 0) {\n                Query += createExtension;\n            }\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            if (tableExtension.length() > 0) {\n                Query = tableExtension + \" tellers (\";\n            } else {\n                Query = \"CREATE TABLE tellers (\";\n            }\n\n            Query += \"Tid         INTEGER NOT NULL PRIMARY KEY,\";\n            Query += \"Bid         INTEGER,\";\n            Query += \"Tbalance    INTEGER,\";\n            Query += \"filler      CHAR(84))\";    /* pad to 100 bytes */"
           }

       },

       {
           "id": "clone_725",

           "clone_type": "type-2",

           "origin": {
               "file": "Constraint.java",
               "start_line": "178",
               "end_line": "183",
               "source_code": "        core              = new ConstraintCore();\n        core.uniqueName   = uniqueName;\n        core.mainName     = mainName;\n        core.refName      = refName;\n        core.mainTable    = mainTable;\n        core.refTable     = refTable;"
           },

           "clone": {
               "file": "Constraint.java",
               "start_line": "138",
               "end_line": "143",
               "source_code": "        core               = new ConstraintCore();\n        core.refTableName  = refTableName;\n        core.mainTableName = mainTableName;\n        core.deleteAction  = deleteAction;\n        core.updateAction  = updateAction;\n        core.matchType     = matchType;"
           }

       },

       {
           "id": "clone_726",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5843",
               "end_line": "5889",
               "source_code": "        final int module_catalog                         = 7;\n        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_727",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionAggregate.java",
               "start_line": "172",
               "end_line": "191",
               "source_code": "                break;\n\n            case OpTypes.SOME :\n                sb.append(Tokens.T_SOME).append(' ');\n                break;\n\n            case OpTypes.STDDEV_POP :\n                sb.append(Tokens.T_STDDEV_POP).append(' ');\n                break;\n\n            case OpTypes.STDDEV_SAMP :\n                sb.append(Tokens.T_STDDEV_SAMP).append(' ');\n                break;\n\n            case OpTypes.VAR_POP :\n                sb.append(Tokens.T_VAR_POP).append(' ');\n                break;\n\n            case OpTypes.VAR_SAMP :\n                sb.append(Tokens.T_VAR_SAMP).append(' ');"
           },

           "clone": {
               "file": "ExpressionAggregate.java",
               "start_line": "152",
               "end_line": "171",
               "source_code": "                break;\n\n            case OpTypes.SUM :\n                sb.append(Tokens.T_SUM).append(' ');\n                break;\n\n            case OpTypes.MIN :\n                sb.append(Tokens.T_MIN).append(' ');\n                break;\n\n            case OpTypes.MAX :\n                sb.append(Tokens.T_MAX).append(' ');\n                break;\n\n            case OpTypes.AVG :\n                sb.append(Tokens.T_AVG).append(' ');\n                break;\n\n            case OpTypes.EVERY :\n                sb.append(Tokens.T_EVERY).append(' ');"
           }

       },

       {
           "id": "clone_728",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "3444",
               "end_line": "3453",
               "source_code": "                            cs.sql = getLastPart(position);\n                            break;\n\n                        case Tokens.CHARACTER :\n                            cs     = compileCreateCharacterSet();\n                            cs.sql = getLastPart(position);\n                            break;\n\n                        // no supported\n                        case Tokens.ASSERTION :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3427",
               "end_line": "3435",
               "source_code": "                            cs.sql = getLastPart(position);\n                            break;\n\n                        case Tokens.ROLE :\n                            cs     = compileCreateRole();\n                            cs.sql = getLastPart(position);\n                            break;\n\n                        case Tokens.DOMAIN :"
           }

       },

       {
           "id": "clone_729",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2315",
               "end_line": "2320",
               "source_code": "        // intermediate holders\n        Iterator    tables;\n        Table       table;\n        Object[]    row;\n        HsqlName    accessKey;\n        DITableInfo ti;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3590",
               "end_line": "3594",
               "source_code": "        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        OrderedHashSet columnList;\n        Type           type;"
           }

       },

       {
           "id": "clone_730",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "265",
               "end_line": "278",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                writeDaySecondInterval((IntervalSecondData) o, t);\n                break;\n\n            case Types.OTHER :\n                writeOther((JavaObjectData) o);\n                break;\n\n            case Types.SQL_BLOB :\n                writeBlob((BlobData) o, t);\n                break;\n\n            case Types.SQL_CLOB :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "228",
               "end_line": "241",
               "source_code": "            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                writeDecimal((BigDecimal) o, t);\n                break;\n\n            case Types.SQL_BOOLEAN :\n                writeBoolean((Boolean) o);\n                break;\n\n            case Types.SQL_DATE :\n                writeDate((TimestampData) o, t);\n                break;\n\n            case Types.SQL_TIME :"
           }

       },

       {
           "id": "clone_731",

           "clone_type": "type-2",

           "origin": {
               "file": "Token.java",
               "start_line": "85",
               "end_line": "89",
               "source_code": "        hasIrregularChar         = false;\n        isReservedIdentifier     = false;\n        isCoreReservedIdentifier = false;\n        isHostParameter          = false;\n        isMalformed              = false;"
           },

           "clone": {
               "file": "Token.java",
               "start_line": "80",
               "end_line": "84",
               "source_code": "        isDelimitedIdentifier    = false;\n        isDelimitedPrefix        = false;\n        isDelimitedPrePrefix     = false;\n        isDelimitedPrePrePrefix  = false;\n        isUndelimitedIdentifier  = false;"
           }

       },

       {
           "id": "clone_732",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqlDateTime.java",
               "start_line": "669",
               "end_line": "680",
               "source_code": "        if (matchIndex >= 0) {\n            Calendar      cal         = format.getCalendar();\n            int           matchLength = 2;\n            int           dayOfMonth  = cal.get(Calendar.DAY_OF_MONTH);\n            int           weekOfMonth = ((dayOfMonth - 1) / 7) + 1;\n            StringBuilder sb          = new StringBuilder(result);\n\n            sb.replace(matchIndex, matchIndex + matchLength,\n                       String.valueOf(weekOfMonth));\n\n            result = sb.toString();\n        }"
           },

           "clone": {
               "file": "HsqlDateTime.java",
               "start_line": "654",
               "end_line": "665",
               "source_code": "        if (matchIndex >= 0) {\n            Calendar      cal         = format.getCalendar();\n            int           matchLength = 3;\n            int           dayOfYear   = cal.get(Calendar.DAY_OF_YEAR);\n            int           weekOfYear  = ((dayOfYear - 1) / 7) + 1;\n            StringBuilder sb          = new StringBuilder(result);\n\n            sb.replace(matchIndex, matchIndex + matchLength,\n                       String.valueOf(weekOfYear));\n\n            result = sb.toString();\n        }"
           }

       },

       {
           "id": "clone_733",

           "clone_type": "type-2",

           "origin": {
               "file": "LockFile.java",
               "start_line": "1677",
               "end_line": "1748",
               "source_code": "            pollHeartbeat();\n            openRAF();\n\n            // Must come *after* openRAF to comply with the\n            // doOptionalLockActions() PRE: assertion contract.\n            //\n            // <sigh> In an ideal world, it would be possible from Java to open\n            // a file handle and obtain at least one associated NIO FileLock in\n            // one kernel-enforced atomic operation.  However, we can't even\n            // guarantee that NIO is available.\n            //\n            // Note:\n            // The NIOLockFile version of this operation is 'self cleaning'...\n            // if it fails for some reason, then it does a 'best effort' to\n            // eagerly release and nullify its FileLock object before\n            // returning.\n            doOptionalLockActions();\n\n            // Inlined the following to reduce potential for timing issues\n            // such as initial timer thread startup induced delay of first\n            // pulse.\n            //\n            // In general, what we'll get is two initial pulses in rapid\n            // sucession: one here and one an instant later as a result of\n            // startHeartbeat (which is OK... no harm, and it's one-shot\n            // behaviour, not repeated on every writeHeartbeat)\n            //\n            // Unfortunately, we may occasionally encounter astronomic (at least\n            // in computer time) delays between invocation of startHeartbeat\n            // and the time at which effort is actually expended toward writing\n            // the initial MAGIC and heartbeat timestamp values.\n            //\n            // Another good reason to inline the first writeHeartbeat is to\n            // provide a last line of defence against inter-process as well\n            // as inter-thread race conditions.  That is, exceptions thrown in\n            // HeartbeatRunner.run() do yet get propagated anywhere useful.\n            //\n            // Of course, if we are operating under a fully-featured and correct\n            // NIO implementation, the concerns described above are really\n            // non-issues... at this point, we will have (at least in theory) a\n            // valid OS-enforced file lock.\n            //\n            // But in an ideal world (with or without NIO), any pulse failure in\n            // HeartbeatRunner.run() would flag the database Logger that a\n            // database lock condition violation has occured, preventing further\n            // ad-hoc operation of the database.\n            //\n            // The problem is, if a lock condition has been violated that is\n            // being used by a database instance, what mechanism can be used to\n            // safely checkpoint, backup and/or shut down that instance?  For\n            // all we know, the violation indicates that another instance is now\n            // happily writing to the other database files...\n            //\n            // A prudent course of action to take under detection of a\n            // cooperative lock condition violation in the heartbeatRunner task\n            // would be to perform a 'SCRIPT <file>' to some pre-ordained 'safe'\n            // backup location using a globally unique file name and then do a\n            // 'SHUTDOWN IMMEDIATELY' in one database-scope atomic context (e.g.\n            // a single JDBC statement execution).\n            //\n            // However, by the time a lock condition violation has been detected,\n            // the data cache file (and log/script) may already be quite\n            // corrupted, meaning the resulting script may be totally inaccurate\n            // or worse.\n            //\n            // Bottom line:\n            //\n            // Regardless of this inlining measure, if a lock violation occurs\n            // after startHeartbeat, it's almost certain there's much worse in\n            // store...\n            writeMagic();\n            writeHeartbeat();"
           },

           "clone": {
               "file": "PersistentStoreCollectionSession.java",
               "start_line": "184",
               "end_line": "188",
               "source_code": "        clearSessionTables();\n        clearTransactionTables();\n        clearStatementTables();\n        clearRoutineTables();\n        closeSessionDataCache();"
           }

       },

       {
           "id": "clone_734",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1236",
               "end_line": "1261",
               "source_code": "                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_HOUR;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_HOUR_TO_MINUTE;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_MINUTE;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                if (precision == DTIType.defaultIntervalPrecision\n                        && fractionPrecision\n                           == DTIType.defaultIntervalFractionPrecision) {\n                    return SQL_INTERVAL_HOUR_TO_SECOND;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1210",
               "end_line": "1235",
               "source_code": "                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_DAY;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_DAY_TO_HOUR;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_DAY_TO_MINUTE;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                if (precision == DTIType.defaultIntervalPrecision\n                        && fractionPrecision\n                           == DTIType.defaultIntervalFractionPrecision) {\n                    return SQL_INTERVAL_DAY_TO_SECOND;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :"
           }

       },

       {
           "id": "clone_735",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDatabaseMetaData.java",
               "start_line": "146",
               "end_line": "156",
               "source_code": "            pstmt = conn.prepareStatement(\"DROP TABLE t_1 IF EXISTS\");\n\n            pstmt.executeUpdate();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(\n                \"CREATE TABLE t_1 (cha CHARACTER(10), deci DECIMAL(10,2), doub DOUBLE, lon BIGINT, \\\"IN\\\" INTEGER, sma SMALLINT, tin TINYINT, \"\n                + \"dat DATE DEFAULT CURRENT_DATE, tim TIME DEFAULT CURRENT_TIME, timest TIMESTAMP DEFAULT CURRENT_TIMESTAMP, bool BOOLEAN );\");\n            updateCount = pstmt.executeUpdate();\n\n            assertTrue(\"expected update count of zero\", updateCount == 0);"
           },

           "clone": {
               "file": "TestDatabaseMetaData.java",
               "start_line": "60",
               "end_line": "70",
               "source_code": "            pstmt = conn.prepareStatement(\"DROP TABLE t1 IF EXISTS\");\n\n            pstmt.executeUpdate();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(\n                \"CREATE TABLE t1 (cha CHARACTER, dec DECIMAL, doub DOUBLE, lon BIGINT, \\\"IN\\\" INTEGER, sma SMALLINT, tin TINYINT, \"\n                + \"dat DATE DEFAULT CURRENT_DATE, tim TIME DEFAULT CURRENT_TIME, timest TIMESTAMP DEFAULT CURRENT_TIMESTAMP );\");\n            updateCount = pstmt.executeUpdate();\n\n            assertTrue(\"expected update count of zero\", updateCount == 0);"
           }

       },

       {
           "id": "clone_736",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSimple.java",
               "start_line": "173",
               "end_line": "178",
               "source_code": "            case StatementTypes.SIGNAL :\n            case StatementTypes.RESIGNAL :\n                resolved = true;\n                break;\n\n            case StatementTypes.ITERATE :"
           },

           "clone": {
               "file": "StatementCompound.java",
               "start_line": "86",
               "end_line": "91",
               "source_code": "            case StatementTypes.WHILE :\n            case StatementTypes.REPEAT :\n                isLoop = true;\n                break;\n\n            case StatementTypes.BEGIN_END :"
           }

       },

       {
           "id": "clone_737",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "568",
               "end_line": "604",
               "source_code": "            case FUNC_TO_YMINTERVAL :\n            case FUNC_TO_NUMBER :\n                parseList = singleParamList;\n                break;\n\n            case FUNC_ADD_MONTHS :\n            case FUNC_ATAN2 :\n            case FUNC_CONCAT :\n            case FUNC_CRYPT_KEY :\n            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :\n            case FUNC_DIFFERENCE :\n            case FUNC_FROM_TZ :\n            case FUNC_LEFT :\n            case FUNC_MONTHS_BETWEEN :\n            case FUNC_NEXT_DAY :\n            case FUNC_NUMTODSINTERVAL :\n            case FUNC_NUMTOYMINTERVAL :\n            case FUNC_REGEXP_MATCHES :\n            case FUNC_REGEXP_SUBSTRING :\n            case FUNC_REGEXP_SUBSTRING_ARRAY :\n            case FUNC_REPEAT :\n            case FUNC_RIGHT :\n            case FUNC_TO_CHAR :\n                parseList = doubleParamList;\n                break;\n\n            case FUNC_LOAD_FILE :\n            case FUNC_ROUND :\n            case FUNC_TIMESTAMP :\n            case FUNC_TO_DATE :\n            case FUNC_TO_TIMESTAMP :\n            case FUNC_TO_TIMESTAMP_TZ :\n            case FUNC_TRUNC :\n            case FUNC_TRUNCATE :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "513",
               "end_line": "549",
               "source_code": "            case FUNC_SYSDATE :\n            case FUNC_SYSTIMESTAMP :\n                parseList = optionalNoParamList;\n                break;\n\n            case FUNC_ACTION_ID :\n            case FUNC_DATABASE :\n            case FUNC_DATABASE_ISOLATION_LEVEL :\n            case FUNC_DATABASE_NAME :\n            case FUNC_DATABASE_TIMEZONE :\n            case FUNC_DATABASE_VERSION :\n            case FUNC_DBTIMEZONE :\n            case FUNC_ISAUTOCOMMIT :\n            case FUNC_ISOLATION_LEVEL :\n            case FUNC_ISREADONLYDATABASE :\n            case FUNC_ISREADONLYDATABASEFILES :\n            case FUNC_ISREADONLYSESSION :\n            case FUNC_PI :\n            case FUNC_SESSION_ID :\n            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_SESSION_TIMEZONE :\n            case FUNC_SESSIONTIMEZONE :\n            case FUNC_TIMEZONE :\n            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n                parseList = emptyParamList;\n                break;\n\n            case FUNC_ACOS :\n            case FUNC_ASCII :\n            case FUNC_ASIN :\n            case FUNC_ATAN :\n            case FUNC_BITNOT :\n            case FUNC_CHAR :\n            case FUNC_COS :\n            case FUNC_COT :"
           }

       },

       {
           "id": "clone_738",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6838",
               "end_line": "6849",
               "source_code": "                //\n                row[trigger_catalog] = database.getCatalogName().name;\n                row[trigger_schema]  = trigger.getSchemaName().name;\n                row[trigger_name]    = trigger.getName().name;\n                row[table_catalog]   = database.getCatalogName().name;\n                row[table_schema]    = refName.parent.schema.name;\n                row[table_name]      = refName.parent.name;\n                row[column_name]     = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5118",
               "end_line": "5128",
               "source_code": "                row[routine_catalog]  = database.getCatalogName().name;\n                row[routine_schema]   = routine.getSchemaName().name;\n                row[routine_name]     = routine.getName().name;\n                row[table_catalog]    = database.getCatalogName().name;\n                row[table_schema]     = refName.parent.schema.name;\n                row[table_name]       = refName.parent.name;\n                row[column_name]      = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           }

       },

       {
           "id": "clone_739",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5771",
               "end_line": "5817",
               "source_code": "            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_740",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCTypes.java",
               "start_line": "119",
               "end_line": "129",
               "source_code": "        hIntJDBCtypes.put(\"NULL\", new Integer(java.sql.Types.NULL));\n        hIntJDBCtypes.put(\"NUMERIC\", new Integer(java.sql.Types.NUMERIC));\n        hIntJDBCtypes.put(\"OTHER\", new Integer(java.sql.Types.OTHER));\n        hIntJDBCtypes.put(\"REAL\", new Integer(java.sql.Types.REAL));\n        hIntJDBCtypes.put(\"SMALLINT\", new Integer(java.sql.Types.SMALLINT));\n        hIntJDBCtypes.put(\"TIME\", new Integer(java.sql.Types.TIME));\n        hIntJDBCtypes.put(\"TIMESTAMP\", new Integer(java.sql.Types.TIMESTAMP));\n        hIntJDBCtypes.put(\"TINYINT\", new Integer(java.sql.Types.TINYINT));\n        hIntJDBCtypes.put(\"VARBINARY\", new Integer(java.sql.Types.VARBINARY));\n        hIntJDBCtypes.put(\"VARCHAR\", new Integer(java.sql.Types.VARCHAR));\n        hIntJDBCtypes.put(\"BOOLEAN\", new Integer(java.sql.Types.BOOLEAN));"
           },

           "clone": {
               "file": "JDBCTypes.java",
               "start_line": "105",
               "end_line": "118",
               "source_code": "        //\n        hIntJDBCtypes.put(\"BIGINT\", new Integer(java.sql.Types.BIGINT));\n        hIntJDBCtypes.put(\"BINARY\", new Integer(java.sql.Types.BINARY));\n        hIntJDBCtypes.put(\"BIT\", new Integer(java.sql.Types.BIT));\n        hIntJDBCtypes.put(\"CHAR\", new Integer(java.sql.Types.CHAR));\n        hIntJDBCtypes.put(\"DATE\", new Integer(java.sql.Types.DATE));\n        hIntJDBCtypes.put(\"DECIMAL\", new Integer(java.sql.Types.DECIMAL));\n        hIntJDBCtypes.put(\"DOUBLE\", new Integer(java.sql.Types.DOUBLE));\n        hIntJDBCtypes.put(\"FLOAT\", new Integer(java.sql.Types.FLOAT));\n        hIntJDBCtypes.put(\"INTEGER\", new Integer(java.sql.Types.INTEGER));\n        hIntJDBCtypes.put(\"LONGVARBINARY\",\n                          new Integer(java.sql.Types.LONGVARBINARY));\n        hIntJDBCtypes.put(\"LONGVARCHAR\",\n                          new Integer(java.sql.Types.LONGVARCHAR));"
           }

       },

       {
           "id": "clone_741",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1335",
               "end_line": "1365",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n                endType = Types.SQL_INTERVAL_YEAR;\n                break;\n\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n                endType = Types.SQL_INTERVAL_MONTH;\n                break;\n\n            case Types.SQL_INTERVAL_MONTH :\n                endType = Types.SQL_INTERVAL_MONTH;\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n                endType = Types.SQL_INTERVAL_DAY;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;"
           },

           "clone": {
               "file": "ParserBase.java",
               "start_line": "251",
               "end_line": "281",
               "source_code": "                case Tokens.X_MALFORMED_BINARY_STRING :\n                    errorCode = ErrorCode.X_42587;\n                    break;\n\n                case Tokens.X_MALFORMED_BIT_STRING :\n                    errorCode = ErrorCode.X_42588;\n                    break;\n\n                case Tokens.X_MALFORMED_UNICODE_STRING :\n                    errorCode = ErrorCode.X_42586;\n                    break;\n\n                case Tokens.X_MALFORMED_STRING :\n                    errorCode = ErrorCode.X_42584;\n                    break;\n\n                case Tokens.X_UNKNOWN_TOKEN :\n                    errorCode = ErrorCode.X_42582;\n                    break;\n\n                case Tokens.X_MALFORMED_NUMERIC :\n                    errorCode = ErrorCode.X_42585;\n                    break;\n\n                case Tokens.X_MALFORMED_COMMENT :\n                    errorCode = ErrorCode.X_42589;\n                    break;\n\n                case Tokens.X_MALFORMED_IDENTIFIER :\n                    errorCode = ErrorCode.X_42583;\n                    break;"
           }

       },

       {
           "id": "clone_742",

           "clone_type": "type-2",

           "origin": {
               "file": "BlockObjectStore.java",
               "start_line": "103",
               "end_line": "110",
               "source_code": "        size = cache.rowOut.getStorageSize(size);\n\n        object.setStorageSize(size);\n\n        long pos = spaceManager.getFilePosition(size, true);\n\n        object.setPos(pos);\n        cache.add(object);"
           },

           "clone": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "162",
               "end_line": "169",
               "source_code": "            size = cache.rowOut.getStorageSize(size);\n\n            object.setStorageSize(size);\n\n            long pos = tableSpace.getFilePosition(size, false);\n\n            object.setPos(pos);\n            cache.add(object);"
           }

       },

       {
           "id": "clone_743",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "264",
               "end_line": "270",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                writeDaySecondInterval((IntervalSecondData) o, t);\n                break;\n\n            case Types.OTHER :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "251",
               "end_line": "257",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n                writeYearMonthInterval((IntervalMonthData) o, t);\n                break;\n\n            case Types.SQL_INTERVAL_DAY :"
           }

       },

       {
           "id": "clone_744",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2547",
               "end_line": "2573",
               "source_code": "            case Tokens.CONCAT_WORD : {\n                e = readConcatExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CONCAT_WS : {\n                e = readConcatSeparatorExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.CASEWHEN : {\n                e = readCaseWhenExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2520",
               "end_line": "2546",
               "source_code": "            case Tokens.LEAST : {\n                e = readLeastExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.GREATEST : {\n                e = readGreatestExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }\n            case Tokens.DECODE : {\n                e = readDecodeExpressionOrNull();\n\n                if (e != null) {\n                    return e;\n                }\n\n                break;\n            }"
           }

       },

       {
           "id": "clone_745",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "97",
               "end_line": "108",
               "source_code": "            case StatementTypes.RENAME_OBJECT :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.ALTER_DOMAIN :\n            case StatementTypes.ALTER_INDEX :\n            case StatementTypes.ALTER_ROUTINE :\n            case StatementTypes.ALTER_SEQUENCE :\n            case StatementTypes.ALTER_TYPE :\n            case StatementTypes.ALTER_TABLE :\n            case StatementTypes.ALTER_TRANSFORM :\n            case StatementTypes.ALTER_VIEW :"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "168",
               "end_line": "181",
               "source_code": "            // logged by session\n            case StatementTypes.DISCONNECT :\n                group = StatementTypes.X_SQL_CONNECTION;\n                break;\n\n            //\n            case StatementTypes.SET_COLLATION :\n            case StatementTypes.SET_CONNECTION :\n            case StatementTypes.SET_CONSTRAINT :\n            case StatementTypes.SET_DESCRIPTOR :\n            case StatementTypes.SET_SESSION_CHARACTERISTICS :\n            case StatementTypes.SET_TRANSFORM_GROUP :\n            case StatementTypes.SET_SESSION_RESULT_MAX_ROWS :\n            case StatementTypes.SET_SESSION_RESULT_MEMORY_ROWS :"
           }

       },

       {
           "id": "clone_746",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "125",
               "end_line": "144",
               "source_code": "                break;\n\n            case Tokens.CACHED :\n                read();\n                readThis(Tokens.TABLE);\n\n                isTable   = true;\n                tableType = TableBase.CACHED_TABLE;\n                break;\n\n            case Tokens.TEXT :\n                read();\n                readThis(Tokens.TABLE);\n\n                isTable   = true;\n                tableType = TableBase.TEXT_TABLE;\n                break;\n\n            case Tokens.TABLE :\n                read();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "102",
               "end_line": "121",
               "source_code": "                break;\n\n            case Tokens.TEMP :\n                read();\n                readThis(Tokens.TABLE);\n\n                isTable   = true;\n                tableType = TableBase.TEMP_TABLE;\n                break;\n\n            case Tokens.TEMPORARY :\n                read();\n                readThis(Tokens.TABLE);\n\n                isTable   = true;\n                tableType = TableBase.TEMP_TABLE;\n                break;\n\n            case Tokens.MEMORY :\n                read();"
           }

       },

       {
           "id": "clone_747",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "535",
               "end_line": "543",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                break;\n\n            default :\n                throw Error.error(ErrorCode.X_42561);"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "520",
               "end_line": "528",
               "source_code": "            case Types.SQL_DECIMAL :\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                break;\n\n            default :\n                throw Error.error(ErrorCode.X_42562);"
           }

       },

       {
           "id": "clone_748",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "818",
               "end_line": "830",
               "source_code": "                        case StatementTypes.DROP_TYPE :\n                            dropType(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_DOMAIN :\n                            dropDomain(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_ROUTINE :\n                            dropRoutine(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_TABLE :"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "796",
               "end_line": "808",
               "source_code": "                        case StatementTypes.DROP_ROLE :\n                            dropRole(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_USER :\n                            dropUser(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_SCHEMA :\n                            dropSchema(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_ASSERTION :"
           }

       },

       {
           "id": "clone_749",

           "clone_type": "type-2",

           "origin": {
               "file": "Transfer.java",
               "start_line": "683",
               "end_line": "687",
               "source_code": "        cDelete.setState(t.Stmts.bDelete);\n        cInsert.setState(t.Stmts.bInsert);\n        cAlter.setState(t.Stmts.bAlter);\n        cFKForced.setState(t.Stmts.bFKForced);\n        cIdxForced.setState(t.Stmts.bIdxForced);"
           },

           "clone": {
               "file": "Transfer.java",
               "start_line": "678",
               "end_line": "682",
               "source_code": "        cTransfer.setState(t.Stmts.bTransfer);\n        cDrop.setState(t.Stmts.bDrop);\n        cCreate.setState(t.Stmts.bCreate);\n        cDropIndex.setState(t.Stmts.bDropIndex);\n        cCreateIndex.setState(t.Stmts.bCreateIndex);"
           }

       },

       {
           "id": "clone_750",

           "clone_type": "type-2",

           "origin": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "260",
               "end_line": "279",
               "source_code": "    boolean isFromLeft(PersistentStore store) {\n\n        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (node.iParent == NO_POS) {\n            return true;\n        }\n\n        if (node.nParent == null || !node.nParent.isInMemory()) {\n            node.nParent = findNode(store, iParent);\n        }\n\n        return row.getPos() == ((NodeAVLDiskLarge) node.nParent).iLeft;\n    }"
           },

           "clone": {
               "file": "NodeAVLDisk.java",
               "start_line": "304",
               "end_line": "323",
               "source_code": "    boolean isFromLeft(PersistentStore store) {\n\n        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (node.iParent == NO_POS) {\n            return true;\n        }\n\n        if (node.nParent == null || !node.nParent.isInMemory()) {\n            node.nParent = findNode(store, iParent);\n        }\n\n        return row.getPos() == ((NodeAVLDisk) node.nParent).iLeft;\n    }"
           }

       },

       {
           "id": "clone_751",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1175",
               "end_line": "1213",
               "source_code": "    public void testVarCharComplex() {\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            ps = netConn.prepareStatement(\n                \"INSERT INTO alltypes(id, cv) VALUES(?, ?)\");\n            ps.setInt(1, 3);\n            ps.setString(2, \"xy\");\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();\n            ps = netConn.prepareStatement(\n                \"SELECT * FROM alltypes WHERE cv = ?\");\n            ps.setString(1, \"xy\");\n            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with cv = 'xy'\", rs.next());\n            assertEquals(String.class, rs.getObject(\"cv\").getClass());\n            assertTrue(\"Got only one row with cv = 'xy'\", rs.next());\n            assertEquals(\"xy\", rs.getString(\"cv\"));\n            assertFalse(\"Got too many rows with cv = 'xy'\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1135",
               "end_line": "1173",
               "source_code": "    public void testCharComplex() {\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            ps = netConn.prepareStatement(\n                \"INSERT INTO alltypes(id, c) VALUES(?, ?)\");\n            ps.setInt(1, 3);\n            ps.setString(2, \"xy\");\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();\n            ps = netConn.prepareStatement(\n                \"SELECT * FROM alltypes WHERE c = ?\");\n            ps.setString(1, \"xy \");\n            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with c = 'xy '\", rs.next());\n            assertEquals(String.class, rs.getObject(\"c\").getClass());\n            assertTrue(\"Got only one row with c = 'xy '\", rs.next());\n            assertEquals(\"xy \", rs.getString(\"c\"));\n            assertFalse(\"Got too many rows with c = 'xy '\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_752",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1815",
               "end_line": "1838",
               "source_code": "        readThis(Tokens.LOOP);\n\n        Statement[] statements = compileSQLProcedureStatementList(routine,\n            context);\n\n        readThis(Tokens.END);\n        readThis(Tokens.LOOP);\n\n        if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n\n            read();\n        }\n\n        StatementCompound result = new StatementCompound(StatementTypes.LOOP,\n            label);\n\n        result.setStatements(statements);"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1741",
               "end_line": "1764",
               "source_code": "        readThis(Tokens.DO);\n\n        Statement[] statements = compileSQLProcedureStatementList(routine,\n            context);\n\n        readThis(Tokens.END);\n        readThis(Tokens.WHILE);\n\n        if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n\n            read();\n        }\n\n        StatementCompound statement =\n            new StatementCompound(StatementTypes.WHILE, label);\n\n        statement.setStatements(statements);"
           }

       },

       {
           "id": "clone_753",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "816",
               "end_line": "847",
               "source_code": "    public void testSecIntervalSimpleRead() {\n        /* Since our client does not support the INTERVAL precision\n         * constraints, the returned value will always be toString()'d to\n         * precision of microseconds. */\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(\"1000.345000\", rs.getString(\"sival\"));\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            // Can't test the class, because jdbc:odbc or the driver returns\n            // a String for getObject() for interval values.\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "783",
               "end_line": "814",
               "source_code": "    public void testDaySecIntervalSimpleRead() {\n        /* Since our client does not support the INTERVAL precision\n         * constraints, the returned value will always be toString()'d to\n         * precision of microseconds. */\n        ResultSet rs = null;\n        Statement st = null;\n        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(\"145 23:12:19.345000\", rs.getString(\"dsival\"));\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            // Can't test the class, because jdbc:odbc or the driver returns\n            // a String for getObject() for interval values.\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_754",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "676",
               "end_line": "702",
               "source_code": "            case Types.SQL_ARRAY :\n            case Types.SQL_BINARY :\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n            case Types.SQL_BLOB :\n            case Types.SQL_CHAR :\n            case Types.SQL_NCHAR :\n            case Types.SQL_CLOB :\n            case Types.NCLOB :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_VARCHAR :\n            case Types.SQL_NVARCHAR :\n            case Types.VARCHAR_IGNORECASE :\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_FLOAT :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "126",
               "end_line": "155",
               "source_code": "//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :\n            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :"
           }

       },

       {
           "id": "clone_755",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1815",
               "end_line": "1826",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[SYSTEM_PROCEDURES]);\n\n            // ----------------------------------------------------------------\n            // required\n            // ----------------------------------------------------------------\n            addColumn(t, \"PROCEDURE_CAT\", SQL_IDENTIFIER);        // 0\n            addColumn(t, \"PROCEDURE_SCHEM\", SQL_IDENTIFIER);      // 1\n            addColumn(t, \"PROCEDURE_NAME\", SQL_IDENTIFIER);       // 2\n            addColumn(t, \"COL_4\", Type.SQL_INTEGER);              // 3\n            addColumn(t, \"COL_5\", Type.SQL_INTEGER);              // 4\n            addColumn(t, \"COL_6\", Type.SQL_INTEGER);              // 5\n            addColumn(t, \"REMARKS\", CHARACTER_DATA);              // 6"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1035",
               "end_line": "1045",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[SYSTEM_SESSIONS]);\n\n            addColumn(t, \"SESSION_ID\", CARDINAL_NUMBER);\n            addColumn(t, \"CONNECTED\", TIME_STAMP);\n            addColumn(t, \"USER_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_ADMIN\", Type.SQL_BOOLEAN);\n            addColumn(t, \"AUTOCOMMIT\", Type.SQL_BOOLEAN);\n            addColumn(t, \"READONLY\", Type.SQL_BOOLEAN);\n\n            // Note: some sessions may have a NULL LAST_IDENTITY value\n            addColumn(t, \"LAST_IDENTITY\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_756",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "2223",
               "end_line": "2234",
               "source_code": "            case FUNC_TIMEZONE :\n            case FUNC_SESSION_TIMEZONE :\n            case FUNC_DATABASE_TIMEZONE :\n                dataType = Type.SQL_INTERVAL_HOUR_TO_MINUTE;\n\n                return;\n\n            case FUNC_SESSION_ID :\n            case FUNC_ACTION_ID :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n            case FUNC_LOB_ID :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2207",
               "end_line": "2218",
               "source_code": "            case FUNC_ISREADONLYSESSION :\n            case FUNC_ISREADONLYDATABASE :\n            case FUNC_ISREADONLYDATABASEFILES :\n                dataType = Type.SQL_BOOLEAN;\n\n                return;\n\n            case FUNC_ISOLATION_LEVEL :\n            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_DATABASE_ISOLATION_LEVEL :\n            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_DATABASE_VERSION :"
           }

       },

       {
           "id": "clone_757",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "244",
               "end_line": "252",
               "source_code": "                break;\n\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                writeTimestamp((TimestampData) o, t);\n                break;\n\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "202",
               "end_line": "210",
               "source_code": "                break;\n\n            case Types.SQL_CHAR :\n            case Types.SQL_VARCHAR :\n                writeChar((String) o, t);\n                break;\n\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :"
           }

       },

       {
           "id": "clone_758",

           "clone_type": "type-2",

           "origin": {
               "file": "ClobInputStream.java",
               "start_line": "61",
               "end_line": "71",
               "source_code": "    public ClobInputStream(SessionInterface session, ClobData clob,\n                           long offset, long length) {\n\n        final long clobLength = clob.length(session);\n\n        this.session         = session;\n        this.clob            = clob;\n        this.availableLength = offset + Math.min(length, clobLength - offset);\n        this.currentPosition = offset;\n        this.streamBlockSize = session.getStreamBlockSize();\n    }"
           },

           "clone": {
               "file": "BlobInputStream.java",
               "start_line": "61",
               "end_line": "71",
               "source_code": "    public BlobInputStream(SessionInterface session, BlobData blob,\n                           long offset, long length) {\n\n        final long blobLength = blob.length(session);\n\n        this.session         = session;\n        this.blob            = blob;\n        this.availableLength = offset + Math.min(length, blobLength - offset);\n        this.currentPosition = offset;\n        this.streamBlockSize = session.getStreamBlockSize();\n    }"
           }

       },

       {
           "id": "clone_759",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2320",
               "end_line": "2339",
               "source_code": "            case Tokens.COLON :\n                read();\n\n                if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER\n                        || token.tokenType == Tokens.X_IDENTIFIER) {}\n                else {\n                    throw unexpectedToken(Tokens.T_COLON);\n                }\n\n            // fall through\n            case Tokens.QUESTION :\n                ExpressionColumn p =\n                    new ExpressionColumn(OpTypes.DYNAMIC_PARAM);\n\n                compileContext.addParameter(p, getPosition());\n                read();\n\n                return p;\n\n            case Tokens.X_IDENTIFIER :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2257",
               "end_line": "2276",
               "source_code": "            case Tokens.COLON :\n                read();\n\n                if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER\n                        || token.tokenType == Tokens.X_IDENTIFIER) {}\n                else {\n                    throw unexpectedToken(Tokens.T_COLON);\n                }\n\n            // fall through\n            case Tokens.QUESTION :\n                ExpressionColumn p =\n                    new ExpressionColumn(OpTypes.DYNAMIC_PARAM);\n\n                compileContext.addParameter(p, getPosition());\n                read();\n\n                return p;\n\n            case Tokens.COLLATION :"
           }

       },

       {
           "id": "clone_760",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAcl.java",
               "start_line": "183",
               "end_line": "206",
               "source_code": "        pw.println(\"deny 127.0.0.0/24\");\n        pw.println(\"allow 0.0.0.0/0\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclDenyLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclDenyLocalNets.length; i++) {\n                aclDenyLocalNets[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclDenyLocalhost1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Deny Localhost test ACL\n\");\n        pw.println(\"deny 127.0.0.1/32\");"
           },

           "clone": {
               "file": "TestAcl.java",
               "start_line": "138",
               "end_line": "161",
               "source_code": "        pw.println(\"# Permit Localhost test ACL\n\");\n        pw.println(\"permit 127.0.0.1/32\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclPermitLocalhosts = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclPermitLocalhosts.length; i++) {\n                aclPermitLocalhosts[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclPermitLocalNet1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Permit Local Net test ACL\n\");\n        pw.println(\"permit 127.0.0.0/24\");"
           }

       },

       {
           "id": "clone_761",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2280",
               "end_line": "2297",
               "source_code": "            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"TABLE_TYPE\", CHARACTER_DATA);       // not null\n            addColumn(t, \"REMARKS\", CHARACTER_DATA);\n\n            // -------------------------------------------------------------\n            // JDBC 3.0\n            // -------------------------------------------------------------\n            addColumn(t, \"TYPE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SELF_REFERENCING_COL_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"REF_GENERATION\", CHARACTER_DATA);\n\n            // -------------------------------------------------------------\n            // extended\n            // ------------------------------------------------------------\n            addColumn(t, \"HSQLDB_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"READ_ONLY\", Type.SQL_BOOLEAN);      // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1205",
               "end_line": "1214",
               "source_code": "            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"DATA_SOURCE_DEFINTION\", CHARACTER_DATA);\n            addColumn(t, \"FILE_PATH\", CHARACTER_DATA);\n            addColumn(t, \"FILE_ENCODING\", CHARACTER_DATA);\n            addColumn(t, \"FIELD_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"VARCHAR_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"LONGVARCHAR_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"IS_IGNORE_FIRST\", Type.SQL_BOOLEAN);"
           }

       },

       {
           "id": "clone_762",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "388",
               "end_line": "395",
               "source_code": "            case Types.SQL_INTERVAL_MONTH :\n                s += 8;\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "341",
               "end_line": "348",
               "source_code": "            case Types.SQL_INTEGER :\n                s += 4;\n                break;\n\n            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :"
           }

       },

       {
           "id": "clone_763",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "297",
               "end_line": "304",
               "source_code": "            // fall through\n            case OpTypes.SUBTRACT :\n            case OpTypes.MULTIPLY :\n            case OpTypes.DIVIDE :\n                resolveTypesForArithmetic(session, parent);\n                break;\n\n            case OpTypes.CONCAT :"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "2191",
               "end_line": "2197",
               "source_code": "                case SchemaObject.CHARSET :\n                case SchemaObject.COLLATION :\n                case SchemaObject.SPECIFIC_ROUTINE :\n                    getCascadingReferencesTo(name, objectSet);\n                    break;\n\n                case SchemaObject.DOMAIN :"
           }

       },

       {
           "id": "clone_764",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7876",
               "end_line": "7908",
               "source_code": "        final int user_defined_type_catalog  = 0;\n        final int user_defined_type_schema   = 1;\n        final int user_defined_type_name     = 2;\n        final int user_defined_type_category = 3;\n        final int is_instantiable            = 4;\n        final int is_final                   = 5;\n        final int ordering_form              = 6;\n        final int ordering_category          = 7;\n        final int ordering_routine_catalog   = 8;\n        final int ordering_routine_schema    = 9;\n        final int ordering_routine_name      = 10;\n        final int reference_type             = 11;\n        final int data_type                  = 12;\n        final int character_maximum_length   = 13;\n        final int character_octet_length     = 14;\n        final int character_set_catalog      = 15;\n        final int character_set_schema       = 16;\n        final int character_set_name         = 17;\n        final int collation_catalog          = 18;\n        final int collation_schema           = 19;\n        final int collation_name             = 20;\n        final int numeric_precision          = 21;\n        final int numeric_precision_radix    = 22;\n        final int numeric_scale              = 23;\n        final int datetime_precision         = 24;\n        final int interval_type              = 25;\n        final int interval_precision         = 26;\n        final int source_dtd_identifier      = 27;\n        final int ref_dtd_identifier         = 28;\n        final int declared_data_type         = 29;\n        final int declared_numeric_precision = 30;\n        final int declared_numeric_scale     = 31;\n        final int maximum_cardinality        = 32;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5891",
               "end_line": "5923",
               "source_code": "        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;\n        final int declared_data_type                     = 82;\n        final int declared_numeric_precision             = 83;\n        final int declared_numeric_scale                 = 84;\n        final int result_cast_from_declared_data_type    = 85;\n        final int result_cast_declared_numeric_precision = 86;\n        final int result_cast_declared_numeric_scale     = 87;"
           }

       },

       {
           "id": "clone_765",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDatetimeSimple.java",
               "start_line": "182",
               "end_line": "193",
               "source_code": "        st.executeUpdate(\"INSERT INTO t2 VALUES(1, '2008-11-27 12:30:00')\");\n\n        /** FOLLOWING ALL WORK AS EXPECTED: */\n        ps = conn.prepareStatement(\"INSERT INTO t2 VALUES(2, ?)\");\n\n        ps.setTimestamp(1, java.sql.Timestamp.valueOf(\"2008-10-27 0:00:00\"));\n        ps.execute();\n        ps.close();\n\n        rs = st.executeQuery(\"SELECT ts FROM t2\");\n\n        rs.next();"
           },

           "clone": {
               "file": "TestDatetimeSimple.java",
               "start_line": "133",
               "end_line": "156",
               "source_code": "        st.executeUpdate(\"DELETE FROM t\");\n\n        /* This is prohibited:\n\n        st.executeUpdate(\"INSERT INTO t VALUES(2, '2008-11-27 0:00:00')\");\n\n        Q: Do we want to prohibit this, even though we permit the same\n        usage with PreparedStatement using a Timestamp, as follows?\n\n        A: In the disallowed case, a String that is not a data string is used,\n           while in the other case, a timestamp object is used. It follows the\n           cast specification, which requires the String to be a valid date\n           string, and allows casting from a TIMESTAMP object to DATE\n\n        */\n        ps = conn.prepareStatement(\"INSERT INTO t VALUES(3, ?)\");\n\n        ps.setTimestamp(1, java.sql.Timestamp.valueOf(\"2008-10-27 0:00:00\"));\n        ps.execute();\n        ps.close();\n\n        rs = st.executeQuery(\"SELECT d FROM t\");\n\n        rs.next();"
           }

       },

       {
           "id": "clone_766",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "2032",
               "end_line": "2045",
               "source_code": "                break;\n\n            case FUNC_CURRENT_CATALOG :\n            case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :\n            case FUNC_CURRENT_PATH :\n            case FUNC_CURRENT_ROLE :\n            case FUNC_CURRENT_SCHEMA :\n            case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :\n            case FUNC_CURRENT_USER :\n            case FUNC_SESSION_USER :\n            case FUNC_SYSTEM_USER :\n            case FUNC_USER :\n            case FUNC_CURRENT_DATE :\n            case FUNC_VALUE :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "571",
               "end_line": "584",
               "source_code": "                break;\n\n            case FUNC_ADD_MONTHS :\n            case FUNC_ATAN2 :\n            case FUNC_CONCAT :\n            case FUNC_CRYPT_KEY :\n            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :\n            case FUNC_DIFFERENCE :\n            case FUNC_FROM_TZ :\n            case FUNC_LEFT :\n            case FUNC_MONTHS_BETWEEN :"
           }

       },

       {
           "id": "clone_767",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7505",
               "end_line": "7535",
               "source_code": "        Table t = sysTables[UDT_PRIVILEGES];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[UDT_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[UDT_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4\n            }, false);\n\n            return t;\n        }\n\n        final int grantor        = 0;\n        final int grantee        = 1;\n        final int udt_catalog    = 2;\n        final int udt_schema     = 3;\n        final int udt_name       = 4;\n        final int privilege_type = 5;\n        final int is_grantable   = 6;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "536",
               "end_line": "567",
               "source_code": "        Table t = sysTables[SYSTEM_COLUMN_SEQUENCE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(\n                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE]);\n\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);    //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4\n            }, false);\n\n            return t;\n        }\n\n        final int table_cat        = 0;\n        final int table_schem      = 1;\n        final int table_name       = 2;\n        final int column_name      = 3;\n        final int sequence_catalog = 4;\n        final int sequence_schema  = 5;\n        final int sequence_name    = 6;"
           }

       },

       {
           "id": "clone_768",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBatchExecution.java",
               "start_line": "389",
               "end_line": "401",
               "source_code": "            System.out.println(\"con=\" + con);\n\n            Statement stmt = con.createStatement();\n\n            try {\n                stmt.executeUpdate(\"drop table node\");\n            } catch (Exception e) {}\n\n            stmt.executeUpdate(\n                \"create table Node (id varbinary(255) not null, name varchar(255), primary key (id))\");\n\n            PreparedStatement prep = con.prepareStatement(\n                \"insert into Node (name, id) values (?, ?)\");"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "335",
               "end_line": "346",
               "source_code": "            System.out.println(\"con=\" + con);\n\n            Statement stmt = con.createStatement();\n\n            try {\n                stmt.executeUpdate(\"drop table ttt\");\n            } catch (Exception e) {}\n\n            stmt.executeUpdate(\"create table ttt (id integer)\");\n\n            PreparedStatement prep =\n                con.prepareStatement(\"INSERT INTO ttt (id) VALUES (?)\");"
           }

       },

       {
           "id": "clone_769",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2320",
               "end_line": "2340",
               "source_code": "        DITableInfo ti;\n\n        // column number mappings\n        // JDBC 1\n        final int itable_cat   = 0;\n        final int itable_schem = 1;\n        final int itable_name  = 2;\n        final int itable_type  = 3;\n        final int iremark      = 4;\n\n        // JDBC 3.0\n        final int itype_cat   = 5;\n        final int itype_schem = 6;\n        final int itype_name  = 7;\n        final int isref_cname = 8;\n        final int iref_gen    = 9;\n\n        // hsqldb ext\n        final int ihsqldb_type   = 10;\n        final int iread_only     = 11;\n        final int icommit_action = 12;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "891",
               "end_line": "906",
               "source_code": "        DITableInfo ti;\n\n        // column number mappings\n        final int itable_cat         = 0;\n        final int itable_schem       = 1;\n        final int itable_name        = 2;\n        final int icolumn_name       = 3;\n        final int idata_type         = 4;\n        final int itype_name         = 5;\n        final int icolumn_size       = 6;\n        final int ibuffer_length     = 7;\n        final int idecimal_digits    = 8;\n        final int inum_prec_radix    = 9;\n        final int inullable          = 10;\n        final int iremark            = 11;\n        final int icolumn_def        = 12;"
           }

       },

       {
           "id": "clone_770",

           "clone_type": "type-2",

           "origin": {
               "file": "OdbcUtil.java",
               "start_line": "191",
               "end_line": "195",
               "source_code": "        odbcSeverityMap.put(ODBC_SEVERITY_WARNING, \"WARNING\");\n        odbcSeverityMap.put(ODBC_SEVERITY_NOTICE, \"NOTICE\");\n        odbcSeverityMap.put(ODBC_SEVERITY_DEBUG, \"DEBUG\");\n        odbcSeverityMap.put(ODBC_SEVERITY_INFO, \"INFO\");\n        odbcSeverityMap.put(ODBC_SEVERITY_LOG, \"LOG\");"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "821",
               "end_line": "828",
               "source_code": "        tipMap.put(boxAutoCommit,\n                   \"Shows current Auto-commit mode.  Click to change\");\n        tipMap.put(\n            boxLogging,\n            \"Shows current JDBC DriverManager logging mode.  Click to change\");\n        tipMap.put(boxShowSys, \"Show system tables in table tree to the left\");\n        tipMap.put(boxShowGrid, \"Show query results in grid (in text if off)\");\n        tipMap.put(boxRowCounts, \"Show row counts with table names in tree\");"
           }

       },

       {
           "id": "clone_771",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "1432",
               "end_line": "1441",
               "source_code": "                case SchemaObject.TRIGGER :\n                    set        = schema.indexLookup;\n                    objectName = set.getName(name);\n\n                    if (objectName == null) {\n                        return null;\n                    }\n\n                    table =\n                        (Table) schema.tableList.get(objectName.parent.name);"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "1415",
               "end_line": "1424",
               "source_code": "                case SchemaObject.CONSTRAINT :\n                    set        = schema.constraintLookup;\n                    objectName = set.getName(name);\n\n                    if (objectName == null) {\n                        return null;\n                    }\n\n                    table =\n                        (Table) schema.tableList.get(objectName.parent.name);"
           }

       },

       {
           "id": "clone_772",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "669",
               "end_line": "679",
               "source_code": "                break;\n\n            case FUNC_POSITION_ARRAY :\n                parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.IN,\n                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.FROM,\n                    Tokens.QUESTION, Tokens.CLOSEBRACKET\n                };\n                break;\n\n            case FUNC_SORT_ARRAY :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "606",
               "end_line": "616",
               "source_code": "                break;\n\n            case FUNC_DATEDIFF :\n                parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.CLOSEBRACKET\n                };\n                break;\n\n            case FUNC_DATE_ADD :"
           }

       },

       {
           "id": "clone_773",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "151",
               "end_line": "160",
               "source_code": "        if (DriverName.length() == 0 || DBUrl.length() == 0) {\n            System.out.println(\n                \"usage: java TestBench -driver [driver_class_name] -url [url_to_db] -user [username] -password [password] [-v] [-init] [-tpc n] [-clients n]\");\n            System.out.println();\n            System.out.println(\"-v          verbose error messages\");\n            System.out.println(\"-init       initialize the tables\");\n            System.out.println(\"-tpc        transactions per client\");\n            System.out.println(\"-clients    number of simultaneous clients\");\n            System.exit(-1);\n        }"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "143",
               "end_line": "152",
               "source_code": "        if (DriverName.length() == 0 || DBUrl.length() == 0) {\n            System.out.println(\n                \"usage: java JDBCBench -driver [driver_class_name] -url [url_to_db] -user [username] -password [password] [-v] [-init] [-tpc n] [-clients n]\");\n            System.out.println();\n            System.out.println(\"-v          verbose error messages\");\n            System.out.println(\"-init       initialize the tables\");\n            System.out.println(\"-tpc        transactions per client\");\n            System.out.println(\"-clients    number of simultaneous clients\");\n            System.exit(-1);\n        }"
           }

       },

       {
           "id": "clone_774",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "906",
               "end_line": "910",
               "source_code": "                    read();\n                    readThis(Tokens.NULL);\n                    readThis(Tokens.ON);\n                    readThis(Tokens.NULL);\n                    readThis(Tokens.INPUT);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2718",
               "end_line": "2722",
               "source_code": "                    read();\n                    readThis(Tokens.CLOSEBRACKET);\n                    readThis(Tokens.OVER);\n                    readThis(Tokens.OPENBRACKET);\n                    readThis(Tokens.CLOSEBRACKET);"
           }

       },

       {
           "id": "clone_775",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1235",
               "end_line": "1259",
               "source_code": "            case Types.SQL_INTERVAL_HOUR :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_HOUR;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_HOUR_TO_MINUTE;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_MINUTE;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                if (precision == DTIType.defaultIntervalPrecision\n                        && fractionPrecision\n                           == DTIType.defaultIntervalFractionPrecision) {\n                    return SQL_INTERVAL_HOUR_TO_SECOND;\n                }\n                break;"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1209",
               "end_line": "1233",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_DAY;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_DAY_TO_HOUR;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                if (precision == DTIType.defaultIntervalPrecision) {\n                    return SQL_INTERVAL_DAY_TO_MINUTE;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                if (precision == DTIType.defaultIntervalPrecision\n                        && fractionPrecision\n                           == DTIType.defaultIntervalFractionPrecision) {\n                    return SQL_INTERVAL_DAY_TO_SECOND;\n                }\n                break;"
           }

       },

       {
           "id": "clone_776",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "202",
               "end_line": "250",
               "source_code": "                break;\n\n            case StatementTypes.CREATE_VIEW :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 5;\n                break;\n\n            case StatementTypes.CREATE_USER :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_ASSERTION :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 9;\n                break;\n\n            case StatementTypes.CREATE_CHARACTER_SET :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_COLLATION :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_DOMAIN :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_ALIAS :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 8;\n                break;\n\n            case StatementTypes.CREATE_INDEX :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                order = 4;\n                break;\n\n            case StatementTypes.COMMENT :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                order = 11;\n                break;\n\n            case StatementTypes.CHECK :\n                group           = StatementTypes.X_SQL_SCHEMA_MANIPULATION;"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "152",
               "end_line": "200",
               "source_code": "                break;\n\n            case StatementTypes.CREATE_ROLE :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_ROUTINE :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 7;\n                break;\n\n            case StatementTypes.CREATE_SEQUENCE :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_TABLE :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 2;\n                break;\n\n            case StatementTypes.CREATE_TRANSFORM :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_TRANSLATION :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_TRIGGER :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 7;\n                break;\n\n            case StatementTypes.CREATE_CAST :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 2;\n                break;\n\n            case StatementTypes.CREATE_TYPE :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                order = 1;\n                break;\n\n            case StatementTypes.CREATE_ORDERING :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;"
           }

       },

       {
           "id": "clone_777",

           "clone_type": "type-2",

           "origin": {
               "file": "TriggerSample.java",
               "start_line": "286",
               "end_line": "293",
               "source_code": "            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW :"
           },

           "clone": {
               "file": "TriggerSample.java",
               "start_line": "258",
               "end_line": "265",
               "source_code": "            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :"
           }

       },

       {
           "id": "clone_778",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1227",
               "end_line": "1237",
               "source_code": "                case Tokens.COMMA :\n                    if (start) {\n                        throw unexpectedToken();\n                    }\n\n                    read();\n\n                    start = true;\n                    break;\n\n                case Tokens.SQLSTATE :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "1006",
               "end_line": "1016",
               "source_code": "                case Tokens.COMMA :\n                    if (startPart) {\n                        throw unexpectedToken();\n                    }\n\n                    read();\n\n                    startPart = true;\n                    break;\n\n                case Tokens.CLOSEBRACKET :"
           }

       },

       {
           "id": "clone_779",

           "clone_type": "type-2",

           "origin": {
               "file": "Schema.java",
               "start_line": "335",
               "end_line": "352",
               "source_code": "            case SchemaObject.SPECIFIC_ROUTINE :\n                return specificRoutineLookup.map.values().iterator();\n\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n                return typeLookup.map.values().iterator();\n\n            case SchemaObject.ASSERTION :\n                return assertionLookup.map.values().iterator();\n\n            case SchemaObject.TRIGGER :\n                return triggerLookup.map.values().iterator();\n\n            case SchemaObject.INDEX :\n                return indexLookup.map.values().iterator();\n\n            case SchemaObject.CONSTRAINT :\n                return constraintLookup.map.values().iterator();"
           },

           "clone": {
               "file": "Schema.java",
               "start_line": "310",
               "end_line": "327",
               "source_code": "            case SchemaObject.SEQUENCE :\n                return sequenceLookup.map.values().iterator();\n\n            case SchemaObject.TABLE :\n            case SchemaObject.VIEW :\n                return tableLookup.map.values().iterator();\n\n            case SchemaObject.CHARSET :\n                return charsetLookup.map.values().iterator();\n\n            case SchemaObject.COLLATION :\n                return collationLookup.map.values().iterator();\n\n            case SchemaObject.PROCEDURE :\n                return procedureLookup.map.values().iterator();\n\n            case SchemaObject.FUNCTION :\n                return functionLookup.map.values().iterator();"
           }

       },

       {
           "id": "clone_780",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlTool.java",
               "start_line": "304",
               "end_line": "309",
               "source_code": "        boolean noinput          = false;\n        boolean noautoFile       = false;\n        boolean autoCommit       = false;\n        Boolean coeOverride      = null;\n        Boolean stdinputOverride = null;\n        String  rcParams         = null;"
           },

           "clone": {
               "file": "TestDataStructures.java",
               "start_line": "88",
               "end_line": "93",
               "source_code": "        boolean       arrayListException = false;\n        boolean       dequeException     = false;\n        boolean       vectorException    = false;\n        Object        arrayListObject    = null;\n        Object        linkedListObject   = null;\n        Object        vectorObject       = null;"
           }

       },

       {
           "id": "clone_781",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "639",
               "end_line": "645",
               "source_code": "            case FUNC_UNIX_MILLIS :\n            case FUNC_UNIX_TIMESTAMP :\n            case FUNC_UUID :\n                parseList = optionalSingleParamList;\n                break;\n\n            case FUNC_EXTRACT :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "622",
               "end_line": "628",
               "source_code": "            case FUNC_NEW_TIME :\n            case FUNC_SEQUENCE_ARRAY :\n            case FUNC_TRANSLATE :\n                parseList = tripleParamList;\n                break;\n\n            case FUNC_REPLACE :"
           }

       },

       {
           "id": "clone_782",

           "clone_type": "type-2",

           "origin": {
               "file": "Preprocessor.java",
               "start_line": "524",
               "end_line": "539",
               "source_code": "            case LineType.ELIF : {\n                processElseIf(this.defines.evaluate(line.getArguments()));\n\n                break;\n            }\n            case LineType.ELIFDEF : {\n                processElseIf(this.defines.isDefined(line.getArguments()));\n\n                break;\n            }\n            case LineType.ELIFNDEF : {\n                processElseIf(!this.defines.isDefined(line.getArguments()));\n\n                break;\n            }\n            case LineType.ELSE :"
           },

           "clone": {
               "file": "Preprocessor.java",
               "start_line": "509",
               "end_line": "524",
               "source_code": "            case LineType.IF : {\n                processIf(this.defines.evaluate(line.getArguments()));\n\n                break;\n            }\n            case LineType.IFDEF : {\n                processIf(this.defines.isDefined(line.getArguments()));\n\n                break;\n            }\n            case LineType.IFNDEF : {\n                processIf(!this.defines.isDefined(line.getArguments()));\n\n                break;\n            }\n            case LineType.ELIF :"
           }

       },

       {
           "id": "clone_783",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCCallableStatement.java",
               "start_line": "1147",
               "end_line": "1193",
               "source_code": "    /**\n     * <!-- start generic documentation -->\n     *\n     * Retrieves the value of the designated JDBC <code>CLOB</code> parameter as a\n     * <code>java.sql.Clob</code> object in the Java programming language.\n     *\n     * <!-- end generic documentation -->\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports this feature. <p>\n     *\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, and\n     * so on\n     * @return the parameter value as a <code>Clob</code> object in the\n     * Java programming language.  If the value was SQL <code>NULL</code>, the\n     * value <code>null</code> is returned.\n     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for\n     *  JDBCParameterMetaData)\n     */\n    public synchronized Clob getClob(int parameterIndex) throws SQLException {\n\n        checkGetParameterIndex(parameterIndex);\n\n        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];\n        Object o          = getColumnInType(parameterIndex, sourceType);\n\n        if (o == null) {\n            return null;\n        }\n\n        if (o instanceof ClobDataID) {\n            return new JDBCClobClient(session, (ClobDataID) o);\n        }\n\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n    }"
           },

           "clone": {
               "file": "JDBCCallableStatement.java",
               "start_line": "1100",
               "end_line": "1145",
               "source_code": "    /**\n     * <!-- start generic documentation -->\n     *\n     * Retrieves the value of the designated JDBC <code>BLOB</code> parameter as a\n     * {@link java.sql.Blob} object in the Java programming language.\n     *\n     * <!-- end generic documentation -->\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports this feature. <p>\n     *\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, and so on\n     * @return the parameter value as a <code>Blob</code> object in the\n     * Java programming language.  If the value was SQL <code>NULL</code>, the value\n     * <code>null</code> is returned.\n     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for\n     *  JDBCParameterMetaData)\n     */\n    public synchronized Blob getBlob(int parameterIndex) throws SQLException {\n\n        checkGetParameterIndex(parameterIndex);\n\n        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];\n        Object o          = getColumnInType(parameterIndex, sourceType);\n\n        if (o == null) {\n            return null;\n        }\n\n        if (o instanceof BlobDataID) {\n            return new JDBCBlobClient(session, (BlobDataID) o);\n        }\n\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n    }"
           }

       },

       {
           "id": "clone_784",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAcl.java",
               "start_line": "206",
               "end_line": "239",
               "source_code": "        pw.println(\"deny 127.0.0.1/32\");\n        pw.println(\"allow 0.0.0.0/0\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclDenyLocalhosts = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclDenyLocalhosts.length; i++) {\n                aclDenyLocalhosts[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclPermitAll1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Permit all test ACL\n\");\n        pw.println(\"permit 0.0.0.0/0\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclPermitAlls = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclPermitAlls.length; i++) {\n                aclPermitAlls[i].setPrintWriter(new PrintWriter(System.out));\n            }\n        }"
           },

           "clone": {
               "file": "TestAcl.java",
               "start_line": "138",
               "end_line": "172",
               "source_code": "        pw.println(\"# Permit Localhost test ACL\n\");\n        pw.println(\"permit 127.0.0.1/32\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclPermitLocalhosts = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclPermitLocalhosts.length; i++) {\n                aclPermitLocalhosts[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclPermitLocalNet1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Permit Local Net test ACL\n\");\n        pw.println(\"permit 127.0.0.0/24\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclPermitLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclPermitLocalNets.length; i++) {\n                aclPermitLocalNets[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }"
           }

       },

       {
           "id": "clone_785",

           "clone_type": "type-2",

           "origin": {
               "file": "RowAction.java",
               "start_line": "730",
               "end_line": "744",
               "source_code": "        if (head == null) {\n            switch (commitType) {\n\n                case ACTION_DELETE :\n                case ACTION_INSERT_DELETE :\n                    setAsDeleteFinal(timestamp);\n                    break;\n\n                case ACTION_NONE :\n                case ACTION_INSERT :\n                default :\n                    setAsNoOp();\n                    break;\n            }\n        }"
           },

           "clone": {
               "file": "RowAction.java",
               "start_line": "654",
               "end_line": "668",
               "source_code": "        if (head == null) {\n            switch (rollbackAction) {\n\n                case ACTION_INSERT :\n                case ACTION_INSERT_DELETE :\n                    setAsDeleteFinal(timestamp);\n                    break;\n\n                case ACTION_DELETE :\n                case ACTION_NONE :\n                default :\n                    setAsNoOp();\n                    break;\n            }\n        }"
           }

       },

       {
           "id": "clone_786",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "616",
               "end_line": "624",
               "source_code": "            case FUNC_DATE_ADD :\n            case FUNC_DATE_SUB :\n                parseList = doubleParamList;\n                break;\n\n            case FUNC_DATEADD :\n            case FUNC_NEW_TIME :\n            case FUNC_SEQUENCE_ARRAY :\n            case FUNC_TRANSLATE :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "592",
               "end_line": "600",
               "source_code": "            case FUNC_RIGHT :\n            case FUNC_TO_CHAR :\n                parseList = doubleParamList;\n                break;\n\n            case FUNC_LOAD_FILE :\n            case FUNC_ROUND :\n            case FUNC_TIMESTAMP :\n            case FUNC_TO_DATE :"
           }

       },

       {
           "id": "clone_787",

           "clone_type": "type-2",

           "origin": {
               "file": "SetFunction.java",
               "start_line": "510",
               "end_line": "518",
               "source_code": "                    case Types.SQL_SMALLINT :\n                    case Types.SQL_INTEGER :\n                        return Type.SQL_BIGINT;\n\n                    case Types.SQL_BIGINT :\n                        return Type.SQL_DECIMAL_BIGINT_SQR;\n\n                    case Types.SQL_REAL :\n                    case Types.SQL_FLOAT :"
           },

           "clone": {
               "file": "ExpressionArithmetic.java",
               "start_line": "590",
               "end_line": "598",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                return Type.SQL_VARBINARY_DEFAULT;\n\n            case Types.SQL_BLOB :\n                return Type.SQL_BLOB;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :"
           }

       },

       {
           "id": "clone_788",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8221",
               "end_line": "8237",
               "source_code": "                HsqlName refName = (HsqlName) set.get(i);\n\n                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {\n                    continue;\n                }\n\n                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[view_catalog]     = database.getCatalogName().name;\n                row[view_schema]      = table.getSchemaName().name;\n                row[view_name]        = table.getName().name;\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = refName.schema.name;\n                row[specific_name]    = refName.name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1869",
               "end_line": "1885",
               "source_code": "                HsqlName name = (HsqlName) references.get(i);\n\n                if (name.type != SchemaObject.SPECIFIC_ROUTINE) {\n                    continue;\n                }\n\n                if (!session.getGrantee().isFullyAccessibleByRole(name)) {\n                    continue;\n                }\n\n                row                     = t.getEmptyRowData();\n                row[constraint_catalog] = database.getCatalogName().name;\n                row[constraint_schema]  = constraint.getSchemaName().name;\n                row[constraint_name]    = constraint.getName().name;\n                row[specific_catalog]   = database.getCatalogName().name;\n                row[specific_schema]    = name.schema.name;\n                row[specific_name]      = name.name;"
           }

       },

       {
           "id": "clone_789",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "851",
               "end_line": "878",
               "source_code": "            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);                 // not null\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);          // 18\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);           // 19\n            addColumn(t, \"SCOPE_TABLE\", SQL_IDENTIFIER);            // 20\n            addColumn(t, \"SOURCE_DATA_TYPE\", SQL_IDENTIFIER);       // 21\n\n            // ----------------------------------------------------------------\n            // JDBC 4.0 - added Mustang b86\n            // ----------------------------------------------------------------\n            addColumn(t, \"IS_AUTOINCREMENT\", YES_OR_NO);            // 22\n\n            // ----------------------------------------------------------------\n            // JDBC 4.1\n            // ----------------------------------------------------------------\n            addColumn(t, \"IS_GENERATEDCOLUMN\", YES_OR_NO);          // 23\n\n            // order: TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION\n            // added for unique: TABLE_CAT\n            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_COLUMNS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 16\n            }, false);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4281",
               "end_line": "4296",
               "source_code": "            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[PARAMETERS].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3\n            }, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_790",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5866",
               "end_line": "5912",
               "source_code": "        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_791",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5773",
               "end_line": "5821",
               "source_code": "            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_FROM_DECLARED_DATA_TYPE\",\n                      CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_DECLARED_NUMERIC_PRECISION\",\n                      CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_792",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2185",
               "end_line": "2191",
               "source_code": "                break;\n\n            case Tokens.MINUS :\n                read();\n\n                minus = true;\n                break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3504",
               "end_line": "3510",
               "source_code": "                    break;\n\n                case Tokens.SEMICOLON :\n                    read();\n\n                    end = true;\n                    break;"
           }

       },

       {
           "id": "clone_793",

           "clone_type": "type-2",

           "origin": {
               "file": "RowStoreAVLMemory.java",
               "start_line": "149",
               "end_line": "156",
               "source_code": "            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELETE\n                break;\n\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3619",
               "end_line": "3624",
               "source_code": "            case SchemaObject.CATALOG :\n                break;\n\n            case SchemaObject.SCHEMA :\n                checkSchemaUpdateAuthorisation(session, name);\n                break;"
           }

       },

       {
           "id": "clone_794",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "144",
               "end_line": "151",
               "source_code": "                nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);\n                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP,\n                        e.dataType.scale);\n                break;\n\n            case Types.SQL_TIME :\n                nodes                = new Expression[BINARY];"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "136",
               "end_line": "143",
               "source_code": "                nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);\n                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(Types.SQL_TIME,\n                        e.dataType.scale);\n                break;\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                nodes                = new Expression[UNARY];"
           }

       },

       {
           "id": "clone_795",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBatchExecution.java",
               "start_line": "182",
               "end_line": "205",
               "source_code": "        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");\n\n        // get the connection and statement\n        conn  = DriverManager.getConnection(url, \"SA\", \"\");\n        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");\n        println(\"featuring temp (transient) table\");\n        println(\"***************************************\");\n\n        // drop and recreate the test table\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(create_temp + table_sql);\n        stmnt.execute(create_temp + table_sql);\n        preparedTestOne(runs);\n\n        // drop the test table\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "158",
               "end_line": "181",
               "source_code": "        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");\n\n        // get the connection and statement\n        conn  = DriverManager.getConnection(url, \"SA\", \"\");\n        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");\n        println(\"featuring memory (persistent) table\");\n        println(\"***************************************\");\n\n        // drop and recreate the test table\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(create_memory + table_sql);\n        stmnt.execute(create_memory + table_sql);\n        preparedTestOne(runs);\n\n        // drop the test table and shut down database\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");"
           }

       },

       {
           "id": "clone_796",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "375",
               "end_line": "386",
               "source_code": "                s += 12;\n                break;\n\n            case Types.SQL_TIMESTAMP :\n                s += 12;\n                break;\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                s += 16;\n                break;\n\n            case Types.SQL_INTERVAL_YEAR :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "363",
               "end_line": "374",
               "source_code": "                s += 1;\n                break;\n\n            case Types.SQL_DATE :\n                s += 8;\n                break;\n\n            case Types.SQL_TIME :\n                s += 8;\n                break;\n\n            case Types.SQL_TIME_WITH_TIME_ZONE :"
           }

       },

       {
           "id": "clone_797",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcService.java",
               "start_line": "381",
               "end_line": "390",
               "source_code": "        // Would be more elegant and efficient to use a prepared statement\n        // here, but our we want this setup to be as simple as possible, and\n        // leave feature testing for the actual unit tests.\n        st.executeUpdate(\"INSERT INTO nullmix (i, vc) values(10, 'ten')\");\n        st.executeUpdate(\"INSERT INTO nullmix (i, vc) values(5, 'five')\");\n        st.executeUpdate(\"INSERT INTO nullmix (i, vc) values(15, 'fifteen')\");\n        st.executeUpdate(\n                \"INSERT INTO nullmix (i, vc) values(21, 'twenty one')\");\n        st.executeUpdate(\"INSERT INTO nullmix (i, vc) values(40, 'forty')\");\n        st.executeUpdate(\"INSERT INTO nullmix (i) values(25)\");"
           },

           "clone": {
               "file": "TestDima.java",
               "start_line": "74",
               "end_line": "83",
               "source_code": "            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 2')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 2')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 2')\");\n            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 3')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 3')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 3')\");"
           }

       },

       {
           "id": "clone_798",

           "clone_type": "type-2",

           "origin": {
               "file": "RangeVariable.java",
               "start_line": "145",
               "end_line": "150",
               "source_code": "            case TRANSITION_RANGE :\n            case PARAMETER_RANGE :\n            case VARIALBE_RANGE :\n                break;\n\n            default :"
           },

           "clone": {
               "file": "JDBCConnection.java",
               "start_line": "1407",
               "end_line": "1411",
               "source_code": "            case TRANSACTION_READ_COMMITTED :\n            case TRANSACTION_REPEATABLE_READ :\n            case TRANSACTION_SERIALIZABLE :\n                break;\n            default :"
           }

       },

       {
           "id": "clone_799",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5751",
               "end_line": "5797",
               "source_code": "            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_800",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2088",
               "end_line": "2110",
               "source_code": "        // column number mappings\n        final int icat       = 0;\n        final int ischem     = 1;\n        final int iname      = 2;\n        final int icol_name  = 3;\n        final int icol_type  = 4;\n        final int idata_type = 5;\n        final int itype_name = 6;\n        final int iprec      = 7;\n        final int ilength    = 8;\n        final int iscale     = 9;\n        final int iradix     = 10;\n        final int inullable  = 11;\n        final int iremark    = 12;\n\n        // JDBC 4.0\n        final int icol_default      = 13;\n        final int isql_data_type    = 14;\n        final int isql_datetime_sub = 15;\n        final int ichar_octet_len   = 16;\n        final int iordinal_position = 17;\n        final int iis_nullable      = 18;\n        final int ispecific_name    = 19;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1653",
               "end_line": "1673",
               "source_code": "        // column number mappings\n        final int specific_cat            = 0;\n        final int specific_schem          = 1;\n        final int procedure_name          = 2;\n        final int parameter_name          = 3;\n        final int parameter_mode          = 4;\n        final int data_type_sql_id        = 5;\n        final int data_type               = 6;\n        final int numeric_precision       = 7;\n        final int byte_length             = 8;\n        final int numeric_scale           = 9;\n        final int numeric_precision_radix = 10;\n        final int nullable                = 11;\n        final int remark                  = 12;\n        final int default_val             = 13;\n        final int sql_data_type           = 14;\n        final int sql_datetime_sub        = 15;\n        final int character_octet_length  = 16;\n        final int ordinal_position        = 17;\n        final int is_nullable             = 18;\n        final int specific_name           = 19;"
           }

       },

       {
           "id": "clone_801",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1312",
               "end_line": "1317",
               "source_code": "                calendarPart = Calendar.MONTH;\n                break;\n\n            case DAY_OF_YEAR :\n                calendarPart = Calendar.DAY_OF_YEAR;\n                break;"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "1275",
               "end_line": "1280",
               "source_code": "                calendarPart = Calendar.DAY_OF_WEEK;\n                break;\n\n            case WEEK_OF_YEAR :\n                calendarPart = Calendar.WEEK_OF_YEAR;\n                break;"
           }

       },

       {
           "id": "clone_802",

           "clone_type": "type-2",

           "origin": {
               "file": "Type.java",
               "start_line": "1160",
               "end_line": "1169",
               "source_code": "        typeAliases.put(Tokens.T_CHAR, Types.SQL_CHAR);\n        typeAliases.put(Tokens.T_INT, Types.SQL_INTEGER);\n        typeAliases.put(Tokens.T_DEC, Types.SQL_DECIMAL);\n        typeAliases.put(Tokens.T_LONGVARCHAR, Types.LONGVARCHAR);\n        typeAliases.put(Tokens.T_DATETIME, Types.SQL_TIMESTAMP);\n        typeAliases.put(Tokens.T_LONGVARBINARY, Types.LONGVARBINARY);\n        typeAliases.put(Tokens.T_OBJECT, Types.OTHER);\n\n        //\n        jdbcConvertTypes = new IntKeyHashMap(37);"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1149",
               "end_line": "1158",
               "source_code": "        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);\n        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);\n        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);\n        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);\n        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);\n        typeNames.put(Tokens.T_BIT, Types.SQL_BIT);\n        typeNames.put(Tokens.T_OTHER, Types.OTHER);\n\n        //\n        typeAliases = new IntValueHashMap(64);"
           }

       },

       {
           "id": "clone_803",

           "clone_type": "type-2",

           "origin": {
               "file": "ScriptWriterText.java",
               "start_line": "102",
               "end_line": "106",
               "source_code": "            BYTES_SEQUENCE     = \"ALTER SEQUENCE \".getBytes(ISO_8859_1);\n            BYTES_SEQUENCE_MID = \" RESTART WITH \".getBytes(ISO_8859_1);\n            BYTES_C_ID_INIT    = \"/*C\".getBytes(ISO_8859_1);\n            BYTES_C_ID_TERM    = \"*/\".getBytes(ISO_8859_1);\n            BYTES_SCHEMA       = \"SET SCHEMA \".getBytes(ISO_8859_1);"
           },

           "clone": {
               "file": "ScriptWriterText.java",
               "start_line": "97",
               "end_line": "101",
               "source_code": "            BYTES_INSERT_INTO  = \"INSERT INTO \".getBytes(ISO_8859_1);\n            BYTES_VALUES       = \" VALUES(\".getBytes(ISO_8859_1);\n            BYTES_TERM         = \")\".getBytes(ISO_8859_1);\n            BYTES_DELETE_FROM  = \"DELETE FROM \".getBytes(ISO_8859_1);\n            BYTES_WHERE        = \" WHERE \".getBytes(ISO_8859_1);"
           }

       },

       {
           "id": "clone_804",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "591",
               "end_line": "601",
               "source_code": "            case Types.SQL_VARBINARY :\n                return Type.SQL_VARBINARY_DEFAULT;\n\n            case Types.SQL_BLOB :\n                return Type.SQL_BLOB;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n                return Type.SQL_BIT_VARYING_MAX_LENGTH;\n\n            case Types.SQL_ARRAY :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "990",
               "end_line": "1000",
               "source_code": "            case Types.SQL_BINARY :\n                return Types.BINARY;\n\n            case Types.SQL_VARBINARY :\n                return Types.VARBINARY;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n                return Types.BIT;\n\n            case Types.SQL_ARRAY :"
           }

       },

       {
           "id": "clone_805",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "569",
               "end_line": "573",
               "source_code": "        execSQL(\"DROP xINDEX bdropind\", expect);\n        execSQL(\"xDROP TABLE adroptbl\", expect);\n        execSQL(\"DROP xTABLE bdroptbl\", expect);\n        execSQL(\"xDROP SEQUENCE adropseq\", expect);\n        execSQL(\"DROP xSEQUENCE bdropseq\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "564",
               "end_line": "568",
               "source_code": "        execSQL(\"xDROP VIEW adropview\", expect);\n        execSQL(\"DROP xVIEW bdropview\", expect);\n        execSQL(\"xDROP TRIGGER adroptrig\", expect);\n        execSQL(\"DROP xTRIGGER bdroptrig\", expect);\n        execSQL(\"xDROP INDEX adropind\", expect);"
           }

       },

       {
           "id": "clone_806",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1748",
               "end_line": "1755",
               "source_code": "        cal.add(Calendar.MONTH, 1);\n\n        millis = cal.getTimeInMillis();\n\n        cal.add(Calendar.DAY_OF_MONTH, -1);\n\n        millis   = cal.getTimeInMillis();\n        lastDay2 = cal.get(Calendar.DAY_OF_MONTH);"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "1729",
               "end_line": "1736",
               "source_code": "        cal.add(Calendar.MONTH, 1);\n\n        millis = cal.getTimeInMillis();\n\n        cal.add(Calendar.DAY_OF_MONTH, -1);\n\n        millis   = cal.getTimeInMillis();\n        lastDay1 = cal.get(Calendar.DAY_OF_MONTH);"
           }

       },

       {
           "id": "clone_807",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3050",
               "end_line": "3070",
               "source_code": "                case Tokens.ASTERISK :\n                    type  = OpTypes.MULTIPLY;\n                    boole = false;\n                    break;\n\n                case Tokens.DIVIDE :\n                    type  = OpTypes.DIVIDE;\n                    boole = false;\n                    break;\n\n                case Tokens.AND :\n                    if (boole) {\n                        type = OpTypes.AND;\n\n                        break;\n                    }\n\n                // fall through\n                default :\n                    end = true;\n                    break;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3002",
               "end_line": "3022",
               "source_code": "                case Tokens.MINUS :\n                    type  = OpTypes.SUBTRACT;\n                    boole = false;\n                    break;\n\n                case Tokens.CONCAT :\n                    type  = OpTypes.CONCAT;\n                    boole = false;\n                    break;\n\n                case Tokens.OR :\n                    if (boole) {\n                        type = OpTypes.OR;\n\n                        break;\n                    }\n\n                // fall through\n                default :\n                    end = true;\n                    break;"
           }

       },

       {
           "id": "clone_808",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "835",
               "end_line": "840",
               "source_code": "        boxLogging.setMnemonic(KeyEvent.VK_L);\n        rbAllSchemas.setMnemonic(KeyEvent.VK_ASTERISK);\n        rbNativeLF.setMnemonic(KeyEvent.VK_N);\n        rbJavaLF.setMnemonic(KeyEvent.VK_J);\n        rbMotifLF.setMnemonic(KeyEvent.VK_M);\n        mitemUpdateSchemas.setMnemonic(KeyEvent.VK_U);"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "829",
               "end_line": "834",
               "source_code": "        boxAutoRefresh.setMnemonic(KeyEvent.VK_C);\n        boxShowSchemas.setMnemonic(KeyEvent.VK_Y);\n        boxAutoCommit.setMnemonic(KeyEvent.VK_A);\n        boxShowSys.setMnemonic(KeyEvent.VK_Y);\n        boxShowGrid.setMnemonic(KeyEvent.VK_G);\n        boxRowCounts.setMnemonic(KeyEvent.VK_C);"
           }

       },

       {
           "id": "clone_809",

           "clone_type": "type-2",

           "origin": {
               "file": "QueryExpression.java",
               "start_line": "789",
               "end_line": "796",
               "source_code": "                break;\n\n            case EXCEPT :\n                temp = Tokens.T_EXCEPT;\n                break;\n\n            case EXCEPT_ALL :\n                temp = Tokens.T_EXCEPT + ' ' + Tokens.T_ALL;"
           },

           "clone": {
               "file": "QueryExpression.java",
               "start_line": "781",
               "end_line": "788",
               "source_code": "                break;\n\n            case INTERSECT :\n                temp = Tokens.T_INTERSECT;\n                break;\n\n            case INTERSECT_ALL :\n                temp = Tokens.T_INTERSECT + ' ' + Tokens.T_ALL;"
           }

       },

       {
           "id": "clone_810",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCStatement.java",
               "start_line": "750",
               "end_line": "755",
               "source_code": "            case JDBCResultSet.FETCH_REVERSE :\n            case JDBCResultSet.FETCH_UNKNOWN :\n                fetchDirection = direction;\n\n                break;\n            default :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "124",
               "end_line": "129",
               "source_code": "            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                typeWidth = DECIMAL_WIDTH;\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_811",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1636",
               "end_line": "1641",
               "source_code": "                        case Tokens.REPEATABLE :\n                            read();\n                            readThis(Tokens.READ);\n\n                            level = SessionInterface.TX_REPEATABLE_READ;\n                            break;"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "463",
               "end_line": "468",
               "source_code": "                    case Tokens.READ :\n                        read();\n                        readThis(Tokens.COMMITTED);\n\n                        level = SessionInterface.TX_READ_COMMITTED;\n                        break;"
           }

       },

       {
           "id": "clone_812",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchemaDefinition.java",
               "start_line": "146",
               "end_line": "151",
               "source_code": "                    case StatementTypes.CREATE_CHARACTER_SET :\n                    case StatementTypes.CREATE_COLLATION :\n                        result = statements[i].execute(session);\n                        break;\n\n                    case StatementTypes.CREATE_INDEX :"
           },

           "clone": {
               "file": "StatementSchemaDefinition.java",
               "start_line": "110",
               "end_line": "115",
               "source_code": "                    case StatementTypes.GRANT :\n                    case StatementTypes.GRANT_ROLE :\n                        result = statements[i].execute(session);\n                        break;\n\n                    case StatementTypes.CREATE_TABLE :"
           }

       },

       {
           "id": "clone_813",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6832",
               "end_line": "6841",
               "source_code": "                if (!session.getGrantee().isAccessible(refName)) {\n                    continue;\n                }\n\n                row = t.getEmptyRowData();\n\n                //\n                row[trigger_catalog] = database.getCatalogName().name;\n                row[trigger_schema]  = trigger.getSchemaName().name;\n                row[trigger_name]    = trigger.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3673",
               "end_line": "3680",
               "source_code": "            if (!session.getGrantee().isAccessible(type)) {\n                continue;\n            }\n\n            row                             = t.getEmptyRowData();\n            row[object_catalog]             = database.getCatalogName().name;\n            row[object_schema]              = type.getSchemaName().name;\n            row[object_name]                = type.getName().name;"
           }

       },

       {
           "id": "clone_814",

           "clone_type": "type-2",

           "origin": {
               "file": "TestKarl.java",
               "start_line": "206",
               "end_line": "212",
               "source_code": "        p.execute();\n        p.close();\n        System.out.println(\"END INSERT INTO WAEHLER\");\n        System.out.println(\"DELETE FROM WAEHLER START ...\");\n\n        p = p_connection.prepareStatement(\n            \"DELETE FROM WAEHLER WHERE NAME = ?\");"
           },

           "clone": {
               "file": "TestKarl.java",
               "start_line": "194",
               "end_line": "200",
               "source_code": "        p.execute();\n        p.close();\n        System.out.println(\"END UPDATE WAEHLER\");\n        System.out.println(\"INSERT INTO WAEHLER START ...\");\n\n        p = p_connection.prepareStatement(\n            \"INSERT INTO WAEHLER (NAME, AUSTRITTSDATUM) VALUES (?,?)\");"
           }

       },

       {
           "id": "clone_815",

           "clone_type": "type-2",

           "origin": {
               "file": "Right.java",
               "start_line": "935",
               "end_line": "950",
               "source_code": "                break;\n\n            case GrantConstants.REFERENCES :\n                if (set == null) {\n                    isFullReferences = true;\n                }\n\n                referencesColumnSet = set;\n                break;\n\n            case GrantConstants.TRIGGER :\n                if (set == null) {\n                    isFullTrigger = true;\n                }\n\n                triggerColumnSet = set;"
           },

           "clone": {
               "file": "Right.java",
               "start_line": "919",
               "end_line": "934",
               "source_code": "                break;\n\n            case GrantConstants.INSERT :\n                if (set == null) {\n                    isFullInsert = true;\n                }\n\n                insertColumnSet = set;\n                break;\n\n            case GrantConstants.UPDATE :\n                if (set == null) {\n                    isFullUpdate = true;\n                }\n\n                updateColumnSet = set;"
           }

       },

       {
           "id": "clone_816",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "139",
               "end_line": "149",
               "source_code": "                break;\n\n            //\n            case StatementTypes.DYNAMIC_DELETE_CURSOR :\n                group = StatementTypes.X_SQL_DATA_CHANGE;\n                break;\n\n            case StatementTypes.DYNAMIC_CLOSE :\n            case StatementTypes.DYNAMIC_FETCH :\n            case StatementTypes.DYNAMIC_OPEN :\n                group = StatementTypes.X_SQL_DATA;"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "128",
               "end_line": "138",
               "source_code": "                break;\n\n            // cursor\n            case StatementTypes.ALLOCATE_CURSOR :\n                group = StatementTypes.X_SQL_DATA;\n                break;\n\n            case StatementTypes.ALLOCATE_DESCRIPTOR :\n            case StatementTypes.DEALLOCATE_DESCRIPTOR :\n            case StatementTypes.DEALLOCATE_PREPARE :\n                group = StatementTypes.X_SQL_DYNAMIC;"
           }

       },

       {
           "id": "clone_817",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5837",
               "end_line": "5883",
               "source_code": "        final int specific_schema                        = 1;\n        final int specific_name                          = 2;\n        final int routine_catalog                        = 3;\n        final int routine_schema                         = 4;\n        final int routine_name                           = 5;\n        final int routine_type                           = 6;\n        final int module_catalog                         = 7;\n        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_818",

           "clone_type": "type-2",

           "origin": {
               "file": "PgType.java",
               "start_line": "202",
               "end_line": "213",
               "source_code": "            case Types.SQL_BIT:\n                return bitSingleton;\n            case Types.SQL_BIT_VARYING:\n                return bitVaryingSingleton;\n                // I have no idea why length contstaint spec is not needed for\n                // BIT_VARYING.\n\n            case Types.SQL_DATE:\n                return dateSingleton;\n\n            // 4 bytes\n            case Types.SQL_TIME :"
           },

           "clone": {
               "file": "PgType.java",
               "start_line": "137",
               "end_line": "144",
               "source_code": "            case Types.SQL_SMALLINT:\n                return int2singleton;\n            case Types.SQL_INTEGER:\n                return int4singleton;\n            case Types.SQL_BIGINT:\n                return int8singleton;\n\n            case Types.SQL_NUMERIC:"
           }

       },

       {
           "id": "clone_819",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3593",
               "end_line": "3613",
               "source_code": "            case FUNC_ACOS :\n            case FUNC_ASCII :\n            case FUNC_ASIN :\n            case FUNC_ATAN :\n            case FUNC_CHAR :\n            case FUNC_COS :\n            case FUNC_COT :\n            case FUNC_DAYS :\n            case FUNC_DEGREES :\n            case FUNC_SIN :\n            case FUNC_TAN :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_ROUNDMAGIC :\n            case FUNC_SIGN :\n            case FUNC_SOUNDEX :\n            case FUNC_SPACE :\n            case FUNC_REVERSE :\n            case FUNC_HEXTORAW :\n            case FUNC_RAWTOHEX :\n            case FUNC_LOB_ID :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "573",
               "end_line": "593",
               "source_code": "            case FUNC_ADD_MONTHS :\n            case FUNC_ATAN2 :\n            case FUNC_CONCAT :\n            case FUNC_CRYPT_KEY :\n            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :\n            case FUNC_DIFFERENCE :\n            case FUNC_FROM_TZ :\n            case FUNC_LEFT :\n            case FUNC_MONTHS_BETWEEN :\n            case FUNC_NEXT_DAY :\n            case FUNC_NUMTODSINTERVAL :\n            case FUNC_NUMTOYMINTERVAL :\n            case FUNC_REGEXP_MATCHES :\n            case FUNC_REGEXP_SUBSTRING :\n            case FUNC_REGEXP_SUBSTRING_ARRAY :\n            case FUNC_REPEAT :\n            case FUNC_RIGHT :\n            case FUNC_TO_CHAR :"
           }

       },

       {
           "id": "clone_820",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5857",
               "end_line": "5903",
               "source_code": "        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_821",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8038",
               "end_line": "8058",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[VIEW_COLUMN_USAGE]);\n\n            addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[VIEW_COLUMN_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7396",
               "end_line": "7416",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TRIGGERED_UPDATE_COLUMNS]);\n\n            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);            // not null\n            addColumn(t, \"EVENT_OBJECT_CATALOG\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"EVENT_OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"EVENT_OBJECT_TABLE\", SQL_IDENTIFIER);\n            addColumn(t, \"EVENT_OBJECT_COLUMN\", SQL_IDENTIFIER);     // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TRIGGERED_UPDATE_COLUMNS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_822",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2685",
               "end_line": "2693",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[SYSTEM_UDTS]);\n\n            addColumn(t, \"TYPE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"CLASS_NAME\", CHARACTER_DATA);\n            addColumn(t, \"DATA_TYPE\", Type.SQL_INTEGER);\n            addColumn(t, \"REMARKS\", CHARACTER_DATA);\n            addColumn(t, \"BASE_TYPE\", Type.SQL_SMALLINT);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "832",
               "end_line": "840",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[SYSTEM_COLUMNS]);\n\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);              // 0\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);            // 1\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);             // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);            // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not null\n            addColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);          // 6"
           }

       },

       {
           "id": "clone_823",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4665",
               "end_line": "4675",
               "source_code": "        Session sys = database.sessionManager.newSysSession(\n            SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser());\n        Result rs = sys.executeDirectStatement(\n            \"SELECT GRANTOR, GRANTEE, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, PRIVILEGE_TYPE, IS_GRANTABLE \"\n            + \"FROM INFORMATION_SCHEMA.COLUMN_PRIVILEGES \"\n            + \"JOIN INFORMATION_SCHEMA.APPLICABLE_ROLES ON GRANTEE = ROLE_NAME;\");\n\n        t.insertSys(session, store, rs);\n        sys.close();\n\n        return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3067",
               "end_line": "3078",
               "source_code": "        //\n        Session sys = database.sessionManager.newSysSession(\n            SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser());\n        Result rs = sys.executeDirectStatement(\n            \"select DISTINCT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, \"\n            + \"CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME \"\n            + \"from INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE\");\n\n        t.insertSys(session, store, rs);\n        sys.close();\n\n        return t;"
           }

       },

       {
           "id": "clone_824",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "623",
               "end_line": "627",
               "source_code": "                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setString(3, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "553",
               "end_line": "557",
               "source_code": "                ps.setString(2, \"test-id-1\" + i);\n                ps.setLong(3, 23456789123456L + i);\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();"
           }

       },

       {
           "id": "clone_825",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1543",
               "end_line": "1569",
               "source_code": "                token.tokenString = Tokens.T_GREATER;\n                token.tokenType   = Tokens.GREATER;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case '|' :\n                if (charAt(currentPosition + 1) == '|') {\n                    token.tokenString = Tokens.T_CONCAT;\n                    token.tokenType   = Tokens.CONCAT;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n\n                    return;\n                }\n\n                token.tokenString = sqlString.substring(currentPosition,\n                        currentPosition + 2);\n                token.tokenType   = Tokens.X_UNKNOWN_TOKEN;\n                token.isDelimiter = true;\n\n                return;\n\n            case '/' :"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1479",
               "end_line": "1505",
               "source_code": "                token.tokenString = Tokens.T_QUESTION;\n                token.tokenType   = Tokens.QUESTION;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case '!' :\n                if (charAt(currentPosition + 1) == '=') {\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n\n                    return;\n                }\n\n                token.tokenString = sqlString.substring(currentPosition,\n                        currentPosition + 2);\n                token.tokenType   = Tokens.X_UNKNOWN_TOKEN;\n                token.isDelimiter = true;\n\n                return;\n\n            case '<' :"
           }

       },

       {
           "id": "clone_826",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "5760",
               "end_line": "5773",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY : {\n                java.io.InputStream inputStream = getBinaryStream(columnIndex);\n\n                if (inputStream == null) {\n                    sqlxml = null;\n                } else {\n                    sqlxml = new JDBCSQLXML(inputStream);\n                }\n\n                break;\n            }\n            case Types.OTHER :\n            case Types.JAVA_OBJECT :"
           },

           "clone": {
               "file": "JDBCResultSet.java",
               "start_line": "5725",
               "end_line": "5738",
               "source_code": "            case Types.SQL_CHAR :\n            case Types.SQL_VARCHAR : {\n                java.io.Reader reader = getCharacterStream(columnIndex);\n\n                if (reader == null) {\n                    sqlxml = null;\n                } else {\n                    sqlxml = new JDBCSQLXML(reader);\n                }\n\n                break;\n            }\n            case Types.SQL_NCHAR :\n            case Types.SQL_NVARCHAR :"
           }

       },

       {
           "id": "clone_827",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAllTypes.java",
               "start_line": "141",
               "end_line": "158",
               "source_code": "        // adding extra index will slow down inserts a bit\n        String ddl4 = \"CREATE INDEX idx1 ON TEST (lastname);\";\n\n        // adding this index will slow down  inserts a lot\n        String ddl5 = \"CREATE INDEX idx2 ON TEST (zip);\";\n\n        // adding this index will slow down  inserts a lot\n        String ddl6 = \"CREATE INDEX idx3 ON TEST (longfield);\";\n\n        // adding this index will slow down  inserts a lot\n        String ddl7 = \"CREATE INDEX idx4 ON TEST (bigdecimalfield);\";\n\n        String ddl8 = \"CREATE INDEX idx5 ON TEST (bigdecimal2field);\";\n        String ddl9 = \"CREATE INDEX idx6 ON TEST (datefield);\";\n        // referential integrity checks will slow down inserts a bit\n        String ddl26 =\n            \"ALTER TABLE test add constraint c1 FOREIGN KEY (zip) REFERENCES zip(zip);\";\n        String filler = \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\";"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "77",
               "end_line": "87",
               "source_code": "        String ddl1 =\n            \"CREATE TABLE USER(USER_ID INTEGER NOT NULL PRIMARY KEY,LOGIN_ID VARCHAR(128) NOT NULL,USER_NAME VARCHAR(254) DEFAULT ' ' NOT NULL,CREATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,LAST_ACCESS_DATE TIMESTAMP,CONSTRAINT IXUQ_LOGIN_ID0 UNIQUE(LOGIN_ID))\";\n        String ddl2 =\n            \"CREATE TABLE ADDRESSBOOK_CATEGORY(USER_ID INTEGER NOT NULL,CATEGORY_ID INTEGER DEFAULT 0 NOT NULL,CATEGORY_NAME VARCHAR(60) DEFAULT '' NOT NULL,CONSTRAINT SYS_PK_ADDRESSBOOK_CATEGORY PRIMARY KEY(USER_ID,CATEGORY_ID),CONSTRAINT FK_ADRBKCAT1 FOREIGN KEY(USER_ID) REFERENCES USER(USER_ID) ON DELETE CASCADE)\";\n        String ddl3 =\n            \"CREATE TABLE ADDRESSBOOK(USER_ID INTEGER NOT NULL,ADDRESSBOOK_ID INTEGER NOT NULL,CATEGORY_ID INTEGER DEFAULT 0 NOT NULL,FIRST VARCHAR(64) DEFAULT '' NOT NULL,LAST VARCHAR(64) DEFAULT '' NOT NULL,NOTE VARCHAR(128) DEFAULT '' NOT NULL,CONSTRAINT SYS_PK_ADDRESSBOOK PRIMARY KEY(USER_ID,ADDRESSBOOK_ID),CONSTRAINT FK_ADRBOOK1 FOREIGN KEY(USER_ID,CATEGORY_ID) REFERENCES ADDRESSBOOK_CATEGORY(USER_ID,CATEGORY_ID) ON DELETE CASCADE)\";\n        String result1 = \"1\";\n        String result2 = \"2\";\n        String result3 = \"3\";\n        String result4 = \"4\";\n        String result5 = \"5\";"
           }

       },

       {
           "id": "clone_828",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "1838",
               "end_line": "1842",
               "source_code": "        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_TRANSLATE).append(' ').append(Tokens.T_TTI);\n        sb.append(' ').append(Tokens.T_TYPES).append(' ');"
           },

           "clone": {
               "file": "Logger.java",
               "start_line": "1768",
               "end_line": "1772",
               "source_code": "        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_DEFAULT).append(' ');\n        sb.append(Tokens.T_RESULT).append(' ').append(Tokens.T_MEMORY);\n        sb.append(' ').append(Tokens.T_ROWS).append(' ');"
           }

       },

       {
           "id": "clone_829",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1520",
               "end_line": "1526",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                limit = DTIType.precisionLimits[(int) precision] * 60 * 60;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1512",
               "end_line": "1518",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n                limit = DTIType.precisionLimits[(int) precision] * 60 * 60;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :"
           }

       },

       {
           "id": "clone_830",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "302",
               "end_line": "308",
               "source_code": "                break;\n\n            case OpTypes.CONCAT :\n                resolveTypesForConcat(session, parent);\n                break;\n\n            default :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3620",
               "end_line": "3626",
               "source_code": "                break;\n\n            case SchemaObject.SCHEMA :\n                checkSchemaUpdateAuthorisation(session, name);\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_831",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "423",
               "end_line": "429",
               "source_code": "                break;\n\n            case LobResultTypes.RESPONSE_SET :\n            case LobResultTypes.RESPONSE_CREATE_BYTES :\n            case LobResultTypes.RESPONSE_CREATE_CHARS :\n            case LobResultTypes.RESPONSE_TRUNCATE :\n                result.blockLength = dataInput.readLong();"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "370",
               "end_line": "378",
               "source_code": "                break;\n\n            case LobResultTypes.REQUEST_GET_LOB :\n            case LobResultTypes.REQUEST_DUPLICATE_LOB :\n\n            //\n            case LobResultTypes.REQUEST_GET_BYTES :\n            case LobResultTypes.REQUEST_GET_CHARS :\n                result.blockOffset = dataInput.readLong();"
           }

       },

       {
           "id": "clone_832",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "409",
               "end_line": "414",
               "source_code": "                break;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n                s += INT_STORE_SIZE;\n                s += ((BinaryData) o).length(null);"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "403",
               "end_line": "408",
               "source_code": "                break;\n\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                s += INT_STORE_SIZE;\n                s += ((BinaryData) o).length(null);"
           }

       },

       {
           "id": "clone_833",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5734",
               "end_line": "5780",
               "source_code": "            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_834",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3295",
               "end_line": "3312",
               "source_code": "                break;\n\n            case FUNC_NEXT_DAY :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_NUMTODSINTERVAL :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_DOUBLE;\n                }"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3235",
               "end_line": "3252",
               "source_code": "                break;\n\n            case FUNC_FROM_TZ :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP;\n                }\n\n                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;\n                break;\n\n            case FUNC_LAST_DAY :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                }"
           }

       },

       {
           "id": "clone_835",

           "clone_type": "type-2",

           "origin": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "355",
               "end_line": "375",
               "source_code": "        conn1.rollback(sp3);\n\n        rs = stmt.executeQuery(\"select count(*) from t\");\n\n        rs.next();\n\n        rowcount = rs.getInt(1);\n\n        rs.close();\n\n        //-- Test 12 : count of rows matches # rows inserted less the number\n        //             of insertions rolled back\n        msg = \"select count(*) after 50 inserts - 20 rolled back:\";\n\n        try {\n            assertEquals(msg, 30, rowcount);\n        } catch (Exception e) {}\n\n        //-- test 13 : An SQL-savepoint shall be destroyed in the\n        //            process of rolling back to that savepoint\n        msg = \"savepoint released succesfully after use in rollback\";"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "328",
               "end_line": "348",
               "source_code": "        conn1.rollback(sp4);\n\n        rs = stmt.executeQuery(\"select count(*) from t\");\n\n        rs.next();\n\n        rowcount = rs.getInt(1);\n\n        rs.close();\n\n        //-- Test 10 : count of rows matches # rows inserted less the number\n        //             of insertions rolled back\n        msg = \"select * rowcount after 50 inserts - 10 rolled back:\";\n\n        try {\n            assertEquals(msg, 40, rowcount);\n        } catch (Exception e) {}\n\n        //-- test 11 : An SQL-savepoint shall be destroyed in the\n        //            process of rolling back to that savepoint\n        msg = \"savepoint rolled back succesfully > 1 times\";"
           }

       },

       {
           "id": "clone_836",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "112",
               "end_line": "117",
               "source_code": "            case Types.SQL_DATE :\n                return java.sql.Date.class;\n\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                return java.sql.Time.class;"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "254",
               "end_line": "259",
               "source_code": "            case Types.SQL_DOUBLE :\n                return java.lang.Double.class;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                return java.math.BigDecimal.class;"
           }

       },

       {
           "id": "clone_837",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "676",
               "end_line": "680",
               "source_code": "        execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE TABLE t1 (i INT, vc \" + pref + \"VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"DELETE \" + pref + \"FROM tsttbl WHERE i < 10\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "612",
               "end_line": "619",
               "source_code": "        execSQL(\"CREATE VIEW tstviewx \" + pref\n                + \"AS SELECT * FROM tsttbl WHERE i < 10\", expect);\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE UNIQUE \" + pref + \"INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE \" + pref + \"INDEX tstinda ON toindextbl (i10)\",\n                expect);"
           }

       },

       {
           "id": "clone_838",

           "clone_type": "type-2",

           "origin": {
               "file": "Server.java",
               "start_line": "2172",
               "end_line": "2177",
               "source_code": "        StopWatch   sw;\n        ThreadGroup tg;\n        String      tgName;\n\n        printWithThread(\"run() entered\");\n        print(\"Initiating startup sequence...\");"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "227",
               "end_line": "232",
               "source_code": "        PreparedStatement deleteStmnt;\n        PreparedStatement callStmnt;\n        StopWatch         sw;\n\n        println(\"---------------------------------------\");\n        println(\"Preparing Statements:\");"
           }

       },

       {
           "id": "clone_839",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "291",
               "end_line": "306",
               "source_code": "    protected Integer readInteger() throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        return ValuePool.getInt(Integer.parseInt(s));\n    }"
           },

           "clone": {
               "file": "RowInputText.java",
               "start_line": "274",
               "end_line": "289",
               "source_code": "    protected Integer readSmallint() throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        return ValuePool.getInt(Integer.parseInt(s));\n    }"
           }

       },

       {
           "id": "clone_840",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "2082",
               "end_line": "2097",
               "source_code": "            condition = XreadBooleanValueExpression();\n\n            resolveOuterReferencesAndTypes(routine, context, condition);\n\n            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION,\n                                                condition);\n\n            list.add(statement);\n            readThis(Tokens.THEN);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1918",
               "end_line": "1932",
               "source_code": "            e = XreadBooleanValueExpression();\n\n            resolveOuterReferencesAndTypes(routine, context, e);\n\n            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION, e);\n\n            list.add(statement);\n            readThis(Tokens.THEN);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }"
           }

       },

       {
           "id": "clone_841",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "645",
               "end_line": "656",
               "source_code": "        execSQL(\"CREATE VIEW tstviewx AS SELECT * FROM tsttbl \" + pref\n                + \"WHERE i < 10\", expect);\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TRIGGER tsttrigc AFTER INSERT ON triggedtbl CALL \"\n                + pref + \"\\\"org.hsqldb.test.BlaineTrig'\", expect);\n        execSQL(\"CREATE \" + pref + \"UNIQUE INDEX tstindx ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\n            \"CREATE \" + pref\n            + \"VIEW tstviewx AS SELECT * FROM tsttbl WHERE i < 10\", expect);\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "554",
               "end_line": "563",
               "source_code": "        execSQL(\"CREATE VIEW tstviewx AS SELECT \" + pref\n                + \"* FROM tsttbl WHERE i < 10\", expect);\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);                   // reset\n        execSQL(\"INSERT INTO tsttbl VALUES (1, \" + pref + \"'one')\", expect);\n        execSQL(\"CREATE UNIQUE INDEX tstinda ON toindextbl (\" + pref + \"i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);                   // reset\n        execSQL(\"CREATE VIEW tstviewx AS SELECT * FROM tsttbl WHERE i < \"\n                + pref + \"10\", expect);\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);                   // reset"
           }

       },

       {
           "id": "clone_842",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "3031",
               "end_line": "3043",
               "source_code": "                tmpString = props.getProperty(\"showSchemas\");\n\n                if (tmpString != null) {\n                    showSchemas = Boolean.valueOf(tmpString).booleanValue();\n                }\n\n                tmpString = props.getProperty(\"resultGrid\");\n\n                if (tmpString != null) {\n                    resultGrid = Boolean.valueOf(tmpString).booleanValue();\n                }\n\n                tmpString = props.getProperty(\"laf\");"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "3013",
               "end_line": "3025",
               "source_code": "                tmpString = props.getProperty(\"autoRefresh\");\n\n                if (tmpString != null) {\n                    autoRefresh = Boolean.valueOf(tmpString).booleanValue();\n                }\n\n                tmpString = props.getProperty(\"showRowCounts\");\n\n                if (tmpString != null) {\n                    showRowCounts = Boolean.valueOf(tmpString).booleanValue();\n                }\n\n                tmpString = props.getProperty(\"showSysTables\");"
           }

       },

       {
           "id": "clone_843",

           "clone_type": "type-2",

           "origin": {
               "file": "RangeVariableResolver.java",
               "start_line": "99",
               "end_line": "103",
               "source_code": "        this.select         = select;\n        this.rangeVariables = select.rangeVariables;\n        this.conditions     = select.queryCondition;\n        this.compileContext = select.compileContext;\n        this.sortAndSlice   = select.sortAndSlice;"
           },

           "clone": {
               "file": "Preprocessor.java",
               "start_line": "348",
               "end_line": "352",
               "source_code": "        this.state        = CONDITION_NONE;\n        this.options      = other.options;\n        this.documentPath = other.documentPath;\n        this.resolver     = other.resolver;\n        this.defines      = other.defines;"
           }

       },

       {
           "id": "clone_844",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5854",
               "end_line": "5900",
               "source_code": "        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_845",

           "clone_type": "type-2",

           "origin": {
               "file": "FileArchiver.java",
               "start_line": "89",
               "end_line": "93",
               "source_code": "        InputStream          in        = null;\n        OutputStream         f         = null;\n        OutputStream         fOut      = null;\n        DeflaterOutputStream deflater  = null;\n        boolean              completed = false;"
           },

           "clone": {
               "file": "TestSqlPersistent.java",
               "start_line": "102",
               "end_line": "106",
               "source_code": "        Object  bytearrayValue     = null;\n        Object  stringValueResult  = null;\n        Object  integerValueResult = null;\n        Object  arrayValueResult   = null;\n        boolean wasNull            = false;"
           }

       },

       {
           "id": "clone_846",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5848",
               "end_line": "5894",
               "source_code": "        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_847",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "378",
               "end_line": "388",
               "source_code": "            case Types.SQL_TIMESTAMP :\n                s += 12;\n                break;\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                s += 16;\n                break;\n\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "337",
               "end_line": "347",
               "source_code": "            case Types.SQL_SMALLINT :\n                s += 2;\n                break;\n\n            case Types.SQL_INTEGER :\n                s += 4;\n                break;\n\n            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :"
           }

       },

       {
           "id": "clone_848",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDateTime.java",
               "start_line": "250",
               "end_line": "265",
               "source_code": "        final String INSERT_TIME =\n            \"insert into time_test(time_test) values (?)\";\n\n        // See OracleTests class why we need to select tablename.*\n        final String SELECT_TIME =\n            \"select time_test.* from time_test where time_test = ?\";\n        final String DELETE_TIME =\n            \"delete from time_test where time_test = ?\";\n        Calendar          calGenerate = Calendar.getInstance();\n        java.sql.Time     insertTime;\n        Connection        connection = super.newConnection();\n        PreparedStatement insertStatement;\n        int               iUpdateCount = 0;\n\n        // Set date of my birthday ;-)\n        calGenerate.set(1995, 9, 15, 1, 2, 3);"
           },

           "clone": {
               "file": "TestDateTime.java",
               "start_line": "81",
               "end_line": "96",
               "source_code": "        final String INSERT_DATE =\n            \"insert into date_test(date_test) values (?)\";\n\n        // See OracleTests class why we need to select tablename.*\n        final String SELECT_DATE =\n            \"select date_test.* from date_test where date_test = ?\";\n        final String DELETE_DATE =\n            \"delete from date_test where date_test = ?\";\n        Calendar          calGenerate = Calendar.getInstance();\n        java.sql.Date     insertDate;\n        Connection        connection = super.newConnection();\n        PreparedStatement insertStatement;\n        int               iUpdateCount = 0;\n\n        // Set date of my birthday ;-)\n        calGenerate.set(1995, 9, 15, 1, 2, 3);"
           }

       },

       {
           "id": "clone_849",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDbBackup.java",
               "start_line": "555",
               "end_line": "569",
               "source_code": "            conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                    + baseDir.getAbsolutePath()\n                    + \"/' BLOCKING COMPRESSED\");\n            fileCount = baseDir.listFiles(autoTarFilenameFilter).length;\n            if (fileCount != 1)\n                fail(Integer.toString(fileCount)\n                        + \" auto-tar files exist in baseDir '\"\n                        + baseDir.getAbsolutePath()\n                        + \"' after writing both backups\");\n            fileCount = baseDir.listFiles(autoTarGzFilenameFilter).length;\n            if (fileCount != 1)\n                fail(Integer.toString(fileCount)\n                        + \" auto-tar.gz files exist in baseDir '\"\n                        + baseDir.getAbsolutePath()\n                        + \"' after writing a compressed backup\");"
           },

           "clone": {
               "file": "TestDbBackup.java",
               "start_line": "540",
               "end_line": "554",
               "source_code": "            conn.createStatement().executeUpdate(\"BACKUP DATABASE TO '\"\n                    + baseDir.getAbsolutePath()\n                    + \"/' BLOCKING NOT COMPRESSED\");\n            fileCount = baseDir.listFiles(autoTarFilenameFilter).length;\n            if (fileCount != 1)\n                fail(Integer.toString(fileCount)\n                        + \" auto-tar files exist in baseDir '\"\n                        + baseDir.getAbsolutePath()\n                        + \"' after writing a non-compressed backup\");\n            fileCount = baseDir.listFiles(autoTarGzFilenameFilter).length;\n            if (fileCount != 0)\n                fail(Integer.toString(fileCount)\n                        + \" auto-tar.gz files exist in baseDir '\"\n                        + baseDir.getAbsolutePath()\n                        + \"' after writing a non-compressed backup\");"
           }

       },

       {
           "id": "clone_850",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2280",
               "end_line": "2372",
               "source_code": "        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);\n        commandSet.put(T_SERVER, SERVER);\n        commandSet.put(T_SESSION, SESSION);\n        commandSet.put(T_SETS, SETS);\n        commandSet.put(T_SHUTDOWN, SHUTDOWN);\n        commandSet.put(T_SIMPLE, SIMPLE);\n        commandSet.put(T_SIZE, SIZE);\n        commandSet.put(T_SOURCE, SOURCE);\n        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);\n        commandSet.put(T_SQL_BINARY, SQL_BINARY);\n        commandSet.put(T_SQL_BIT, SQL_BIT);\n        commandSet.put(T_SQL_BLOB, SQL_BLOB);\n        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);\n        commandSet.put(T_SQL_CHAR, SQL_CHAR);\n        commandSet.put(T_SQL_CLOB, SQL_CLOB);\n        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);\n        commandSet.put(T_SQL_DATE, SQL_DATE);\n        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);\n        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);\n        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);\n        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);\n        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);\n        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);\n        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);\n        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);\n        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);\n        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);\n        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);\n        commandSet.put(T_SQL_REAL, SQL_REAL);\n        commandSet.put(T_SQL_ROWID, SQL_ROWID);\n        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);\n        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);\n        commandSet.put(T_SQL_TIME, SQL_TIME);\n        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);\n        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);\n        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);\n        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);\n        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);\n        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);\n        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);\n        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);\n        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);\n        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);\n        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);\n        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);\n        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);\n        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);\n        commandSet.put(T_STATEMENT, STATEMENT);\n        commandSet.put(T_STYLE, STYLE);\n        commandSet.put(T_SYNTAX, SYNTAX);\n        commandSet.put(T_T_FACTOR, T);\n        commandSet.put(T_TDC, TDC);\n        commandSet.put(T_TEMP, TEMP);\n        commandSet.put(T_TEMPORARY, TEMPORARY);\n        commandSet.put(T_TEXT, TEXT);\n        commandSet.put(T_TYPES, TYPES);\n        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);\n        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);\n        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);\n        commandSet.put(T_TINYBLOB, TINYBLOB);\n        commandSet.put(T_TINYTEXT, TINYTEXT);\n        commandSet.put(T_TOP, TOP);\n        commandSet.put(T_TRANSACTION, TRANSACTION);\n        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);\n        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);\n        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);\n        commandSet.put(T_TTI, TTI);\n        commandSet.put(T_TYPE, TYPE);\n        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);\n        commandSet.put(T_USAGE, USAGE);\n        commandSet.put(T_VIEW, VIEW);\n        commandSet.put(T_VARCHAR2, VARCHAR2);\n        commandSet.put(T_WORK, WORK);\n        commandSet.put(T_WRAPPER, WRAPPER);\n        commandSet.put(T_WRITE, WRITE);\n        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);\n        commandSet.put(T_ZONE, ZONE);\n\n        //\n        commandSet.put(T_ACOS, ACOS);\n        commandSet.put(T_ACTION_ID, ACTION_ID);\n        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);\n        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);\n        commandSet.put(T_ASCII, ASCII);\n        commandSet.put(T_ASIN, ASIN);\n        commandSet.put(T_ATAN, ATAN);\n        commandSet.put(T_ATAN2, ATAN2);\n        commandSet.put(T_BITAND, BITAND);\n        commandSet.put(T_BITANDNOT, BITANDNOT);\n        commandSet.put(T_BITLENGTH, BITLENGTH);\n        commandSet.put(T_BITNOT, BITNOT);\n        commandSet.put(T_BITOR, BITOR);\n        commandSet.put(T_BITXOR, BITXOR);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2188",
               "end_line": "2279",
               "source_code": "        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);\n        commandSet.put(T_INCLUDING, INCLUDING);\n        commandSet.put(T_INCREMENT, INCREMENT);\n        commandSet.put(T_INDEX, INDEX);\n        commandSet.put(T_INDEXER, INDEXER);\n        commandSet.put(T_INITIAL, INITIAL);\n        commandSet.put(T_INPUT, INPUT);\n        commandSet.put(T_INSTEAD, INSTEAD);\n        commandSet.put(T_INTEGRITY, INTEGRITY);\n        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);\n        commandSet.put(T_ISOLATION, ISOLATION);\n        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);\n        commandSet.put(T_IS_READONLY_DATABASE_FILES,\n                       IS_READONLY_DATABASE_FILES);\n        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);\n        commandSet.put(T_JAVA, JAVA);\n        commandSet.put(T_K_FACTOR, K);\n        commandSet.put(T_KEY, KEY);\n        commandSet.put(T_LAST, LAST);\n        commandSet.put(T_LASTVAL, LASTVAL);\n        commandSet.put(T_LENGTH, LENGTH);\n        commandSet.put(T_LEVEL, LEVEL);\n        commandSet.put(T_LIBRARY, LIBRARY);\n        commandSet.put(T_LIMIT, LIMIT);\n        commandSet.put(T_LOB, LOB);\n        commandSet.put(T_LOCK, LOCK);\n        commandSet.put(T_LOCKS, LOCKS);\n        commandSet.put(T_LONG, LONG);\n        commandSet.put(T_LONGBLOB, LONGBLOB);\n        commandSet.put(T_LONGTEXT, LONGTEXT);\n        commandSet.put(T_LONGVAR, LONGVAR);\n        commandSet.put(T_M_FACTOR, M);\n        commandSet.put(T_MATCHED, MATCHED);\n        commandSet.put(T_MAXROWS, MAXROWS);\n        commandSet.put(T_MAXVALUE, MAXVALUE);\n        commandSet.put(T_MEDIAN, MEDIAN);\n        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);\n        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);\n        commandSet.put(T_MEMORY, MEMORY);\n        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);\n        commandSet.put(T_MILLIS, MILLIS);\n        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);\n        commandSet.put(T_MINVALUE, MINVALUE);\n        commandSet.put(T_MORE, MORE);\n        commandSet.put(T_MVCC, MVCC);\n        commandSet.put(T_MVLOCKS, MVLOCKS);\n        commandSet.put(T_NAME, NAME);\n        commandSet.put(T_NEXT, NEXT);\n        commandSet.put(T_NEXTVAL, NEXTVAL);\n        commandSet.put(T_NAN, NAN);\n        commandSet.put(T_NIO, NIO);\n        commandSet.put(T_NOW, NOW);\n        commandSet.put(T_NULLS, NULLS);\n        commandSet.put(T_NUMBER, NUMBER);\n        commandSet.put(T_NVARCHAR2, NVARCHAR2);\n        commandSet.put(T_NVL2, NVL2);\n        commandSet.put(T_OBJECT, OBJECT);\n        commandSet.put(T_OCTETS, OCTETS);\n        commandSet.put(T_OFF, OFF);\n        commandSet.put(T_OPTION, OPTION);\n        commandSet.put(T_ORDINALITY, ORDINALITY);\n        commandSet.put(T_OVERRIDING, OVERRIDING);\n        commandSet.put(T_P_FACTOR, P);\n        commandSet.put(T_PAD, PAD);\n        commandSet.put(T_PARTIAL, PARTIAL);\n        commandSet.put(T_PASSWORD, PASSWORD);\n        commandSet.put(T_PLACING, PLACING);\n        commandSet.put(T_PLAN, PLAN);\n        commandSet.put(T_PRESERVE, PRESERVE);\n        commandSet.put(T_PREVVAL, PREVVAL);\n        commandSet.put(T_PRIVILEGES, PRIVILEGES);\n        commandSet.put(T_PROPERTY, PROPERTY);\n        commandSet.put(T_RAW, RAW);\n        commandSet.put(T_READ, READ);\n        commandSet.put(T_READONLY, READONLY);\n        commandSet.put(T_REFERENTIAL, REFERENTIAL);\n        commandSet.put(T_REGULAR, REGULAR);\n        commandSet.put(T_RENAME, RENAME);\n        commandSet.put(T_REPEATABLE, REPEATABLE);\n        commandSet.put(T_RESET, RESET);\n        commandSet.put(T_RESTART, RESTART);\n        commandSet.put(T_RESTRICT, RESTRICT);\n        commandSet.put(T_RESULT, RESULT);\n        commandSet.put(T_ROLE, ROLE);\n        commandSet.put(T_ROUTINE, ROUTINE);\n        commandSet.put(T_ROW_COUNT, ROW_COUNT);\n        commandSet.put(T_ROWNUM, ROWNUM);\n        commandSet.put(T_SCALE, SCALE);\n        commandSet.put(T_SCHEMA, SCHEMA);\n        commandSet.put(T_SCRIPT, SCRIPT);\n        commandSet.put(T_SEQUENCE, SEQUENCE);\n        commandSet.put(T_SEPARATOR, SEPARATOR);"
           }

       },

       {
           "id": "clone_851",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "3482",
               "end_line": "3494",
               "source_code": "                        case Tokens.FUNCTION :\n                            statementType = StatementTypes.CREATE_ROUTINE;\n                            sql = getStatementForRoutine(\n                                position, startStatementTokensSchema);\n                            cs = new StatementSchema(sql, statementType);\n                            break;\n\n                        case Tokens.PROCEDURE :\n                            statementType = StatementTypes.CREATE_ROUTINE;\n                            sql = getStatementForRoutine(\n                                position, startStatementTokensSchema);\n                            cs = new StatementSchema(sql, statementType);\n                            break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3468",
               "end_line": "3480",
               "source_code": "                        case Tokens.TRIGGER :\n                            statementType = StatementTypes.CREATE_TRIGGER;\n                            sql = getStatement(position,\n                                               startStatementTokensSchema);\n                            cs = new StatementSchema(sql, statementType);\n                            break;\n\n                        case Tokens.VIEW :\n                            statementType = StatementTypes.CREATE_VIEW;\n                            sql = getStatement(position,\n                                               startStatementTokensSchema);\n                            cs = new StatementSchema(sql, statementType);\n                            break;"
           }

       },

       {
           "id": "clone_852",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementPortal.java",
               "start_line": "80",
               "end_line": "91",
               "source_code": "        switch (bindResult.getType()) {\n\n            case ResultConstants.EXECUTE :\n                break;\n\n            case ResultConstants.ERROR :\n                throw new RecoverableOdbcFailure(bindResult);\n            default :\n                throw new RecoverableOdbcFailure(\n                    \"Output Result from seconary Statement prep is of \"\n                    + \"unexpected type: \" + bindResult.getType());\n        }"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "1950",
               "end_line": "1961",
               "source_code": "        switch (rOut.getType()) {\n\n            case ResultConstants.UPDATECOUNT :\n                break;\n\n            case ResultConstants.ERROR :\n                throw new RecoverableOdbcFailure(rOut);\n            default :\n                throw new RecoverableOdbcFailure(\n                    \"Output Result from execution is of \"\n                    + \"unexpected type: \" + rOut.getType());\n        }"
           }

       },

       {
           "id": "clone_853",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "830",
               "end_line": "835",
               "source_code": "                        case StatementTypes.DROP_TABLE :\n                        case StatementTypes.DROP_VIEW :\n                            dropTable(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_TRANSFORM :"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "813",
               "end_line": "818",
               "source_code": "                        case StatementTypes.DROP_SEQUENCE :\n                        case StatementTypes.DROP_TRIGGER :\n                            dropObject(session, name, cascade);\n                            break;\n\n                        case StatementTypes.DROP_TYPE :"
           }

       },

       {
           "id": "clone_854",

           "clone_type": "type-2",

           "origin": {
               "file": "Schema.java",
               "start_line": "282",
               "end_line": "299",
               "source_code": "            case SchemaObject.SPECIFIC_ROUTINE :\n                return specificRoutineLookup;\n\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n                return typeLookup;\n\n            case SchemaObject.ASSERTION :\n                return assertionLookup;\n\n            case SchemaObject.TRIGGER :\n                return triggerLookup;\n\n            case SchemaObject.INDEX :\n                return indexLookup;\n\n            case SchemaObject.CONSTRAINT :\n                return constraintLookup;"
           },

           "clone": {
               "file": "Schema.java",
               "start_line": "260",
               "end_line": "277",
               "source_code": "            case SchemaObject.SEQUENCE :\n                return sequenceLookup;\n\n            case SchemaObject.TABLE :\n            case SchemaObject.VIEW :\n                return tableLookup;\n\n            case SchemaObject.CHARSET :\n                return charsetLookup;\n\n            case SchemaObject.COLLATION :\n                return collationLookup;\n\n            case SchemaObject.PROCEDURE :\n                return procedureLookup;\n\n            case SchemaObject.FUNCTION :\n                return functionLookup;"
           }

       },

       {
           "id": "clone_855",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionAggregate.java",
               "start_line": "76",
               "end_line": "81",
               "source_code": "            case OpTypes.COUNT :\n                sb.append(' ').append(Tokens.T_COUNT).append('(');\n                break;\n\n            case OpTypes.SUM :\n                sb.append(' ').append(Tokens.T_SUM).append('(');"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "411",
               "end_line": "416",
               "source_code": "            case OpTypes.UNIQUE :\n                sb.append(' ').append(Tokens.T_UNIQUE).append(' ');\n                break;\n\n            case OpTypes.EXISTS :\n                sb.append(' ').append(Tokens.T_EXISTS).append(' ');"
           }

       },

       {
           "id": "clone_856",

           "clone_type": "type-2",

           "origin": {
               "file": "TestMerge.java",
               "start_line": "410",
               "end_line": "415",
               "source_code": "        TestCase   testB  = new TestMerge(\"testMerge2\");\n        TestCase   testC  = new TestMerge(\"testMerge3\");\n        TestCase   testD  = new TestMerge(\"testMerge4\");\n        TestCase   testE  = new TestMerge(\"testMerge5\");\n        TestCase   testF  = new TestMerge(\"testMerge6\");\n        TestCase   testG  = new TestMerge(\"testMerge7\");"
           },

           "clone": {
               "file": "TransferDb.java",
               "start_line": "438",
               "end_line": "443",
               "source_code": "        String    alterCreate    = new String(\"\");\n        String    alterDrop      = new String(\"\");\n        String    ConstraintName = new String(\"\");\n        String    RefTableName   = new String(\"\");\n        String    foreignKeyName = new String(\"\");\n        String    columnName     = new String(\"\");"
           }

       },

       {
           "id": "clone_857",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "528",
               "end_line": "538",
               "source_code": "            case LobResultTypes.RESPONSE_GET_CHARS :\n                dataOut.writeLong(blockOffset);\n                dataOut.writeLong(blockLength);\n                dataOut.writeChars(charBlock);\n                break;\n\n            case LobResultTypes.RESPONSE_SET :\n            case LobResultTypes.RESPONSE_CREATE_BYTES :\n            case LobResultTypes.RESPONSE_CREATE_CHARS :\n            case LobResultTypes.RESPONSE_TRUNCATE :\n                dataOut.writeLong(blockLength);"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "501",
               "end_line": "513",
               "source_code": "            case LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION :\n                dataOut.writeLong(blockOffset);\n                dataOut.writeLong(blockLength);\n                dataOut.writeChars(charBlock);\n                break;\n\n            case LobResultTypes.REQUEST_GET_LOB :\n            case LobResultTypes.REQUEST_DUPLICATE_LOB :\n\n            //\n            case LobResultTypes.REQUEST_GET_BYTES :\n            case LobResultTypes.REQUEST_GET_CHARS :\n                dataOut.writeLong(blockOffset);"
           }

       },

       {
           "id": "clone_858",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3429",
               "end_line": "3437",
               "source_code": "            if (!session.getGrantee().isAccessible(type)) {\n                continue;\n            }\n\n            Object[] row = t.getEmptyRowData();\n\n            row[domain_catalog] = database.getCatalogName().name;\n            row[domain_schema]  = type.getSchemaName().name;\n            row[domain_name]    = type.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1693",
               "end_line": "1701",
               "source_code": "            if (!session.getGrantee().isAccessible(charset)) {\n                continue;\n            }\n\n            Object[] data = t.getEmptyRowData();\n\n            data[character_set_catalog]   = database.getCatalogName().name;\n            data[character_set_schema]    = charset.getSchemaName().name;\n            data[character_set_name]      = charset.getName().name;"
           }

       },

       {
           "id": "clone_859",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1457",
               "end_line": "1473",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[APPLICABLE_ROLES]);\n\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);\n            addColumn(t, \"ROLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_GRANTABLE\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[APPLICABLE_ROLES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1401",
               "end_line": "1418",
               "source_code": "        if (t == null) {\n            t = createBlankTable(\n                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS]);\n\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);\n            addColumn(t, \"ROLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_GRANTABLE\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,\n                false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_860",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "227",
               "end_line": "235",
               "source_code": "                break;\n\n            case ResultConstants.DATA :\n            case ResultConstants.DATAHEAD :\n            case ResultConstants.DATAROWS :\n            case ResultConstants.GENERATED :\n                break;\n\n            case ResultConstants.LARGE_OBJECT_OP :"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "833",
               "end_line": "841",
               "source_code": "                            break;\n\n                        case StatementTypes.DROP_TRANSFORM :\n                        case StatementTypes.DROP_TRANSLATION :\n                        case StatementTypes.DROP_CAST :\n                        case StatementTypes.DROP_ORDERING :\n                            break;\n\n                        case StatementTypes.DROP_INDEX :"
           }

       },

       {
           "id": "clone_861",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5754",
               "end_line": "5800",
               "source_code": "            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_862",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "625",
               "end_line": "635",
               "source_code": "        execSQL(\"CREATE VIEW tstviewx AS \" + pref\n                + \"SELECT * FROM tsttbl WHERE i < 10\", expect);\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE UNIQUE INDEX tstinda \" + pref + \"ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TRIGGER tsttrigz AFTER \" + pref\n                + \"INSERT ON triggedtbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", expect);\n        execSQL(\"CREATE VIEW tstviewx AS SELECT * \" + pref\n                + \"FROM tsttbl WHERE i < 10\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "615",
               "end_line": "624",
               "source_code": "        execSQL(\"CREATE UNIQUE \" + pref + \"INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE \" + pref + \"INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TRIGGER tsttrigy \" + pref\n                + \"AFTER INSERT ON triggedtbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", expect);\n        execSQL(\"CREATE USER tstuserb \" + pref + \"PASSWORD fake\", expect);"
           }

       },

       {
           "id": "clone_863",

           "clone_type": "type-2",

           "origin": {
               "file": "HsqlDateTime.java",
               "start_line": "445",
               "end_line": "462",
               "source_code": "                    if (tempCalGMT.get(Calendar.MINUTE) > 29) {\n                        tempCalGMT.add(Calendar.HOUR_OF_DAY, 1);\n                    }\n                    break;\n\n                case Types.SQL_INTERVAL_MINUTE :\n                    if (tempCalGMT.get(Calendar.SECOND) > 29) {\n                        tempCalGMT.add(Calendar.MINUTE, 1);\n                    }\n                    break;\n\n                case Types.SQL_INTERVAL_SECOND :\n                    if (tempCalGMT.get(Calendar.MILLISECOND) > 499) {\n                        tempCalGMT.add(Calendar.SECOND, 1);\n                    }\n                    break;\n\n                case DTIType.WEEK_OF_YEAR :"
           },

           "clone": {
               "file": "HsqlDateTime.java",
               "start_line": "427",
               "end_line": "444",
               "source_code": "                    if (tempCalGMT.get(Calendar.MONTH) > 6) {\n                        tempCalGMT.add(Calendar.YEAR, 1);\n                    }\n                    break;\n\n                case Types.SQL_INTERVAL_MONTH :\n                    if (tempCalGMT.get(Calendar.DAY_OF_MONTH) > 15) {\n                        tempCalGMT.add(Calendar.MONTH, 1);\n                    }\n                    break;\n\n                case Types.SQL_INTERVAL_DAY :\n                    if (tempCalGMT.get(Calendar.HOUR_OF_DAY) > 11) {\n                        tempCalGMT.add(Calendar.DAY_OF_MONTH, 1);\n                    }\n                    break;\n\n                case Types.SQL_INTERVAL_HOUR :"
           }

       },

       {
           "id": "clone_864",

           "clone_type": "type-2",

           "origin": {
               "file": "Transfer.java",
               "start_line": "615",
               "end_line": "619",
               "source_code": "        t.Stmts.sDestCreate      = tDestCreate.getText();\n        t.Stmts.sDestDelete      = tDestDelete.getText();\n        t.Stmts.sSourceSelect    = tSourceSelect.getText();\n        t.Stmts.sDestInsert      = tDestInsert.getText();\n        t.Stmts.sDestAlter       = tDestAlter.getText();"
           },

           "clone": {
               "file": "Transfer.java",
               "start_line": "610",
               "end_line": "614",
               "source_code": "        t.Stmts.sSourceTable     = tSourceTable.getText();\n        t.Stmts.sDestTable       = tDestTable.getText();\n        t.Stmts.sDestDrop        = tDestDrop.getText();\n        t.Stmts.sDestCreateIndex = tDestCreateIndex.getText();\n        t.Stmts.sDestDropIndex   = tDestDropIndex.getText();"
           }

       },

       {
           "id": "clone_865",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "718",
               "end_line": "725",
               "source_code": "            case Types.SQL_INTERVAL_SECOND :\n                return true;\n\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n                return true;\n\n            default :"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "242",
               "end_line": "249",
               "source_code": "            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                return true;\n\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                return false;\n\n            default :"
           }

       },

       {
           "id": "clone_866",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1530",
               "end_line": "1555",
               "source_code": "        Table t = sysTables[ASSERTIONS];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ASSERTIONS]);\n\n            addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"IS_DEFERRABLE\", YES_OR_NO);\n            addColumn(t, \"INITIALLY_DEFERRED\", YES_OR_NO);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ASSERTIONS].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }\n\n        final int constraint_catalog = 0;\n        final int constraint_schema  = 1;\n        final int constraint_name    = 2;\n        final int is_deferrable      = 3;\n        final int initially_deferred = 4;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "801",
               "end_line": "830",
               "source_code": "        Table t = sysTables[SYSTEM_PROPERTIES];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SYSTEM_PROPERTIES]);\n\n            addColumn(t, \"PROPERTY_SCOPE\", CHARACTER_DATA);\n            addColumn(t, \"PROPERTY_NAMESPACE\", CHARACTER_DATA);\n            addColumn(t, \"PROPERTY_NAME\", CHARACTER_DATA);\n            addColumn(t, \"PROPERTY_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"PROPERTY_CLASS\", CHARACTER_DATA);\n\n            // order PROPERTY_SCOPE, PROPERTY_NAMESPACE, PROPERTY_NAME\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_PROPERTIES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, true);\n\n            return t;\n        }\n\n        // column number mappings\n        final int iscope = 0;\n        final int ins    = 1;\n        final int iname  = 2;\n        final int ivalue = 3;\n        final int iclass = 4;"
           }

       },

       {
           "id": "clone_867",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "884",
               "end_line": "888",
               "source_code": "        mainString               = sql;\n        updateCount              = maxRows;\n        this.fetchSize           = fetchSize;\n        this.statementReturnType = statementReturnType;\n        queryTimeout             = timeout;"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "676",
               "end_line": "680",
               "source_code": "        valueData         = parameterValues;\n        updateCount       = maxRows;\n        this.fetchSize    = fetchSize;\n        this.rsProperties = resultProps;\n        queryTimeout      = timeout;"
           }

       },

       {
           "id": "clone_868",

           "clone_type": "type-2",

           "origin": {
               "file": "TriggerSample.java",
               "start_line": "281",
               "end_line": "288",
               "source_code": "            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :"
           },

           "clone": {
               "file": "TriggerSample.java",
               "start_line": "258",
               "end_line": "265",
               "source_code": "            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :"
           }

       },

       {
           "id": "clone_869",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "430",
               "end_line": "435",
               "source_code": "                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION :\n            case LobResultTypes.RESPONSE_GET_CHAR_PATTERN_POSITION :\n                result.blockOffset = dataInput.readLong();\n                break;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "400",
               "end_line": "405",
               "source_code": "                break;\n\n            case LobResultTypes.REQUEST_GET_LENGTH :\n            case LobResultTypes.REQUEST_TRUNCATE :\n                result.blockOffset = dataInput.readLong();\n                break;"
           }

       },

       {
           "id": "clone_870",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2099",
               "end_line": "2125",
               "source_code": "        final int iradix     = 10;\n        final int inullable  = 11;\n        final int iremark    = 12;\n\n        // JDBC 4.0\n        final int icol_default      = 13;\n        final int isql_data_type    = 14;\n        final int isql_datetime_sub = 15;\n        final int ichar_octet_len   = 16;\n        final int iordinal_position = 17;\n        final int iis_nullable      = 18;\n        final int ispecific_name    = 19;\n\n        // initialization\n        Object[] row = t.getEmptyRowData();\n\n        // Do it.\n        row[icat]       = cat;\n        row[ischem]     = schem;\n        row[iname]      = pName;\n        row[icol_name]  = cName;\n        row[icol_type]  = cType;\n        row[idata_type] = dType;\n        row[itype_name] = tName;\n        row[iprec]      = prec;\n        row[ilength]    = len;\n        row[iscale]     = scale;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1995",
               "end_line": "2017",
               "source_code": "        // column number mappings\n        final int icat          = 0;\n        final int ischem        = 1;\n        final int ipname        = 2;\n        final int iinput_parms  = 3;\n        final int ioutput_parms = 4;\n        final int iresult_sets  = 5;\n        final int iremark       = 6;\n        final int iptype        = 7;\n        final int isn           = 8;\n        final int iporigin      = 9;\n        Object[]  row           = t.getEmptyRowData();\n\n        row[icat]          = cat;\n        row[ischem]        = schem;\n        row[ipname]        = pName;\n        row[iinput_parms]  = ip;\n        row[ioutput_parms] = op;\n        row[iresult_sets]  = rs;\n        row[iremark]       = remark;\n        row[iptype]        = pType;\n        row[iporigin]      = origin;\n        row[isn]           = specificName;"
           }

       },

       {
           "id": "clone_871",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "290",
               "end_line": "295",
               "source_code": "                break;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n                writeBit((BinaryData) o);\n                break;"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "207",
               "end_line": "212",
               "source_code": "                break;\n\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n                writeSmallint((Number) o);\n                break;"
           }

       },

       {
           "id": "clone_872",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5205",
               "end_line": "5220",
               "source_code": "        // column number mappings\n        final int grantor          = 0;\n        final int grantee          = 1;\n        final int specific_catalog = 2;\n        final int specific_schema  = 3;\n        final int specific_name    = 4;\n        final int routine_catalog  = 5;\n        final int routine_schema   = 6;\n        final int routine_name     = 7;\n        final int privilege_type   = 8;\n        final int is_grantable     = 9;\n\n        //\n        // calculated column values\n        Grantee granteeObject;\n        String  privilege;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1235",
               "end_line": "1249",
               "source_code": "        final int idsd         = 3;\n        final int ifile_path   = 4;\n        final int ifile_enc    = 5;\n        final int ifs          = 6;\n        final int ivfs         = 7;\n        final int ilvfs        = 8;\n        final int iif          = 9;\n        final int iiq          = 10;\n        final int iiaq         = 11;\n        final int iid          = 12;\n\n        //\n        // intermediate holders\n        Iterator tables;\n        Table    table;"
           }

       },

       {
           "id": "clone_873",

           "clone_type": "type-2",

           "origin": {
               "file": "IntValueHashMap.java",
               "start_line": "76",
               "end_line": "90",
               "source_code": "    public int get(Object key, int defaultValue) {\n\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n\n        int hash   = key.hashCode();\n        int lookup = getLookup(key, hash);\n\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n\n        return defaultValue;\n    }"
           },

           "clone": {
               "file": "LongValueHashMap.java",
               "start_line": "75",
               "end_line": "89",
               "source_code": "    public long get(Object key, int defaultValue) {\n\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n\n        int hash   = key.hashCode();\n        int lookup = getLookup(key, hash);\n\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n\n        return defaultValue;\n    }"
           }

       },

       {
           "id": "clone_874",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "180",
               "end_line": "187",
               "source_code": "            case StatementTypes.SET_SESSION_RESULT_MAX_ROWS :\n            case StatementTypes.SET_SESSION_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_SESSION_AUTOCOMMIT :\n                group = StatementTypes.X_HSQLDB_SESSION;\n                break;\n\n            case StatementTypes.SET_SESSION_SQL_IGNORECASE :\n                isLogged = true;"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "159",
               "end_line": "166",
               "source_code": "            case StatementTypes.SET_TABLE_CLUSTERED :\n            case StatementTypes.SET_TABLE_NEW_TABLESPACE :\n            case StatementTypes.SET_TABLE_SET_TABLESPACE :\n                group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.SET_TABLE_SOURCE_HEADER :\n                isLogged = false;"
           }

       },

       {
           "id": "clone_875",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "621",
               "end_line": "631",
               "source_code": "            case FUNC_DATEADD :\n            case FUNC_NEW_TIME :\n            case FUNC_SEQUENCE_ARRAY :\n            case FUNC_TRANSLATE :\n                parseList = tripleParamList;\n                break;\n\n            case FUNC_REPLACE :\n            case FUNC_LPAD :\n            case FUNC_RPAD :\n            case FUNC_POSITION_CHAR :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "590",
               "end_line": "600",
               "source_code": "            case FUNC_REGEXP_SUBSTRING_ARRAY :\n            case FUNC_REPEAT :\n            case FUNC_RIGHT :\n            case FUNC_TO_CHAR :\n                parseList = doubleParamList;\n                break;\n\n            case FUNC_LOAD_FILE :\n            case FUNC_ROUND :\n            case FUNC_TIMESTAMP :\n            case FUNC_TO_DATE :"
           }

       },

       {
           "id": "clone_876",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlTool.java",
               "start_line": "302",
               "end_line": "306",
               "source_code": "        boolean listMode         = false;\n        boolean interactive      = false;\n        boolean noinput          = false;\n        boolean noautoFile       = false;\n        boolean autoCommit       = false;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "121",
               "end_line": "125",
               "source_code": "        boolean hasLength      = false;\n        boolean hasScale       = false;\n        boolean isCharacter    = false;\n        boolean isIgnoreCase   = false;\n        boolean readByteOrChar = false;"
           }

       },

       {
           "id": "clone_877",

           "clone_type": "type-2",

           "origin": {
               "file": "CharacterType.java",
               "start_line": "151",
               "end_line": "158",
               "source_code": "            case Types.SQL_CHAR :\n                return Tokens.T_CHARACTER;\n\n            case Types.SQL_VARCHAR :\n                return \"CHARACTER VARYING\";\n\n            case Types.SQL_CLOB :\n                return \"CHARACTER LARGE OBJECT\";"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "232",
               "end_line": "239",
               "source_code": "            case Types.SQL_INTERVAL_HOUR :\n                return Tokens.T_HOUR;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                return \"HOUR TO MINUTE\";\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                return \"HOUR TO SECOND\";"
           }

       },

       {
           "id": "clone_878",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1303",
               "end_line": "1314",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                startType = Types.SQL_INTERVAL_DAY;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                startType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "141",
               "end_line": "154",
               "source_code": "            //\n            case StatementTypes.DYNAMIC_DELETE_CURSOR :\n                group = StatementTypes.X_SQL_DATA_CHANGE;\n                break;\n\n            case StatementTypes.DYNAMIC_CLOSE :\n            case StatementTypes.DYNAMIC_FETCH :\n            case StatementTypes.DYNAMIC_OPEN :\n                group = StatementTypes.X_SQL_DATA;\n                break;\n\n            //\n            case StatementTypes.OPEN :\n            case StatementTypes.FETCH :"
           }

       },

       {
           "id": "clone_879",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1140",
               "end_line": "1155",
               "source_code": "            if (s.waitedSessions.size() > 0) {\n                StringBuffer sb    = new StringBuffer();\n                Session[]    array = new Session[s.waitedSessions.size()];\n\n                s.waitedSessions.toArray(array);\n\n                for (int j = 0; j < array.length; j++) {\n                    if (j > 0) {\n                        sb.append(',');\n                    }\n\n                    sb.append(array[j].getId());\n                }\n\n                row[it_waited] = sb.toString();\n            }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1123",
               "end_line": "1138",
               "source_code": "            if (s.waitingSessions.size() > 0) {\n                StringBuffer sb    = new StringBuffer();\n                Session[]    array = new Session[s.waitingSessions.size()];\n\n                s.waitingSessions.toArray(array);\n\n                for (int j = 0; j < array.length; j++) {\n                    if (j > 0) {\n                        sb.append(',');\n                    }\n\n                    sb.append(array[j].getId());\n                }\n\n                row[it_waiting] = sb.toString();\n            }"
           }

       },

       {
           "id": "clone_880",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1785",
               "end_line": "1791",
               "source_code": "            read();\n            readThis(Tokens.SAVEPOINT);\n            checkIsSimpleName();\n\n            savepoint = token.tokenString;\n\n            read();"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1346",
               "end_line": "1352",
               "source_code": "                read();\n                readThis(Tokens.NAME);\n                isUndelimitedSimpleName();\n\n                name = token.tokenString;\n\n                read();"
           }

       },

       {
           "id": "clone_881",

           "clone_type": "type-2",

           "origin": {
               "file": "GranteeManager.java",
               "start_line": "173",
               "end_line": "181",
               "source_code": "        rightsStringLookup.put(Tokens.T_ALL, GrantConstants.ALL);\n        rightsStringLookup.put(Tokens.T_SELECT, GrantConstants.SELECT);\n        rightsStringLookup.put(Tokens.T_UPDATE, GrantConstants.UPDATE);\n        rightsStringLookup.put(Tokens.T_DELETE, GrantConstants.DELETE);\n        rightsStringLookup.put(Tokens.T_INSERT, GrantConstants.INSERT);\n        rightsStringLookup.put(Tokens.T_EXECUTE, GrantConstants.EXECUTE);\n        rightsStringLookup.put(Tokens.T_USAGE, GrantConstants.USAGE);\n        rightsStringLookup.put(Tokens.T_REFERENCES, GrantConstants.REFERENCES);\n        rightsStringLookup.put(Tokens.T_TRIGGER, GrantConstants.TRIGGER);"
           },

           "clone": {
               "file": "ParserBase.java",
               "start_line": "749",
               "end_line": "757",
               "source_code": "        expressionTypeMap.put(Tokens.ANY, OpTypes.SOME);\n        expressionTypeMap.put(Tokens.SOME, OpTypes.SOME);\n        expressionTypeMap.put(Tokens.STDDEV_POP, OpTypes.STDDEV_POP);\n        expressionTypeMap.put(Tokens.STDDEV_SAMP, OpTypes.STDDEV_SAMP);\n        expressionTypeMap.put(Tokens.VAR_POP, OpTypes.VAR_POP);\n        expressionTypeMap.put(Tokens.VAR_SAMP, OpTypes.VAR_SAMP);\n        expressionTypeMap.put(Tokens.ARRAY_AGG, OpTypes.ARRAY_AGG);\n        expressionTypeMap.put(Tokens.GROUP_CONCAT, OpTypes.GROUP_CONCAT);\n        expressionTypeMap.put(Tokens.MEDIAN, OpTypes.MEDIAN);"
           }

       },

       {
           "id": "clone_882",

           "clone_type": "type-2",

           "origin": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "371",
               "end_line": "399",
               "source_code": "    NodeAVL setRight(PersistentStore store, NodeAVL n) {\n\n        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iRight = n == null ? NO_POS\n                                : n.getPos();\n\n        if (n != null && !n.isInMemory()) {\n            n = findNode(store, n.getPos());\n        }\n\n        node.nRight = (NodeAVLDiskLarge) n;\n\n        row.keepInMemory(false);\n\n        return node;\n    }"
           },

           "clone": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "341",
               "end_line": "369",
               "source_code": "    NodeAVL setLeft(PersistentStore store, NodeAVL n) {\n\n        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iLeft = n == null ? NO_POS\n                               : n.getPos();\n\n        if (n != null && !n.isInMemory()) {\n            n = findNode(store, n.getPos());\n        }\n\n        node.nLeft = (NodeAVLDiskLarge) n;\n\n        row.keepInMemory(false);\n\n        return node;\n    }"
           }

       },

       {
           "id": "clone_883",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "398",
               "end_line": "406",
               "source_code": "            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                s += 12;\n                break;\n\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "345",
               "end_line": "353",
               "source_code": "            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                s += 8;\n                break;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_884",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionAggregate.java",
               "start_line": "174",
               "end_line": "192",
               "source_code": "            case OpTypes.SOME :\n                sb.append(Tokens.T_SOME).append(' ');\n                break;\n\n            case OpTypes.STDDEV_POP :\n                sb.append(Tokens.T_STDDEV_POP).append(' ');\n                break;\n\n            case OpTypes.STDDEV_SAMP :\n                sb.append(Tokens.T_STDDEV_SAMP).append(' ');\n                break;\n\n            case OpTypes.VAR_POP :\n                sb.append(Tokens.T_VAR_POP).append(' ');\n                break;\n\n            case OpTypes.VAR_SAMP :\n                sb.append(Tokens.T_VAR_SAMP).append(' ');\n                break;"
           },

           "clone": {
               "file": "ExpressionAggregate.java",
               "start_line": "154",
               "end_line": "172",
               "source_code": "            case OpTypes.SUM :\n                sb.append(Tokens.T_SUM).append(' ');\n                break;\n\n            case OpTypes.MIN :\n                sb.append(Tokens.T_MIN).append(' ');\n                break;\n\n            case OpTypes.MAX :\n                sb.append(Tokens.T_MAX).append(' ');\n                break;\n\n            case OpTypes.AVG :\n                sb.append(Tokens.T_AVG).append(' ');\n                break;\n\n            case OpTypes.EVERY :\n                sb.append(Tokens.T_EVERY).append(' ');\n                break;"
           }

       },

       {
           "id": "clone_885",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSet.java",
               "start_line": "115",
               "end_line": "120",
               "source_code": "        super(StatementTypes.ASSIGNMENT, StatementTypes.X_SQL_CONTROL, null);\n\n        this.operationType     = SELECT_INTO;\n        this.queryExpression   = query;\n        this.targets           = targets;\n        variableIndexes        = indexes;"
           },

           "clone": {
               "file": "StatementSet.java",
               "start_line": "96",
               "end_line": "101",
               "source_code": "        super(StatementTypes.ASSIGNMENT, StatementTypes.X_SQL_CONTROL, null);\n\n        this.operationType     = VARIABLE_SET;\n        this.targets           = targets;\n        this.expression        = e;\n        variableIndexes        = indexes;"
           }

       },

       {
           "id": "clone_886",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "239",
               "end_line": "247",
               "source_code": "                break;\n\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                writeTime((TimeData) o, t);\n                break;\n\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "202",
               "end_line": "210",
               "source_code": "                break;\n\n            case Types.SQL_CHAR :\n            case Types.SQL_VARCHAR :\n                writeChar((String) o, t);\n                break;\n\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :"
           }

       },

       {
           "id": "clone_887",

           "clone_type": "type-2",

           "origin": {
               "file": "ConstraintCore.java",
               "start_line": "80",
               "end_line": "93",
               "source_code": "        copy.refName      = refName;\n        copy.mainName     = mainName;\n        copy.uniqueName   = uniqueName;\n        copy.mainTable    = mainTable;\n        copy.mainCols     = mainCols;\n        copy.mainIndex    = mainIndex;\n        copy.refTable     = refTable;\n        copy.refCols      = refCols;\n        copy.refIndex     = refIndex;\n        copy.deleteAction = deleteAction;\n        copy.updateAction = updateAction;\n        copy.matchType    = matchType;\n\n        return copy;"
           },

           "clone": {
               "file": "Token.java",
               "start_line": "106",
               "end_line": "119",
               "source_code": "        token.lobMultiplierType        = lobMultiplierType;\n        token.isDelimiter              = isDelimiter;\n        token.isDelimitedIdentifier    = isDelimitedIdentifier;\n        token.isDelimitedPrefix        = isDelimitedPrefix;\n        token.isDelimitedPrePrefix     = isDelimitedPrePrefix;\n        token.isDelimitedPrePrePrefix  = isDelimitedPrePrePrefix;\n        token.isUndelimitedIdentifier  = isUndelimitedIdentifier;\n        token.hasIrregularChar         = hasIrregularChar;\n        token.isReservedIdentifier     = isReservedIdentifier;\n        token.isCoreReservedIdentifier = isCoreReservedIdentifier;\n        token.isHostParameter          = isHostParameter;\n        token.isMalformed              = isMalformed;\n\n        return token;"
           }

       },

       {
           "id": "clone_888",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "1121",
               "end_line": "1133",
               "source_code": "                    case Tokens.SQL_TSI_QUARTER :\n                        t = Type.SQL_INTERVAL_MONTH_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)) / 3);\n\n                    case Tokens.SQL_TSI_YEAR :\n                        t = Type.SQL_INTERVAL_YEAR_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "1107",
               "end_line": "1119",
               "source_code": "                    case Tokens.SQL_TSI_WEEK :\n                        t = Type.SQL_INTERVAL_DAY_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)) / 7);\n\n                    case Tokens.SQL_TSI_MONTH :\n                        t = Type.SQL_INTERVAL_MONTH_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));"
           }

       },

       {
           "id": "clone_889",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "883",
               "end_line": "889",
               "source_code": "        String tableSchema;\n        String tableName;\n\n        // intermediate holders\n        int         columnCount;\n        Iterator    tables;\n        Table       table;"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "130",
               "end_line": "134",
               "source_code": "        String            sql;\n        String            msg;\n        int               i;\n        PreparedStatement ps;\n        ResultSet         rs;"
           }

       },

       {
           "id": "clone_890",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5839",
               "end_line": "5885",
               "source_code": "        final int routine_catalog                        = 3;\n        final int routine_schema                         = 4;\n        final int routine_name                           = 5;\n        final int routine_type                           = 6;\n        final int module_catalog                         = 7;\n        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_891",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2094",
               "end_line": "2111",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[COLLATIONS]);\n\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"PAD_ATTRIBUTE\", CHARACTER_DATA);\n\n            // false PK, as rows may have NULL COLLATION_CATALOG\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLLATIONS].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1934",
               "end_line": "1951",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[CHECK_CONSTRAINTS]);\n\n            addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"CHECK_CLAUSE\", CHARACTER_DATA);       // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[CHECK_CONSTRAINTS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                2, 1, 0\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_892",

           "clone_type": "type-2",

           "origin": {
               "file": "SetFunction.java",
               "start_line": "493",
               "end_line": "500",
               "source_code": "                    case Types.SQL_REAL :\n                    case Types.SQL_FLOAT :\n                    case Types.SQL_DOUBLE :\n                    case Types.SQL_INTERVAL :\n                    case Types.SQL_DATE :\n                    case Types.SQL_TIMESTAMP :\n                    case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                        return type;"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "271",
               "end_line": "278",
               "source_code": "            case OpTypes.COLUMN :\n            case OpTypes.ROW :\n            case OpTypes.FUNCTION :\n            case OpTypes.SQL_FUNCTION :\n            case OpTypes.ALTERNATIVE :\n            case OpTypes.CASEWHEN :\n            case OpTypes.CAST :\n                return ddl;"
           }

       },

       {
           "id": "clone_893",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1259",
               "end_line": "1272",
               "source_code": "                calendarPart = Calendar.DAY_OF_MONTH;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n                calendarPart = Calendar.HOUR_OF_DAY;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                calendarPart = Calendar.MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_SECOND :\n                calendarPart = Calendar.SECOND;\n                break;"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1372",
               "end_line": "1385",
               "source_code": "                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;"
           }

       },

       {
           "id": "clone_894",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "152",
               "end_line": "169",
               "source_code": "            //\n            case StatementTypes.OPEN :\n            case StatementTypes.FETCH :\n            case StatementTypes.FREE_LOCATOR :\n            case StatementTypes.GET_DESCRIPTOR :\n            case StatementTypes.HOLD_LOCATOR :\n                group = StatementTypes.X_SQL_DATA;\n                break;\n\n            //\n            case StatementTypes.PREPARABLE_DYNAMIC_DELETE_CURSOR :\n            case StatementTypes.PREPARABLE_DYNAMIC_UPDATE_CURSOR :\n            case StatementTypes.PREPARE :\n                group = StatementTypes.X_SQL_DYNAMIC;\n                break;\n\n            // logged by session\n            case StatementTypes.DISCONNECT :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "149",
               "end_line": "165",
               "source_code": "            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :\n                group = StatementTypes.X_HSQLDB_SETTING;\n                break;\n\n            case StatementTypes.SET_TABLE_CLUSTERED :\n            case StatementTypes.SET_TABLE_NEW_TABLESPACE :\n            case StatementTypes.SET_TABLE_SET_TABLESPACE :\n                group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.SET_TABLE_SOURCE_HEADER :"
           }

       },

       {
           "id": "clone_895",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "270",
               "end_line": "279",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n                return \"java.lang.Integer\";\n\n            case Types.SQL_BIGINT :\n                return \"java.lang.Long\";\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :"
           },

           "clone": {
               "file": "DITableInfo.java",
               "start_line": "175",
               "end_line": "184",
               "source_code": "            case TableBase.MEMORY_TABLE :\n            case TableBase.TEMP_TABLE :\n            case TableBase.INFO_SCHEMA_TABLE :\n                return \"MEMORY\";\n\n            case TableBase.CACHED_TABLE :\n                return \"CACHED\";\n\n            case TableBase.TEMP_TEXT_TABLE :\n            case TableBase.TEXT_TABLE :"
           }

       },

       {
           "id": "clone_896",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "730",
               "end_line": "738",
               "source_code": "            if (object.getName().comment == null) {\n                continue;\n            }\n\n            row              = t.getEmptyRowData();\n            row[catalog]     = database.getCatalogName().name;\n            row[schema]      = object.getSchemaName().name;\n            row[name]        = object.getName().name;\n            row[type]        = \"ROUTINE\";"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "686",
               "end_line": "694",
               "source_code": "                if (column.getName().comment == null) {\n                    continue;\n                }\n\n                row              = t.getEmptyRowData();\n                row[catalog]     = database.getCatalogName().name;\n                row[schema]      = table.getSchemaName().name;\n                row[name]        = table.getName().name;\n                row[type]        = \"COLUMN\";"
           }

       },

       {
           "id": "clone_897",

           "clone_type": "type-2",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "60",
               "end_line": "64",
               "source_code": "        PreparedStatement pstmt;\n        ResultSet         rs;\n        int               actualCount;\n        int               expectedCount;\n        String            sql;"
           },

           "clone": {
               "file": "HsqlSocketFactorySecure.java",
               "start_line": "343",
               "end_line": "347",
               "source_code": "        String            DN;\n        String            CN;\n        int               start;\n        int               end;\n        String            emsg;"
           }

       },

       {
           "id": "clone_898",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2492",
               "end_line": "2499",
               "source_code": "            //-------------------------------------------\n            // required by JDBC:\n            // ------------------------------------------\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);\n            addColumn(t, \"PRECISION\", Type.SQL_INTEGER);\n            addColumn(t, \"LITERAL_PREFIX\", CHARACTER_DATA);\n            addColumn(t, \"LITERAL_SUFFIX\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1281",
               "end_line": "1285",
               "source_code": "            addColumn(t, \"INDEX_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE\", Type.SQL_SMALLINT);                // NOT NULL\n            addColumn(t, \"ORDINAL_POSITION\", Type.SQL_SMALLINT);    // NOT NULL\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ASC_OR_DESC\", CHARACTER_DATA);"
           }

       },

       {
           "id": "clone_899",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "2014",
               "end_line": "2024",
               "source_code": "                    case Tokens.BOTH :\n                        spec = Tokens.T_BOTH;\n                        break;\n\n                    case Tokens.LEADING :\n                        spec = Tokens.T_LEADING;\n                        break;\n\n                    case Tokens.TRAILING :\n                        spec = Tokens.T_TRAILING;\n                        break;"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "1262",
               "end_line": "1272",
               "source_code": "            case Types.SQL_INTERVAL_HOUR :\n                calendarPart = Calendar.HOUR_OF_DAY;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                calendarPart = Calendar.MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_SECOND :\n                calendarPart = Calendar.SECOND;\n                break;"
           }

       },

       {
           "id": "clone_900",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1212",
               "end_line": "1227",
               "source_code": "                        readThis(Tokens.SCALE);\n\n                        value    = readIntegerObject();\n                        property = HsqlDatabaseProperties.sql_avg_scale;\n                        break;\n\n                    case Tokens.DOUBLE :\n                        read();\n                        readThis(Tokens.NAN);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_double_nan;\n                        break;\n\n                    case Tokens.LONGVAR :\n                        read();"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1196",
               "end_line": "1211",
               "source_code": "                        readThis(Tokens.NULLS);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_unique_nulls;\n                        break;\n\n                    case Tokens.CONVERT :\n                        read();\n                        readThis(Tokens.TRUNCATE);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_convert_trunc;\n                        break;\n\n                    case Tokens.AVG :\n                        read();"
           }

       },

       {
           "id": "clone_901",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "2005",
               "end_line": "2021",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :"
           },

           "clone": {
               "file": "Schema.java",
               "start_line": "273",
               "end_line": "289",
               "source_code": "            case SchemaObject.PROCEDURE :\n                return procedureLookup;\n\n            case SchemaObject.FUNCTION :\n                return functionLookup;\n\n            case SchemaObject.ROUTINE :\n                return functionLookup;\n\n            case SchemaObject.SPECIFIC_ROUTINE :\n                return specificRoutineLookup;\n\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n                return typeLookup;\n\n            case SchemaObject.ASSERTION :"
           }

       },

       {
           "id": "clone_902",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "4231",
               "end_line": "4237",
               "source_code": "                    case Tokens.TABLE :\n                    case Tokens.VALUES :\n                    case Tokens.SELECT :\n                        rewind(position);\n\n                        TableDerived td =\n                            XreadSubqueryTableBody(OpTypes.ROW_SUBQUERY);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3933",
               "end_line": "3938",
               "source_code": "            case Tokens.TABLE :\n            case Tokens.VALUES :\n            case Tokens.SELECT :\n                rewind(position);\n\n                TableDerived td = XreadSubqueryTableBody(OpTypes.IN);"
           }

       },

       {
           "id": "clone_903",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "962",
               "end_line": "970",
               "source_code": "                    if (routine.getType() == SchemaObject.FUNCTION\n                            || !set.add(Tokens.SAVEPOINT)) {\n                        throw unexpectedToken();\n                    }\n\n                    read();\n                    readThis(Tokens.SAVEPOINT);\n                    readThis(Tokens.LEVEL);\n                    routine.setNewSavepointLevel(false);"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "949",
               "end_line": "957",
               "source_code": "                    if (routine.getType() == SchemaObject.FUNCTION\n                            || !set.add(Tokens.SAVEPOINT)) {\n                        throw unexpectedToken();\n                    }\n\n                    read();\n                    readThis(Tokens.SAVEPOINT);\n                    readThis(Tokens.LEVEL);\n                    routine.setNewSavepointLevel(true);"
           }

       },

       {
           "id": "clone_904",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "360",
               "end_line": "367",
               "source_code": "            ps.setClob(3, clob);\n            ps.executeUpdate();\n\n            data = data.replaceFirst(\"insert\", \"INSERT\");\n            clob = new JDBCClob(data);\n\n            ps.setClob(3, clob);\n            ps.executeUpdate();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "278",
               "end_line": "285",
               "source_code": "            ps.setClob(1, clob);\n            ps.executeUpdate();\n\n            data = data.replaceFirst(\"insert\", \"INSERT\");\n            clob = new JDBCClob(data);\n\n            ps.setClob(1, clob);\n            ps.executeUpdate();"
           }

       },

       {
           "id": "clone_905",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "6251",
               "end_line": "6256",
               "source_code": "            break;\n          case '<':\n            sb.append(\"&lt;\");\n            break;\n          case '>':\n            sb.append(\"&gt;\");"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "6244",
               "end_line": "6250",
               "source_code": "            break;\n          case '\\'':\n            // This case not supported by Commons Lang's escapeHtml\n            sb.append(\"&apos;\");\n            break;\n          case '&':\n            sb.append(\"&amp;\");"
           }

       },

       {
           "id": "clone_906",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8286",
               "end_line": "8321",
               "source_code": "        Table t = sysTables[VIEW_TABLE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[VIEW_TABLE_USAGE]);\n\n            addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);    // not null\n\n            // false PK, as VIEW_CATALOG, VIEW_SCHEMA, TABLE_CATALOG, and/or\n            // TABLE_SCHEMA may be NULL\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[VIEW_TABLE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }\n\n        // Column number mappings\n        final int view_catalog  = 0;\n        final int view_schema   = 1;\n        final int view_name     = 2;\n        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;\n\n        //\n        Iterator tables;\n        Table    table;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1775",
               "end_line": "1810",
               "source_code": "        Table t = sysTables[CHECK_CONSTRAINT_ROUTINE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(\n                sysTableHsqlNames[CHECK_CONSTRAINT_ROUTINE_USAGE]);\n\n            addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);      // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[CHECK_CONSTRAINT_ROUTINE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int constraint_catalog = 0;\n        final int constraint_schema  = 1;\n        final int constraint_name    = 2;\n        final int specific_catalog   = 3;\n        final int specific_schema    = 4;\n        final int specific_name      = 5;\n\n        //\n        // Intermediate holders\n        Iterator       constraints;\n        Constraint     constraint;"
           }

       },

       {
           "id": "clone_907",

           "clone_type": "type-2",

           "origin": {
               "file": "TestCacheSize.java",
               "start_line": "446",
               "end_line": "455",
               "source_code": "            long nextrandom   = randomgen.nextLong();\n            int  randomlength = (int) nextrandom & 0x7f;\n\n            if (randomlength > filler.length()) {\n                randomlength = filler.length();\n            }\n\n            String varfiller = filler.substring(0, randomlength);\n\n            ps.setString(6, nextrandom + varfiller);"
           },

           "clone": {
               "file": "TestCacheSize.java",
               "start_line": "347",
               "end_line": "357",
               "source_code": "                // small rows\n                long nextrandom   = randomgen.nextLong();\n                int  randomlength = (int) nextrandom & 0x7f;\n\n                if (randomlength > filler.length()) {\n                    randomlength = filler.length();\n                }\n\n                String varfiller = filler.substring(0, randomlength);\n\n                ps.setString(4, nextrandom + varfiller);"
           }

       },

       {
           "id": "clone_908",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5745",
               "end_line": "5791",
               "source_code": "            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_909",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "72",
               "end_line": "77",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_MONTH :\n                isYearMonth = true;\n                break;\n\n            default :"
           },

           "clone": {
               "file": "StatementCompound.java",
               "start_line": "91",
               "end_line": "96",
               "source_code": "            case StatementTypes.BEGIN_END :\n            case StatementTypes.IF :\n                isLoop = false;\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_910",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1867",
               "end_line": "1872",
               "source_code": "        ResultMetaData meta     = createPart.getParametersMetaData();\n        Object         params[] = new Object[meta.getColumnCount()];\n\n        params[ALLOC_PART.BLOCK_COUNT]  = ValuePool.getInt(blockCount);\n        params[ALLOC_PART.BLOCK_OFFSET] = ValuePool.getInt(blockOffset);\n        params[ALLOC_PART.PART_OFFSET]  = ValuePool.getLong(partOffset);"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "1849",
               "end_line": "1854",
               "source_code": "        ResultMetaData meta = createSingleLobPartCall.getParametersMetaData();\n        Object         params[] = new Object[meta.getColumnCount()];\n\n        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);\n        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);\n        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);"
           }

       },

       {
           "id": "clone_911",

           "clone_type": "type-2",

           "origin": {
               "file": "TestHashStructures.java",
               "start_line": "142",
               "end_line": "154",
               "source_code": "            populateBySerialIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            depopulateRandomly(uMap, hMap, 20);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            depopulateRandomly(uMap, hMap, 20);"
           },

           "clone": {
               "file": "TestHashStructures.java",
               "start_line": "62",
               "end_line": "82",
               "source_code": "            populateBySerialIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n\n            // -\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n\n            //\n            depopulateRandomly(uMap, hMap, 20);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n\n            // -\n            populateBySerialIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n\n            //\n            depopulateByIterator(uMap, hMap, 20);"
           }

       },

       {
           "id": "clone_912",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCStatement.java",
               "start_line": "749",
               "end_line": "754",
               "source_code": "            case JDBCResultSet.FETCH_FORWARD :\n            case JDBCResultSet.FETCH_REVERSE :\n            case JDBCResultSet.FETCH_UNKNOWN :\n                fetchDirection = direction;\n\n                break;"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "118",
               "end_line": "122",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                typeWidth = DOUBLE_WIDTH;\n                break;"
           }

       },

       {
           "id": "clone_913",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "260",
               "end_line": "274",
               "source_code": "        InputStream fis = (InputStream) AccessController.doPrivileged(\n            new PrivilegedAction() {\n\n            public InputStream run() {\n                return getClass().getResourceAsStream(resourceFileName);\n            }\n        });\n        InputStreamReader reader = null;\n\n        try {\n            reader = new InputStreamReader(fis, \"ISO-8859-1\");\n        } catch (Exception e) {}\n\n        LineNumberReader lineReader = new LineNumberReader(reader);\n        LineGroupReader  lg = new LineGroupReader(lineReader, starters);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "129",
               "end_line": "143",
               "source_code": "            InputStream fis = (InputStream) AccessController.doPrivileged(\n                new PrivilegedAction() {\n\n                public InputStream run() {\n                    return getClass().getResourceAsStream(path);\n                }\n            });\n            InputStreamReader reader = null;\n\n            try {\n                reader = new InputStreamReader(fis, \"ISO-8859-1\");\n            } catch (Exception e) {}\n\n            LineNumberReader lineReader = new LineNumberReader(reader);\n            LineGroupReader  lg = new LineGroupReader(lineReader, starters);"
           }

       },

       {
           "id": "clone_914",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2805",
               "end_line": "2819",
               "source_code": "            // -----------------------------------------------------------------\n            // required by DatabaseMetaData.getVersionColumns filter parameters\n            // -----------------------------------------------------------------\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null\n\n            // -----------------------------------------------------------------\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_VERSIONCOLUMNS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, null, false);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4903",
               "end_line": "4913",
               "source_code": "            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);     // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, null, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_915",

           "clone_type": "type-2",

           "origin": {
               "file": "DTIType.java",
               "start_line": "426",
               "end_line": "439",
               "source_code": "            case DAY_OF_MONTH :\n                return Tokens.T_DAY_OF_MONTH;\n\n            case DAY_OF_WEEK :\n                return Tokens.T_DAY_OF_WEEK;\n\n            case DAY_OF_YEAR :\n                return Tokens.T_DAY_OF_YEAR;\n\n            case WEEK_OF_YEAR :\n                return Tokens.T_WEEK_OF_YEAR;\n\n            case SECONDS_MIDNIGHT :\n                return Tokens.T_SECONDS_MIDNIGHT;"
           },

           "clone": {
               "file": "DTIType.java",
               "start_line": "411",
               "end_line": "424",
               "source_code": "            case TIMEZONE_HOUR :\n                return Tokens.T_TIMEZONE_HOUR;\n\n            case TIMEZONE_MINUTE :\n                return Tokens.T_TIMEZONE_MINUTE;\n\n            case DAY_NAME :\n                return Tokens.T_DAY_NAME;\n\n            case MONTH_NAME :\n                return Tokens.T_MONTH_NAME;\n\n            case QUARTER :\n                return Tokens.T_QUARTER;"
           }

       },

       {
           "id": "clone_916",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDateTime.java",
               "start_line": "60",
               "end_line": "65",
               "source_code": "            Statement  statement  = connection.createStatement();\n\n            statement.execute(\"drop table time_test if exists\");\n            statement.execute(\"drop table date_test if exists\");\n            statement.execute(\"create table time_test(time_test time)\");\n            statement.execute(\"create table date_test(date_test date)\");"
           },

           "clone": {
               "file": "TestHarness.java",
               "start_line": "245",
               "end_line": "251",
               "source_code": "                Statement stmt = con.createStatement();\n\n                stmt.execute(\"SET PASSWORD 'password'\");\n                stmt.execute(\"CREATE USER abcd PASSWORD 'dcba'\");\n                stmt.execute(\"CREATE SEQUENCE MySeq\");\n                stmt.execute(\n                    \"CREATE TABLE MyTable (Id INT PRIMARY KEY, Name VARCHAR(100) NOT NULL)\");"
           }

       },

       {
           "id": "clone_917",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2314",
               "end_line": "2329",
               "source_code": "                case SchemaObject.FUNCTION : {\n                    set = schema.functionLookup;\n\n                    RoutineSchema routine =\n                        (RoutineSchema) set.getObject(name.name);\n\n                    object = routine;\n\n                    Routine[] specifics = routine.getSpecificRoutines();\n\n                    for (int i = 0; i < specifics.length; i++) {\n                        removeSchemaObject(specifics[i].getSpecificName());\n                    }\n\n                    break;\n                }"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "2298",
               "end_line": "2313",
               "source_code": "                case SchemaObject.PROCEDURE : {\n                    set = schema.procedureLookup;\n\n                    RoutineSchema routine =\n                        (RoutineSchema) set.getObject(name.name);\n\n                    object = routine;\n\n                    Routine[] specifics = routine.getSpecificRoutines();\n\n                    for (int i = 0; i < specifics.length; i++) {\n                        removeSchemaObject(specifics[i].getSpecificName());\n                    }\n\n                    break;\n                }"
           }

       },

       {
           "id": "clone_918",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3972",
               "end_line": "3982",
               "source_code": "        // column number mappings\n        final int jar_catalog = 0;\n        final int jar_schema  = 1;\n        final int jar_name    = 2;\n        final int jar_path    = 3;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3932",
               "end_line": "3941",
               "source_code": "        final int path_jar_name    = 2;\n        final int jar_catalog      = 3;\n        final int jar_schema       = 4;\n        final int jar_name         = 5;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        return t;"
           }

       },

       {
           "id": "clone_919",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "159",
               "end_line": "165",
               "source_code": "            case Types.SQL_TIMESTAMP :\n                nodes                = new Expression[BINARY];\n                nodes[LEFT]          = e;\n                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(\n                    Types.SQL_TIMESTAMP_WITH_TIME_ZONE, e.dataType.scale);\n                break;"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "150",
               "end_line": "157",
               "source_code": "            case Types.SQL_TIME :\n                nodes                = new Expression[BINARY];\n                nodes[LEFT]          = e;\n                nodes[LEFT].dataType = e.dataType;\n                dataType =\n                    DateTimeType.getDateTimeType(Types.SQL_TIME_WITH_TIME_ZONE,\n                                                 e.dataType.scale);\n                break;"
           }

       },

       {
           "id": "clone_920",

           "clone_type": "type-2",

           "origin": {
               "file": "BaseHashMap.java",
               "start_line": "571",
               "end_line": "601",
               "source_code": "            } else if (isLongKey) {\n                if (longKey == longKeyTable[lookup]) {\n                    if (removeKey) {\n                        while (true) {\n                            if (longKey == 0) {\n                                hasZeroKey   = false;\n                                zeroKeyIndex = -1;\n                            }\n\n                            longKeyTable[lookup]   = 0;\n                            longValueTable[lookup] = 0;\n\n                            hashIndex.unlinkNode(index, lastLookup, lookup);\n\n                            multiValueTable[lookup] = false;\n                            lookup = hashIndex.hashTable[index];\n\n                            if (lookup < 0\n                                    || longKey != longKeyTable[lookup]) {\n                                return null;\n                            }\n                        }\n                    } else {\n                        if (intValueTable[lookup] == longValue) {\n                            return null;\n                        }\n                    }\n\n                    multiValue = true;\n                }\n            }"
           },

           "clone": {
               "file": "BaseHashMap.java",
               "start_line": "542",
               "end_line": "571",
               "source_code": "            } else if (isIntKey) {\n                if (longKey == intKeyTable[lookup]) {\n                    if (removeKey) {\n                        while (true) {\n                            if (longKey == 0) {\n                                hasZeroKey   = false;\n                                zeroKeyIndex = -1;\n                            }\n\n                            intKeyTable[lookup]   = 0;\n                            intValueTable[lookup] = 0;\n\n                            hashIndex.unlinkNode(index, lastLookup, lookup);\n\n                            multiValueTable[lookup] = false;\n                            lookup = hashIndex.hashTable[index];\n\n                            if (lookup < 0 || longKey != intKeyTable[lookup]) {\n                                return null;\n                            }\n                        }\n                    } else {\n                        if (intValueTable[lookup] == longValue) {\n                            return null;\n                        }\n                    }\n\n                    multiValue = true;\n                }\n            }"
           }

       },

       {
           "id": "clone_921",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "523",
               "end_line": "528",
               "source_code": "                objectType    = SchemaObject.TABLE;\n                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            default :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "201",
               "end_line": "206",
               "source_code": "                group                  = StatementTypes.X_HSQLDB_SESSION;\n                isTransactionStatement = false;\n                isLogged               = false;\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_922",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "1016",
               "end_line": "1022",
               "source_code": "        case 64: break;\n        case 5: \n          { commandBuffer.setLength(0);\n    yybegin(PL);\n          }\n        case 65: break;\n        case 34:"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "909",
               "end_line": "915",
               "source_code": "        case 46: break;\n        case 4: \n          { commandBuffer.setLength(0);\n    yybegin(MACRO);\n          }\n        case 47: break;\n        case 18:"
           }

       },

       {
           "id": "clone_923",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "109",
               "end_line": "131",
               "source_code": "                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.DROP_ASSERTION :\n            case StatementTypes.DROP_CHARACTER_SET :\n            case StatementTypes.DROP_COLLATION :\n            case StatementTypes.DROP_TYPE :\n            case StatementTypes.DROP_DOMAIN :\n            case StatementTypes.DROP_ROLE :\n            case StatementTypes.DROP_USER :\n            case StatementTypes.DROP_ROUTINE :\n            case StatementTypes.DROP_SCHEMA :\n            case StatementTypes.DROP_SEQUENCE :\n            case StatementTypes.DROP_TABLE :\n            case StatementTypes.DROP_TRANSFORM :\n            case StatementTypes.DROP_TRANSLATION :\n            case StatementTypes.DROP_TRIGGER :\n            case StatementTypes.DROP_CAST :\n            case StatementTypes.DROP_ORDERING :\n            case StatementTypes.DROP_VIEW :\n            case StatementTypes.DROP_INDEX :\n            case StatementTypes.DROP_CONSTRAINT :\n            case StatementTypes.DROP_COLUMN :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "123",
               "end_line": "146",
               "source_code": "                group                  = StatementTypes.X_HSQLDB_SETTING;\n                break;\n\n//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :\n            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :"
           }

       },

       {
           "id": "clone_924",

           "clone_type": "type-2",

           "origin": {
               "file": "RangeVariableResolver.java",
               "start_line": "114",
               "end_line": "119",
               "source_code": "        this.rangeVariables = rangeVariables;\n        this.conditions     = conditions;\n        this.compileContext = compileContext;\n        this.reorder        = reorder;\n\n        initialise();"
           },

           "clone": {
               "file": "StatementInsert.java",
               "start_line": "94",
               "end_line": "99",
               "source_code": "        this.insertColumnMap    = columnMap;\n        this.insertCheckColumns = checkColumns;\n        this.queryExpression    = queryExpression;\n        this.overrideUserValue  = override;\n\n        setupChecks();"
           }

       },

       {
           "id": "clone_925",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8288",
               "end_line": "8309",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[VIEW_TABLE_USAGE]);\n\n            addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);    // not null\n\n            // false PK, as VIEW_CATALOG, VIEW_SCHEMA, TABLE_CATALOG, and/or\n            // TABLE_SCHEMA may be NULL\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[VIEW_TABLE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8172",
               "end_line": "8191",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[VIEW_ROUTINE_USAGE]);\n\n            addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[VIEW_ROUTINE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_926",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "114",
               "end_line": "120",
               "source_code": "        nodes        = new Expression[BINARY];\n        nodes[LEFT]  = left;\n        nodes[RIGHT] = right;\n\n        setEqualityMode();\n\n        dataType = Type.SQL_BOOLEAN;"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "98",
               "end_line": "104",
               "source_code": "        nodes        = new Expression[BINARY];\n        nodes[LEFT]  = leftExpression;\n        nodes[RIGHT] = rightExpression;\n\n        setEqualityMode();\n\n        dataType = Type.SQL_BOOLEAN;"
           }

       },

       {
           "id": "clone_927",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "136",
               "end_line": "143",
               "source_code": "                sb.append(left).append('*').append(right);\n                break;\n\n            case OpTypes.DIVIDE :\n                sb.append(left).append('/').append(right);\n                break;\n\n            case OpTypes.CONCAT :"
           },

           "clone": {
               "file": "ExpressionArithmetic.java",
               "start_line": "128",
               "end_line": "135",
               "source_code": "                sb.append(left).append('+').append(right);\n                break;\n\n            case OpTypes.SUBTRACT :\n                sb.append(left).append('-').append(right);\n                break;\n\n            case OpTypes.MULTIPLY :"
           }

       },

       {
           "id": "clone_928",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "590",
               "end_line": "597",
               "source_code": "                sb.append(Tokens.T_MATCH);\n                break;\n\n            case OpTypes.IS_NULL :\n                sb.append(Tokens.T_IS).append(' ').append(Tokens.T_NULL);\n                break;\n\n            case OpTypes.UNIQUE :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "544",
               "end_line": "551",
               "source_code": "                sb.append(Tokens.T_NOT);\n                break;\n\n            case OpTypes.NOT_DISTINCT :\n                sb.append(Tokens.T_NOT).append(' ').append(Tokens.T_DISTINCT);\n                break;\n\n            case OpTypes.EQUAL :"
           }

       },

       {
           "id": "clone_929",

           "clone_type": "type-2",

           "origin": {
               "file": "SetFunction.java",
               "start_line": "396",
               "end_line": "402",
               "source_code": "                    case Types.SQL_REAL :\n                    case Types.SQL_FLOAT :\n                    case Types.SQL_DOUBLE :\n                        return new Double(currentDouble);\n\n                    case Types.SQL_NUMERIC :\n                    case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "418",
               "end_line": "424",
               "source_code": "            case Tokens.LOG :\n            case Tokens.OCTETLENGTH :\n            case Tokens.UCASE :\n                return new FunctionSQL(id);\n\n            case Tokens.CURDATE :\n            case Tokens.CURTIME :"
           }

       },

       {
           "id": "clone_930",

           "clone_type": "type-2",

           "origin": {
               "file": "Table.java",
               "start_line": "188",
               "end_line": "194",
               "source_code": "                isView           = true;\n                break;\n\n            case RESULT_TABLE :\n                persistenceScope = SCOPE_SESSION;\n                isSessionBased   = true;\n                break;"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "112",
               "end_line": "118",
               "source_code": "                isSessionBased   = true;\n                break;\n\n            case SYSTEM_SUBQUERY :\n                persistenceScope = SCOPE_STATEMENT;\n                isSessionBased   = true;\n                break;"
           }

       },

       {
           "id": "clone_931",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "1035",
               "end_line": "1043",
               "source_code": "        case 66: break;\n        case 32: \n          { specialAppendState = false;\n        commandBuffer.append(yytext());\n        /* embedded comment may disable opening quotes and closing ; */\n        debug(\"SQL /**/ Comment\", yytext());\n          }\n        case 67: break;\n        case 13:"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "891",
               "end_line": "899",
               "source_code": "        case 43: break;\n        case 28: \n          { specialAppendState = false;\n        commandBuffer.append(yytext());\n        /* embedded comment may disable opening quotes and closing ; */\n        debug(\"SQL -- Comment\", yytext());\n          }\n        case 44: break;\n        case 17:"
           }

       },

       {
           "id": "clone_932",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3345",
               "end_line": "3394",
               "source_code": "        Table t = sysTables[TABLE_PRIVILEGES];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TABLE_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n            addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);\n\n            //\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6\n            }, false);\n\n            return t;\n        }\n\n        // calculated column values\n        String  tableCatalog;\n        String  tableSchema;\n        String  tableName;\n        Grantee granteeObject;\n        String  privilege;\n\n        // intermediate holders\n        Iterator tables;\n        Table    table;\n        Object[] row;\n\n        // column number mappings\n        final int grantor        = 0;\n        final int grantee        = 1;\n        final int table_catalog  = 2;\n        final int table_schema   = 3;\n        final int table_name     = 4;\n        final int privilege_type = 5;\n        final int is_grantable   = 6;\n        final int with_hierarchy = 7;\n        OrderedHashSet grantees =\n            session.getGrantee().getGranteeAndAllRolesWithPublic();\n\n        tables = allTables();"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2918",
               "end_line": "2970",
               "source_code": "        Table t = sysTables[COLUMN_PRIVILEGES];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[COLUMN_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLUMN_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                2, 3, 4, 5, 6, 1, 0\n            }, false);\n\n            return t;\n        }\n\n// calculated column values\n        String  tableCatalog;\n        String  tableSchema;\n        String  tableName;\n        Grantee granteeObject;\n\n// intermediate holders\n        User     user;\n        Iterator tables;\n        Table    table;\n        Object[] row;\n\n// column number mappings\n        final int grantor        = 0;\n        final int grantee        = 1;\n        final int table_catalog  = 2;\n        final int table_schema   = 3;\n        final int table_name     = 4;\n        final int column_name    = 5;\n        final int privilege_type = 6;\n        final int is_grantable   = 7;\n\n        // enumerations\n        OrderedHashSet grantees =\n            session.getGrantee().getGranteeAndAllRolesWithPublic();\n\n// Initialization\n        tables = allTables();"
           }

       },

       {
           "id": "clone_933",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "693",
               "end_line": "700",
               "source_code": "        execSQL(pref + \"SET REFERENTIAL_INTEGRITY true\", expect);\n        execSQL(\"SET \" + pref + \"REFERENTIAL_INTEGRITY true\", expect);\n\n        // Can't test text tables in in-memory DB.\n        execSQL(pref + \"SET SCRIPTFORMAT text\", expect);\n        execSQL(\"SET \" + pref + \"SCRIPTFORMAT text\", expect);\n        execSQL(pref + \"SET TABLE tsttbl READONLY true\", expect);\n        execSQL(\"SET \" + pref + \"TABLE tsttbl READONLY true\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "687",
               "end_line": "692",
               "source_code": "        execSQL(pref + \"SET IGNORECASE true\", expect);\n        execSQL(\"SET \" + pref + \"IGNORECASE true\", expect);\n        execSQL(pref + \"SET LOGSIZE 5\", expect);\n        execSQL(\"SET \" + pref + \"LOGSIZE 5\", expect);\n        execSQL(pref + \"SET PASSWORD blah\", expect);\n        execSQL(\"SET \" + pref + \"PASSWORD blah\", expect);"
           }

       },

       {
           "id": "clone_934",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "81",
               "end_line": "89",
               "source_code": "        sql = \"insert into empty values 'name10'\";\n\n        stmt.execute(sql);\n\n        sql = \"insert into empty values 'name11'\";\n\n        stmt.execute(sql);\n\n        sql   = \"insert into test values(?)\";"
           },

           "clone": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "69",
               "end_line": "77",
               "source_code": "        sql = \"create table test(name varchar(255))\";\n\n        stmt.execute(sql);\n\n        sql = \"create index idx on test(name)\";\n\n        stmt.execute(sql);\n\n        sql = \"create table empty(name varchar(255))\";"
           }

       },

       {
           "id": "clone_935",

           "clone_type": "type-2",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "152",
               "end_line": "163",
               "source_code": "        sql = \"select count(*) from test a where ? in(select b.id from test b where a.id = b.id)\";\n        pstmt = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "105",
               "end_line": "116",
               "source_code": "        sql = \"select count(*) from test a, test b where ? in (a.id, b.id)\";\n        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_936",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "472",
               "end_line": "482",
               "source_code": "                case Tokens.DAYOFWEEK :\n                    function.extractSpec = Tokens.DAY_OF_WEEK;\n                    break;\n\n                case Tokens.DAYOFYEAR :\n                    function.extractSpec = Tokens.DAY_OF_YEAR;\n                    break;\n\n                case Tokens.WEEK :\n                    function.extractSpec = Tokens.WEEK_OF_YEAR;\n                    break;"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "460",
               "end_line": "470",
               "source_code": "                case Tokens.DAYNAME :\n                    function.extractSpec = Tokens.DAY_NAME;\n                    break;\n\n                case Tokens.MONTHNAME :\n                    function.extractSpec = Tokens.MONTH_NAME;\n                    break;\n\n                case Tokens.DAYOFMONTH :\n                    function.extractSpec = Tokens.DAY_OF_MONTH;\n                    break;"
           }

       },

       {
           "id": "clone_937",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3486",
               "end_line": "3500",
               "source_code": "        final int table_catalog                = 0;\n        final int table_schema                 = 1;\n        final int table_name                   = 2;\n        final int table_type                   = 3;\n        final int self_referencing_column_name = 4;\n        final int reference_generation         = 5;\n        final int user_defined_type_catalog    = 6;\n        final int user_defined_type_schema     = 7;\n        final int user_defined_type_name       = 8;\n        final int is_insertable_into           = 9;\n        final int is_typed                     = 10;\n        final int commit_action                = 11;\n\n        // Initialization\n        tables = allTables();"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2325",
               "end_line": "2343",
               "source_code": "        final int itable_schem = 1;\n        final int itable_name  = 2;\n        final int itable_type  = 3;\n        final int iremark      = 4;\n\n        // JDBC 3.0\n        final int itype_cat   = 5;\n        final int itype_schem = 6;\n        final int itype_name  = 7;\n        final int isref_cname = 8;\n        final int iref_gen    = 9;\n\n        // hsqldb ext\n        final int ihsqldb_type   = 10;\n        final int iread_only     = 11;\n        final int icommit_action = 12;\n\n        // Initialization\n        tables = allTables();"
           }

       },

       {
           "id": "clone_938",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1981",
               "end_line": "1996",
               "source_code": "        if (token.tokenType == Tokens.ELSE) {\n            read();\n\n            condition = Expression.EXPR_TRUE;\n            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION,\n                                                condition);\n\n            list.add(statement);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }\n        }"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1935",
               "end_line": "1949",
               "source_code": "        if (token.tokenType == Tokens.ELSE) {\n            read();\n\n            e = Expression.EXPR_TRUE;\n            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION, e);\n\n            list.add(statement);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }\n        }"
           }

       },

       {
           "id": "clone_939",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5855",
               "end_line": "5901",
               "source_code": "        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_940",

           "clone_type": "type-2",

           "origin": {
               "file": "TestJDBCGeneratedColumns.java",
               "start_line": "134",
               "end_line": "149",
               "source_code": "            ps = c.prepareStatement(s, new String[]{ \"C\", \"I\" });\n\n            ps.execute();\n\n            rs = ps.getGeneratedKeys();\n\n            while (rs.next()) {\n                System.out.println(\"\" + rs.getInt(2));\n\n                successPrepared &= rs.getInt(2) == 38;\n                successPrepared &= rs.getBigDecimal(2).intValue() == 38;\n\n                successPrepared &= rs.getString(1).startsWith(\"TEST\");\n            }\n\n            ps.close();"
           },

           "clone": {
               "file": "TestJDBCGeneratedColumns.java",
               "start_line": "117",
               "end_line": "132",
               "source_code": "            ps = c.prepareStatement(s, new String[]{ \"I\", \"C\" });\n\n            ps.execute();\n\n            rs = ps.getGeneratedKeys();\n\n            while (rs.next()) {\n                System.out.println(\"\" + rs.getInt(1));\n\n                successPrepared &= rs.getInt(1) == 37;\n                successPrepared &= rs.getBigDecimal(1).intValue() == 37;\n\n                successPrepared &= rs.getString(2).startsWith(\"TEST\");\n            }\n\n            ps.close();"
           }

       },

       {
           "id": "clone_941",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBinary.java",
               "start_line": "412",
               "end_line": "417",
               "source_code": "            case Types.SQL_BIT_VARYING :\n                s += INT_STORE_SIZE;\n                s += ((BinaryData) o).length(null);\n                break;\n\n            case Types.SQL_CLOB :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "406",
               "end_line": "411",
               "source_code": "            case Types.SQL_VARBINARY :\n                s += INT_STORE_SIZE;\n                s += ((BinaryData) o).length(null);\n                break;\n\n            case Types.SQL_BIT :"
           }

       },

       {
           "id": "clone_942",

           "clone_type": "type-2",

           "origin": {
               "file": "ValuePoolHashMap.java",
               "start_line": "403",
               "end_line": "412",
               "source_code": "        lookup                 = hashIndex.linkNode(index, lastLookup);\n        objectKeyTable[lookup] = key;\n\n        if (accessCount > ACCESS_MAX) {\n            resetAccessCount();\n        }\n\n        accessTable[lookup] = accessCount++;\n\n        return key;"
           },

           "clone": {
               "file": "ValuePoolHashMap.java",
               "start_line": "277",
               "end_line": "286",
               "source_code": "        lookup                 = hashIndex.linkNode(index, lastLookup);\n        objectKeyTable[lookup] = testValue;\n\n        if (accessCount > ACCESS_MAX) {\n            resetAccessCount();\n        }\n\n        accessTable[lookup] = accessCount++;\n\n        return testValue;"
           }

       },

       {
           "id": "clone_943",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "186",
               "end_line": "206",
               "source_code": "            case OpTypes.NEGATE :\n                sb.append(\"NEGATE \");\n                break;\n\n            case OpTypes.ADD :\n                sb.append(\"ADD \");\n                break;\n\n            case OpTypes.SUBTRACT :\n                sb.append(\"SUBTRACT \");\n                break;\n\n            case OpTypes.MULTIPLY :\n                sb.append(\"MULTIPLY \");\n                break;\n\n            case OpTypes.DIVIDE :\n                sb.append(\"DIVIDE \");\n                break;\n\n            case OpTypes.CONCAT :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "556",
               "end_line": "576",
               "source_code": "            case OpTypes.GREATER_EQUAL_PRE :\n                sb.append(\"GREATER_EQUAL\");\n                break;\n\n            case OpTypes.GREATER :\n                sb.append(\"GREATER\");\n                break;\n\n            case OpTypes.SMALLER :\n                sb.append(\"SMALLER\");\n                break;\n\n            case OpTypes.SMALLER_EQUAL :\n                sb.append(\"SMALLER_EQUAL\");\n                break;\n\n            case OpTypes.NOT_EQUAL :\n                sb.append(\"NOT_EQUAL\");\n                break;\n\n            case OpTypes.AND :"
           }

       },

       {
           "id": "clone_944",

           "clone_type": "type-2",

           "origin": {
               "file": "Log.java",
               "start_line": "205",
               "end_line": "209",
               "source_code": "        closeLog();\n        deleteOldDataFiles();\n        deleteOldTempFiles();\n        deleteTempFileDirectory();\n        writeScript(script);"
           },

           "clone": {
               "file": "QuerySpecification.java",
               "start_line": "394",
               "end_line": "398",
               "source_code": "        checkLobUsage();\n        setMergeability();\n        setUpdatability();\n        setResultColumnTypes();\n        createResultMetaData(session);"
           }

       },

       {
           "id": "clone_945",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5740",
               "end_line": "5786",
               "source_code": "            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_946",

           "clone_type": "type-2",

           "origin": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "288",
               "end_line": "302",
               "source_code": "        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            row.keepInMemory(false);\n\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           },

           "clone": {
               "file": "NodeAVLDisk.java",
               "start_line": "332",
               "end_line": "346",
               "source_code": "        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            row.keepInMemory(false);\n\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           }

       },

       {
           "id": "clone_947",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "2109",
               "end_line": "2115",
               "source_code": "                    read();\n                    readThis(Tokens.FILES);\n\n                    files = Boolean.TRUE;\n                    break;\n\n                default :"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1637",
               "end_line": "1643",
               "source_code": "                            read();\n                            readThis(Tokens.READ);\n\n                            level = SessionInterface.TX_REPEATABLE_READ;\n                            break;\n\n                        default :"
           }

       },

       {
           "id": "clone_948",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1738",
               "end_line": "1744",
               "source_code": "        cal.setTimeInMillis(s2);\n\n        int lastDay2;\n        int months2 = cal.get(Calendar.MONTH) + cal.get(Calendar.YEAR) * 12;\n        int day2    = cal.get(Calendar.DAY_OF_MONTH);\n\n        cal.set(Calendar.DAY_OF_MONTH, 1);"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "1719",
               "end_line": "1725",
               "source_code": "        cal.setTimeInMillis(s1);\n\n        int lastDay1;\n        int months1 = cal.get(Calendar.MONTH) + cal.get(Calendar.YEAR) * 12;\n        int day1    = cal.get(Calendar.DAY_OF_MONTH);\n\n        cal.set(Calendar.DAY_OF_MONTH, 1);"
           }

       },

       {
           "id": "clone_949",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5864",
               "end_line": "5910",
               "source_code": "        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_950",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3220",
               "end_line": "3241",
               "source_code": "            case Tokens.POSITION :\n\n//            case Token.OCCURRENCES_REGEX :\n//            case Token.POSITION_REGEX :\n            case Tokens.EXTRACT :\n            case Tokens.CHAR_LENGTH :\n            case Tokens.CHARACTER_LENGTH :\n            case Tokens.OCTET_LENGTH :\n            case Tokens.CARDINALITY :\n            case Tokens.ABS :\n            case Tokens.MOD :\n            case Tokens.LN :\n            case Tokens.EXP :\n            case Tokens.POWER :\n            case Tokens.SQRT :\n            case Tokens.FLOOR :\n            case Tokens.CEILING :\n            case Tokens.CEIL :\n            case Tokens.WIDTH_BUCKET :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2826",
               "end_line": "2844",
               "source_code": "            case Tokens.POSITION_REGEX :\n            case Tokens.EXTRACT :\n            case Tokens.CHAR_LENGTH :\n            case Tokens.CHARACTER_LENGTH :\n            case Tokens.OCTET_LENGTH :\n            case Tokens.CARDINALITY :\n            case Tokens.ABS :\n            case Tokens.MOD :\n            case Tokens.LN :\n            case Tokens.EXP :\n            case Tokens.POWER :\n            case Tokens.SQRT :\n            case Tokens.FLOOR :\n            case Tokens.CEILING :\n            case Tokens.CEIL :\n            case Tokens.WIDTH_BUCKET :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);"
           }

       },

       {
           "id": "clone_951",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5774",
               "end_line": "5826",
               "source_code": "            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_FROM_DECLARED_DATA_TYPE\",\n                      CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_DECLARED_NUMERIC_PRECISION\",\n                      CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DECLARED_NUMERIC_SCALE\",\n                      CARDINAL_NUMBER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINES].name, false, SchemaObject.INDEX);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2586",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            // order: TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION\n            // added for unique: TABLE_CAT\n            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLUMNS].name, false, SchemaObject.INDEX);"
           }

       },

       {
           "id": "clone_952",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "435",
               "end_line": "455",
               "source_code": "            case Tokens.SEQUENCE : {\n                read();\n\n                statementType = StatementTypes.DROP_SEQUENCE;\n                objectType    = SchemaObject.SEQUENCE;\n                canCascade    = true;\n                useIfExists   = true;\n\n                break;\n            }\n            case Tokens.TRIGGER : {\n                read();\n\n                statementType = StatementTypes.DROP_TRIGGER;\n                objectType    = SchemaObject.TRIGGER;\n                canCascade    = false;\n                useIfExists   = true;\n\n                break;\n            }\n            case Tokens.USER :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "405",
               "end_line": "425",
               "source_code": "            case Tokens.PROCEDURE : {\n                read();\n\n                statementType = StatementTypes.DROP_ROUTINE;\n                objectType    = SchemaObject.PROCEDURE;\n                canCascade    = true;\n                useIfExists   = true;\n\n                break;\n            }\n            case Tokens.FUNCTION : {\n                read();\n\n                statementType = StatementTypes.DROP_ROUTINE;\n                objectType    = SchemaObject.FUNCTION;\n                canCascade    = true;\n                useIfExists   = true;\n\n                break;\n            }\n            case Tokens.SCHEMA :"
           }

       },

       {
           "id": "clone_953",

           "clone_type": "type-2",

           "origin": {
               "file": "Transfer.java",
               "start_line": "673",
               "end_line": "677",
               "source_code": "        tDestCreate.setText(t.Stmts.sDestCreate);\n        tDestDelete.setText(t.Stmts.sDestDelete);\n        tSourceSelect.setText(t.Stmts.sSourceSelect);\n        tDestInsert.setText(t.Stmts.sDestInsert);\n        tDestAlter.setText(t.Stmts.sDestAlter);"
           },

           "clone": {
               "file": "Transfer.java",
               "start_line": "668",
               "end_line": "672",
               "source_code": "        tSourceTable.setText(t.Stmts.sSourceTable);\n        tDestTable.setText(t.Stmts.sDestTable);\n        tDestDrop.setText(t.Stmts.sDestDrop);\n        tDestCreateIndex.setText(t.Stmts.sDestCreateIndex);\n        tDestDropIndex.setText(t.Stmts.sDestDropIndex);"
           }

       },

       {
           "id": "clone_954",

           "clone_type": "type-2",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "185",
               "end_line": "192",
               "source_code": "        pstmt.setInt(5, 2);\n        pstmt.setInt(6, 4);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "139",
               "end_line": "146",
               "source_code": "        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);"
           }

       },

       {
           "id": "clone_955",

           "clone_type": "type-2",

           "origin": {
               "file": "TestHarness.java",
               "start_line": "248",
               "end_line": "256",
               "source_code": "                stmt.execute(\"CREATE USER abcd PASSWORD 'dcba'\");\n                stmt.execute(\"CREATE SEQUENCE MySeq\");\n                stmt.execute(\n                    \"CREATE TABLE MyTable (Id INT PRIMARY KEY, Name VARCHAR(100) NOT NULL)\");\n                stmt.execute(\"CREATE TABLE Dummy (Blah VARCHAR(100) NOT NULL)\");\n                stmt.execute(\n                    \"INSERT INTO Dummy (Blah) VALUES ('dummy value')\");\n                stmt.execute(\"GRANT ALL ON MyTable TO abcd\");\n                stmt.execute(\"GRANT ALL ON Dummy TO abcd\");"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "694",
               "end_line": "702",
               "source_code": "        st.execute(\"DROP TABLE t1 if exists;\");\n        st.execute(\"DROP TABLE t2 if exists;\");\n        st.execute(\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\n        st.execute(\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");"
           }

       },

       {
           "id": "clone_956",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberSequence.java",
               "start_line": "580",
               "end_line": "589",
               "source_code": "        name       = other.name;\n        startValue = other.startValue;\n        currValue  = other.currValue;\n        lastValue  = other.lastValue;\n        increment  = other.increment;\n        dataType   = other.dataType;\n        minValue   = other.minValue;\n        maxValue   = other.maxValue;\n        isCycle    = other.isCycle;\n        isAlways   = other.isAlways;"
           },

           "clone": {
               "file": "Routine.java",
               "start_line": "826",
               "end_line": "837",
               "source_code": "        maxDynamicResults = routine.maxDynamicResults;\n        isRecursive       = routine.isRecursive;\n        javaMethod        = routine.javaMethod;\n\n        //\n        isRecursive              = routine.isRecursive;\n        javaMethodWithConnection = routine.javaMethodWithConnection;\n        methodName               = routine.methodName;\n        statement                = routine.statement;\n        references               = routine.references;\n        variableCount            = routine.variableCount;\n        ranges                   = routine.ranges;"
           }

       },

       {
           "id": "clone_957",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1654",
               "end_line": "1675",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[CHARACTER_SETS]);\n\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_REPERTOIRE\", SQL_IDENTIFIER);\n            addColumn(t, \"FORM_OF_USE\", SQL_IDENTIFIER);\n            addColumn(t, \"DEFAULT_COLLATE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DEFAULT_COLLATE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DEFAULT_COLLATE_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[CHARACTER_SETS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1303",
               "end_line": "1325",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SYSTEM_TABLESTATS]);\n\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"SPACE_ID\", CARDINAL_NUMBER);\n            addColumn(t, \"ALLOCATED_SPACE\", CARDINAL_NUMBER);\n            addColumn(t, \"USED_SPACE\", CARDINAL_NUMBER);\n            addColumn(t, \"USED_MEMORY\", CARDINAL_NUMBER);\n\n            //\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_TABLESTATS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2,\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_958",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5852",
               "end_line": "5898",
               "source_code": "        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_959",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "1874",
               "end_line": "1889",
               "source_code": "        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_UNIQUE).append(' ');\n        sb.append(Tokens.T_NULLS).append(' ');\n        sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE\n                                          : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_CONVERT).append(' ');\n        sb.append(Tokens.T_TRUNCATE).append(' ');\n        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE\n                                              : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
           },

           "clone": {
               "file": "Logger.java",
               "start_line": "1825",
               "end_line": "1840",
               "source_code": "        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_TDC).append(' ');\n        sb.append(Tokens.T_DELETE).append(' ');\n        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE\n                                          : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_TDC).append(' ');\n        sb.append(Tokens.T_UPDATE).append(' ');\n        sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE\n                                          : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
           }

       },

       {
           "id": "clone_960",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "108",
               "end_line": "120",
               "source_code": "            case StatementTypes.ALTER_VIEW :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.DROP_ASSERTION :\n            case StatementTypes.DROP_CHARACTER_SET :\n            case StatementTypes.DROP_COLLATION :\n            case StatementTypes.DROP_TYPE :\n            case StatementTypes.DROP_DOMAIN :\n            case StatementTypes.DROP_ROLE :\n            case StatementTypes.DROP_USER :\n            case StatementTypes.DROP_ROUTINE :\n            case StatementTypes.DROP_SCHEMA :"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "168",
               "end_line": "182",
               "source_code": "            // logged by session\n            case StatementTypes.DISCONNECT :\n                group = StatementTypes.X_SQL_CONNECTION;\n                break;\n\n            //\n            case StatementTypes.SET_COLLATION :\n            case StatementTypes.SET_CONNECTION :\n            case StatementTypes.SET_CONSTRAINT :\n            case StatementTypes.SET_DESCRIPTOR :\n            case StatementTypes.SET_SESSION_CHARACTERISTICS :\n            case StatementTypes.SET_TRANSFORM_GROUP :\n            case StatementTypes.SET_SESSION_RESULT_MAX_ROWS :\n            case StatementTypes.SET_SESSION_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_SESSION_AUTOCOMMIT :"
           }

       },

       {
           "id": "clone_961",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "203",
               "end_line": "216",
               "source_code": "            case Tokens.DOMAIN :\n                return compileCreateDomain();\n\n            case Tokens.TYPE :\n                return compileCreateType(isOrReplace);\n\n            case Tokens.CHARACTER :\n                return compileCreateCharacterSet();\n\n            case Tokens.COLLATION :\n                return compileCreateCollation();\n\n            // index\n            case Tokens.UNIQUE :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "188",
               "end_line": "200",
               "source_code": "            case Tokens.SCHEMA :\n                return compileCreateSchema();\n\n            case Tokens.TRIGGER :\n                return compileCreateTrigger(isOrReplace);\n\n            case Tokens.USER :\n                return compileCreateUser();\n\n            case Tokens.ROLE :\n                return compileCreateRole();\n\n            case Tokens.VIEW :"
           }

       },

       {
           "id": "clone_962",

           "clone_type": "type-2",

           "origin": {
               "file": "DataFileCache.java",
               "start_line": "435",
               "end_line": "443",
               "source_code": "                dataFile.seek(FLAGS_POS);\n\n                int flags = dataFile.readInt();\n\n                is180 = !BitMap.isSet(flags, FLAG_190);\n\n                dataFile.seek(LONG_FREE_POS_POS);\n\n                fileFreePosition = dataFile.readLong();"
           },

           "clone": {
               "file": "DataFileCache.java",
               "start_line": "352",
               "end_line": "360",
               "source_code": "                dataFile.seek(FLAGS_POS);\n\n                int flags = dataFile.readInt();\n\n                is180 = !BitMap.isSet(flags, FLAG_190);\n\n                dataFile.seek(LONG_EMPTY_SIZE);\n\n                lostSpaceSize = dataFile.readLong();"
           }

       },

       {
           "id": "clone_963",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "217",
               "end_line": "226",
               "source_code": "            case Types.SQL_INTERVAL_MONTH :\n                return Tokens.T_MONTH;\n\n            case Types.SQL_INTERVAL_DAY :\n                return Tokens.T_DAY;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return \"DAY TO HOUR\";\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :"
           },

           "clone": {
               "file": "ExpressionColumn.java",
               "start_line": "721",
               "end_line": "730",
               "source_code": "            case OpTypes.DEFAULT :\n                return Tokens.T_DEFAULT;\n\n            case OpTypes.DYNAMIC_PARAM :\n                return Tokens.T_QUESTION;\n\n            case OpTypes.ASTERISK :\n                return \"*\";\n\n            case OpTypes.COALESCE :"
           }

       },

       {
           "id": "clone_964",

           "clone_type": "type-2",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "706",
               "end_line": "722",
               "source_code": "                        outPacket.writeShort(0);              // text \"format code\"\n                        outPacket.write(\"typbasetype\");       // Col. name\n                        outPacket.writeInt(101);              // table ID\n                        outPacket.writeShort(103);            // column id\n                        outPacket.writeInt(26);               // Datatype ID  [adtid]\n                        outPacket.writeShort(4);              // Datatype size  [adtsize]\n                        outPacket.writeInt(-1);               // Var size [atttypmod]\n                        outPacket.writeShort(0);              // text \"format code\"\n                        outPacket.xmit('T', dataOutput);      // sending a Tuple (row)\n\n                        // This query returns no rows.  typenam \"lo\"??\n                        outPacket.write(\"SELECT\");\n                        outPacket.xmit('C', dataOutput);\n\n                        sendReadyForQuery = true;\n\n                        break;"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "670",
               "end_line": "686",
               "source_code": "                        outPacket.writeShort(1);              // Num cols.\n                        outPacket.write(\"oid\");\n                        outPacket.writeInt(201);\n                        outPacket.writeShort(1);\n                        outPacket.writeInt(23);\n                        outPacket.writeShort(4);\n                        outPacket.writeInt(-1);\n                        outPacket.writeShort(0);\n                        outPacket.xmit('T', dataOutput);      // Xmit Row Definition\n\n                        // This query returns no rows.  typenam \"lo\"??\n                        outPacket.write(\"SELECT\");\n                        outPacket.xmit('C', dataOutput);\n\n                        sendReadyForQuery = true;\n\n                        break;"
           }

       },

       {
           "id": "clone_965",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "495",
               "end_line": "511",
               "source_code": "                statementType = StatementTypes.DROP_CHARACTER_SET;\n                objectType    = SchemaObject.CHARSET;\n                canCascade    = false;\n                useIfExists   = true;\n                break;\n\n            case Tokens.COLLATION :\n                read();\n\n                statementType = StatementTypes.DROP_COLLATION;\n                objectType    = SchemaObject.COLLATION;\n                canCascade    = false;\n                useIfExists   = true;\n                break;\n\n            case Tokens.VIEW :\n                read();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "476",
               "end_line": "492",
               "source_code": "                statementType = StatementTypes.DROP_DOMAIN;\n                objectType    = SchemaObject.DOMAIN;\n                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            case Tokens.TYPE :\n                read();\n\n                statementType = StatementTypes.DROP_TYPE;\n                objectType    = SchemaObject.TYPE;\n                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            case Tokens.CHARACTER :\n                read();"
           }

       },

       {
           "id": "clone_966",

           "clone_type": "type-2",

           "origin": {
               "file": "TransferDb.java",
               "start_line": "472",
               "end_line": "482",
               "source_code": "            /*\n            ** Don't know how to retrieve the underlying select so we leave here.\n            ** The user will have to edit the rest of the create statement.\n            */\n            TTable.Stmts.bTransfer    = false;\n            TTable.Stmts.bCreate      = true;\n            TTable.Stmts.bDelete      = false;\n            TTable.Stmts.bDrop        = true;\n            TTable.Stmts.bCreateIndex = false;\n            TTable.Stmts.bDropIndex   = false;\n            TTable.Stmts.bInsert      = false;"
           },

           "clone": {
               "file": "TransferSQLText.java",
               "start_line": "415",
               "end_line": "421",
               "source_code": "                        relatedTable.Stmts.bCreate      = false;\n                        relatedTable.Stmts.bDelete      = false;\n                        relatedTable.Stmts.bDrop        = false;\n                        relatedTable.Stmts.bCreateIndex = false;\n                        relatedTable.Stmts.bDropIndex   = false;\n                        relatedTable.Stmts.bInsert      = false;\n                        relatedTable.Stmts.bAlter       = false;"
           }

       },

       {
           "id": "clone_967",

           "clone_type": "type-2",

           "origin": {
               "file": "Constraint.java",
               "start_line": "100",
               "end_line": "104",
               "source_code": "        this.name      = name;\n        constType      = type;\n        core           = new ConstraintCore();\n        core.mainTable = table;\n        core.mainCols  = cols;"
           },

           "clone": {
               "file": "Constraint.java",
               "start_line": "82",
               "end_line": "86",
               "source_code": "        this.name      = name;\n        constType      = type;\n        core           = new ConstraintCore();\n        core.mainTable = t;\n        core.mainIndex = index;"
           }

       },

       {
           "id": "clone_968",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3116",
               "end_line": "3134",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[DATA_TYPE_PRIVILEGES]);\n\n            addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"OBJECT_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[DATA_TYPE_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2202",
               "end_line": "2220",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[COLUMN_COLUMN_USAGE]);\n\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DEPENDENT_COLUMN\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLUMN_COLUMN_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_969",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5731",
               "end_line": "5779",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[ROUTINES]);\n\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2532",
               "end_line": "2580",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[COLUMNS]);\n\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_970",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2507",
               "end_line": "2517",
               "source_code": "            addColumn(t, \"LOCAL_TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MINIMUM_SCALE\", Type.SQL_SMALLINT);\n            addColumn(t, \"MAXIMUM_SCALE\", Type.SQL_SMALLINT);\n            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);\n            addColumn(t, \"NUM_PREC_RADIX\", Type.SQL_INTEGER);\n\n            //-------------------------------------------\n            // SQL CLI / ODBC - not in JDBC spec\n            // ------------------------------------------\n            addColumn(t, \"INTERVAL_PRECISION\", Type.SQL_INTEGER);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2500",
               "end_line": "2506",
               "source_code": "            addColumn(t, \"CREATE_PARAMS\", CHARACTER_DATA);\n            addColumn(t, \"NULLABLE\", Type.SQL_SMALLINT);\n            addColumn(t, \"CASE_SENSITIVE\", Type.SQL_BOOLEAN);\n            addColumn(t, \"SEARCHABLE\", Type.SQL_INTEGER);\n            addColumn(t, \"UNSIGNED_ATTRIBUTE\", Type.SQL_BOOLEAN);\n            addColumn(t, \"FIXED_PREC_SCALE\", Type.SQL_BOOLEAN);\n            addColumn(t, \"AUTO_INCREMENT\", Type.SQL_BOOLEAN);"
           }

       },

       {
           "id": "clone_971",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1016",
               "end_line": "1021",
               "source_code": "            case Types.SQL_TIME :\n                sb.append(Tokens.T_TIME);\n                break;\n\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "580",
               "end_line": "585",
               "source_code": "            case OpTypes.OR :\n                sb.append(Tokens.T_OR);\n                break;\n\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :"
           }

       },

       {
           "id": "clone_972",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4415",
               "end_line": "4430",
               "source_code": "        } else if (o instanceof BlobInputStream) {\n            BlobInputStream is = (BlobInputStream) o;\n\n            if (is.session.getDatabaseUniqueName().equals(\n                    session.getDatabaseUniqueName())) {\n                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,\n                                        \"invalid Reader\");\n            }\n\n            // in the same database ? see if it blocks in\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n\n            return;\n        }"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4345",
               "end_line": "4358",
               "source_code": "        } else if (o instanceof ClobInputStream) {\n            ClobInputStream is = (ClobInputStream) o;\n\n            if (is.session.getDatabaseUniqueName().equals(\n                    session.getDatabaseUniqueName())) {\n                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,\n                                        \"invalid Reader\");\n            }\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n\n            return;\n        }"
           }

       },

       {
           "id": "clone_973",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementCompound.java",
               "start_line": "331",
               "end_line": "337",
               "source_code": "            case StatementTypes.FOR :\n                result = executeForLoop(session);\n                break;\n\n            case StatementTypes.LOOP :\n            case StatementTypes.WHILE :\n            case StatementTypes.REPEAT :"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "223",
               "end_line": "229",
               "source_code": "            case Types.SQL_INTERVAL_MONTH :\n                o = readYearMonthInterval(type);\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :"
           }

       },

       {
           "id": "clone_974",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5762",
               "end_line": "5808",
               "source_code": "            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_975",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2839",
               "end_line": "2848",
               "source_code": "            addColumn(t, \"ADMIN\", Type.SQL_BOOLEAN);\n            addColumn(t, \"INITIAL_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"AUTHENTICATION\", SQL_IDENTIFIER);\n            addColumn(t, \"PASSWORD_DIGEST\", SQL_IDENTIFIER);\n\n            // order: USER\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_USERS].name, false,\n                SchemaObject.INDEX);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2803",
               "end_line": "2815",
               "source_code": "            addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null\n\n            // -----------------------------------------------------------------\n            // required by DatabaseMetaData.getVersionColumns filter parameters\n            // -----------------------------------------------------------------\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null\n\n            // -----------------------------------------------------------------\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_VERSIONCOLUMNS].name, false,\n                SchemaObject.INDEX);"
           }

       },

       {
           "id": "clone_976",

           "clone_type": "type-2",

           "origin": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "318",
               "end_line": "339",
               "source_code": "    public NodeAVL setBalance(PersistentStore store, int b) {\n\n        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iBalance = b;\n\n        row.keepInMemory(false);\n\n        return node;\n    }"
           },

           "clone": {
               "file": "NodeAVLDisk.java",
               "start_line": "357",
               "end_line": "378",
               "source_code": "    public NodeAVL setBalance(PersistentStore store, int b) {\n\n        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iBalance = b;\n\n        row.keepInMemory(false);\n\n        return node;\n    }"
           }

       },

       {
           "id": "clone_977",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "732",
               "end_line": "743",
               "source_code": "        execSQL(\"ALTER USER tstuser SET PASSWORD \" + pref + \"frank\", expect);\n        execSQL(pref + \"ALTER USER tstuser SET PASSWORD frank\", expect);\n        execSQL(\"ALTER \" + pref + \"USER tstuser SET PASSWORD frank\", expect);\n        execSQL(\"ALTER USER tstuser \" + pref + \"SET PASSWORD frank\", expect);\n        execSQL(\"ALTER USER tstuser SET \" + pref + \"PASSWORD frank\", expect);\n        execSQL(pref + \"ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR\", expect);\n        execSQL(\"ALTER \" + pref + \"TABLE tsttbl ADD COLUMN vco2 VARCHAR\",\n                expect);\n        execSQL(\"ALTER TABLE tsttbl \" + pref + \"ADD COLUMN vco3 VARCHAR\",\n                expect);\n        execSQL(\"ALTER TABLE tsttbl ADD \" + pref + \"COLUMN vco4 VARCHAR\",\n                expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "722",
               "end_line": "731",
               "source_code": "        execSQL(\"UPDATE tsttbl SET vc = 'eleven' \" + pref + \"WHERE i = 1\",\n                expect);\n        execSQL(pref + \"ALTER INDEX tstind RENAME TO renamedind\", expect);\n        execSQL(\"ALTER INDEX tstind \" + pref + \"RENAME TO renamedind\", expect);\n        execSQL(\"ALTER \" + pref + \"INDEX tstind RENAME TO renamedind\", expect);\n        execSQL(\"ALTER INDEX tstind RENAME \" + pref + \"TO renamedind\", expect);\n        execSQL(pref + \"ALTER SEQUENCE tstseq RESTART WITH 13\", expect);\n        execSQL(\"ALTER \" + pref + \"SEQUENCE tstseq RESTART WITH 13\", expect);\n        execSQL(\"ALTER SEQUENCE tstseq \" + pref + \"RESTART WITH 13\", expect);\n        execSQL(\"ALTER SEQUENCE tstseq RESTART \" + pref + \"WITH 13\", expect);"
           }

       },

       {
           "id": "clone_978",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "182",
               "end_line": "192",
               "source_code": "            case StatementTypes.SET_SESSION_AUTOCOMMIT :\n                group = StatementTypes.X_HSQLDB_SESSION;\n                break;\n\n            case StatementTypes.SET_SESSION_SQL_IGNORECASE :\n                isLogged = true;\n                group    = StatementTypes.X_HSQLDB_SESSION;\n                break;\n\n            // logged by session if necessary\n            case StatementTypes.COMMIT_WORK :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "208",
               "end_line": "217",
               "source_code": "                    case Tokens.RAW :\n                        typeNumber = Types.SQL_VARBINARY;\n                        break;\n\n                    case Tokens.VARCHAR2 :\n                        readByteOrChar = true;\n                        typeNumber     = Types.SQL_VARCHAR;\n                        break;\n\n                    case Tokens.NVARCHAR2 :"
           }

       },

       {
           "id": "clone_979",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "2215",
               "end_line": "2247",
               "source_code": "                    } else {\n                        if (Boolean.FALSE.equals(isForEachRow)\n                                || newRowName != null) {\n                            throw unexpectedToken();\n                        }\n\n                        readIfThis(Tokens.ROW);\n                        readIfThis(Tokens.AS);\n                        checkIsSimpleName();\n\n                        newRowName = HsqlNameManager.getSimpleName(\n                            token.tokenString, token.isDelimitedIdentifier);\n\n                        read();\n\n                        String n = newRowName.name;\n\n                        if (n.equals(oldTableName) || n.equals(newTableName)\n                                || n.equals(oldRowName)) {\n                            throw unexpectedToken();\n                        }\n\n                        isForEachRow = Boolean.TRUE;\n\n                        RangeVariable range =\n                            new RangeVariable(table.columnList, newRowName,\n                                              false,\n                                              RangeVariable.TRANSITION_RANGE);\n\n                        range.rangePosition             = TriggerDef.NEW_ROW;\n                        transitions[TriggerDef.NEW_ROW] = null;\n                        rangeVars[TriggerDef.NEW_ROW]   = range;\n                    }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2142",
               "end_line": "2174",
               "source_code": "                    } else {\n                        if (Boolean.FALSE.equals(isForEachRow)\n                                || oldRowName != null) {\n                            throw unexpectedToken();\n                        }\n\n                        readIfThis(Tokens.ROW);\n                        readIfThis(Tokens.AS);\n                        checkIsSimpleName();\n\n                        oldRowName = HsqlNameManager.getSimpleName(\n                            token.tokenString, token.isDelimitedIdentifier);\n\n                        read();\n\n                        String n = oldRowName.name;\n\n                        if (n.equals(newTableName) || n.equals(oldTableName)\n                                || n.equals(newRowName)) {\n                            throw unexpectedToken();\n                        }\n\n                        isForEachRow = Boolean.TRUE;\n\n                        RangeVariable range =\n                            new RangeVariable(table.columnList, oldRowName,\n                                              false,\n                                              RangeVariable.TRANSITION_RANGE);\n\n                        range.rangePosition             = TriggerDef.OLD_ROW;\n                        transitions[TriggerDef.OLD_ROW] = null;\n                        rangeVars[TriggerDef.OLD_ROW]   = range;\n                    }"
           }

       },

       {
           "id": "clone_980",

           "clone_type": "type-2",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "283",
               "end_line": "287",
               "source_code": "        Index      index          = null;\n        Constraint mainConstraint = null;\n        boolean    addFK          = false;\n        boolean    addUnique      = false;\n        boolean    addCheck       = false;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "4569",
               "end_line": "4575",
               "source_code": "        Right          right       = null;\n\n//        SchemaObject   schemaObject;\n        HsqlName objectName    = null;\n        boolean  isTable       = false;\n        boolean  isUsage       = false;\n        boolean  isExec        = false;"
           }

       },

       {
           "id": "clone_981",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "3973",
               "end_line": "4088",
               "source_code": "    /**\n     * Retrieves a description of the foreign key columns that reference the\n     * given table's primary key columns (the foreign keys exported by a\n     * table).  They are ordered by FKTABLE_CAT, FKTABLE_SCHEM,\n     * FKTABLE_NAME, and KEY_SEQ.\n     *\n     * <P>Each foreign key column description has the following columns:\n     *  <OL>\n     *  <LI><B>PKTABLE_CAT</B> String => primary key table catalog (may be <code>null</code>)\n     *  <LI><B>PKTABLE_SCHEM</B> String => primary key table schema (may be <code>null</code>)\n     *  <LI><B>PKTABLE_NAME</B> String => primary key table name\n     *  <LI><B>PKCOLUMN_NAME</B> String => primary key column name\n     *  <LI><B>FKTABLE_CAT</B> String => foreign key table catalog (may be <code>null</code>)\n     *      being exported (may be <code>null</code>)\n     *  <LI><B>FKTABLE_SCHEM</B> String => foreign key table schema (may be <code>null</code>)\n     *      being exported (may be <code>null</code>)\n     *  <LI><B>FKTABLE_NAME</B> String => foreign key table name\n     *      being exported\n     *  <LI><B>FKCOLUMN_NAME</B> String => foreign key column name\n     *      being exported\n     *  <LI><B>KEY_SEQ</B> short => (JDBC4 clarification:) sequence number within foreign key( a value\n     *  of 1 represents the first column of the foreign key, a value of 2 would\n     *  represent the second column within the foreign key).\n     *  <LI><B>UPDATE_RULE</B> short => What happens to\n     *       foreign key when primary is updated:\n     *      <UL>\n     *      <LI> importedNoAction - do not allow update of primary\n     *               key if it has been imported\n     *      <LI> importedKeyCascade - change imported key to agree\n     *               with primary key update\n     *      <LI> importedKeySetNull - change imported key to <code>NULL</code> if\n     *               its primary key has been updated\n     *      <LI> importedKeySetDefault - change imported key to default values\n     *               if its primary key has been updated\n     *      <LI> importedKeyRestrict - same as importedKeyNoAction\n     *                                 (for ODBC 2.x compatibility)\n     *      </UL>\n     *  <LI><B>DELETE_RULE</B> short => What happens to\n     *      the foreign key when primary is deleted.\n     *      <UL>\n     *      <LI> importedKeyNoAction - do not allow delete of primary\n     *               key if it has been imported\n     *      <LI> importedKeyCascade - delete rows that import a deleted key\n     *      <LI> importedKeySetNull - change imported key to <code>NULL</code> if\n     *               its primary key has been deleted\n     *      <LI> importedKeyRestrict - same as importedKeyNoAction\n     *                                 (for ODBC 2.x compatibility)\n     *      <LI> importedKeySetDefault - change imported key to default if\n     *               its primary key has been deleted\n     *      </UL>\n     *  <LI><B>FK_NAME</B> String => foreign key name (may be <code>null</code>)\n     *  <LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)\n     *  <LI><B>DEFERRABILITY</B> short => can the evaluation of foreign key\n     *      constraints be deferred until commit\n     *      <UL>\n     *      <LI> importedKeyInitiallyDeferred - see SQL92 for definition\n     *      <LI> importedKeyInitiallyImmediate - see SQL92 for definition\n     *      <LI> importedKeyNotDeferrable - see SQL92 for definition\n     *      </UL>\n     *  </OL>\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports the SQL Standard. It treats unquoted identifiers as\n     * case insensitive in SQL and stores\n     * them in upper case; it treats quoted identifiers as case sensitive and\n     * stores them verbatim. All JDBCDatabaseMetaData methods perform\n     * case-sensitive comparison between name (pattern) arguments and the\n     * corresponding identifier values as they are stored in the database.\n     * Therefore, care must be taken to specify name arguments precisely\n     * (including case) as they are stored in the database. <p>\n     *\n     * Since 1.7.2, this feature is supported by default. If the jar is\n     * compiled without org.hsqldb.dbinfo.DatabaseInformationMain, the feature is\n     * not supported. The default implementation is\n     * {@link org.hsqldb.dbinfo.DatabaseInformationMain}.\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in this database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is stored\n     *        in this database\n     * @return a <code>ResultSet</code> object in which each row is a\n     *         foreign key column description\n     * @exception SQLException if a database access error occurs\n     * @see #getImportedKeys\n     * @see #supportsMixedCaseQuotedIdentifiers\n     * @see #storesUpperCaseIdentifiers\n     */\n    public ResultSet getExportedKeys(String catalog, String schema,\n                                     String table) throws SQLException {\n\n        if (table == null) {\n            throw JDBCUtil.nullArgument(\"table\");\n        }\n        catalog = translateCatalog(catalog);\n        schema  = translateSchema(schema);\n\n        StringBuffer select =\n            toQueryPrefix(\"SYSTEM_CROSSREFERENCE\").append(and(\"PKTABLE_CAT\",\n                \"=\", catalog)).append(and(\"PKTABLE_SCHEM\", \"=\",\n                    schema)).append(and(\"PKTABLE_NAME\", \"=\", table));\n\n        // By default, query already returns the table ordered by\n        // FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and KEY_SEQ.\n        return execute(select.toString());\n    }"
           },

           "clone": {
               "file": "JDBCDatabaseMetaData.java",
               "start_line": "3788",
               "end_line": "3856",
               "source_code": "    /**\n     * Retrieves a description of the given table's primary key columns.  They\n     * are ordered by COLUMN_NAME.\n     *\n     * <P>Each primary key column description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => table name\n     *  <LI><B>COLUMN_NAME</B> String => column name\n     *  <LI><B>KEY_SEQ</B> short => (JDBC4 Clarification:) sequence number within primary key( a value\n     *  of 1 represents the first column of the primary key, a value of 2 would\n     *  represent the second column within the primary key).\n     *  <LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)\n     *  </OL>\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports the SQL Standard. It treats unquoted identifiers as\n     * case insensitive in SQL and stores\n     * them in upper case; it treats quoted identifiers as case sensitive and\n     * stores them verbatim. All JDBCDatabaseMetaData methods perform\n     * case-sensitive comparison between name (pattern) arguments and the\n     * corresponding identifier values as they are stored in the database.\n     * Therefore, care must be taken to specify name arguments precisely\n     * (including case) as they are stored in the database. <p>\n     *\n     * Since 1.7.2, this feature is supported by default. If the jar is\n     * compiled without org.hsqldb.dbinfo.DatabaseInformationMain, the feature is\n     * not supported. The default implementation is\n     * {@link org.hsqldb.dbinfo.DatabaseInformationMain}.\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is stored\n     *        in the database\n     * @return <code>ResultSet</code> - each row is a primary key column description\n     * @exception SQLException if a database access error occurs\n     * @see #supportsMixedCaseQuotedIdentifiers\n     * @see #storesUpperCaseIdentifiers\n     */\n    public ResultSet getPrimaryKeys(String catalog, String schema,\n                                    String table) throws SQLException {\n\n        if (table == null) {\n            throw JDBCUtil.nullArgument(\"table\");\n        }\n        catalog = translateCatalog(catalog);\n        schema  = translateSchema(schema);\n\n        StringBuffer select =\n            toQueryPrefix(\"SYSTEM_PRIMARYKEYS\").append(and(\"TABLE_CAT\", \"=\",\n                catalog)).append(and(\"TABLE_SCHEM\", \"=\",\n                                     schema)).append(and(\"TABLE_NAME\", \"=\",\n                                         table));\n\n        // By default, query already returns result in contract order\n        return execute(select.toString());\n    }"
           }

       },

       {
           "id": "clone_982",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "77",
               "end_line": "81",
               "source_code": "            case SchemaObject.COLUMN :\n            case SchemaObject.CONSTRAINT :\n            case SchemaObject.INDEX :\n                map = new HashMap();\n                break;"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "71",
               "end_line": "75",
               "source_code": "            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.ASSERTION :\n            case SchemaObject.TRIGGER :\n                map = new HashMappedList();\n                break;"
           }

       },

       {
           "id": "clone_983",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1507",
               "end_line": "1513",
               "source_code": "                Object[] row      = t.getEmptyRowData();\n\n                row[grantee]      = role.getName().getNameString();\n                row[role_name]    = roleName;\n                row[is_grantable] = Tokens.T_NO;\n\n                t.insertSys(session, store, row);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1494",
               "end_line": "1500",
               "source_code": "                Object[] row      = t.getEmptyRowData();\n\n                row[grantee]      = role.getName().getNameString();\n                row[role_name]    = roleName;\n                row[is_grantable] = Tokens.T_YES;\n\n                t.insertSys(session, store, row);"
           }

       },

       {
           "id": "clone_984",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "885",
               "end_line": "895",
               "source_code": "                case Tokens.CONTAINS : {\n                    if (!set.add(Tokens.SQL)) {\n                        throw unexpectedToken();\n                    }\n\n                    read();\n                    readThis(Tokens.SQL);\n                    routine.setDataImpact(Routine.CONTAINS_SQL);\n\n                    break;\n                }"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "862",
               "end_line": "872",
               "source_code": "                case Tokens.NO : {\n                    if (!set.add(Tokens.SQL)) {\n                        throw unexpectedToken();\n                    }\n\n                    read();\n                    readThis(Tokens.SQL);\n                    routine.setDataImpact(Routine.NO_SQL);\n\n                    break;\n                }"
           }

       },

       {
           "id": "clone_985",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8339",
               "end_line": "8352",
               "source_code": "                HsqlName refName = (HsqlName) references.get(i);\n\n                if (refName.type != SchemaObject.TABLE\n                        && refName.type != SchemaObject.VIEW) {\n                    continue;\n                }\n\n                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                = t.getEmptyRowData();\n                row[view_catalog]  = database.getCatalogName().name;\n                row[view_schema]   = table.getSchemaName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5689",
               "end_line": "5702",
               "source_code": "                HsqlName refName = (HsqlName) set.get(i);\n\n                if (refName.type != SchemaObject.TABLE\n                        && refName.type != SchemaObject.VIEW) {\n                    continue;\n                }\n\n                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;"
           }

       },

       {
           "id": "clone_986",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5758",
               "end_line": "5804",
               "source_code": "            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_987",

           "clone_type": "type-2",

           "origin": {
               "file": "Grantee.java",
               "start_line": "1171",
               "end_line": "1178",
               "source_code": "                        if (type != null) {\n                            sb.append(Tokens.T_GRANT).append(' ');\n                            sb.append(Tokens.T_USAGE);\n                            sb.append(' ').append(Tokens.T_ON).append(' ');\n                            sb.append(Tokens.T_TYPE).append(' ');\n                            sb.append(\n                                hsqlname.getSchemaQualifiedStatementName());\n                        }"
           },

           "clone": {
               "file": "Grantee.java",
               "start_line": "1154",
               "end_line": "1161",
               "source_code": "                        if (domain != null) {\n                            sb.append(Tokens.T_GRANT).append(' ');\n                            sb.append(Tokens.T_USAGE);\n                            sb.append(' ').append(Tokens.T_ON).append(' ');\n                            sb.append(Tokens.T_DOMAIN).append(' ');\n                            sb.append(\n                                hsqlname.getSchemaQualifiedStatementName());\n                        }"
           }

       },

       {
           "id": "clone_988",

           "clone_type": "type-2",

           "origin": {
               "file": "TestStressInsert.java",
               "start_line": "133",
               "end_line": "147",
               "source_code": "    public void insertB(byte[] id) throws Exception {\n\n        try {\n            int    length = getRandomLength(LOB_SIZE);\n            byte[] array  = Arrays.copyOf(data, length);\n\n\n            insertStmtB.setBytes(1, array);\n            insertStmtB.setBytes(2, id);\n            insertStmtB.execute();\n        } finally {\n            insertStmtB.clearParameters();\n            insertStmtB.clearWarnings();\n        }\n    }"
           },

           "clone": {
               "file": "TestStressInsert.java",
               "start_line": "117",
               "end_line": "131",
               "source_code": "    public void insertA(byte[] id) throws Exception {\n\n        try {\n            int    length = getRandomLength(LOB_SIZE);\n            byte[] array  = Arrays.copyOf(data, length);\n\n\n            insertStmtA.setBytes(1, array);\n            insertStmtA.setBytes(2, id);\n            insertStmtA.execute();\n        } finally {\n            insertStmtA.clearParameters();\n            insertStmtA.clearWarnings();\n        }\n    }"
           }

       },

       {
           "id": "clone_989",

           "clone_type": "type-2",

           "origin": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "191",
               "end_line": "211",
               "source_code": "    NodeAVL getRight(PersistentStore store) {\n\n        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (node.iRight == NO_POS) {\n            return null;\n        }\n\n        if (node.nRight == null || !node.nRight.isInMemory()) {\n            node.nRight         = findNode(store, node.iRight);\n            node.nRight.nParent = node;\n        }\n\n        return node.nRight;\n    }"
           },

           "clone": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "169",
               "end_line": "189",
               "source_code": "    NodeAVL getLeft(PersistentStore store) {\n\n        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (node.iLeft == NO_POS) {\n            return null;\n        }\n\n        if (node.nLeft == null || !node.nLeft.isInMemory()) {\n            node.nLeft         = findNode(store, node.iLeft);\n            node.nLeft.nParent = node;\n        }\n\n        return node.nLeft;\n    }"
           }

       },

       {
           "id": "clone_990",

           "clone_type": "type-2",

           "origin": {
               "file": "TransferTable.java",
               "start_line": "413",
               "end_line": "443",
               "source_code": "            if (Stmts.bAlter) {\n                if (Stmts.sDestAlter.charAt(Stmts.sDestAlter.length() - 1)\n                        != ';') {\n                    Stmts.sDestAlter += \";\";\n                }\n\n                int lastsemicolon = 0;\n                int nextsemicolon = Stmts.sDestAlter.indexOf(';');\n\n                while (nextsemicolon > lastsemicolon) {\n                    Statement = Stmts.sDestAlter.substring(lastsemicolon,\n                                                           nextsemicolon);\n\n                    while (Statement.charAt(Statement.length() - 1) == ';') {\n                        Statement = Statement.substring(0, Statement.length()\n                                                        - 1);\n                    }\n\n                    try {\n                        tracer.trace(\"Executing \" + Statement);\n                        destDb.execute(Statement);\n                    } catch (Exception e) {\n                        tracer.trace(\"Ignoring error \" + e.getMessage());\n                    }\n\n                    lastsemicolon = nextsemicolon + 1;\n                    nextsemicolon = lastsemicolon\n                                    + Stmts.sDestAlter.substring(\n                                        lastsemicolon).indexOf(';');\n                }\n            }"
           },

           "clone": {
               "file": "TransferTable.java",
               "start_line": "230",
               "end_line": "260",
               "source_code": "            if (Stmts.bDrop) {\n                if (Stmts.sDestDrop.charAt(Stmts.sDestDrop.length() - 1)\n                        != ';') {\n                    Stmts.sDestDrop += \";\";\n                }\n\n                int lastsemicolon = 0;\n                int nextsemicolon = Stmts.sDestDrop.indexOf(';');\n\n                while (nextsemicolon > lastsemicolon) {\n                    Statement = Stmts.sDestDrop.substring(lastsemicolon,\n                                                          nextsemicolon);\n\n                    while (Statement.charAt(Statement.length() - 1) == ';') {\n                        Statement = Statement.substring(0, Statement.length()\n                                                        - 1);\n                    }\n\n                    try {\n                        tracer.trace(\"Executing \" + Statement);\n                        destDb.execute(Statement);\n                    } catch (Exception e) {\n                        tracer.trace(\"Ignoring error \" + e.getMessage());\n                    }\n\n                    lastsemicolon = nextsemicolon + 1;\n                    nextsemicolon = lastsemicolon\n                                    + Stmts.sDestDrop.substring(\n                                        lastsemicolon).indexOf(';');\n                }\n            }"
           }

       },

       {
           "id": "clone_991",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1343",
               "end_line": "1373",
               "source_code": "            case Types.SQL_INTERVAL_MONTH :\n                endType = Types.SQL_INTERVAL_MONTH;\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n                endType = Types.SQL_INTERVAL_DAY;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;"
           },

           "clone": {
               "file": "ParserBase.java",
               "start_line": "251",
               "end_line": "281",
               "source_code": "                case Tokens.X_MALFORMED_BINARY_STRING :\n                    errorCode = ErrorCode.X_42587;\n                    break;\n\n                case Tokens.X_MALFORMED_BIT_STRING :\n                    errorCode = ErrorCode.X_42588;\n                    break;\n\n                case Tokens.X_MALFORMED_UNICODE_STRING :\n                    errorCode = ErrorCode.X_42586;\n                    break;\n\n                case Tokens.X_MALFORMED_STRING :\n                    errorCode = ErrorCode.X_42584;\n                    break;\n\n                case Tokens.X_UNKNOWN_TOKEN :\n                    errorCode = ErrorCode.X_42582;\n                    break;\n\n                case Tokens.X_MALFORMED_NUMERIC :\n                    errorCode = ErrorCode.X_42585;\n                    break;\n\n                case Tokens.X_MALFORMED_COMMENT :\n                    errorCode = ErrorCode.X_42589;\n                    break;\n\n                case Tokens.X_MALFORMED_IDENTIFIER :\n                    errorCode = ErrorCode.X_42583;\n                    break;"
           }

       },

       {
           "id": "clone_992",

           "clone_type": "type-2",

           "origin": {
               "file": "Expression.java",
               "start_line": "124",
               "end_line": "140",
               "source_code": "        subqueryAggregateExpressionSet.add(OpTypes.SUM);\n        subqueryAggregateExpressionSet.add(OpTypes.MIN);\n        subqueryAggregateExpressionSet.add(OpTypes.MAX);\n        subqueryAggregateExpressionSet.add(OpTypes.AVG);\n        subqueryAggregateExpressionSet.add(OpTypes.EVERY);\n        subqueryAggregateExpressionSet.add(OpTypes.SOME);\n        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_POP);\n        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_SAMP);\n        subqueryAggregateExpressionSet.add(OpTypes.VAR_POP);\n        subqueryAggregateExpressionSet.add(OpTypes.VAR_SAMP);\n        subqueryAggregateExpressionSet.add(OpTypes.GROUP_CONCAT);\n        subqueryAggregateExpressionSet.add(OpTypes.ARRAY_AGG);\n        subqueryAggregateExpressionSet.add(OpTypes.MEDIAN);\n        subqueryAggregateExpressionSet.add(OpTypes.USER_AGGREGATE);\n\n        //\n        subqueryAggregateExpressionSet.add(OpTypes.TABLE_SUBQUERY);"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "87",
               "end_line": "101",
               "source_code": "        aggregateFunctionSet.add(OpTypes.COUNT);\n        aggregateFunctionSet.add(OpTypes.SUM);\n        aggregateFunctionSet.add(OpTypes.MIN);\n        aggregateFunctionSet.add(OpTypes.MAX);\n        aggregateFunctionSet.add(OpTypes.AVG);\n        aggregateFunctionSet.add(OpTypes.EVERY);\n        aggregateFunctionSet.add(OpTypes.SOME);\n        aggregateFunctionSet.add(OpTypes.STDDEV_POP);\n        aggregateFunctionSet.add(OpTypes.STDDEV_SAMP);\n        aggregateFunctionSet.add(OpTypes.VAR_POP);\n        aggregateFunctionSet.add(OpTypes.VAR_SAMP);\n        aggregateFunctionSet.add(OpTypes.GROUP_CONCAT);\n        aggregateFunctionSet.add(OpTypes.ARRAY_AGG);\n        aggregateFunctionSet.add(OpTypes.MEDIAN);\n        aggregateFunctionSet.add(OpTypes.USER_AGGREGATE);"
           }

       },

       {
           "id": "clone_993",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5738",
               "end_line": "5784",
               "source_code": "            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_994",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "455",
               "end_line": "473",
               "source_code": "            case Tokens.USER : {\n                read();\n\n                statementType = StatementTypes.DROP_USER;\n                objectType    = SchemaObject.GRANTEE;\n                canCascade    = true;\n\n                break;\n            }\n            case Tokens.ROLE : {\n                read();\n\n                statementType = StatementTypes.DROP_ROLE;\n                objectType    = SchemaObject.GRANTEE;\n                canCascade    = true;\n\n                break;\n            }\n            case Tokens.DOMAIN :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "365",
               "end_line": "383",
               "source_code": "            case Tokens.INDEX : {\n                read();\n\n                statementType = StatementTypes.DROP_INDEX;\n                objectType    = SchemaObject.INDEX;\n                useIfExists   = true;\n\n                break;\n            }\n            case Tokens.ASSERTION : {\n                read();\n\n                statementType = StatementTypes.DROP_ASSERTION;\n                objectType    = SchemaObject.ASSERTION;\n                canCascade    = true;\n\n                break;\n            }\n            case Tokens.SPECIFIC :"
           }

       },

       {
           "id": "clone_995",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3523",
               "end_line": "3533",
               "source_code": "            read();\n\n            Expression a = e;\n\n            e = XreadBooleanFactorOrNull();\n\n            if (e == null) {\n                throw unexpectedToken();\n            }\n\n            e = new ExpressionLogical(type, a, e);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3298",
               "end_line": "3308",
               "source_code": "            read();\n\n            Expression a = e;\n\n            e = XreadFactor();\n\n            if (e == null) {\n                throw unexpectedToken();\n            }\n\n            e = new ExpressionArithmetic(type, a, e);"
           }

       },

       {
           "id": "clone_996",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4995",
               "end_line": "5006",
               "source_code": "        Session sys = database.sessionManager.newSysSession(\n            SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser());\n        Result rs = sys.executeDirectStatement(\n            \"SELECT GRANTOR, GRANTEE, OBJECT_CATALOG, OBJECT_SCHEMA, OBJECT_NAME, \"\n            + \"OBJECT_TYPE, PRIVILEGE_TYPE, IS_GRANTABLE \"\n            + \"FROM INFORMATION_SCHEMA.USAGE_PRIVILEGES \"\n            + \"JOIN INFORMATION_SCHEMA.APPLICABLE_ROLES ON GRANTEE = ROLE_NAME;\");\n\n        t.insertSys(session, store, rs);\n        sys.close();\n\n        return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4916",
               "end_line": "4927",
               "source_code": "        Session sys = database.sessionManager.newSysSession(\n            SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser());\n        Result rs = sys.executeDirectStatement(\n            \"SELECT GRANTOR, GRANTEE, UDT_CATALOG, UDT_SCHEMA, UDT_NAME, \"\n            + \"PRIVILEGE_TYPE, IS_GRANTABLE \"\n            + \"FROM INFORMATION_SCHEMA.UDT_PRIVILEGES \"\n            + \"JOIN INFORMATION_SCHEMA.APPLICABLE_ROLES ON GRANTEE = ROLE_NAME;\");\n\n        t.insertSys(session, store, rs);\n        sys.close();\n\n        return t;"
           }

       },

       {
           "id": "clone_997",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "331",
               "end_line": "342",
               "source_code": "    public static ResultLob newLobGetRequest(long id, long offset,\n            long length) {\n\n        ResultLob result = new ResultLob();\n\n        result.subType     = LobResultTypes.REQUEST_GET_LOB;\n        result.lobID       = id;\n        result.blockOffset = offset;\n        result.blockLength = length;\n\n        return result;\n    }"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "251",
               "end_line": "262",
               "source_code": "    public static ResultLob newLobGetCharPatternPositionRequest(long id,\n            long otherId, long offset) {\n\n        ResultLob result = new ResultLob();\n\n        result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;\n        result.lobID       = id;\n        result.blockOffset = offset;\n        result.blockLength = otherId;\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_998",

           "clone_type": "type-2",

           "origin": {
               "file": "View.java",
               "start_line": "236",
               "end_line": "247",
               "source_code": "                break;\n\n            case StatementTypes.DELETE_WHERE :\n                isTriggerDeletable = false;\n                break;\n\n            case StatementTypes.UPDATE_WHERE :\n                isTriggerUpdatable = false;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"View\");"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1081",
               "end_line": "1093",
               "source_code": "                        break;\n\n                    case Tokens.LEADING :\n                        leading = true;\n                        break;\n\n                    case Tokens.TRAILING :\n                        trailing = true;\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500,\n                                                 \"FunctionSQL\");"
           }

       },

       {
           "id": "clone_999",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "584",
               "end_line": "599",
               "source_code": "        database.sqlDoubleNaN = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_double_nan);\n        database.sqlLongvarIsLob = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_longvar_is_lob);\n        database.sqlIgnoreCase = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_ignore_case);\n        database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_syntax_db2);\n        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_syntax_mss);\n        database.sqlSyntaxMys = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_syntax_mys);\n        database.sqlSyntaxOra = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_syntax_ora);\n        database.sqlSyntaxPgs = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_syntax_pgs);"
           },

           "clone": {
               "file": "Logger.java",
               "start_line": "565",
               "end_line": "581",
               "source_code": "        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_enforce_tdcd);\n        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_enforce_tdcu);\n        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.jdbc_translate_tti_types);\n        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_concat_nulls);\n        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_nulls_first);\n        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_nulls_order);\n        database.sqlUniqueNulls = database.databaseProperties.isPropertyTrue(\n            HsqlDatabaseProperties.sql_unique_nulls);\n        database.sqlConvertTruncate =\n            database.databaseProperties.isPropertyTrue(\n                HsqlDatabaseProperties.sql_convert_trunc);"
           }

       },

       {
           "id": "clone_1000",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCConnection.java",
               "start_line": "2211",
               "end_line": "2243",
               "source_code": "        Result        req;\n\n        checkClosed();\n\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n        }"
           },

           "clone": {
               "file": "JDBCConnection.java",
               "start_line": "2122",
               "end_line": "2154",
               "source_code": "        JDBCSavepoint sp;\n\n        checkClosed();\n\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n        }"
           }

       },

       {
           "id": "clone_1001",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "467",
               "end_line": "478",
               "source_code": "                sb.append(left).append(' ').append(Tokens.T_IN).append(\n                    ' ').append(right);\n\n                return sb.toString();\n\n            case OpTypes.MATCH_SIMPLE :\n                sb.append(left).append(' ').append(Tokens.T_MATCH).append(\n                    ' ').append(right);\n\n                return sb.toString();\n\n            case OpTypes.MATCH_PARTIAL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "455",
               "end_line": "466",
               "source_code": "                sb.append(left).append(' ').append(Tokens.T_AND).append(\n                    ' ').append(right);\n\n                return sb.toString();\n\n            case OpTypes.OR :\n                sb.append(left).append(' ').append(Tokens.T_OR).append(\n                    ' ').append(right);\n\n                return sb.toString();\n\n            case OpTypes.IN :"
           }

       },

       {
           "id": "clone_1002",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5759",
               "end_line": "5805",
               "source_code": "            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1003",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "97",
               "end_line": "116",
               "source_code": "        //-- Newline indicates that field should match to end of line.\n        if (fieldSep.endsWith(\"\n\")) {\n            fieldSepEnd = true;\n            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);\n        }\n\n        if (varSep.endsWith(\"\n\")) {\n            varSepEnd = true;\n            varSep    = varSep.substring(0, varSep.length() - 1);\n        }\n\n        if (longvarSep.endsWith(\"\n\")) {\n            longvarSepEnd = true;\n            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);\n        }\n\n        this.allQuoted  = allQuoted;\n        this.fieldSep   = fieldSep;\n        this.varSep     = varSep;\n        this.longvarSep = longvarSep;"
           },

           "clone": {
               "file": "RowOutputText.java",
               "start_line": "87",
               "end_line": "106",
               "source_code": "        //-- Newline indicates that field should match to end of line.\n        if (fieldSep.endsWith(\"\n\")) {\n            fieldSepEnd = true;\n            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);\n        }\n\n        if (varSep.endsWith(\"\n\")) {\n            varSepEnd = true;\n            varSep    = varSep.substring(0, varSep.length() - 1);\n        }\n\n        if (longvarSep.endsWith(\"\n\")) {\n            longvarSepEnd = true;\n            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);\n        }\n\n        this.fieldSep   = fieldSep;\n        this.varSep     = varSep;\n        this.longvarSep = longvarSep;\n        this.allQuoted  = allQuoted;"
           }

       },

       {
           "id": "clone_1004",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5763",
               "end_line": "5809",
               "source_code": "            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1005",

           "clone_type": "type-2",

           "origin": {
               "file": "Token.java",
               "start_line": "88",
               "end_line": "95",
               "source_code": "            case BUFFER_TYPE:\n            case RAW_TYPE:\n            case RAWEXEC_TYPE:\n            case UNTERM_TYPE:\n                // These types must be not null.  May be just whitespace.\n                // Will NOT be trimmed.\n                if (val == null) throw new IllegalArgumentException(\n                        \"Null String value for scanner token\");"
           },

           "clone": {
               "file": "Token.java",
               "start_line": "73",
               "end_line": "80",
               "source_code": "            case SPECIAL_TYPE:\n            case EDIT_TYPE:\n            case PL_TYPE:\n            case MACRO_TYPE:\n                // These types must be not null.  May be just whitespace.\n                // Will be trimmed.\n                if (val == null) throw new IllegalArgumentException(\n                        \"Null String value for scanner token\");"
           }

       },

       {
           "id": "clone_1006",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1202",
               "end_line": "1212",
               "source_code": "                handlerType = StatementHandler.EXIT;\n                break;\n\n            case Tokens.UNDO :\n                read();\n\n                handlerType = StatementHandler.UNDO;\n                break;\n\n            default :\n                throw unexpectedToken();"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "467",
               "end_line": "477",
               "source_code": "                        level = SessionInterface.TX_READ_COMMITTED;\n                        break;\n\n                    case Tokens.SERIALIZABLE :\n                        read();\n\n                        level = SessionInterface.TX_SERIALIZABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();"
           }

       },

       {
           "id": "clone_1007",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "550",
               "end_line": "580",
               "source_code": "            case FUNC_DEGREES :\n            case FUNC_DAYS :\n            case FUNC_HEXTORAW :\n            case FUNC_LAST_DAY :\n            case FUNC_LOB_ID :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_RAWTOHEX :\n            case FUNC_REVERSE :\n            case FUNC_ROUNDMAGIC :\n            case FUNC_SIGN :\n            case FUNC_SIN :\n            case FUNC_SOUNDEX :\n            case FUNC_SPACE :\n            case FUNC_SYS_EXTRACT_UTC :\n            case FUNC_TAN :\n            case FUNC_TIMESTAMP_WITH_ZONE :\n            case FUNC_TO_DSINTERVAL :\n            case FUNC_TO_YMINTERVAL :\n            case FUNC_TO_NUMBER :\n                parseList = singleParamList;\n                break;\n\n            case FUNC_ADD_MONTHS :\n            case FUNC_ATAN2 :\n            case FUNC_CONCAT :\n            case FUNC_CRYPT_KEY :\n            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "519",
               "end_line": "549",
               "source_code": "            case FUNC_DATABASE :\n            case FUNC_DATABASE_ISOLATION_LEVEL :\n            case FUNC_DATABASE_NAME :\n            case FUNC_DATABASE_TIMEZONE :\n            case FUNC_DATABASE_VERSION :\n            case FUNC_DBTIMEZONE :\n            case FUNC_ISAUTOCOMMIT :\n            case FUNC_ISOLATION_LEVEL :\n            case FUNC_ISREADONLYDATABASE :\n            case FUNC_ISREADONLYDATABASEFILES :\n            case FUNC_ISREADONLYSESSION :\n            case FUNC_PI :\n            case FUNC_SESSION_ID :\n            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_SESSION_TIMEZONE :\n            case FUNC_SESSIONTIMEZONE :\n            case FUNC_TIMEZONE :\n            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n                parseList = emptyParamList;\n                break;\n\n            case FUNC_ACOS :\n            case FUNC_ASCII :\n            case FUNC_ASIN :\n            case FUNC_ATAN :\n            case FUNC_BITNOT :\n            case FUNC_CHAR :\n            case FUNC_COS :\n            case FUNC_COT :"
           }

       },

       {
           "id": "clone_1008",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "276",
               "end_line": "282",
               "source_code": "                break;\n\n            case Types.SQL_CLOB :\n                writeClob((ClobData) o, t);\n                break;\n\n            case Types.SQL_ARRAY :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "235",
               "end_line": "241",
               "source_code": "                break;\n\n            case Types.SQL_DATE :\n                writeDate((TimestampData) o, t);\n                break;\n\n            case Types.SQL_TIME :"
           }

       },

       {
           "id": "clone_1009",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "143",
               "end_line": "155",
               "source_code": "                break;\n\n            case StatementTypes.REVOKE :\n            case StatementTypes.REVOKE_ROLE :\n                group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.CREATE_SCHEMA :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;\n                break;\n\n            case StatementTypes.CREATE_ROLE :\n                group = StatementTypes.X_SQL_SCHEMA_DEFINITION;"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "695",
               "end_line": "707",
               "source_code": "                    break;\n\n                case SchemaObject.DOMAIN :\n                case SchemaObject.TYPE :\n                    set = schema.typeLookup;\n                    break;\n\n                case SchemaObject.INDEX :\n                    set = schema.indexLookup;\n                    break;\n\n                case SchemaObject.CONSTRAINT :\n                    set = schema.constraintLookup;"
           }

       },

       {
           "id": "clone_1010",

           "clone_type": "type-2",

           "origin": {
               "file": "Token.java",
               "start_line": "83",
               "end_line": "91",
               "source_code": "            case AND :\n            case OR :\n            case XOR :\n            case NOT : {\n                return true;\n            }\n            default : {\n                return false;\n            }"
           },

           "clone": {
               "file": "Token.java",
               "start_line": "69",
               "end_line": "77",
               "source_code": "            case LT :\n            case GT :\n            case LTE :\n            case GTE : {\n                return true;\n            }\n            default : {\n                return false;\n            }"
           }

       },

       {
           "id": "clone_1011",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "725",
               "end_line": "741",
               "source_code": "            abalancecount = rs.getInt(2);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(delta) from history\");\n\n            rs.next();\n\n            deltasum = rs.getInt(1);\n\n            rs.close();\n\n            rs = null;\n\n            st1.close();\n\n            st1 = null;"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "814",
               "end_line": "830",
               "source_code": "            abalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(delta) from history\");\n\n            rs.next();\n\n            deltasum = rs.getInt(1);\n\n            rs.close();\n\n            rs = null;\n\n            st1.close();\n\n            st1 = null;"
           }

       },

       {
           "id": "clone_1012",

           "clone_type": "type-2",

           "origin": {
               "file": "TriggerSample.java",
               "start_line": "311",
               "end_line": "321",
               "source_code": "            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }"
           },

           "clone": {
               "file": "TriggerSample.java",
               "start_line": "263",
               "end_line": "273",
               "source_code": "            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }"
           }

       },

       {
           "id": "clone_1013",

           "clone_type": "type-2",

           "origin": {
               "file": "TransferDb.java",
               "start_line": "477",
               "end_line": "483",
               "source_code": "            TTable.Stmts.bCreate      = true;\n            TTable.Stmts.bDelete      = false;\n            TTable.Stmts.bDrop        = true;\n            TTable.Stmts.bCreateIndex = false;\n            TTable.Stmts.bDropIndex   = false;\n            TTable.Stmts.bInsert      = false;\n            TTable.Stmts.bAlter       = false;"
           },

           "clone": {
               "file": "TransferSQLText.java",
               "start_line": "415",
               "end_line": "421",
               "source_code": "                        relatedTable.Stmts.bCreate      = false;\n                        relatedTable.Stmts.bDelete      = false;\n                        relatedTable.Stmts.bDrop        = false;\n                        relatedTable.Stmts.bCreateIndex = false;\n                        relatedTable.Stmts.bDropIndex   = false;\n                        relatedTable.Stmts.bInsert      = false;\n                        relatedTable.Stmts.bAlter       = false;"
           }

       },

       {
           "id": "clone_1014",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4299",
               "end_line": "4341",
               "source_code": "        // column number mappings\n        final int specific_cat             = 0;\n        final int specific_schem           = 1;\n        final int specific_name            = 2;\n        final int ordinal_position         = 3;\n        final int parameter_mode           = 4;\n        final int is_result                = 5;\n        final int as_locator               = 6;\n        final int parameter_name           = 7;\n        final int from_specific_catalog    = 8;\n        final int from_specific_schema     = 9;\n        final int from_specific_name       = 10;\n        final int to_specific_catalog      = 11;\n        final int to_specific_schema       = 12;\n        final int to_specific_name         = 13;\n        final int data_type                = 14;\n        final int character_maximum_length = 15;\n        final int character_octet_length   = 16;\n        final int character_set_catalog    = 17;\n        final int character_set_schema     = 18;\n        final int character_set_name       = 19;\n        final int collation_catalog        = 20;\n        final int collation_schema         = 21;\n        final int collation_name           = 22;\n        final int numeric_precision        = 23;\n        final int numeric_precision_radix  = 24;\n        final int numeric_scale            = 25;\n        final int datetime_precision       = 26;\n        final int interval_type            = 27;\n        final int interval_precision       = 28;\n        final int udt_catalog              = 29;\n        final int udt_schema               = 30;\n        final int udt_name                 = 31;\n        final int scope_catalog            = 32;\n        final int scope_schema             = 33;\n        final int scope_name               = 34;\n        final int maximum_cardinality      = 35;\n        final int dtd_identifier           = 36;\n\n        // intermediate holders\n        int           columnCount;\n        Iterator      routines;\n        RoutineSchema routineSchema;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2606",
               "end_line": "2648",
               "source_code": "        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;\n\n        //\n        // intermediate holders\n        int            columnCount;\n        Iterator       tables;\n        Table          table;"
           }

       },

       {
           "id": "clone_1015",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5209",
               "end_line": "5224",
               "source_code": "        final int specific_schema  = 3;\n        final int specific_name    = 4;\n        final int routine_catalog  = 5;\n        final int routine_schema   = 6;\n        final int routine_name     = 7;\n        final int privilege_type   = 8;\n        final int is_grantable     = 9;\n\n        //\n        // calculated column values\n        Grantee granteeObject;\n        String  privilege;\n\n        // intermediate holders\n        Iterator       routines;\n        Routine        routine;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2878",
               "end_line": "2894",
               "source_code": "        // column number mappings\n        final int table_catalog      = 0;\n        final int table_schema       = 1;\n        final int table_name         = 2;\n        final int column_name        = 3;\n        final int constraint_catalog = 4;\n        final int constraint_schema  = 5;\n        final int constraint_name    = 6;\n\n        //\n        // calculated column values\n        String constraintCatalog;\n        String constraintSchema;\n        String constraintName;\n\n        // Intermediate holders\n        Iterator     tables;"
           }

       },

       {
           "id": "clone_1016",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "87",
               "end_line": "91",
               "source_code": "        String  DriverName         = \"\";\n        String  DBUrl              = \"\";\n        String  DBUser             = \"\";\n        String  DBPassword         = \"\";\n        boolean initialize_dataset = true;"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "56",
               "end_line": "60",
               "source_code": "        String  DriverName         = \"\";\n        String  DBUrl              = \"\";\n        String  DBUser             = \"\";\n        String  DBPassword         = \"\";\n        boolean initialize_dataset = false;"
           }

       },

       {
           "id": "clone_1017",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5750",
               "end_line": "5796",
               "source_code": "            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1018",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "222",
               "end_line": "228",
               "source_code": "            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n                o = readYearMonthInterval(type);\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "211",
               "end_line": "217",
               "source_code": "            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n                o = readTime(type);\n                break;\n\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           }

       },

       {
           "id": "clone_1019",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1351",
               "end_line": "1381",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;"
           },

           "clone": {
               "file": "ParserBase.java",
               "start_line": "251",
               "end_line": "281",
               "source_code": "                case Tokens.X_MALFORMED_BINARY_STRING :\n                    errorCode = ErrorCode.X_42587;\n                    break;\n\n                case Tokens.X_MALFORMED_BIT_STRING :\n                    errorCode = ErrorCode.X_42588;\n                    break;\n\n                case Tokens.X_MALFORMED_UNICODE_STRING :\n                    errorCode = ErrorCode.X_42586;\n                    break;\n\n                case Tokens.X_MALFORMED_STRING :\n                    errorCode = ErrorCode.X_42584;\n                    break;\n\n                case Tokens.X_UNKNOWN_TOKEN :\n                    errorCode = ErrorCode.X_42582;\n                    break;\n\n                case Tokens.X_MALFORMED_NUMERIC :\n                    errorCode = ErrorCode.X_42585;\n                    break;\n\n                case Tokens.X_MALFORMED_COMMENT :\n                    errorCode = ErrorCode.X_42589;\n                    break;\n\n                case Tokens.X_MALFORMED_IDENTIFIER :\n                    errorCode = ErrorCode.X_42583;\n                    break;"
           }

       },

       {
           "id": "clone_1020",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDima.java",
               "start_line": "172",
               "end_line": "199",
               "source_code": "            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='actionDefinitions'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('actionDefinitions', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='actionVariants'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('actionVariants', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='actionPoints'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('actionPoints', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='actionTags'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('actionTags', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='captureFields'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('captureFields', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='reactions'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('reactions', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='reactionOperations'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('reactionOperations', 1)\");"
           },

           "clone": {
               "file": "TestDima.java",
               "start_line": "144",
               "end_line": "171",
               "source_code": "            c.createStatement().executeUpdate(\n                \"create cached table SNS_OIDS(NAME varchar(20) not null primary key, ID int)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='_snsLog'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('_snsLog', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='visitorTags'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('visitorTags', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='departments'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('departments', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='operators'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('operators', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='zones'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('zones', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=1 WHERE \\\"NAME\\\"='pages'\");\n            c.createStatement().executeUpdate(\n                \"INSERT INTO SNS_OIDS (\\\"NAME\\\", \\\"ID\\\") VALUES ('pages', 1)\");\n            c.createStatement().executeUpdate(\n                \"UPDATE SNS_OIDS SET \\\"ID\\\"=21 WHERE \\\"NAME\\\"='visitorTags'\");"
           }

       },

       {
           "id": "clone_1021",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "4875",
               "end_line": "4943",
               "source_code": "    /**\n     * <!-- start generic documentation -->\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object\n     * in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the timestamp if the underlying database does not store\n     * timezone information.\n     * <!-- end generic documentation -->\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * The JDBC specification for this method is vague. HSQLDB interprets the\n     * specification as follows:\n     *\n     * <ol>\n     * <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value\n     * of the returned java.sql.Timestamp object is the UTC of the SQL value\n     * without modification. In other words, the Calendar object is not used.\n     * </li>\n     * <li>If the SQL type of the column is WITHOUT TIME ZONE, then the\n     * UTC value of the returned java.sql.Timestamp will represent the correct\n     * timestamp for the time zone (including daylight saving time) of the given\n     * Calendar object. </li>\n     * <li>In this case, if the cal argument is null, then the default Calendar\n     * of the JVM is used, which results in the same Object as one returned by the\n     * getTimestamp() methods without the Calendar parameter.</li>\n     * </ol>\n     * </div>\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the timestamp\n     * @return the column value as a <code>java.sql.Timestamp</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for\n     *  JDBCResultSet)\n     */\n    public Timestamp getTimestamp(int columnIndex,\n                                  Calendar cal) throws SQLException {\n\n        TimestampData t = (TimestampData) getColumnInType(columnIndex,\n            Type.SQL_TIMESTAMP);\n\n        if (t == null) {\n            return null;\n        }\n\n        long millis = t.getSeconds() * 1000;\n\n        if (!resultMetaData.columnTypes[--columnIndex]\n                .isDateTimeTypeWithZone()) {\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n\n            if (cal != null) {\n                millis = HsqlDateTime.convertMillisToCalendar(calendar,\n                        millis);\n            }\n        }\n\n        Timestamp ts = new Timestamp(millis);\n\n        ts.setNanos(t.getNanos());\n\n        return ts;\n    }"
           },

           "clone": {
               "file": "JDBCCallableStatement.java",
               "start_line": "1359",
               "end_line": "1423",
               "source_code": "    /**\n     * <!-- start generic documentation -->\n     *\n     * Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a\n     * <code>java.sql.Timestamp</code> object, using\n     * the given <code>Calendar</code> object to construct\n     * the <code>Timestamp</code> object.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the timestamp taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     * <!-- end generic documentation -->\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports this feature. <p>\n     *\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the timestamp\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setTimestamp\n     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for\n     *    JDBCParameterMetaData)\n     */\n    public synchronized Timestamp getTimestamp(int parameterIndex,\n            Calendar cal) throws SQLException {\n\n        TimestampData t = (TimestampData) getColumnInType(parameterIndex,\n            Type.SQL_TIMESTAMP);\n\n        if (t == null) {\n            return null;\n        }\n\n        long millis = t.getSeconds() * 1000;\n\n        if (!parameterMetaData.columnTypes[--parameterIndex]\n                .isDateTimeTypeWithZone()) {\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n\n            if (cal != null) {\n                millis = HsqlDateTime.convertMillisToCalendar(calendar,\n                        millis);\n            }\n        }\n\n        Timestamp ts = new Timestamp(millis);\n\n        ts.setNanos(t.getNanos());\n\n        return ts;\n    }"
           }

       },

       {
           "id": "clone_1022",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "674",
               "end_line": "679",
               "source_code": "        execSQL(\"CREATE \" + pref + \"TABLE t1 (i INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE TABLE t1 (i INT, vc \" + pref + \"VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "612",
               "end_line": "620",
               "source_code": "        execSQL(\"CREATE VIEW tstviewx \" + pref\n                + \"AS SELECT * FROM tsttbl WHERE i < 10\", expect);\n        execSQL(\"DROP VIEW tstviewx IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE UNIQUE \" + pref + \"INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE \" + pref + \"INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset"
           }

       },

       {
           "id": "clone_1023",

           "clone_type": "type-2",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1271",
               "end_line": "1282",
               "source_code": "                calendarPart = Calendar.SECOND;\n                break;\n\n            case DAY_OF_WEEK :\n                calendarPart = Calendar.DAY_OF_WEEK;\n                break;\n\n            case WEEK_OF_YEAR :\n                calendarPart = Calendar.WEEK_OF_YEAR;\n                break;\n\n            case SECONDS_MIDNIGHT :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3359",
               "end_line": "3370",
               "source_code": "                dataType = Type.SQL_TIMESTAMP;\n                break;\n\n            case FUNC_SYSDATE :\n                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_SYSTIMESTAMP :\n                dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;\n                break;\n\n            case FUNC_TO_DSINTERVAL :"
           }

       },

       {
           "id": "clone_1024",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5868",
               "end_line": "5914",
               "source_code": "        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1025",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1075",
               "end_line": "1085",
               "source_code": "            addColumn(t, \"PKTABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"PKTABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"PKTABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"PKCOLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"FKTABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"FKTABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"FKTABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"FKCOLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"KEY_SEQ\", Type.SQL_SMALLINT);          // not null\n            addColumn(t, \"UPDATE_RULE\", Type.SQL_SMALLINT);      // not null\n            addColumn(t, \"DELETE_RULE\", Type.SQL_SMALLINT);      // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1206",
               "end_line": "1216",
               "source_code": "            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"DATA_SOURCE_DEFINTION\", CHARACTER_DATA);\n            addColumn(t, \"FILE_PATH\", CHARACTER_DATA);\n            addColumn(t, \"FILE_ENCODING\", CHARACTER_DATA);\n            addColumn(t, \"FIELD_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"VARCHAR_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"LONGVARCHAR_SEPARATOR\", CHARACTER_DATA);\n            addColumn(t, \"IS_IGNORE_FIRST\", Type.SQL_BOOLEAN);\n            addColumn(t, \"IS_ALL_QUOTED\", Type.SQL_BOOLEAN);\n            addColumn(t, \"IS_QUOTED\", Type.SQL_BOOLEAN);"
           }

       },

       {
           "id": "clone_1026",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1981",
               "end_line": "2010",
               "source_code": "        if (token.tokenType == Tokens.ELSE) {\n            read();\n\n            condition = Expression.EXPR_TRUE;\n            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION,\n                                                condition);\n\n            list.add(statement);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }\n        }\n\n        readThis(Tokens.END);\n        readThis(Tokens.CASE);\n\n        statements = new Statement[list.size()];\n\n        list.toArray(statements);\n\n        StatementCompound result = new StatementCompound(StatementTypes.IF,\n            null);\n\n        result.setStatements(statements);\n\n        return result;"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1935",
               "end_line": "1963",
               "source_code": "        if (token.tokenType == Tokens.ELSE) {\n            read();\n\n            e = Expression.EXPR_TRUE;\n            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION, e);\n\n            list.add(statement);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }\n        }\n\n        readThis(Tokens.END);\n        readThis(Tokens.IF);\n\n        statements = new Statement[list.size()];\n\n        list.toArray(statements);\n\n        StatementCompound result = new StatementCompound(StatementTypes.IF,\n            null);\n\n        result.setStatements(statements);\n\n        return result;"
           }

       },

       {
           "id": "clone_1027",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "278",
               "end_line": "283",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return \"java.lang.Double\";\n\n            case Types.SQL_NUMERIC :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "270",
               "end_line": "275",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n                return \"java.lang.Integer\";\n\n            case Types.SQL_BIGINT :"
           }

       },

       {
           "id": "clone_1028",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "4707",
               "end_line": "4744",
               "source_code": "    /**\n     * <!-- start generic documentation -->\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object\n     * in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the date if the underlying database does not store\n     * timezone information.\n     * <!-- end generic documentation -->\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the date\n     * @return the column value as a <code>java.sql.Date</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for\n     *  JDBCResultSet)\n     */\n    public Date getDate(int columnIndex, Calendar cal) throws SQLException {\n\n        TimestampData t = (TimestampData) getColumnInType(columnIndex,\n            Type.SQL_DATE);\n\n        if (t == null) {\n            return null;\n        }\n\n        long millis = t.getSeconds() * 1000;\n\n        if (cal != null) {\n            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);\n        }\n\n        return new Date(millis);\n    }"
           },

           "clone": {
               "file": "JDBCCallableStatement.java",
               "start_line": "1245",
               "end_line": "1298",
               "source_code": "    /**\n     * <!-- start generic documentation -->\n     *\n     * Retrieves the value of the designated JDBC <code>DATE</code> parameter as a\n     * <code>java.sql.Date</code> object, using\n     * the given <code>Calendar</code> object\n     * to construct the date.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the date taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     * <!-- end generic documentation -->\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * HSQLDB supports this feature. <p>\n     *\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the date\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setDate\n     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for\n     *      JDBCParameterMetaData)\n     */\n    public synchronized Date getDate(int parameterIndex,\n                                     Calendar cal) throws SQLException {\n\n        TimestampData t = (TimestampData) getColumnInType(parameterIndex,\n            Type.SQL_DATE);\n\n        if (t == null) {\n            return null;\n        }\n\n        long millis = t.getSeconds() * 1000;\n\n        if (cal != null) {\n            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);\n        }\n\n        return new Date(millis);\n    }"
           }

       },

       {
           "id": "clone_1029",

           "clone_type": "type-2",

           "origin": {
               "file": "Tree.java",
               "start_line": "269",
               "end_line": "277",
               "source_code": "        sbHoriz.setValues(iX, iWidth, 0, iTreeWidth);\n\n        int v = iY / iRowHeight,\n            h = iHeight / iRowHeight;\n\n        sbVert.setValues(v, h, 0, iRowCount + 1);\n\n        iX = sbHoriz.getValue();\n        iY = iRowHeight * sbVert.getValue();"
           },

           "clone": {
               "file": "Grid.java",
               "start_line": "283",
               "end_line": "291",
               "source_code": "        sbHoriz.setValues(iX, iWidth, 0, iGridWidth);\n\n        int v = iY / iRowHeight,\n            h = iHeight / iRowHeight;\n\n        sbVert.setValues(v, h, 0, iRowCount + 1);\n\n        iX = sbHoriz.getValue();\n        iY = iRowHeight * sbVert.getValue();"
           }

       },

       {
           "id": "clone_1030",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementCommand.java",
               "start_line": "198",
               "end_line": "204",
               "source_code": "                break;\n\n            case StatementTypes.ALTER_SESSION :\n                group                  = StatementTypes.X_HSQLDB_SESSION;\n                isTransactionStatement = false;\n                isLogged               = false;\n                break;"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "185",
               "end_line": "191",
               "source_code": "                break;\n\n            case StatementTypes.SET_TABLE_INDEX :\n                group                  = StatementTypes.X_HSQLDB_SETTING;\n                isTransactionStatement = false;\n                isLogged               = false;\n                break;"
           }

       },

       {
           "id": "clone_1031",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7290",
               "end_line": "7314",
               "source_code": "        // column number mappings\n        final int trigger_catalog            = 0;\n        final int trigger_schema             = 1;\n        final int trigger_name               = 2;\n        final int event_manipulation         = 3;\n        final int event_object_catalog       = 4;\n        final int event_object_schema        = 5;\n        final int event_object_table         = 6;\n        final int action_order               = 7;\n        final int action_condition           = 8;\n        final int action_statement           = 9;\n        final int action_orientation         = 10;\n        final int action_timing              = 11;\n        final int action_reference_old_table = 12;\n        final int action_reference_new_table = 13;\n        final int action_reference_old_row   = 14;\n        final int action_reference_new_row   = 15;\n        final int created                    = 16;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.TRIGGER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5907",
               "end_line": "5930",
               "source_code": "        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;\n        final int declared_data_type                     = 82;\n        final int declared_numeric_precision             = 83;\n        final int declared_numeric_scale                 = 84;\n        final int result_cast_from_declared_data_type    = 85;\n        final int result_cast_declared_numeric_precision = 86;\n        final int result_cast_declared_numeric_scale     = 87;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SPECIFIC_ROUTINE);"
           }

       },

       {
           "id": "clone_1032",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1902",
               "end_line": "1921",
               "source_code": "            case FUNC_POWER : {\n                sb.append(Tokens.T_POWER).append('(')                    //\n                    .append(nodes[0].getSQL()).append(',')               //\n                    .append(nodes[1].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_SQRT : {\n                sb.append(Tokens.T_SQRT).append('(')                     //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_FLOOR : {\n                sb.append(Tokens.T_FLOOR).append('(')                    //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_CEILING :"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1883",
               "end_line": "1902",
               "source_code": "            case FUNC_MOD : {\n                sb.append(Tokens.T_MOD).append('(')                      //\n                    .append(nodes[0].getSQL()).append(',')               //\n                    .append(nodes[1].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_LN : {\n                sb.append(Tokens.T_LN).append('(')                       //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_EXP : {\n                sb.append(Tokens.T_EXP).append('(')                      //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_POWER :"
           }

       },

       {
           "id": "clone_1033",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "514",
               "end_line": "522",
               "source_code": "        readSetClauseList(targetRangeVars, targetSet, colIndexList, exprList);\n\n        columnMap = new int[colIndexList.size()];\n\n        colIndexList.toArray(columnMap);\n\n        Expression[] targets = new Expression[targetSet.size()];\n\n        targetSet.toArray(targets);"
           },

           "clone": {
               "file": "ParserDML.java",
               "start_line": "549",
               "end_line": "557",
               "source_code": "        readSetClauseList(rangeVariables, targetSet, colIndexList, exprList);\n\n        columnMap = new int[colIndexList.size()];\n\n        colIndexList.toArray(columnMap);\n\n        Expression[] targets = new Expression[targetSet.size()];\n\n        targetSet.toArray(targets);"
           }

       },

       {
           "id": "clone_1034",

           "clone_type": "type-2",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "903",
               "end_line": "920",
               "source_code": "                for (int i = 0; i < dependentConstraints.size(); i++) {\n                    Constraint c = (Constraint) dependentConstraints.get(i);\n                    Table      t = c.getMain();\n\n                    if (t != table) {\n                        tableSet.add(t);\n                    }\n\n                    t = c.getRef();\n\n                    if (t != table) {\n                        tableSet.add(t);\n                    }\n\n                    constraintNameSet.add(c.getMainName());\n                    constraintNameSet.add(c.getRefName());\n                    indexNameSet.add(c.getRefIndex().getName());\n                }"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "948",
               "end_line": "965",
               "source_code": "        for (int i = 0; i < externalConstraints.size(); i++) {\n            Constraint c = (Constraint) externalConstraints.get(i);\n            Table      t = c.getMain();\n\n            if (t != table) {\n                tableSet.add(t);\n            }\n\n            t = c.getRef();\n\n            if (t != table) {\n                tableSet.add(t);\n            }\n\n            constraintNameSet.add(c.getMainName());\n            constraintNameSet.add(c.getRefName());\n            indexNameSet.add(c.getRefIndex().getName());\n        }"
           }

       },

       {
           "id": "clone_1035",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1282",
               "end_line": "1292",
               "source_code": "            case Tokens.TEXT : {\n                read();\n                readThis(Tokens.TABLE);\n                readThis(Tokens.DEFAULTS);\n\n                String   source = readQuotedString();\n                Object[] args   = new Object[]{ source };\n\n                return new StatementCommand(\n                    StatementTypes.SET_DATABASE_TEXT_SOURCE, args, null, null);\n            }"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1079",
               "end_line": "1090",
               "source_code": "            case Tokens.PASSWORD : {\n                read();\n                readThis(Tokens.CHECK);\n                readThis(Tokens.FUNCTION);\n\n                Routine  routine = readCreatePasswordCheckFunction();\n                Object[] args    = new Object[]{ routine };\n\n                return new StatementCommand(\n                    StatementTypes.SET_DATABASE_PASSWORD_CHECK, args, null,\n                    null);\n            }"
           }

       },

       {
           "id": "clone_1036",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "1094",
               "end_line": "1107",
               "source_code": "                        t = Type.SQL_INTERVAL_HOUR_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));\n\n                    case Tokens.SQL_TSI_DAY :\n                        t = Type.SQL_INTERVAL_DAY_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));\n\n                    case Tokens.SQL_TSI_WEEK :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "1080",
               "end_line": "1093",
               "source_code": "                        t = Type.SQL_INTERVAL_SECOND_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));\n\n                    case Tokens.SQL_TSI_MINUTE :\n                        t = Type.SQL_INTERVAL_MINUTE_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));\n\n                    case Tokens.SQL_TSI_HOUR :"
           }

       },

       {
           "id": "clone_1037",

           "clone_type": "type-2",

           "origin": {
               "file": "NodeAVLDisk.java",
               "start_line": "405",
               "end_line": "428",
               "source_code": "    NodeAVL setRight(PersistentStore store, NodeAVL n) {\n\n        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iRight = n == null ? NO_POS\n                                : (int) n.getPos();\n        node.nRight = (NodeAVLDisk) n;\n\n        row.keepInMemory(false);\n\n        return node;\n    }"
           },

           "clone": {
               "file": "NodeAVLDisk.java",
               "start_line": "380",
               "end_line": "403",
               "source_code": "    NodeAVL setLeft(PersistentStore store, NodeAVL n) {\n\n        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iLeft = n == null ? NO_POS\n                               : (int) n.getPos();\n        node.nLeft = (NodeAVLDisk) n;\n\n        row.keepInMemory(false);\n\n        return node;\n    }"
           }

       },

       {
           "id": "clone_1038",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "1191",
               "end_line": "1197",
               "source_code": "                break;\n\n            case ResultConstants.EXECUTE :\n                rowOut.writeInt(updateCount);\n                rowOut.writeInt(fetchSize);\n                rowOut.writeLong(statementID);\n                rowOut.writeByte(rsProperties);"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "1181",
               "end_line": "1187",
               "source_code": "                break;\n\n            case ResultConstants.CALL_RESPONSE :\n                rowOut.writeInt(updateCount);\n                rowOut.writeInt(fetchSize);\n                rowOut.writeLong(statementID);\n                rowOut.writeByte(statementReturnType);"
           }

       },

       {
           "id": "clone_1039",

           "clone_type": "type-2",

           "origin": {
               "file": "ConnectionDialog.java",
               "start_line": "288",
               "end_line": "295",
               "source_code": "        Panel p = new Panel();\n\n        p.setBackground(SystemColor.control);\n        p.setLayout(new BorderLayout());\n        p.add(\"Center\", center);\n        p.add(\"North\", createLabel(\"\"));\n        p.add(\"South\", createLabel(\"\"));\n        p.add(\"East\", createLabel(\"\"));"
           },

           "clone": {
               "file": "Transfer.java",
               "start_line": "1134",
               "end_line": "1141",
               "source_code": "        Panel p = new Panel();\n\n        p.setBackground(SystemColor.control);\n        p.setLayout(new BorderLayout());\n        p.add(\"Center\", center);\n        p.add(\"South\", createLabel(\"\"));\n        p.add(\"East\", createLabel(\"\"));\n        p.add(\"West\", createLabel(\"\"));"
           }

       },

       {
           "id": "clone_1040",

           "clone_type": "type-2",

           "origin": {
               "file": "SetFunction.java",
               "start_line": "274",
               "end_line": "280",
               "source_code": "            case OpTypes.USER_AGGREGATE :\n                currentValue = item;\n\n                return;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"SetFunction\");"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "71",
               "end_line": "77",
               "source_code": "            case OpTypes.CONCAT_WS :\n                nodes = exprArray;\n\n                return;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"ExpressionOp\");"
           }

       },

       {
           "id": "clone_1041",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "674",
               "end_line": "700",
               "source_code": "            case Types.LONGVARCHAR :\n            case Types.LONGVARBINARY :\n            case Types.SQL_ARRAY :\n            case Types.SQL_BINARY :\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n            case Types.SQL_BLOB :\n            case Types.SQL_CHAR :\n            case Types.SQL_NCHAR :\n            case Types.SQL_CLOB :\n            case Types.NCLOB :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_VARCHAR :\n            case Types.SQL_NVARCHAR :\n            case Types.VARCHAR_IGNORECASE :\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_FLOAT :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "126",
               "end_line": "155",
               "source_code": "//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :\n            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :"
           }

       },

       {
           "id": "clone_1042",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBug785429.java",
               "start_line": "71",
               "end_line": "75",
               "source_code": "        String            sql;\n        String            msg;\n        PreparedStatement ps;\n        ResultSet         rs;\n        int               rowcount = 0;"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "138",
               "end_line": "142",
               "source_code": "        Savepoint         sp4;\n        Savepoint         sp5;\n        Savepoint         sp6;\n        Savepoint         sp7;\n        int               rowcount = 0;"
           }

       },

       {
           "id": "clone_1043",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2540",
               "end_line": "2560",
               "source_code": "        final int icreate_params      = 5;\n        final int inullable           = 6;\n        final int icase_sensitive     = 7;\n        final int isearchable         = 8;\n        final int iunsigned_attribute = 9;\n        final int ifixed_prec_scale   = 10;\n        final int iauto_increment     = 11;\n        final int ilocal_type_name    = 12;\n        final int iminimum_scale      = 13;\n        final int imaximum_scale      = 14;\n        final int isql_data_type      = 15;\n        final int isql_datetime_sub   = 16;\n        final int inum_prec_radix     = 17;\n\n        //------------------------------------------\n        // Extensions\n        //------------------------------------------\n        // not in JDBC, but in SQL CLI SQLDA / ODBC\n        //------------------------------------------\n        final int iinterval_precision = 18;\n        Object[]  row;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1065",
               "end_line": "1083",
               "source_code": "        // column number mappings\n        final int isid           = 0;\n        final int ict            = 1;\n        final int iuname         = 2;\n        final int iis_admin      = 3;\n        final int iautocmt       = 4;\n        final int ireadonly      = 5;\n        final int ilast_id       = 6;\n        final int it_schema      = 7;\n        final int it_tx          = 8;\n        final int it_size        = 9;\n        final int it_waiting     = 10;\n        final int it_waited      = 11;\n        final int it_statement   = 12;\n        final int it_latch_count = 13;\n\n        //\n        // intermediate holders\n        Session[] sessions;"
           }

       },

       {
           "id": "clone_1044",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "693",
               "end_line": "698",
               "source_code": "        Statement st1 = null;\n        ResultSet rs  = null;\n        int       bbalancesum;\n        int       tbalancesum;\n        int       abalancesum;\n        int       abalancecount;"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "785",
               "end_line": "790",
               "source_code": "        Statement st1 = null;\n        ResultSet rs  = null;\n        int       bbalancesum;\n        int       tbalancesum;\n        int       abalancesum;\n        int       deltasum;"
           }

       },

       {
           "id": "clone_1045",

           "clone_type": "type-2",

           "origin": {
               "file": "ArrayType.java",
               "start_line": "309",
               "end_line": "317",
               "source_code": "        if (a == null) {\n            return Tokens.T_NULL;\n        }\n\n        Object[]     arra = (Object[]) a;\n        StringBuffer sb   = new StringBuffer();\n\n        sb.append(Tokens.T_ARRAY);\n        sb.append('[');"
           },

           "clone": {
               "file": "RowType.java",
               "start_line": "220",
               "end_line": "228",
               "source_code": "        if (a == null) {\n            return Tokens.T_NULL;\n        }\n\n        Object[]     array = (Object[]) a;\n        StringBuffer sb    = new StringBuffer();\n\n        sb.append(Tokens.T_ROW);\n        sb.append('(');"
           }

       },

       {
           "id": "clone_1046",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5760",
               "end_line": "5806",
               "source_code": "            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1047",

           "clone_type": "type-2",

           "origin": {
               "file": "LobStoreMem.java",
               "start_line": "94",
               "end_line": "108",
               "source_code": "            byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex);\n            int    blockOffset       = blockAddress % blocksInLargeBlock;\n            int    currentBlockCount = blockCount;\n\n            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {\n                currentBlockCount = blocksInLargeBlock - blockOffset;\n            }\n\n            System.arraycopy(dataBytes, dataBlockOffset * lobBlockSize,\n                             largeBlock, blockOffset * lobBlockSize,\n                             currentBlockCount * lobBlockSize);\n\n            blockAddress    += currentBlockCount;\n            dataBlockOffset += currentBlockCount;\n            blockCount      -= currentBlockCount;"
           },

           "clone": {
               "file": "LobStoreMem.java",
               "start_line": "62",
               "end_line": "76",
               "source_code": "            byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex);\n            int    blockOffset       = blockAddress % blocksInLargeBlock;\n            int    currentBlockCount = blockCount;\n\n            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {\n                currentBlockCount = blocksInLargeBlock - blockOffset;\n            }\n\n            System.arraycopy(largeBlock, blockOffset * lobBlockSize,\n                             dataBytes, dataBlockOffset * lobBlockSize,\n                             currentBlockCount * lobBlockSize);\n\n            blockAddress    += currentBlockCount;\n            dataBlockOffset += currentBlockCount;\n            blockCount      -= currentBlockCount;"
           }

       },

       {
           "id": "clone_1048",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "62",
               "end_line": "67",
               "source_code": "            case OpTypes.ADD :\n            case OpTypes.SUBTRACT :\n            case OpTypes.MULTIPLY :\n            case OpTypes.DIVIDE :\n            case OpTypes.CONCAT :\n                return;"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "94",
               "end_line": "99",
               "source_code": "            case OpTypes.LIKE_ARG :\n            case OpTypes.ALTERNATIVE :\n            case OpTypes.CASEWHEN :\n            case OpTypes.LIMIT :\n            case OpTypes.ZONE_MODIFIER :\n                return;"
           }

       },

       {
           "id": "clone_1049",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "121",
               "end_line": "128",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE :\n                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                return (int) precision + 4 + (scale == 0 ? 0\n                                                         : scale + 1);\n\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "104",
               "end_line": "111",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return (int) precision + 7;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return (int) precision + 10 + (scale == 0 ? 0\n                                                          : scale + 1);\n\n            case Types.SQL_INTERVAL_HOUR :"
           }

       },

       {
           "id": "clone_1050",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementCommand.java",
               "start_line": "116",
               "end_line": "122",
               "source_code": "                break;\n\n            case StatementTypes.SET_DATABASE_UNIQUE_NAME :\n            case StatementTypes.SET_DATABASE_FILES_WRITE_DELAY :\n            case StatementTypes.SET_DATABASE_FILES_TEMP_PATH :\n            case StatementTypes.SET_DATABASE_FILES_EVENT_LOG :\n                isTransactionStatement = false;"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "247",
               "end_line": "253",
               "source_code": "                    break;\n\n                case OpTypes.VALUE :\n                case OpTypes.DYNAMIC_PARAM :\n                case OpTypes.PARAMETER :\n                case OpTypes.VARIABLE :\n                    isSingleColumnCondition = true;"
           }

       },

       {
           "id": "clone_1051",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "676",
               "end_line": "697",
               "source_code": "                case SchemaObject.TABLE :\n                case SchemaObject.VIEW :\n                    set = schema.tableLookup;\n                    break;\n\n                case SchemaObject.CHARSET :\n                    set = schema.charsetLookup;\n                    break;\n\n                case SchemaObject.COLLATION :\n                    set = schema.collationLookup;\n                    break;\n\n                case SchemaObject.PROCEDURE :\n                    set = schema.procedureLookup;\n                    break;\n\n                case SchemaObject.FUNCTION :\n                    set = schema.functionLookup;\n                    break;\n\n                case SchemaObject.DOMAIN :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "2081",
               "end_line": "2102",
               "source_code": "            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n                i = OpTypes.SMALLER_EQUAL;\n                break;\n\n            case OpTypes.SMALLER_EQUAL :\n                i = OpTypes.GREATER_EQUAL;\n                break;\n\n            case OpTypes.SMALLER :\n                i = OpTypes.GREATER;\n                break;\n\n            case OpTypes.GREATER :\n                i = OpTypes.SMALLER;\n                break;\n\n            case OpTypes.NOT_DISTINCT :\n                i = OpTypes.NOT_DISTINCT;\n                break;\n\n            case OpTypes.EQUAL :"
           }

       },

       {
           "id": "clone_1052",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "277",
               "end_line": "288",
               "source_code": "    public static ResultLob newLobCreateClobRequest(long sessionID,\n            long lobID, Reader reader, long length) {\n\n        ResultLob result = new ResultLob();\n\n        result.lobID       = lobID;\n        result.subType     = LobResultTypes.REQUEST_CREATE_CHARS;\n        result.blockLength = length;\n        result.reader      = reader;\n\n        return result;\n    }"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "264",
               "end_line": "275",
               "source_code": "    public static ResultLob newLobCreateBlobRequest(long sessionID,\n            long lobID, InputStream stream, long length) {\n\n        ResultLob result = new ResultLob();\n\n        result.lobID       = lobID;\n        result.subType     = LobResultTypes.REQUEST_CREATE_BYTES;\n        result.blockLength = length;\n        result.stream      = stream;\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_1053",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5742",
               "end_line": "5788",
               "source_code": "            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1054",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "184",
               "end_line": "202",
               "source_code": "                break;\n\n            case OpTypes.NEGATE :\n                sb.append(\"NEGATE \");\n                break;\n\n            case OpTypes.ADD :\n                sb.append(\"ADD \");\n                break;\n\n            case OpTypes.SUBTRACT :\n                sb.append(\"SUBTRACT \");\n                break;\n\n            case OpTypes.MULTIPLY :\n                sb.append(\"MULTIPLY \");\n                break;\n\n            case OpTypes.DIVIDE :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "558",
               "end_line": "576",
               "source_code": "                break;\n\n            case OpTypes.GREATER :\n                sb.append(\"GREATER\");\n                break;\n\n            case OpTypes.SMALLER :\n                sb.append(\"SMALLER\");\n                break;\n\n            case OpTypes.SMALLER_EQUAL :\n                sb.append(\"SMALLER_EQUAL\");\n                break;\n\n            case OpTypes.NOT_EQUAL :\n                sb.append(\"NOT_EQUAL\");\n                break;\n\n            case OpTypes.AND :"
           }

       },

       {
           "id": "clone_1055",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3577",
               "end_line": "3592",
               "source_code": "        if (t == null) {\n            t = createBlankTable(\n                sysTableHsqlNames[INFORMATION_SCHEMA_CATALOG_NAME]);\n\n            addColumn(t, \"CATALOG_NAME\", SQL_IDENTIFIER);    // not null\n\n            // order:  TABLE_CAT\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[INFORMATION_SCHEMA_CATALOG_NAME].name,\n                false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2413",
               "end_line": "2427",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SYSTEM_TABLETYPES]);\n\n            addColumn(t, \"TABLE_TYPE\", SQL_IDENTIFIER);    // not null\n\n            // order: TABLE_TYPE\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_TABLETYPES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_1056",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7761",
               "end_line": "7766",
               "source_code": "                    row                 = t.getEmptyRowData();\n                    row[grantor]        = right.getGrantor().getName().name;\n                    row[grantee]        = right.getGrantee().getName().name;\n                    row[object_catalog] = database.getCatalogName().name;\n                    row[object_schema]  = object.getSchemaName().name;\n                    row[object_name]    = object.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7568",
               "end_line": "7573",
               "source_code": "                    row                 = t.getEmptyRowData();\n                    row[grantor]        = right.getGrantor().getName().name;\n                    row[grantee]        = right.getGrantee().getName().name;\n                    row[udt_catalog]    = database.getCatalogName().name;\n                    row[udt_schema]     = object.getSchemaName().name;\n                    row[udt_name]       = object.getName().name;"
           }

       },

       {
           "id": "clone_1057",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3673",
               "end_line": "3684",
               "source_code": "            if (!session.getGrantee().isAccessible(type)) {\n                continue;\n            }\n\n            row                             = t.getEmptyRowData();\n            row[object_catalog]             = database.getCatalogName().name;\n            row[object_schema]              = type.getSchemaName().name;\n            row[object_name]                = type.getName().name;\n            row[object_type]                = \"USER-DEFINED TYPE\";\n            row[collection_type_identifier] = type.getDefinition();\n\n            addTypeInfo(row, ((ArrayType) type).collectionBaseType());"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3649",
               "end_line": "3660",
               "source_code": "            if (!session.getGrantee().isAccessible(type)) {\n                continue;\n            }\n\n            row                             = t.getEmptyRowData();\n            row[object_catalog]             = database.getCatalogName().name;\n            row[object_schema]              = type.getSchemaName().name;\n            row[object_name]                = type.getName().name;\n            row[object_type]                = \"DOMAIN\";\n            row[collection_type_identifier] = type.getDefinition();\n\n            addTypeInfo(row, ((ArrayType) type).collectionBaseType());"
           }

       },

       {
           "id": "clone_1058",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5847",
               "end_line": "5893",
               "source_code": "        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1059",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2092",
               "end_line": "2122",
               "source_code": "        Table t = sysTables[COLLATIONS];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[COLLATIONS]);\n\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"PAD_ATTRIBUTE\", CHARACTER_DATA);\n\n            // false PK, as rows may have NULL COLLATION_CATALOG\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLLATIONS].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n\n            return t;\n        }\n\n        // Column number mappings\n        final int collation_catalog = 0;\n        final int collation_schema  = 1;\n        final int collation_name    = 2;\n        final int pad_attribute     = 3;\n\n        //\n        // Intermediate holders\n        Iterator  collations;\n        Collation collation;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1932",
               "end_line": "1963",
               "source_code": "        Table t = sysTables[CHECK_CONSTRAINTS];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[CHECK_CONSTRAINTS]);\n\n            addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"CHECK_CLAUSE\", CHARACTER_DATA);       // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[CHECK_CONSTRAINTS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                2, 1, 0\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int constraint_catalog = 0;\n        final int constraint_schema  = 1;\n        final int constraint_name    = 2;\n        final int check_clause       = 3;\n\n        //\n        // calculated column values\n        // Intermediate holders\n        Iterator     tables;\n        Table        table;"
           }

       },

       {
           "id": "clone_1060",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementDML.java",
               "start_line": "153",
               "end_line": "159",
               "source_code": "        this.baseTable   = targetTable.isTriggerUpdatable() ? targetTable\n                                                            : targetTable\n                                                            .getBaseTable();\n        this.insertCheckColumns   = checkColumns;\n        this.insertColumnMap      = insertColMap;\n        this.updateColumnMap      = updateColMap;\n        this.insertExpression     = insertExpr;"
           },

           "clone": {
               "file": "StatementDML.java",
               "start_line": "123",
               "end_line": "129",
               "source_code": "        this.baseTable   = targetTable.isTriggerUpdatable() ? targetTable\n                                                            : targetTable\n                                                            .getBaseTable();\n        this.updateColumnMap      = updateColumnMap;\n        this.updateExpressions    = colExpressions;\n        this.updateCheckColumns   = checkColumns;\n        this.targetRangeVariables = rangeVars;"
           }

       },

       {
           "id": "clone_1061",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "2066",
               "end_line": "2082",
               "source_code": "            case FUNC_CURRENT_TIMESTAMP : {\n                int precision = DateTimeType.defaultTimestampFractionPrecision;\n\n                if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Number) nodes[0].valueData).intValue();\n                }\n\n                if (precision\n                        == DateTimeType.defaultTimestampFractionPrecision) {\n                    return name;\n                }\n\n                sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);\n                sb.append(Tokens.T_CLOSEBRACKET);\n\n                return sb.toString();\n            }"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "2049",
               "end_line": "2064",
               "source_code": "            case FUNC_CURRENT_TIME : {\n                int precision = DateTimeType.defaultTimeFractionPrecision;\n\n                if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Number) nodes[0].valueData).intValue();\n                }\n\n                if (precision == DateTimeType.defaultTimeFractionPrecision) {\n                    return name;\n                }\n\n                sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);\n                sb.append(Tokens.T_CLOSEBRACKET);\n\n                return sb.toString();\n            }"
           }

       },

       {
           "id": "clone_1062",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "127",
               "end_line": "135",
               "source_code": "                isLogged = true;\n                break;\n\n            // cursor\n            case StatementTypes.ALLOCATE_CURSOR :\n                group = StatementTypes.X_SQL_DATA;\n                break;\n\n            case StatementTypes.ALLOCATE_DESCRIPTOR :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "180",
               "end_line": "187",
               "source_code": "                isLogged               = false;\n                break;\n\n            case StatementTypes.SET_TABLE_TYPE :\n                group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.SET_TABLE_INDEX :"
           }

       },

       {
           "id": "clone_1063",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "318",
               "end_line": "378",
               "source_code": "            case SYSTEM_BESTROWIDENTIFIER :\n                return SYSTEM_BESTROWIDENTIFIER(session, store);\n\n            case SYSTEM_COLUMNS :\n                return SYSTEM_COLUMNS(session, store);\n\n            case SYSTEM_CONNECTION_PROPERTIES :\n                return SYSTEM_CONNECTION_PROPERTIES(session, store);\n\n            case SYSTEM_CROSSREFERENCE :\n                return SYSTEM_CROSSREFERENCE(session, store);\n\n            case SYSTEM_INDEXINFO :\n                return SYSTEM_INDEXINFO(session, store);\n\n            case SYSTEM_PRIMARYKEYS :\n                return SYSTEM_PRIMARYKEYS(session, store);\n\n            case SYSTEM_PROCEDURECOLUMNS :\n                return SYSTEM_PROCEDURECOLUMNS(session, store);\n\n            case SYSTEM_PROCEDURES :\n                return SYSTEM_PROCEDURES(session, store);\n\n            case SYSTEM_SCHEMAS :\n                return SYSTEM_SCHEMAS(session, store);\n\n            case SYSTEM_SEQUENCES :\n                return SYSTEM_SEQUENCES(session, store);\n\n            case SYSTEM_TABLES :\n                return SYSTEM_TABLES(session, store);\n\n            case SYSTEM_TABLETYPES :\n                return SYSTEM_TABLETYPES(session, store);\n\n            case SYSTEM_TYPEINFO :\n                return SYSTEM_TYPEINFO(session, store);\n\n            case SYSTEM_USERS :\n                return SYSTEM_USERS(session, store);\n\n            case SYSTEM_UDTS :\n                return SYSTEM_UDTS(session, store);\n\n            case SYSTEM_VERSIONCOLUMNS :\n                return SYSTEM_VERSIONCOLUMNS(session, store);\n\n            case COLUMN_PRIVILEGES :\n                return COLUMN_PRIVILEGES(session, store);\n\n            case SEQUENCES :\n                return SEQUENCES(session, store);\n\n            case TABLE_PRIVILEGES :\n                return TABLE_PRIVILEGES(session, store);\n\n            case INFORMATION_SCHEMA_CATALOG_NAME :\n                return INFORMATION_SCHEMA_CATALOG_NAME(session, store);\n\n            default :"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "335",
               "end_line": "395",
               "source_code": "            case SQL_PACKAGES :\n                return SQL_PACKAGES(session, store);\n\n            case SQL_PARTS :\n                return SQL_PARTS(session, store);\n\n            case SQL_SIZING :\n                return SQL_SIZING(session, store);\n\n            case SQL_SIZING_PROFILES :\n                return SQL_SIZING_PROFILES(session, store);\n\n            case TABLE_CONSTRAINTS :\n                return TABLE_CONSTRAINTS(session, store);\n\n            case TABLES :\n                return TABLES(session, store);\n\n            case TRANSLATIONS :\n                return TRANSLATIONS(session, store);\n\n            case TRIGGERED_UPDATE_COLUMNS :\n                return TRIGGERED_UPDATE_COLUMNS(session, store);\n\n            case TRIGGER_COLUMN_USAGE :\n                return TRIGGER_COLUMN_USAGE(session, store);\n\n            case TRIGGER_ROUTINE_USAGE :\n                return TRIGGER_ROUTINE_USAGE(session, store);\n\n            case TRIGGER_SEQUENCE_USAGE :\n                return TRIGGER_SEQUENCE_USAGE(session, store);\n\n            case TRIGGER_TABLE_USAGE :\n                return TRIGGER_TABLE_USAGE(session, store);\n\n            case TRIGGERS :\n                return TRIGGERS(session, store);\n\n            case UDT_PRIVILEGES :\n                return UDT_PRIVILEGES(session, store);\n\n            case USAGE_PRIVILEGES :\n                return USAGE_PRIVILEGES(session, store);\n\n            case USER_DEFINED_TYPES :\n                return USER_DEFINED_TYPES(session, store);\n\n            case VIEW_COLUMN_USAGE :\n                return VIEW_COLUMN_USAGE(session, store);\n\n            case VIEW_ROUTINE_USAGE :\n                return VIEW_ROUTINE_USAGE(session, store);\n\n            case VIEW_TABLE_USAGE :\n                return VIEW_TABLE_USAGE(session, store);\n\n            case VIEWS :\n                return VIEWS(session, store);\n\n            default :"
           }

       },

       {
           "id": "clone_1064",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "5586",
               "end_line": "5599",
               "source_code": "        Expression e1 = XreadValueExpression();\n\n        readThis(Tokens.COMMA);\n\n        Expression e2          = XreadValueExpression();\n        Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);\n        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e2, e1);\n\n        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);\n\n        c.setSubType(OpTypes.CAST);\n        readThis(Tokens.CLOSEBRACKET);\n\n        return c;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "5551",
               "end_line": "5564",
               "source_code": "        Expression c = XreadValueExpression();\n\n        readThis(Tokens.COMMA);\n\n        Expression e           = XreadValueExpression();\n        Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);\n        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e, c);\n\n        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);\n\n        c.setSubType(OpTypes.CAST);\n        readThis(Tokens.CLOSEBRACKET);\n\n        return c;"
           }

       },

       {
           "id": "clone_1065",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2495",
               "end_line": "2500",
               "source_code": "        commandSet.put(T_MINUS, Tokens.MINUS);\n        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);\n        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);\n        commandSet.put(T_OPENBRACKET, OPENBRACKET);\n        commandSet.put(T_PLUS, Tokens.PLUS);\n        commandSet.put(T_QUESTION, Tokens.QUESTION);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2489",
               "end_line": "2494",
               "source_code": "        commandSet.put(T_EQUALS, Tokens.EQUALS);\n        commandSet.put(T_GREATER, Tokens.GREATER);\n        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);\n        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);\n        commandSet.put(T_LESS, Tokens.LESS);\n        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);"
           }

       },

       {
           "id": "clone_1066",

           "clone_type": "type-2",

           "origin": {
               "file": "TestHarness.java",
               "start_line": "249",
               "end_line": "257",
               "source_code": "                stmt.execute(\"CREATE SEQUENCE MySeq\");\n                stmt.execute(\n                    \"CREATE TABLE MyTable (Id INT PRIMARY KEY, Name VARCHAR(100) NOT NULL)\");\n                stmt.execute(\"CREATE TABLE Dummy (Blah VARCHAR(100) NOT NULL)\");\n                stmt.execute(\n                    \"INSERT INTO Dummy (Blah) VALUES ('dummy value')\");\n                stmt.execute(\"GRANT ALL ON MyTable TO abcd\");\n                stmt.execute(\"GRANT ALL ON Dummy TO abcd\");\n                stmt.execute(\"GRANT ALL ON SEQUENCE MySeq TO abcd\");"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "694",
               "end_line": "702",
               "source_code": "        st.execute(\"DROP TABLE t1 if exists;\");\n        st.execute(\"DROP TABLE t2 if exists;\");\n        st.execute(\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\n        st.execute(\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");"
           }

       },

       {
           "id": "clone_1067",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "672",
               "end_line": "677",
               "source_code": "        execSQL(pref + \"CREATE TABLE t1 (i INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE \" + pref + \"TABLE t1 (i INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "665",
               "end_line": "671",
               "source_code": "        execSQL(pref + \"CREATE UNIQUE INDEX tstinda ON toindextbl (i10)\",\n                expect);\n        execSQL(\"DROP INDEX tstinda IF EXISTS\", 0);    // reset\n        execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset\n        execSQL(\"CREATE TABLE t1 (i INT, vc \" + pref + \"VARCHAR)\", expect);\n        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset"
           }

       },

       {
           "id": "clone_1068",

           "clone_type": "type-2",

           "origin": {
               "file": "ClearTests.java",
               "start_line": "44",
               "end_line": "48",
               "source_code": "        TestUtil.deleteDatabase(\"/hsql/test/subselect\");\n        TestUtil.deleteDatabase(\"/hsql/test/testpersistent\");\n        TestUtil.deleteDatabase(\"/hsql/testdima/test\");\n        TestUtil.deleteDatabase(\"/hsql/testpa/test\");\n        TestUtil.deleteDatabase(\"/hsql/testtime/test\");"
           },

           "clone": {
               "file": "ClearTests.java",
               "start_line": "39",
               "end_line": "43",
               "source_code": "        TestUtil.deleteDatabase(\"test1\");\n        TestUtil.deleteDatabase(\"test2\");\n        TestUtil.deleteDatabase(\"test3\");\n        TestUtil.deleteDatabase(\"/hsql/testbench/test\");\n        TestUtil.deleteDatabase(\"/hsql/jdbcbench/test\");"
           }

       },

       {
           "id": "clone_1069",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1505",
               "end_line": "1514",
               "source_code": "                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1495",
               "end_line": "1504",
               "source_code": "                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :"
           }

       },

       {
           "id": "clone_1070",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "1395",
               "end_line": "1402",
               "source_code": "                case SchemaObject.SPECIFIC_ROUTINE :\n                    return schema.specificRoutineLookup.getObject(name);\n\n                case SchemaObject.DOMAIN :\n                case SchemaObject.TYPE :\n                    return schema.typeLookup.getObject(name);\n\n                case SchemaObject.INDEX :"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "1366",
               "end_line": "1373",
               "source_code": "                case SchemaObject.SEQUENCE :\n                    return schema.sequenceLookup.getObject(name);\n\n                case SchemaObject.TABLE :\n                case SchemaObject.VIEW :\n                    return schema.tableLookup.getObject(name);\n\n                case SchemaObject.CHARSET :"
           }

       },

       {
           "id": "clone_1071",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDateTime.java",
               "start_line": "62",
               "end_line": "66",
               "source_code": "            statement.execute(\"drop table time_test if exists\");\n            statement.execute(\"drop table date_test if exists\");\n            statement.execute(\"create table time_test(time_test time)\");\n            statement.execute(\"create table date_test(date_test date)\");\n            connection.close();"
           },

           "clone": {
               "file": "TestHarness.java",
               "start_line": "253",
               "end_line": "258",
               "source_code": "                stmt.execute(\n                    \"INSERT INTO Dummy (Blah) VALUES ('dummy value')\");\n                stmt.execute(\"GRANT ALL ON MyTable TO abcd\");\n                stmt.execute(\"GRANT ALL ON Dummy TO abcd\");\n                stmt.execute(\"GRANT ALL ON SEQUENCE MySeq TO abcd\");\n                stmt.close();"
           }

       },

       {
           "id": "clone_1072",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5856",
               "end_line": "5902",
               "source_code": "        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1073",

           "clone_type": "type-2",

           "origin": {
               "file": "TypeInvariants.java",
               "start_line": "78",
               "end_line": "90",
               "source_code": "        CHARACTER_DATA.userTypeModifier = new UserTypeModifier(name,\n                SchemaObject.DOMAIN, CHARACTER_DATA);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"SQL_IDENTIFIER\",\n                false, SchemaObject.DOMAIN);\n        SQL_IDENTIFIER = new CharacterType(Types.SQL_VARCHAR, 128);\n        SQL_IDENTIFIER.userTypeModifier = new UserTypeModifier(name,\n                SchemaObject.DOMAIN, SQL_IDENTIFIER);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"TIME_STAMP\", false,\n                SchemaObject.DOMAIN);"
           },

           "clone": {
               "file": "TypeInvariants.java",
               "start_line": "64",
               "end_line": "76",
               "source_code": "        CARDINAL_NUMBER.userTypeModifier = new UserTypeModifier(name,\n                SchemaObject.DOMAIN, CARDINAL_NUMBER);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"YES_OR_NO\", false,\n                SchemaObject.DOMAIN);\n        YES_OR_NO = new CharacterType(Types.SQL_VARCHAR, 3);\n        YES_OR_NO.userTypeModifier = new UserTypeModifier(name,\n                SchemaObject.DOMAIN, YES_OR_NO);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"CHARACTER_DATA\",\n                false, SchemaObject.DOMAIN);"
           }

       },

       {
           "id": "clone_1074",

           "clone_type": "type-2",

           "origin": {
               "file": "DataFileCache.java",
               "start_line": "1618",
               "end_line": "1623",
               "source_code": "                dataFile.seek(FLAGS_POS);\n                dataFile.writeInt(flags);\n                dataFile.synch();\n                logDetailEvent(\"setFileModified flag set \");\n\n                fileModified = true;"
           },

           "clone": {
               "file": "DataFileCache.java",
               "start_line": "783",
               "end_line": "788",
               "source_code": "            dataFile.seek(FLAGS_POS);\n            dataFile.writeInt(flags);\n            dataFile.synch();\n            logDetailEvent(\"file sync end\");\n\n            fileModified          = false;"
           }

       },

       {
           "id": "clone_1075",

           "clone_type": "type-2",

           "origin": {
               "file": "Transfer.java",
               "start_line": "305",
               "end_line": "324",
               "source_code": "            if (result.size() > 1) {\n                lTable.setMultipleMode(true);\n\n                if (iSelectionStep == Transfer.SELECT_SOURCE_SCHEMA) {\n                    bStart.setLabel(\"Select Schema: Source\");\n                } else {\n                    bStart.setLabel(\"Select Schema: Destination\");\n                }\n\n                bStart.invalidate();\n                bStart.setEnabled(true);\n\n                for (Enumeration e =\n                        result.elements(); e.hasMoreElements(); ) {\n                    lTable.add(e.nextElement().toString());\n                }\n\n                lTable.repaint();\n                trace(\"Select correct Schema or load Settings file\");\n            }"
           },

           "clone": {
               "file": "Transfer.java",
               "start_line": "225",
               "end_line": "244",
               "source_code": "            if (result.size() > 1) {\n                lTable.setMultipleMode(true);\n\n                if (iSelectionStep == Transfer.SELECT_SOURCE_CATALOG) {\n                    bStart.setLabel(\"Select Catalog: Source\");\n                } else {\n                    bStart.setLabel(\"Select Catalog: Destination\");\n                }\n\n                bStart.invalidate();\n                bStart.setEnabled(true);\n\n                for (Enumeration e =\n                        result.elements(); e.hasMoreElements(); ) {\n                    lTable.add(e.nextElement().toString());\n                }\n\n                lTable.repaint();\n                trace(\"Select correct Catalog\");\n            }"
           }

       },

       {
           "id": "clone_1076",

           "clone_type": "type-2",

           "origin": {
               "file": "TestTextTable.java",
               "start_line": "61",
               "end_line": "65",
               "source_code": "            m_name          = name;\n            m_columnSpec    = columnSpec;\n            m_separator     = separator;\n            m_separatorSpec = separatorSpec;\n            m_data          = data;"
           },

           "clone": {
               "file": "RangeVariable.java",
               "start_line": "160",
               "end_line": "164",
               "source_code": "        rangeType        = TABLE_RANGE;\n        rangeTable       = table;\n        tableAlias       = alias;\n        columnAliases    = columnList;\n        columnAliasNames = columnNameList;"
           }

       },

       {
           "id": "clone_1077",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "250",
               "end_line": "256",
               "source_code": "            case Types.SQL_CHAR :\n                s = readString();\n                break;\n\n            case Types.SQL_VARCHAR :\n                s = readVarString();\n                break;"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "273",
               "end_line": "279",
               "source_code": "            case Tokens.BACKUP :\n                cs = compileBackup();\n                break;\n\n            case Tokens.CHECKPOINT :\n                cs = compileCheckpoint();\n                break;"
           }

       },

       {
           "id": "clone_1078",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "946",
               "end_line": "951",
               "source_code": "            assertTrue(\"Got no rows with si = 395\", rs.next());\n            assertEquals(Integer.class, rs.getObject(\"si\").getClass());\n            // Nb. HyperSQL purposefully returns an Integer for this type\n            assertTrue(\"Got only one row with si = 395\", rs.next());\n            assertEquals((short) 395, rs.getShort(\"si\"));\n            assertFalse(\"Got too many rows with si = 395\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "208",
               "end_line": "213",
               "source_code": "            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(Integer.class, rs.getObject(\"si\").getClass());\n            // Nb. HyperSQL purposefully returns an Integer for this type\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals((short) 4, rs.getShort(\"si\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());"
           }

       },

       {
           "id": "clone_1079",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "243",
               "end_line": "277",
               "source_code": "            case Tokens.REVOKE :\n                cs = compileGrantOrRevoke();\n                break;\n\n            case Tokens.COMMENT :\n                cs = compileComment();\n                break;\n\n            // HSQL SESSION\n            case Tokens.LOCK :\n                cs = compileLock();\n                break;\n\n            case Tokens.CONNECT :\n                cs = compileConnect();\n                break;\n\n            case Tokens.DISCONNECT :\n                cs = compileDisconnect();\n                break;\n\n            // HSQL COMMAND\n            case Tokens.SCRIPT :\n                cs = compileScript();\n                break;\n\n            case Tokens.SHUTDOWN :\n                cs = compileShutdown();\n                break;\n\n            case Tokens.BACKUP :\n                cs = compileBackup();\n                break;\n\n            case Tokens.CHECKPOINT :"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "209",
               "end_line": "242",
               "source_code": "            case Tokens.START :\n                cs = compileStartTransaction();\n                break;\n\n            case Tokens.COMMIT :\n                cs = compileCommit();\n                break;\n\n            case Tokens.ROLLBACK :\n                cs = compileRollback();\n                break;\n\n            case Tokens.SAVEPOINT :\n                cs = compileSavepoint();\n                break;\n\n            case Tokens.RELEASE :\n                cs = compileReleaseSavepoint();\n                break;\n\n            // DDL\n            case Tokens.CREATE :\n                cs = compileCreate();\n                break;\n\n            case Tokens.ALTER :\n                cs = compileAlter();\n                break;\n\n            case Tokens.DROP :\n                cs = compileDrop();\n                break;\n\n            case Tokens.GRANT :"
           }

       },

       {
           "id": "clone_1080",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "389",
               "end_line": "394",
               "source_code": "                break;\n\n            case LobResultTypes.REQUEST_SET_CHARS :\n            case LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION :\n                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "380",
               "end_line": "385",
               "source_code": "                break;\n\n            case LobResultTypes.REQUEST_SET_BYTES :\n            case LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION :\n                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();"
           }

       },

       {
           "id": "clone_1081",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBatchBug.java",
               "start_line": "196",
               "end_line": "202",
               "source_code": "        StringBuffer sql = new StringBuffer();\n\n        sql.append(\"INSERT INTO \");\n        sql.append(TEST_TABLE_NAME);\n        sql.append(\" (\");\n        sql.append(FIELD_LIST_WITHOUT_ID);\n        sql.append(\") VALUES (\");"
           },

           "clone": {
               "file": "TestBatchBug.java",
               "start_line": "124",
               "end_line": "130",
               "source_code": "        StringBuffer sql = new StringBuffer();\n\n        sql.append(\"CREATE \");\n        sql.append(tableAttr);    // z.B. \"CACHED\"\n        sql.append(\" TABLE \");\n        sql.append(TEST_TABLE_NAME);\n        sql.append(\" (\");"
           }

       },

       {
           "id": "clone_1082",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "166",
               "end_line": "173",
               "source_code": "            case OpTypes.VALUE :\n                sb.append(\"VALUE = \").append(\n                    dataType.convertToSQLString(valueData));\n                sb.append(\", TYPE = \").append(dataType.getNameString());\n\n                return sb.toString();\n\n            case OpTypes.ROW :"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "390",
               "end_line": "397",
               "source_code": "            case OpTypes.VALUE :\n                sb.append(\"VALUE = \").append(\n                    dataType.convertToSQLString(valueData));\n                sb.append(\", TYPE = \").append(dataType.getNameString());\n\n                return sb.toString();\n\n            case OpTypes.ARRAY :"
           }

       },

       {
           "id": "clone_1083",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1331",
               "end_line": "1351",
               "source_code": "        Object[] row;\n\n        // column number mappings\n        final int itable_cat        = 0;\n        final int itable_schem      = 1;\n        final int itable_name       = 2;\n        final int inon_unique       = 3;\n        final int iindex_qualifier  = 4;\n        final int iindex_name       = 5;\n        final int itype             = 6;\n        final int iordinal_position = 7;\n        final int icolumn_name      = 8;\n        final int iasc_or_desc      = 9;\n        final int icardinality      = 10;\n        final int ipages            = 11;\n        final int ifilter_condition = 12;\n        final int irow_cardinality  = 13;\n\n        // Initialization\n        tables =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1133",
               "end_line": "1152",
               "source_code": "        Object[]      row;\n\n        // column number mappings\n        final int ipk_table_cat   = 0;\n        final int ipk_table_schem = 1;\n        final int ipk_table_name  = 2;\n        final int ipk_column_name = 3;\n        final int ifk_table_cat   = 4;\n        final int ifk_table_schem = 5;\n        final int ifk_table_name  = 6;\n        final int ifk_column_name = 7;\n        final int ikey_seq        = 8;\n        final int iupdate_rule    = 9;\n        final int idelete_rule    = 10;\n        final int ifk_name        = 11;\n        final int ipk_name        = 12;\n        final int ideferrability  = 13;\n\n        tables =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);"
           }

       },

       {
           "id": "clone_1084",

           "clone_type": "type-2",

           "origin": {
               "file": "Right.java",
               "start_line": "683",
               "end_line": "698",
               "source_code": "            case GrantConstants.REFERENCES :\n                if (isFullReferences) {\n                    return true;\n                }\n\n                return referencesColumnSet != null\n                       && !referencesColumnSet.isEmpty();\n\n            case GrantConstants.TRIGGER :\n                if (isFullTrigger) {\n                    return true;\n                }\n\n                return triggerColumnSet != null && !triggerColumnSet.isEmpty();\n\n            case GrantConstants.EXECUTE :"
           },

           "clone": {
               "file": "Right.java",
               "start_line": "662",
               "end_line": "676",
               "source_code": "            case GrantConstants.SELECT :\n                if (isFullSelect) {\n                    return true;\n                }\n\n                return selectColumnSet != null && !selectColumnSet.isEmpty();\n\n            case GrantConstants.INSERT :\n                if (isFullInsert) {\n                    return true;\n                }\n\n                return insertColumnSet != null && !insertColumnSet.isEmpty();\n\n            case GrantConstants.UPDATE :"
           }

       },

       {
           "id": "clone_1085",

           "clone_type": "type-2",

           "origin": {
               "file": "CharacterType.java",
               "start_line": "574",
               "end_line": "578",
               "source_code": "            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            default :"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "1922",
               "end_line": "1929",
               "source_code": "            //\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n\n            //\n            case Types.SQL_DATE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            default :"
           }

       },

       {
           "id": "clone_1086",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5736",
               "end_line": "5782",
               "source_code": "            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1087",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSql.java",
               "start_line": "248",
               "end_line": "266",
               "source_code": "            {\n                ResultSet rs = md.getCrossReference(null, null, \"USER\", null,\n                                                    null,\n                                                    \"ADDRESSBOOK_CATEGORY\");\n                ResultSetMetaData rsmd = rs.getMetaData();\n\n                result4 = \"\";\n\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result4 += rs.getString(i + 1) + \":\";\n                    }\n\n                    result4 += \"\n\";\n                }\n\n                rs.close();\n                System.out.println(result4);\n            }"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "210",
               "end_line": "228",
               "source_code": "            {\n                ResultSet rs = md.getCrossReference(null, null,\n                                                    \"ADDRESSBOOK_CATEGORY\",\n                                                    null, null, \"ADDRESSBOOK\");\n                ResultSetMetaData rsmd = rs.getMetaData();\n\n                result2 = \"\";\n\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result2 += rs.getString(i + 1) + \":\";\n                    }\n\n                    result2 += \"\n\";\n                }\n\n                rs.close();\n                System.out.println(result2);\n            }"
           }

       },

       {
           "id": "clone_1088",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBatchExecution.java",
               "start_line": "186",
               "end_line": "208",
               "source_code": "        // get the connection and statement\n        conn  = DriverManager.getConnection(url, \"SA\", \"\");\n        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");\n        println(\"featuring temp (transient) table\");\n        println(\"***************************************\");\n\n        // drop and recreate the test table\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(create_temp + table_sql);\n        stmnt.execute(create_temp + table_sql);\n        preparedTestOne(runs);\n\n        // drop the test table\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "162",
               "end_line": "184",
               "source_code": "        // get the connection and statement\n        conn  = DriverManager.getConnection(url, \"SA\", \"\");\n        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");\n        println(\"featuring memory (persistent) table\");\n        println(\"***************************************\");\n\n        // drop and recreate the test table\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(create_memory + table_sql);\n        stmnt.execute(create_memory + table_sql);\n        preparedTestOne(runs);\n\n        // drop the test table and shut down database\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");"
           }

       },

       {
           "id": "clone_1089",

           "clone_type": "type-2",

           "origin": {
               "file": "BitType.java",
               "start_line": "148",
               "end_line": "154",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_BLOB :\n                return other;\n\n            default :\n                throw Error.error(ErrorCode.X_42562);"
           },

           "clone": {
               "file": "SetFunction.java",
               "start_line": "497",
               "end_line": "503",
               "source_code": "                    case Types.SQL_DATE :\n                    case Types.SQL_TIMESTAMP :\n                    case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                        return type;\n\n                    default :\n                        throw Error.error(ErrorCode.X_42563);"
           }

       },

       {
           "id": "clone_1090",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "1379",
               "end_line": "1385",
               "source_code": "                case SchemaObject.PROCEDURE :\n                    return schema.procedureLookup.getObject(name);\n\n                case SchemaObject.FUNCTION :\n                    return schema.functionLookup.getObject(name);\n\n                case SchemaObject.ROUTINE :"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "1370",
               "end_line": "1376",
               "source_code": "                case SchemaObject.VIEW :\n                    return schema.tableLookup.getObject(name);\n\n                case SchemaObject.CHARSET :\n                    return schema.charsetLookup.getObject(name);\n\n                case SchemaObject.COLLATION :"
           }

       },

       {
           "id": "clone_1091",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1808",
               "end_line": "1817",
               "source_code": "            case '1' :\n            case '2' :\n            case '3' :\n            case '4' :\n            case '5' :\n            case '6' :\n            case '7' :\n            case '8' :\n            case '9' :\n            case '.' :"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1038",
               "end_line": "1047",
               "source_code": "                case 'K' :\n                case 'k' :\n                case 'M' :\n                case 'm' :\n                case 'G' :\n                case 'g' :\n                case 'T' :\n                case 't' :\n                case 'P' :\n                case 'p' :"
           }

       },

       {
           "id": "clone_1092",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1185",
               "end_line": "1206",
               "source_code": "            sourceOffset++;\n            targetOffset++;\n\n            if (sourceOffset == source[sourceIndex][LOBS.BLOCK_COUNT]) {\n                sourceOffset = 0;\n\n                sourceIndex++;\n            }\n\n            if (targetOffset == target[targetIndex][LOBS.BLOCK_COUNT]) {\n                targetOffset = 0;\n\n                targetIndex++;\n            }\n\n            if (sourceIndex == source.length) {\n                break;\n            }\n\n            if (targetIndex == target.length) {\n                break;\n            }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "1009",
               "end_line": "1030",
               "source_code": "            aOffset++;\n            bOffset++;\n\n            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {\n                aOffset = 0;\n\n                aIndex++;\n            }\n\n            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {\n                bOffset = 0;\n\n                bIndex++;\n            }\n\n            if (aIndex == aAddresses.length) {\n                break;\n            }\n\n            if (bIndex == bAddresses.length) {\n                break;\n            }"
           }

       },

       {
           "id": "clone_1093",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "239",
               "end_line": "247",
               "source_code": "                return \"HOUR TO SECOND\";\n\n            case Types.SQL_INTERVAL_MINUTE :\n                return Tokens.T_MINUTE;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                return \"MINUTE TO SECOND\";\n\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "230",
               "end_line": "238",
               "source_code": "                return \"DAY TO SECOND\";\n\n            case Types.SQL_INTERVAL_HOUR :\n                return Tokens.T_HOUR;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                return \"HOUR TO MINUTE\";\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :"
           }

       },

       {
           "id": "clone_1094",

           "clone_type": "type-2",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "1394",
               "end_line": "1403",
               "source_code": "                    // N.b., we return.\n                    // You might think that this completion of an EXTENDED sequence\n                    // would end in ReadyForQuery/Z, but no.\n                    break;\n\n                case 'C' :                                    // Close packet\n                    c      = inPacket.readByteChar();\n                    handle = inPacket.readString();\n                    odbcPs = null;\n                    portal = null;"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "1035",
               "end_line": "1041",
               "source_code": "                    break;\n\n                case 'D' :                                    // Describe packet\n                    c      = inPacket.readByteChar();\n                    handle = inPacket.readString();\n                    odbcPs = null;\n                    portal = null;"
           }

       },

       {
           "id": "clone_1095",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1877",
               "end_line": "1882",
               "source_code": "        Object[] col   = gResult.getHead();\n        int      width = col.length;\n        int[]    size  = new int[width];\n        Vector   data  = gResult.getData();\n        Object[] row;\n        int      height = data.size();"
           },

           "clone": {
               "file": "DatabaseManager.java",
               "start_line": "1092",
               "end_line": "1097",
               "source_code": "        String[] col   = gResult.getHead();\n        int      width = col.length;\n        int[]    size  = new int[width];\n        Vector   data  = gResult.getData();\n        String[] row;\n        int      height = data.size();"
           }

       },

       {
           "id": "clone_1096",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5858",
               "end_line": "5904",
               "source_code": "        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1097",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3368",
               "end_line": "3378",
               "source_code": "                break;\n\n            case FUNC_TO_DSINTERVAL :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_INTERVAL_DAY_TO_SECOND_MAX_PRECISION;\n                break;\n\n            case FUNC_TO_YMINTERVAL :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3352",
               "end_line": "3362",
               "source_code": "                break;\n\n            case FUNC_SYS_EXTRACT_UTC :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;\n                }\n\n                dataType = Type.SQL_TIMESTAMP;\n                break;\n\n            case FUNC_SYSDATE :"
           }

       },

       {
           "id": "clone_1098",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "371",
               "end_line": "376",
               "source_code": "            case ResultConstants.CLOSE_RESULT :\n                result.id = in.readLong();\n                break;\n\n            case ResultConstants.FREESTMT :\n                result.statementID = in.readLong();"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "403",
               "end_line": "408",
               "source_code": "            case LobResultTypes.REQUEST_TRUNCATE :\n                result.blockOffset = dataInput.readLong();\n                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTES :\n                result.blockOffset = dataInput.readLong();"
           }

       },

       {
           "id": "clone_1099",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "151",
               "end_line": "175",
               "source_code": "        if (DriverName.length() == 0 || DBUrl.length() == 0) {\n            System.out.println(\n                \"usage: java TestBench -driver [driver_class_name] -url [url_to_db] -user [username] -password [password] [-v] [-init] [-tpc n] [-clients n]\");\n            System.out.println();\n            System.out.println(\"-v          verbose error messages\");\n            System.out.println(\"-init       initialize the tables\");\n            System.out.println(\"-tpc        transactions per client\");\n            System.out.println(\"-clients    number of simultaneous clients\");\n            System.exit(-1);\n        }\n\n        System.out.println(\n            \"*********************************************************\");\n        System.out.println(\n            \"* TestBench v1.1                                        *\");\n        System.out.println(\n            \"*********************************************************\");\n        System.out.println();\n        System.out.println(\"Driver: \" + DriverName);\n        System.out.println(\"URL:\" + DBUrl);\n        System.out.println();\n        System.out.println(\"Scale factor value: \" + tps);\n        System.out.println(\"Number of clients: \" + n_clients);\n        System.out.println(\"Number of transactions per client: \"\n                           + n_txn_per_client);"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "143",
               "end_line": "167",
               "source_code": "        if (DriverName.length() == 0 || DBUrl.length() == 0) {\n            System.out.println(\n                \"usage: java JDBCBench -driver [driver_class_name] -url [url_to_db] -user [username] -password [password] [-v] [-init] [-tpc n] [-clients n]\");\n            System.out.println();\n            System.out.println(\"-v          verbose error messages\");\n            System.out.println(\"-init       initialize the tables\");\n            System.out.println(\"-tpc        transactions per client\");\n            System.out.println(\"-clients    number of simultaneous clients\");\n            System.exit(-1);\n        }\n\n        System.out.println(\n            \"*********************************************************\");\n        System.out.println(\n            \"* JDBCBench v1.1                                        *\");\n        System.out.println(\n            \"*********************************************************\");\n        System.out.println();\n        System.out.println(\"Driver: \" + DriverName);\n        System.out.println(\"URL:\" + DBUrl);\n        System.out.println();\n        System.out.println(\"Scale factor value: \" + tps);\n        System.out.println(\"Number of clients: \" + n_clients);\n        System.out.println(\"Number of transactions per client: \"\n                           + n_txn_per_client);"
           }

       },

       {
           "id": "clone_1100",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "522",
               "end_line": "528",
               "source_code": "            case LobResultTypes.RESPONSE_GET_BYTES :\n                dataOut.writeLong(blockOffset);\n                dataOut.writeLong(blockLength);\n                dataOut.write(byteBlock);\n                break;\n\n            case LobResultTypes.RESPONSE_GET_CHARS :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "494",
               "end_line": "500",
               "source_code": "            case LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION :\n                dataOut.writeLong(blockOffset);\n                dataOut.writeLong(blockLength);\n                dataOut.write(byteBlock);\n                break;\n\n            case LobResultTypes.REQUEST_SET_CHARS :"
           }

       },

       {
           "id": "clone_1101",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "2041",
               "end_line": "2050",
               "source_code": "            case 'c' :\n                enforce1charSpecial(arg1, '=');\n                if (other != null)\n                    // But remember that we have to abort on some I/O errors.\n                    continueOnError = Boolean.parseBoolean(other.trim());\n\n                stdprintln(SqltoolRB.c_setting.getString(\n                        Boolean.toString(continueOnError)));\n\n                return;"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "2031",
               "end_line": "2039",
               "source_code": "            case 't' :\n                enforce1charSpecial(arg1, '=');\n                if (other != null)\n                    // But remember that we have to abort on some I/O errors.\n                    reportTimes = Boolean.parseBoolean(other.trim());\n\n                stdprintln(SqltoolRB.exectime_reporting.getString(\n                        Boolean.toString(reportTimes)));\n                return;"
           }

       },

       {
           "id": "clone_1102",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "210",
               "end_line": "216",
               "source_code": "            case ResultConstants.CALL_RESPONSE :\n            case ResultConstants.EXECUTE :\n            case ResultConstants.UPDATE_RESULT :\n                break;\n\n            case ResultConstants.BATCHEXECUTE :\n            case ResultConstants.BATCHEXECDIRECT :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "870",
               "end_line": "876",
               "source_code": "            case Types.SQL_DOUBLE :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :"
           }

       },

       {
           "id": "clone_1103",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5761",
               "end_line": "5807",
               "source_code": "            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1104",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "707",
               "end_line": "727",
               "source_code": "    void readSimpleColumnNames(OrderedHashSet columns, Table table,\n                               boolean withPrefix) {\n\n        while (true) {\n            ColumnSchema col = readSimpleColumnName(table, withPrefix);\n\n            if (!columns.add(col.getName().name)) {\n                throw Error.error(ErrorCode.X_42577, col.getName().name);\n            }\n\n            if (readIfThis(Tokens.COMMA)) {\n                continue;\n            }\n\n            if (token.tokenType == Tokens.CLOSEBRACKET) {\n                break;\n            }\n\n            throw unexpectedToken();\n        }\n    }"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "639",
               "end_line": "659",
               "source_code": "    void readSimpleColumnNames(OrderedHashSet columns, RangeVariable rangeVar,\n                               boolean withPrefix) {\n\n        while (true) {\n            ColumnSchema col = readSimpleColumnName(rangeVar, withPrefix);\n\n            if (!columns.add(col.getName().name)) {\n                throw Error.error(ErrorCode.X_42579, col.getName().name);\n            }\n\n            if (readIfThis(Tokens.COMMA)) {\n                continue;\n            }\n\n            if (token.tokenType == Tokens.CLOSEBRACKET) {\n                break;\n            }\n\n            throw unexpectedToken();\n        }\n    }"
           }

       },

       {
           "id": "clone_1105",

           "clone_type": "type-2",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1803",
               "end_line": "1808",
               "source_code": "        ResultMetaData meta     = deleteLobPartCall.getParametersMetaData();\n        Object         params[] = new Object[meta.getColumnCount()];\n\n        params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);\n        params[DELETE_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);\n        params[DELETE_BLOCKS.BLOCK_LIMIT]  = ValuePool.getInt(limit);"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "1766",
               "end_line": "1771",
               "source_code": "        ResultMetaData meta     = getSpanningBlocks.getParametersMetaData();\n        Object         params[] = new Object[meta.getColumnCount()];\n\n        params[GET_LOB_PART.LOB_ID]       = ValuePool.getLong(lobID);\n        params[GET_LOB_PART.BLOCK_OFFSET] = ValuePool.getInt(offset);\n        params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getInt(limit);"
           }

       },

       {
           "id": "clone_1106",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDima.java",
               "start_line": "69",
               "end_line": "81",
               "source_code": "            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 1')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 1')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 1')\");\n            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 2')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 2')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 2')\");\n            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 3')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 3')\");"
           },

           "clone": {
               "file": "TestJavaFunctions.java",
               "start_line": "72",
               "end_line": "79",
               "source_code": "        s.executeUpdate(\"DROP FUNCTION TEST_QUERY IF EXISTS\");\n        s.executeUpdate(\"DROP FUNCTION TEST_CUSTOM_RESULT IF EXISTS\");\n        s.executeUpdate(\"DROP TABLE T IF EXISTS\");\n        s.executeUpdate(\"CREATE TABLE T(C VARCHAR(20), I INT)\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Thames', 10\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Fleet', 12\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Brent', 14\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Westbourne', 16\");"
           }

       },

       {
           "id": "clone_1107",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "4945",
               "end_line": "4952",
               "source_code": "            case java.sql.Types.CHAR :\n                return \"CHAR\";\n\n            case java.sql.Types.CLOB :\n                return \"CLOB\";\n\n            case JDBC3_DATALINK :\n                return \"DATALINK\";"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "4936",
               "end_line": "4943",
               "source_code": "            case java.sql.Types.BIT :\n                return \"BIT\";\n\n            case java.sql.Types.BLOB :\n                return \"BLOB\";\n\n            case JDBC3_BOOLEAN :\n                return \"BOOLEAN\";"
           }

       },

       {
           "id": "clone_1108",

           "clone_type": "type-2",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "221",
               "end_line": "227",
               "source_code": "        c.core.uniqueName = uniqueConstraint.getName();\n        c.core.mainName   = mainName;\n        c.core.mainIndex  = mainIndex;\n        c.core.refTable   = table;\n        c.core.refName    = c.getName();\n        c.core.refIndex   = refIndex;\n        c.isForward       = isForward;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "1433",
               "end_line": "1439",
               "source_code": "        c.core.uniqueName = uniqueConstraint.getName();\n        c.core.mainName   = mainName;\n        c.core.mainIndex  = mainIndex;\n        c.core.refTable   = table;\n        c.core.refName    = c.getName();\n        c.core.refIndex   = index;\n        c.isForward       = isForward;"
           }

       },

       {
           "id": "clone_1109",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "538",
               "end_line": "544",
               "source_code": "                dataOut.writeLong(blockLength);\n                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION :\n            case LobResultTypes.RESPONSE_GET_CHAR_PATTERN_POSITION :\n                dataOut.writeLong(blockOffset);\n                break;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "514",
               "end_line": "520",
               "source_code": "                dataOut.writeLong(blockLength);\n                break;\n\n            case LobResultTypes.REQUEST_GET_LENGTH :\n            case LobResultTypes.REQUEST_TRUNCATE :\n                dataOut.writeLong(blockOffset);\n                break;"
           }

       },

       {
           "id": "clone_1110",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "527",
               "end_line": "544",
               "source_code": "    protected BlobData readBlob() throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        long id = Long.parseLong(s);\n\n        return new BlobDataID(id);\n    }"
           },

           "clone": {
               "file": "RowInputText.java",
               "start_line": "508",
               "end_line": "525",
               "source_code": "    protected ClobData readClob() throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        long id = Long.parseLong(s);\n\n        return new ClobDataID(id);\n    }"
           }

       },

       {
           "id": "clone_1111",

           "clone_type": "type-2",

           "origin": {
               "file": "Server.java",
               "start_line": "1683",
               "end_line": "1693",
               "source_code": "            case ResultConstants.STARTTRAN : {\n                sb.append(\"SQLCLI:SQLSTARTTRAN\");\n\n                break;\n            }\n            case ResultConstants.DISCONNECT : {\n                sb.append(\"SQLCLI:SQLDISCONNECT\");\n\n                break;\n            }\n            case ResultConstants.SETCONNECTATTR :"
           },

           "clone": {
               "file": "Server.java",
               "start_line": "1644",
               "end_line": "1654",
               "source_code": "            case ResultConstants.GETSESSIONATTR : {\n                sb.append(\"HSQLCLI:GETSESSIONATTR\");\n\n                break;\n            }\n            case ResultConstants.SETSESSIONATTR : {\n                sb.append(\"HSQLCLI:SETSESSIONATTR:\");\n\n                break;\n            }\n            case ResultConstants.ENDTRAN :"
           }

       },

       {
           "id": "clone_1112",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6087",
               "end_line": "6098",
               "source_code": "            row[result_cast_numeric_scale]              = null;\n            row[result_cast_datetime_precision]         = null;\n            row[result_cast_interval_type]              = null;\n            row[result_cast_interval_precision]         = null;\n            row[result_cast_type_udt_catalog]           = null;\n            row[result_cast_type_udt_schema]            = null;\n            row[result_cast_type_udt_name]              = null;\n            row[result_cast_scope_catalog]              = null;\n            row[result_cast_scope_schema]               = null;\n            row[result_cast_scope_name]                 = null;\n            row[result_cast_max_cardinality]            = null;\n            row[result_cast_dtd_identifier]             = null;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6075",
               "end_line": "6086",
               "source_code": "            row[result_cast_from_data_type]             = null;\n            row[result_cast_as_locator]                 = null;\n            row[result_cast_char_max_length]            = null;\n            row[result_cast_char_octet_length]          = null;\n            row[result_cast_char_set_catalog]           = null;\n            row[result_cast_char_set_schema]            = null;\n            row[result_cast_character_set_name]         = null;\n            row[result_cast_collation_catalog]          = null;\n            row[result_cast_collation_schema]           = null;\n            row[result_cast_collation_name]             = null;\n            row[result_cast_numeric_precision]          = null;\n            row[result_cast_numeric_radix]              = null;"
           }

       },

       {
           "id": "clone_1113",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7394",
               "end_line": "7432",
               "source_code": "        Table t = sysTables[TRIGGERED_UPDATE_COLUMNS];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TRIGGERED_UPDATE_COLUMNS]);\n\n            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);            // not null\n            addColumn(t, \"EVENT_OBJECT_CATALOG\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"EVENT_OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"EVENT_OBJECT_TABLE\", SQL_IDENTIFIER);\n            addColumn(t, \"EVENT_OBJECT_COLUMN\", SQL_IDENTIFIER);     // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TRIGGERED_UPDATE_COLUMNS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int trigger_catalog      = 0;\n        final int trigger_schema       = 1;\n        final int trigger_name         = 2;\n        final int event_object_catalog = 3;\n        final int event_object_schema  = 4;\n        final int event_object_table   = 5;\n        final int event_object_column  = 6;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.TRIGGER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6775",
               "end_line": "6813",
               "source_code": "        Table t = sysTables[TRIGGER_COLUMN_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TRIGGER_COLUMN_USAGE]);\n\n            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);     // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TRIGGER_COLUMN_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int trigger_catalog = 0;\n        final int trigger_schema  = 1;\n        final int trigger_name    = 2;\n        final int table_catalog   = 3;\n        final int table_schema    = 4;\n        final int table_name      = 5;\n        final int column_name     = 6;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.TRIGGER);"
           }

       },

       {
           "id": "clone_1114",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserBase.java",
               "start_line": "734",
               "end_line": "757",
               "source_code": "        // comparison\n        expressionTypeMap.put(Tokens.EQUALS, OpTypes.EQUAL);\n        expressionTypeMap.put(Tokens.GREATER, OpTypes.GREATER);\n        expressionTypeMap.put(Tokens.LESS, OpTypes.SMALLER);\n        expressionTypeMap.put(Tokens.GREATER_EQUALS, OpTypes.GREATER_EQUAL);\n        expressionTypeMap.put(Tokens.LESS_EQUALS, OpTypes.SMALLER_EQUAL);\n        expressionTypeMap.put(Tokens.NOT_EQUALS, OpTypes.NOT_EQUAL);\n\n        // aggregates\n        expressionTypeMap.put(Tokens.COUNT, OpTypes.COUNT);\n        expressionTypeMap.put(Tokens.MAX, OpTypes.MAX);\n        expressionTypeMap.put(Tokens.MIN, OpTypes.MIN);\n        expressionTypeMap.put(Tokens.SUM, OpTypes.SUM);\n        expressionTypeMap.put(Tokens.AVG, OpTypes.AVG);\n        expressionTypeMap.put(Tokens.EVERY, OpTypes.EVERY);\n        expressionTypeMap.put(Tokens.ANY, OpTypes.SOME);\n        expressionTypeMap.put(Tokens.SOME, OpTypes.SOME);\n        expressionTypeMap.put(Tokens.STDDEV_POP, OpTypes.STDDEV_POP);\n        expressionTypeMap.put(Tokens.STDDEV_SAMP, OpTypes.STDDEV_SAMP);\n        expressionTypeMap.put(Tokens.VAR_POP, OpTypes.VAR_POP);\n        expressionTypeMap.put(Tokens.VAR_SAMP, OpTypes.VAR_SAMP);\n        expressionTypeMap.put(Tokens.ARRAY_AGG, OpTypes.ARRAY_AGG);\n        expressionTypeMap.put(Tokens.GROUP_CONCAT, OpTypes.GROUP_CONCAT);\n        expressionTypeMap.put(Tokens.MEDIAN, OpTypes.MEDIAN);"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1173",
               "end_line": "1194",
               "source_code": "        jdbcConvertTypes.put(Tokens.SQL_LONGVARCHAR, Type.SQL_VARCHAR_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_NVARCHAR, Type.SQL_VARCHAR_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_DATE, Type.SQL_DATE);\n        jdbcConvertTypes.put(Tokens.SQL_TIME, Type.SQL_TIME);\n        jdbcConvertTypes.put(Tokens.SQL_TIMESTAMP, Type.SQL_TIMESTAMP);\n        jdbcConvertTypes.put(Tokens.SQL_TINYINT, Type.TINYINT);\n        jdbcConvertTypes.put(Tokens.SQL_SMALLINT, Type.SQL_SMALLINT);\n        jdbcConvertTypes.put(Tokens.SQL_INTEGER, Type.SQL_INTEGER);\n        jdbcConvertTypes.put(Tokens.SQL_BIGINT, Type.SQL_BIGINT);\n        jdbcConvertTypes.put(Tokens.SQL_REAL, Type.SQL_DOUBLE);\n        jdbcConvertTypes.put(Tokens.SQL_FLOAT, Type.SQL_DOUBLE);\n        jdbcConvertTypes.put(Tokens.SQL_DOUBLE, Type.SQL_DOUBLE);\n        jdbcConvertTypes.put(Tokens.SQL_NUMERIC, Type.SQL_NUMERIC);\n        jdbcConvertTypes.put(Tokens.SQL_DECIMAL, Type.SQL_DECIMAL);\n        jdbcConvertTypes.put(Tokens.SQL_BOOLEAN, Type.SQL_BOOLEAN);\n        jdbcConvertTypes.put(Tokens.SQL_BINARY, Type.SQL_BINARY_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_VARBINARY, Type.SQL_VARBINARY_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_LONGVARBINARY,\n                             Type.SQL_VARBINARY_DEFAULT);\n        jdbcConvertTypes.put(Tokens.SQL_CLOB, Type.SQL_CLOB);\n        jdbcConvertTypes.put(Tokens.SQL_BLOB, Type.SQL_BLOB);\n        jdbcConvertTypes.put(Tokens.SQL_BIT, Type.SQL_BIT);"
           }

       },

       {
           "id": "clone_1115",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "4949",
               "end_line": "4957",
               "source_code": "                return \"CLOB\";\n\n            case JDBC3_DATALINK :\n                return \"DATALINK\";\n\n            case java.sql.Types.DATE :\n                return \"DATE\";\n\n            case java.sql.Types.DECIMAL :"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "4940",
               "end_line": "4948",
               "source_code": "                return \"BLOB\";\n\n            case JDBC3_BOOLEAN :\n                return \"BOOLEAN\";\n\n            case java.sql.Types.CHAR :\n                return \"CHAR\";\n\n            case java.sql.Types.CLOB :"
           }

       },

       {
           "id": "clone_1116",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDatetimeSimple.java",
               "start_line": "161",
               "end_line": "173",
               "source_code": "        rs.close();\n\n        rs = st.executeQuery(\"SELECT count(*) c FROM t WHERE d = \"\n                             + \"'2008-10-27'\");\n\n        /* FRED:  When the DATE value is inserted with a TIMESTAMP,\n         * all matches using a date fail.  The query here fails regardless\n         * of what date I use. */\n        rs.next();\n        System.out.println(\"Match? \" + (rs.getInt(\"c\") > 0));\n\n        /** ********  TIMESTAMP COL BELOW ********* */\n        st.executeUpdate(\"DROP TABLE t2 IF EXISTS\");"
           },

           "clone": {
               "file": "TestDatetimeSimple.java",
               "start_line": "126",
               "end_line": "133",
               "source_code": "        rs.close();\n\n        rs = st.executeQuery(\"SELECT count(*) c FROM t WHERE d = \"\n                             + \"'2008-11-27'\");\n\n        rs.next();\n        System.out.println(\"Match? \" + (rs.getInt(\"c\") > 0));\n        st.executeUpdate(\"DELETE FROM t\");"
           }

       },

       {
           "id": "clone_1117",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "560",
               "end_line": "590",
               "source_code": "            case FUNC_SIGN :\n            case FUNC_SIN :\n            case FUNC_SOUNDEX :\n            case FUNC_SPACE :\n            case FUNC_SYS_EXTRACT_UTC :\n            case FUNC_TAN :\n            case FUNC_TIMESTAMP_WITH_ZONE :\n            case FUNC_TO_DSINTERVAL :\n            case FUNC_TO_YMINTERVAL :\n            case FUNC_TO_NUMBER :\n                parseList = singleParamList;\n                break;\n\n            case FUNC_ADD_MONTHS :\n            case FUNC_ATAN2 :\n            case FUNC_CONCAT :\n            case FUNC_CRYPT_KEY :\n            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :\n            case FUNC_DIFFERENCE :\n            case FUNC_FROM_TZ :\n            case FUNC_LEFT :\n            case FUNC_MONTHS_BETWEEN :\n            case FUNC_NEXT_DAY :\n            case FUNC_NUMTODSINTERVAL :\n            case FUNC_NUMTOYMINTERVAL :\n            case FUNC_REGEXP_MATCHES :\n            case FUNC_REGEXP_SUBSTRING :\n            case FUNC_REGEXP_SUBSTRING_ARRAY :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "529",
               "end_line": "559",
               "source_code": "            case FUNC_ISREADONLYSESSION :\n            case FUNC_PI :\n            case FUNC_SESSION_ID :\n            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_SESSION_TIMEZONE :\n            case FUNC_SESSIONTIMEZONE :\n            case FUNC_TIMEZONE :\n            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n                parseList = emptyParamList;\n                break;\n\n            case FUNC_ACOS :\n            case FUNC_ASCII :\n            case FUNC_ASIN :\n            case FUNC_ATAN :\n            case FUNC_BITNOT :\n            case FUNC_CHAR :\n            case FUNC_COS :\n            case FUNC_COT :\n            case FUNC_DEGREES :\n            case FUNC_DAYS :\n            case FUNC_HEXTORAW :\n            case FUNC_LAST_DAY :\n            case FUNC_LOB_ID :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_RAWTOHEX :\n            case FUNC_REVERSE :\n            case FUNC_ROUNDMAGIC :"
           }

       },

       {
           "id": "clone_1118",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "2231",
               "end_line": "2240",
               "source_code": "            case FUNC_ACTION_ID :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n            case FUNC_LOB_ID :\n            case FUNC_IDENTITY :\n                dataType = Type.SQL_BIGINT;\n\n                return;\n\n            case FUNC_DIAGNOSTICS :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2214",
               "end_line": "2223",
               "source_code": "            case FUNC_ISOLATION_LEVEL :\n            case FUNC_SESSION_ISOLATION_LEVEL :\n            case FUNC_DATABASE_ISOLATION_LEVEL :\n            case FUNC_TRANSACTION_CONTROL :\n            case FUNC_DATABASE_VERSION :\n                dataType = Type.SQL_VARCHAR_DEFAULT;\n\n                return;\n\n            case FUNC_TIMEZONE :"
           }

       },

       {
           "id": "clone_1119",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5767",
               "end_line": "5813",
               "source_code": "            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1120",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6966",
               "end_line": "7074",
               "source_code": "    /**\n     * SQL:2008 VIEW<p>\n     *\n     * The TRIGGER_SEQUENCE_USAGE view has one row for each SEQUENCE\n     * referenced in the body of a trigger.<p>\n     *\n     * <b>Definition:</b><p>\n     *\n     *      TRIGGER_CATALOG     VARCHAR ,\n     *      TRIGGER_SCHEMA      VARCHAR ,\n     *      TRIGGER_NAME        VARCHAR ,\n     *      SEQUENCE_CATALOG    VARCHAR ,\n     *      SEQUENCE_SCHEMA     VARCHAR ,\n     *      SEQUENCE_NAME       VARCHAR ,\n     *\n     * </pre>\n     *\n     * <b>Description:</b> <p>\n     *\n     * <ol>\n     * <li> The values of TRIGGER_CATALOG, TRIGGER_SCHEMA and TRIGGER_NAME\n     *      are the catalog name, schema name and\n     *      identifier, respectively, of the TRIGGER.<p>\n     * <li> The values of SEQUENCE_CATALOG, SEQUENCE_SCHEMA and\n     *      SEQUENCE_NAME are the catalog name, schema name and\n     *      identifier, respectively, of the SEQUENCE\n     *      that is referenced. <p>\n     *\n     * <1i> Referenced sequences are reported only if the user or one of its roles is\n     *      the authorization (owner) of the TRIGGER.\n     *\n     * </ol>\n     *\n     * @return Table\n     */\n    Table TRIGGER_SEQUENCE_USAGE(Session session, PersistentStore store) {\n\n        Table t = sysTables[TRIGGER_SEQUENCE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TRIGGER_SEQUENCE_USAGE]);\n\n            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);    // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TRIGGER_SEQUENCE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int trigger_catalog  = 0;\n        final int trigger_schema   = 1;\n        final int trigger_name     = 2;\n        final int sequence_catalog = 3;\n        final int sequence_schema  = 4;\n        final int sequence_name    = 5;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.TRIGGER);\n\n        while (it.hasNext()) {\n            TriggerDef trigger = (TriggerDef) it.next();\n\n            if (!session.getGrantee().isFullyAccessibleByRole(\n                    trigger.getName())) {\n                continue;\n            }\n\n            OrderedHashSet set = trigger.getReferences();\n\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName refName = (HsqlName) set.get(i);\n\n                if (refName.type != SchemaObject.SEQUENCE) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[trigger_catalog]  = database.getCatalogName().name;\n                row[trigger_schema]   = trigger.getSchemaName().name;\n                row[trigger_name]     = trigger.getName().name;\n                row[sequence_catalog] = database.getCatalogName().name;\n                row[sequence_schema]  = refName.schema.name;\n                row[sequence_name]    = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}\n            }\n        }\n\n        // Initialization\n        return t;\n    }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6857",
               "end_line": "6964",
               "source_code": "    /**\n     * SQL:2008 VIEW<p>\n     *\n     * The TRIGGER_ROUTINE_USAGE view has one row for each routine\n     * referenced in the body of a trigger.<p>\n     *\n     * <b>Definition:</b><p>\n     *\n     *      TRIGGER_CATALOG     VARCHAR ,\n     *      TRIGGER_SCHEMA      VARCHAR ,\n     *      TRIGGER_NAME        VARCHAR ,\n     *      SPECIFIC_CATALOG    VARCHAR ,\n     *      SPECIFIC_SCHEMA     VARCHAR ,\n     *      SPECIFIC_NAME       VARCHAR ,\n     *\n     * </pre>\n     *\n     * <b>Description:</b> <p>\n     *\n     * <ol>\n     * <li> The values of TRIGGER_CATALOG, TRIGGER_SCHEMA and TRIGGER_NAME\n     *      are the catalog name, schema name and\n     *      identifier, respectively, of the TRIGGER.<p>\n     * <li> The values of SPECIFIC_CATALOG, SPECIFIC_SCHEMA and\n     *      SPECIFIC_NAME are the catalog name, schema name,\n     *      specific routine identifier, respectively, of the routine\n     *      that is referenced. <p>\n     *\n     * <1i> Referenced routines are reported only if the user or one of its roles is\n     *      the authorization (owner) of the TRIGGER.\n     *\n     * </ol>\n     *\n     * @return Table\n     */\n    Table TRIGGER_ROUTINE_USAGE(Session session, PersistentStore store) {\n\n        Table t = sysTables[TRIGGER_ROUTINE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TRIGGER_ROUTINE_USAGE]);\n\n            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);    // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TRIGGER_ROUTINE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int trigger_catalog  = 0;\n        final int trigger_schema   = 1;\n        final int trigger_name     = 2;\n        final int specific_catalog = 3;\n        final int specific_schema  = 4;\n        final int specific_name    = 5;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.TRIGGER);\n\n        while (it.hasNext()) {\n            TriggerDef trigger = (TriggerDef) it.next();\n\n            if (!session.getGrantee().isFullyAccessibleByRole(\n                    trigger.getName())) {\n                continue;\n            }\n\n            OrderedHashSet set = trigger.getReferences();\n\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName refName = (HsqlName) set.get(i);\n\n                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[trigger_catalog]  = database.getCatalogName().name;\n                row[trigger_schema]   = trigger.getSchemaName().name;\n                row[trigger_name]     = trigger.getName().name;\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = refName.schema.name;\n                row[specific_name]    = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}\n            }\n        }\n\n        return t;\n    }"
           }

       },

       {
           "id": "clone_1121",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "203",
               "end_line": "211",
               "source_code": "            case Types.SQL_DECIMAL :\n                o = readDecimal(type);\n                break;\n\n            case Types.SQL_DATE :\n                o = readDate(type);\n                break;\n\n            case Types.SQL_TIME :"
           },

           "clone": {
               "file": "StatementDML.java",
               "start_line": "196",
               "end_line": "204",
               "source_code": "            case StatementTypes.UPDATE_WHERE :\n                result = executeUpdateStatement(session);\n                break;\n\n            case StatementTypes.MERGE :\n                result = executeMergeStatement(session);\n                break;\n\n            case StatementTypes.DELETE_WHERE :"
           }

       },

       {
           "id": "clone_1122",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAllTypes.java",
               "start_line": "309",
               "end_line": "315",
               "source_code": "            sStatement.execute(\"SELECT count(*) from TEST where zip > -1\");\n\n            rs = sStatement.getResultSet();\n\n            rs.next();\n            System.out.println(\"Row Count: \" + rs.getInt(1));\n            System.out.println(\"Time to count: \" + sw.elapsedTime());"
           },

           "clone": {
               "file": "TestAllTypes.java",
               "start_line": "297",
               "end_line": "305",
               "source_code": "            // the tests use different indexes\n            // use primary index\n            sStatement.execute(\"SELECT count(*) from TEST\");\n\n            rs = sStatement.getResultSet();\n\n            rs.next();\n            System.out.println(\"Row Count: \" + rs.getInt(1));\n            System.out.println(\"Time to count: \" + sw.elapsedTime());"
           }

       },

       {
           "id": "clone_1123",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "225",
               "end_line": "230",
               "source_code": "            case ResultConstants.BATCHEXECRESPONSE :\n                navigator = new RowSetNavigatorClient(4);\n                break;\n\n            case ResultConstants.DATA :\n            case ResultConstants.DATAHEAD :"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "216",
               "end_line": "221",
               "source_code": "            case ResultConstants.BATCHEXECDIRECT :\n                navigator = new RowSetNavigatorClient(4);\n                break;\n\n            case ResultConstants.SETSESSIONATTR :\n            case ResultConstants.PARAM_METADATA :"
           }

       },

       {
           "id": "clone_1124",

           "clone_type": "type-2",

           "origin": {
               "file": "TestMerge.java",
               "start_line": "412",
               "end_line": "417",
               "source_code": "        TestCase   testD  = new TestMerge(\"testMerge4\");\n        TestCase   testE  = new TestMerge(\"testMerge5\");\n        TestCase   testF  = new TestMerge(\"testMerge6\");\n        TestCase   testG  = new TestMerge(\"testMerge7\");\n        TestCase   testH  = new TestMerge(\"testMerge8\");\n        TestCase   testI  = new TestMerge(\"testMerge9\");"
           },

           "clone": {
               "file": "TransferDb.java",
               "start_line": "438",
               "end_line": "443",
               "source_code": "        String    alterCreate    = new String(\"\");\n        String    alterDrop      = new String(\"\");\n        String    ConstraintName = new String(\"\");\n        String    RefTableName   = new String(\"\");\n        String    foreignKeyName = new String(\"\");\n        String    columnName     = new String(\"\");"
           }

       },

       {
           "id": "clone_1125",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "356",
               "end_line": "364",
               "source_code": "        execSQL(\"UPDATE tsttbl SET vc = 'eleven' WHERE i = 1\", 1);\n        execSQL(\n            \"ALTER TABLE constrainedtbl ADD CONSTRAINT con1 CHECK (i6 > 4)\",\n            0);\n\n        // Can't test text tables in in-memory DB.\n        execSQL(\"COMMIT\", 0);\n        execSQL(\"DELETE FROM tsttbl WHERE i < 10\", 2);\n        assertEquals(1, queryRowCount(\"SELECT i FROM tsttbl\"));"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "339",
               "end_line": "343",
               "source_code": "        execSQL(\"CREATE CACHED TABLE cachtbl (i INT, vc VARCHAR(100))\", 0);\n        execSQL(\"SET TABLE tsttbl READONLY true\", 0);\n        execSQL(\"SET TABLE tsttbl READONLY false\", 0);\n        execSQL(\"INSERT INTO tsttbl VALUES (11, 'eleven')\", 1);\n        assertEquals(1, queryRowCount(\"SELECT i FROM tsttbl WHERE i = 1\"));"
           }

       },

       {
           "id": "clone_1126",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "320",
               "end_line": "329",
               "source_code": "    public static ResultLob newLobTruncateResponse(long id, long length) {\n\n        ResultLob result = new ResultLob();\n\n        result.subType     = LobResultTypes.RESPONSE_TRUNCATE;\n        result.lobID       = id;\n        result.blockLength = length;\n\n        return result;\n    }"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "226",
               "end_line": "235",
               "source_code": "            long otherId, long offset) {\n\n        ResultLob result = new ResultLob();\n\n        result.subType     = LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION;\n        result.lobID       = id;\n        result.blockOffset = offset;\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_1127",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5772",
               "end_line": "5819",
               "source_code": "            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_FROM_DECLARED_DATA_TYPE\",\n                      CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1128",

           "clone_type": "type-2",

           "origin": {
               "file": "TriggerSample.java",
               "start_line": "353",
               "end_line": "364",
               "source_code": "        StringBuffer sb = new StringBuffer();\n\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));"
           },

           "clone": {
               "file": "TriggerSample.java",
               "start_line": "329",
               "end_line": "340",
               "source_code": "        StringBuffer sb = new StringBuffer();\n\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));"
           }

       },

       {
           "id": "clone_1129",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1909",
               "end_line": "1927",
               "source_code": "            case FUNC_SQRT : {\n                sb.append(Tokens.T_SQRT).append('(')                     //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_FLOOR : {\n                sb.append(Tokens.T_FLOOR).append('(')                    //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_CEILING : {\n                sb.append(Tokens.T_CEILING).append('(')                  //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_WIDTH_BUCKET :"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1852",
               "end_line": "1870",
               "source_code": "            case FUNC_OCTET_LENGTH : {\n                sb.append(Tokens.T_OCTET_LENGTH).append('(')             //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_CARDINALITY : {\n                sb.append(Tokens.T_CARDINALITY).append('(')              //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_MAX_CARDINALITY : {\n                sb.append(Tokens.T_MAX_CARDINALITY).append('(')          //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_TRIM_ARRAY :"
           }

       },

       {
           "id": "clone_1130",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3379",
               "end_line": "3389",
               "source_code": "                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;\n                break;\n\n            case FUNC_TO_TIMESTAMP_TZ :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;\n                }"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3302",
               "end_line": "3312",
               "source_code": "                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_NUMTODSINTERVAL :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_DOUBLE;\n                }"
           }

       },

       {
           "id": "clone_1131",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5862",
               "end_line": "5908",
               "source_code": "        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1132",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "921",
               "end_line": "926",
               "source_code": "                    readThis(Tokens.ON);\n                    readThis(Tokens.NULL);\n                    readThis(Tokens.INPUT);\n                    routine.setNullInputOutput(false);\n\n                    break;"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "908",
               "end_line": "913",
               "source_code": "                    readThis(Tokens.ON);\n                    readThis(Tokens.NULL);\n                    readThis(Tokens.INPUT);\n                    routine.setNullInputOutput(true);\n\n                    break;"
           }

       },

       {
           "id": "clone_1133",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1635",
               "end_line": "1640",
               "source_code": "                return (months / DTIType.yearToSecondFactors[startPartIndex]);\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1612",
               "end_line": "1617",
               "source_code": "                return (months / DTIType.yearToSecondFactors[endPartIndex]);\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_SECOND :"
           }

       },

       {
           "id": "clone_1134",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "2332",
               "end_line": "2338",
               "source_code": "                int digit = character - '0';\n\n                currentValue *= 10;\n                currentValue += digit;\n\n                intervalPosition++;\n                currentDigits++;"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "2231",
               "end_line": "2237",
               "source_code": "                    int digit = character - '0';\n\n                    currentValue *= 10;\n                    currentValue += digit;\n\n                    currentDigits++;\n                    i++;"
           }

       },

       {
           "id": "clone_1135",

           "clone_type": "type-2",

           "origin": {
               "file": "OdbcUtil.java",
               "start_line": "190",
               "end_line": "194",
               "source_code": "        odbcSeverityMap.put(ODBC_SEVERITY_PANIC, \"PANIC\");\n        odbcSeverityMap.put(ODBC_SEVERITY_WARNING, \"WARNING\");\n        odbcSeverityMap.put(ODBC_SEVERITY_NOTICE, \"NOTICE\");\n        odbcSeverityMap.put(ODBC_SEVERITY_DEBUG, \"DEBUG\");\n        odbcSeverityMap.put(ODBC_SEVERITY_INFO, \"INFO\");"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "821",
               "end_line": "828",
               "source_code": "        tipMap.put(boxAutoCommit,\n                   \"Shows current Auto-commit mode.  Click to change\");\n        tipMap.put(\n            boxLogging,\n            \"Shows current JDBC DriverManager logging mode.  Click to change\");\n        tipMap.put(boxShowSys, \"Show system tables in table tree to the left\");\n        tipMap.put(boxShowGrid, \"Show query results in grid (in text if off)\");\n        tipMap.put(boxRowCounts, \"Show row counts with table names in tree\");"
           }

       },

       {
           "id": "clone_1136",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1259",
               "end_line": "1269",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                if (precision == DTIType.defaultIntervalPrecision\n                        && fractionPrecision\n                           == DTIType.defaultIntervalFractionPrecision) {\n                    return SQL_INTERVAL_MINUTE_TO_SECOND;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1225",
               "end_line": "1235",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                if (precision == DTIType.defaultIntervalPrecision\n                        && fractionPrecision\n                           == DTIType.defaultIntervalFractionPrecision) {\n                    return SQL_INTERVAL_DAY_TO_SECOND;\n                }\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :"
           }

       },

       {
           "id": "clone_1137",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5746",
               "end_line": "5792",
               "source_code": "            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1138",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5870",
               "end_line": "5916",
               "source_code": "        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1139",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "752",
               "end_line": "775",
               "source_code": "        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(\"A103\", rs.getString(\"vb\"));\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            ba = rs.getBytes(\"vb\");\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "717",
               "end_line": "739",
               "source_code": "        try {\n            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(\"A1030000\", rs.getString(\"bin\"));\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            ba = rs.getBytes(\"bin\");\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) { junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }"
           }

       },

       {
           "id": "clone_1140",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1142",
               "end_line": "1178",
               "source_code": "                    if (4096 <= sqlScriptBuffer.length()) {\n                        int eoThirdLine = sqlScriptBuffer.indexOf('\n');\n\n                        if (eoThirdLine > 0) {\n                            eoThirdLine = sqlScriptBuffer.indexOf('\n',\n                                                                  eoThirdLine\n                                                                  + 1);\n                        }\n\n                        if (eoThirdLine > 0) {\n                            eoThirdLine = sqlScriptBuffer.indexOf('\n',\n                                                                  eoThirdLine\n                                                                  + 1);\n                        }\n\n                        if (eoThirdLine < 1) {\n                            eoThirdLine = 100;\n                        }\n\n                        txtCommand.setText(\n                            \"............... Script File loaded: \" + file\n                            + \" ..................... \n\"\n                            + \"............... Click Execute or Clear \"\n                            + \"...................\n\"\n                            + sqlScriptBuffer.substring(0, eoThirdLine + 1)\n                            + \".........................................\"\n                            + \"................................\n\"\n                            + \"...........................................\"\n                            + \"..............................\n\");\n                        txtCommand.setEnabled(false);\n                    } else {\n                        txtCommand.setText(sqlScriptBuffer);\n\n                        sqlScriptBuffer = null;\n\n                        txtCommand.setEnabled(true);\n                    }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "944",
               "end_line": "978",
               "source_code": "            if (4096 <= sqlScriptBuffer.length()) {\n                int eoThirdLine = sqlScriptBuffer.indexOf('\n');\n\n                if (eoThirdLine > 0) {\n                    eoThirdLine = sqlScriptBuffer.indexOf('\n',\n                                                          eoThirdLine + 1);\n                }\n\n                if (eoThirdLine > 0) {\n                    eoThirdLine = sqlScriptBuffer.indexOf('\n',\n                                                          eoThirdLine + 1);\n                }\n\n                if (eoThirdLine < 1) {\n                    eoThirdLine = 100;\n                }\n\n                txtCommand.setText(\n                    \"............... Script File loaded: \" + defScript\n                    + \" ..................... \n\"\n                    + \"............... Click Execute or Clear \"\n                    + \"...................\n\"\n                    + sqlScriptBuffer.substring(0, eoThirdLine + 1)\n                    + \"...........................................\"\n                    + \"..............................\n\"\n                    + \".............................................\"\n                    + \"............................\n\");\n                txtCommand.setEnabled(false);\n            } else {\n                txtCommand.setText(sqlScriptBuffer);\n\n                sqlScriptBuffer = null;\n\n                txtCommand.setEnabled(true);\n            }"
           }

       },

       {
           "id": "clone_1141",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "631",
               "end_line": "640",
               "source_code": "            case FUNC_POSITION_CHAR :\n                parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.CLOSEBRACKET\n                };\n                break;\n\n            case FUNC_UNIX_MILLIS :\n            case FUNC_UNIX_TIMESTAMP :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "608",
               "end_line": "617",
               "source_code": "            case FUNC_DATEDIFF :\n                parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.CLOSEBRACKET\n                };\n                break;\n\n            case FUNC_DATE_ADD :\n            case FUNC_DATE_SUB :"
           }

       },

       {
           "id": "clone_1142",

           "clone_type": "type-2",

           "origin": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "148",
               "end_line": "154",
               "source_code": "        labels.add(Box.createVerticalGlue());\n        labels.add(createLabel(\"URL:\"));\n        labels.add(Box.createVerticalGlue());\n        labels.add(createLabel(\"User:\"));\n        labels.add(Box.createVerticalGlue());\n        labels.add(createLabel(\"Password:\"));\n        labels.add(Box.createVerticalGlue());"
           },

           "clone": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "140",
               "end_line": "146",
               "source_code": "        whole.add(Box.createVerticalGlue());\n        labels.add(createLabel(\"Recent Setting:\"));\n        labels.add(Box.createVerticalGlue());\n        labels.add(createLabel(\"Setting Name:\"));\n        labels.add(Box.createVerticalGlue());\n        labels.add(createLabel(\"Type:\"));\n        labels.add(Box.createVerticalGlue());"
           }

       },

       {
           "id": "clone_1143",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1291",
               "end_line": "1303",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n                startType = Types.SQL_INTERVAL_YEAR;\n                break;\n\n            case Types.SQL_INTERVAL_MONTH :\n                startType = Types.SQL_INTERVAL_MONTH;\n                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :"
           },

           "clone": {
               "file": "StatementSession.java",
               "start_line": "163",
               "end_line": "177",
               "source_code": "            case StatementTypes.PREPARABLE_DYNAMIC_UPDATE_CURSOR :\n            case StatementTypes.PREPARE :\n                group = StatementTypes.X_SQL_DYNAMIC;\n                break;\n\n            // logged by session\n            case StatementTypes.DISCONNECT :\n                group = StatementTypes.X_SQL_CONNECTION;\n                break;\n\n            //\n            case StatementTypes.SET_COLLATION :\n            case StatementTypes.SET_CONNECTION :\n            case StatementTypes.SET_CONSTRAINT :\n            case StatementTypes.SET_DESCRIPTOR :"
           }

       },

       {
           "id": "clone_1144",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "677",
               "end_line": "703",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n            case Types.SQL_BLOB :\n            case Types.SQL_CHAR :\n            case Types.SQL_NCHAR :\n            case Types.SQL_CLOB :\n            case Types.NCLOB :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_VARCHAR :\n            case Types.SQL_NVARCHAR :\n            case Types.VARCHAR_IGNORECASE :\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_FLOAT :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "126",
               "end_line": "155",
               "source_code": "//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :\n            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :"
           }

       },

       {
           "id": "clone_1145",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "4663",
               "end_line": "4672",
               "source_code": "                    case Tokens.EXECUTE :\n                        if (isTable) {\n                            throw unexpectedToken();\n                        }\n\n                        right  = Right.fullRights;\n                        isExec = true;\n                        loop   = false;\n\n                        continue;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "4653",
               "end_line": "4662",
               "source_code": "                    case Tokens.USAGE :\n                        if (isTable) {\n                            throw unexpectedToken();\n                        }\n\n                        right   = Right.fullRights;\n                        isUsage = true;\n                        loop    = false;\n\n                        continue;"
           }

       },

       {
           "id": "clone_1146",

           "clone_type": "type-2",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "211",
               "end_line": "231",
               "source_code": "        Connection conn = newConnection();\n        Statement  st   = conn.createStatement();\n\n        st.execute(\"declare varone int default 0;\");\n        st.execute(\n            \"create procedure proc_inout_result_two (inout intp int) \"\n            + \" language java reads sql data dynamic result sets 2 external name 'CLASSPATH:org.hsqldb.test.TestStoredProcedure.procWithResultTwo'\");\n\n        CallableStatement cs =\n            conn.prepareCall(\"call proc_inout_result_two(varone)\");\n        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "186",
               "end_line": "206",
               "source_code": "        Connection conn = newConnection();\n        Statement  st   = conn.createStatement();\n\n        st.execute(\"declare varone int default 0;\");\n        st.execute(\n            \"create procedure proc_inout_result (inout intp int) \"\n            + \" language java reads sql data external name 'CLASSPATH:org.hsqldb.test.TestStoredProcedure.procWithResultOne'\");\n\n        CallableStatement cs =\n            conn.prepareCall(\"call proc_inout_result(varone)\");\n        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();"
           }

       },

       {
           "id": "clone_1147",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1950",
               "end_line": "1975",
               "source_code": "    private void addToRecent(String s) {\n\n        for (int i = 0; i < iMaxRecent; i++) {\n            if (s.equals(sRecent[i])) {\n                return;\n            }\n        }\n\n        if (sRecent[iRecent] != null) {\n            mRecent.remove(iRecent);\n        }\n\n        sRecent[iRecent] = s;\n\n        if (s.length() > 43) {\n            s = s.substring(0, 40) + \"...\";\n        }\n\n        JMenuItem item = new JMenuItem(s);\n\n        item.setActionCommand(\"#\" + iRecent);\n        item.addActionListener(this);\n        mRecent.insert(item, iRecent);\n\n        iRecent = (iRecent + 1) % iMaxRecent;\n    }"
           },

           "clone": {
               "file": "DatabaseManager.java",
               "start_line": "1155",
               "end_line": "1180",
               "source_code": "    private void addToRecent(String s) {\n\n        for (int i = 0; i < iMaxRecent; i++) {\n            if (s.equals(sRecent[i])) {\n                return;\n            }\n        }\n\n        if (sRecent[iRecent] != null) {\n            mRecent.remove(iRecent);\n        }\n\n        sRecent[iRecent] = s;\n\n        if (s.length() > 43) {\n            s = s.substring(0, 40) + \"...\";\n        }\n\n        MenuItem item = new MenuItem(s);\n\n        item.setActionCommand(\"#\" + iRecent);\n        item.addActionListener(this);\n        mRecent.insert(item, iRecent);\n\n        iRecent = (iRecent + 1) % iMaxRecent;\n    }"
           }

       },

       {
           "id": "clone_1148",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4539",
               "end_line": "4549",
               "source_code": "        final int unique_constraint_schema  = 4;\n        final int unique_constraint_name    = 5;\n        final int match_option              = 6;\n        final int update_rule               = 7;\n        final int delete_rule               = 8;\n\n        //\n        Iterator     tables;\n        Table        table;\n        Constraint[] constraints;\n        Constraint   constraint;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "825",
               "end_line": "839",
               "source_code": "        // column number mappings\n        final int iscope = 0;\n        final int ins    = 1;\n        final int iname  = 2;\n        final int ivalue = 3;\n        final int iclass = 4;\n\n        //\n        // calculated column values\n        String scope;\n        String nameSpace;\n\n        // intermediate holders\n        Object[]               row;\n        HsqlDatabaseProperties props;"
           }

       },

       {
           "id": "clone_1149",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "427",
               "end_line": "432",
               "source_code": "            case LobResultTypes.RESPONSE_CREATE_CHARS :\n            case LobResultTypes.RESPONSE_TRUNCATE :\n                result.blockLength = dataInput.readLong();\n                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "402",
               "end_line": "407",
               "source_code": "            case LobResultTypes.REQUEST_GET_LENGTH :\n            case LobResultTypes.REQUEST_TRUNCATE :\n                result.blockOffset = dataInput.readLong();\n                break;\n\n            case LobResultTypes.RESPONSE_GET_BYTES :"
           }

       },

       {
           "id": "clone_1150",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "666",
               "end_line": "676",
               "source_code": "            if (byteArrayOS.size() == 0) {\n                break;\n            }\n\n            //\n            dataOut.writeByte(mode);\n            dataOut.writeInt(databaseID);\n            dataOut.writeLong(sessionID);\n            dataOut.writeLong(lobID);\n            dataOut.writeInt(LobResultTypes.REQUEST_SET_CHARS);\n            dataOut.writeLong(currentOffset);"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "608",
               "end_line": "618",
               "source_code": "            if (byteArrayOS.size() == 0) {\n                break;\n            }\n\n            //\n            dataOut.writeByte(mode);\n            dataOut.writeInt(databaseID);\n            dataOut.writeLong(sessionID);\n            dataOut.writeLong(lobID);\n            dataOut.writeInt(LobResultTypes.REQUEST_SET_BYTES);\n            dataOut.writeLong(currentOffset);"
           }

       },

       {
           "id": "clone_1151",

           "clone_type": "type-2",

           "origin": {
               "file": "ScriptWriterText.java",
               "start_line": "256",
               "end_line": "263",
               "source_code": "        schemaToLog = table.getName().schema;\n\n        writeSessionIdAndSchema(session);\n        rowOut.reset();\n        ((RowOutputTextLog) rowOut).setMode(RowOutputTextLog.MODE_DELETE);\n        rowOut.write(BYTES_DELETE_FROM);\n        rowOut.writeString(table.getName().statementName);\n        rowOut.write(BYTES_WHERE);"
           },

           "clone": {
               "file": "ScriptWriterText.java",
               "start_line": "204",
               "end_line": "211",
               "source_code": "        schemaToLog = table.getName().schema;\n\n        writeSessionIdAndSchema(session);\n        rowOut.reset();\n        ((RowOutputTextLog) rowOut).setMode(RowOutputTextLog.MODE_INSERT);\n        rowOut.write(BYTES_INSERT_INTO);\n        rowOut.writeString(table.getName().statementName);\n        rowOut.write(BYTES_VALUES);"
           }

       },

       {
           "id": "clone_1152",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "5366",
               "end_line": "5379",
               "source_code": "        // turn into a concatenation\n        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        root = XreadValueExpression();\n\n        readThis(Tokens.COMMA);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "5040",
               "end_line": "5052",
               "source_code": "        int        position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        l = XreadBooleanValueExpression();\n\n        readThis(Tokens.COMMA);"
           }

       },

       {
           "id": "clone_1153",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1612",
               "end_line": "1626",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[AUTHORIZATIONS]);\n\n            addColumn(t, \"AUTHORIZATION_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"AUTHORIZATION_TYPE\", SQL_IDENTIFIER);    // not null\n\n            // true PK\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[AUTHORIZATIONS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "907",
               "end_line": "920",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SYSTEM_SESSIONINFO]);\n\n            addColumn(t, \"KEY\", CHARACTER_DATA);      // not null\n            addColumn(t, \"VALUE\", CHARACTER_DATA);    // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_SESSIONINFO].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_1154",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "825",
               "end_line": "830",
               "source_code": "            case OpTypes.MATCH_UNIQUE_FULL :\n                resolveTypesForAllAny(session);\n                break;\n\n            case OpTypes.UNIQUE :\n            case OpTypes.EXISTS :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "816",
               "end_line": "821",
               "source_code": "            case OpTypes.IN :\n                resolveTypesForIn(session);\n                break;\n\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :"
           }

       },

       {
           "id": "clone_1155",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "1820",
               "end_line": "1827",
               "source_code": "        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_TYPES).append(' ');\n        sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE\n                                           : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_TDC).append(' ');"
           },

           "clone": {
               "file": "Logger.java",
               "start_line": "1808",
               "end_line": "1815",
               "source_code": "        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_REFERENCES).append(' ');\n        sb.append(database.sqlEnforceRefs ? Tokens.T_TRUE\n                                          : Tokens.T_FALSE);\n        list.add(sb.toString());\n        sb.setLength(0);\n        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');\n        sb.append(Tokens.T_SIZE).append(' ');"
           }

       },

       {
           "id": "clone_1156",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1829",
               "end_line": "1836",
               "source_code": "        checkIsSimpleName();\n\n        name = token.tokenString;\n\n        read();\n\n        String   sql  = getLastPart();\n        Object[] args = new Object[]{ name };"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1787",
               "end_line": "1794",
               "source_code": "            checkIsSimpleName();\n\n            savepoint = token.tokenString;\n\n            read();\n\n            String   sql  = getLastPart();\n            Object[] args = new Object[]{ savepoint };"
           }

       },

       {
           "id": "clone_1157",

           "clone_type": "type-2",

           "origin": {
               "file": "PgType.java",
               "start_line": "135",
               "end_line": "145",
               "source_code": "            case Types.TINYINT:\n                return tinyIntSingleton;\n            case Types.SQL_SMALLINT:\n                return int2singleton;\n            case Types.SQL_INTEGER:\n                return int4singleton;\n            case Types.SQL_BIGINT:\n                return int8singleton;\n\n            case Types.SQL_NUMERIC:\n            case Types.SQL_DECIMAL:"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "2005",
               "end_line": "2018",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :"
           }

       },

       {
           "id": "clone_1158",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1637",
               "end_line": "1647",
               "source_code": "                token.tokenString = Tokens.T_MINUS;\n                token.tokenType   = Tokens.MINUS;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case '\\\"' :\n                token.tokenType = Tokens.X_DELIMITED_IDENTIFIER;"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1423",
               "end_line": "1433",
               "source_code": "                token.tokenString = Tokens.T_SEMICOLON;\n                token.tokenType   = Tokens.SEMICOLON;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case '+' :\n                token.tokenString = Tokens.T_PLUS;"
           }

       },

       {
           "id": "clone_1159",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "2042",
               "end_line": "2052",
               "source_code": "                enforce1charSpecial(arg1, '=');\n                if (other != null)\n                    // But remember that we have to abort on some I/O errors.\n                    continueOnError = Boolean.parseBoolean(other.trim());\n\n                stdprintln(SqltoolRB.c_setting.getString(\n                        Boolean.toString(continueOnError)));\n\n                return;\n\n            case '?' :"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "2032",
               "end_line": "2041",
               "source_code": "                enforce1charSpecial(arg1, '=');\n                if (other != null)\n                    // But remember that we have to abort on some I/O errors.\n                    reportTimes = Boolean.parseBoolean(other.trim());\n\n                stdprintln(SqltoolRB.exectime_reporting.getString(\n                        Boolean.toString(reportTimes)));\n                return;\n\n            case 'c' :"
           }

       },

       {
           "id": "clone_1160",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1722",
               "end_line": "1728",
               "source_code": "            case FUNC_CURRENT_SCHEMA :\n            case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :\n            case FUNC_CURRENT_USER :\n            case FUNC_SESSION_USER :\n            case FUNC_SYSTEM_USER :\n            case FUNC_USER :\n                dataType = TypeInvariants.SQL_IDENTIFIER;"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2230",
               "end_line": "2236",
               "source_code": "            case FUNC_SESSION_ID :\n            case FUNC_ACTION_ID :\n            case FUNC_TRANSACTION_ID :\n            case FUNC_TRANSACTION_SIZE :\n            case FUNC_LOB_ID :\n            case FUNC_IDENTITY :\n                dataType = Type.SQL_BIGINT;"
           }

       },

       {
           "id": "clone_1161",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5849",
               "end_line": "5895",
               "source_code": "        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1162",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2404",
               "end_line": "2420",
               "source_code": "        commandSet.put(T_LAST_DAY, LAST_DAY);\n        commandSet.put(T_LCASE, LCASE);\n        commandSet.put(T_LEAST, LEAST);\n        commandSet.put(T_LOAD_FILE, LOAD_FILE);\n        commandSet.put(T_LOCATE, LOCATE);\n        commandSet.put(T_LOG, LOG);\n        commandSet.put(T_LOG10, LOG10);\n        commandSet.put(T_LPAD, LPAD);\n        commandSet.put(T_LTRIM, LTRIM);\n        commandSet.put(T_MONTH_NAME, MONTH_NAME);\n        commandSet.put(T_MONTHNAME, MONTHNAME);\n        commandSet.put(T_MONTHS_BETWEEN, MONTHS_BETWEEN);\n        commandSet.put(T_NAMES, Tokens.NAMES);\n        commandSet.put(T_NEW_TIME, NEW_TIME);\n        commandSet.put(T_NEXT_DAY, NEXT_DAY);\n        commandSet.put(T_NUMTODSINTERVAL, NUMTODSINTERVAL);\n        commandSet.put(T_NUMTOYMINTERVAL, NUMTOYMINTERVAL);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2361",
               "end_line": "2377",
               "source_code": "        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);\n        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);\n        commandSet.put(T_ASCII, ASCII);\n        commandSet.put(T_ASIN, ASIN);\n        commandSet.put(T_ATAN, ATAN);\n        commandSet.put(T_ATAN2, ATAN2);\n        commandSet.put(T_BITAND, BITAND);\n        commandSet.put(T_BITANDNOT, BITANDNOT);\n        commandSet.put(T_BITLENGTH, BITLENGTH);\n        commandSet.put(T_BITNOT, BITNOT);\n        commandSet.put(T_BITOR, BITOR);\n        commandSet.put(T_BITXOR, BITXOR);\n        commandSet.put(T_CASEWHEN, Tokens.CASEWHEN);\n        commandSet.put(T_CONCAT_WORD, CONCAT_WORD);\n        commandSet.put(T_CONCAT_WS, CONCAT_WS);\n        commandSet.put(T_CHR, CHR);\n        commandSet.put(T_COS, COS);"
           }

       },

       {
           "id": "clone_1163",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2026",
               "end_line": "2035",
               "source_code": "                row                     = t.getEmptyRowData();\n                row[constraint_catalog] = database.getCatalogName().name;\n                row[constraint_schema]  = domain.getSchemaName().name;\n                row[constraint_name]    = constraint.getName().name;\n\n                try {\n                    row[check_clause] = constraint.getCheckSQL();\n                } catch (Exception e) {}\n\n                t.insertSys(session, store, row);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1993",
               "end_line": "2002",
               "source_code": "                row                     = t.getEmptyRowData();\n                row[constraint_catalog] = database.getCatalogName().name;\n                row[constraint_schema]  = table.getSchemaName().name;\n                row[constraint_name]    = constraint.getName().name;\n\n                try {\n                    row[check_clause] = constraint.getCheckSQL();\n                } catch (Exception e) {}\n\n                t.insertSys(session, store, row);"
           }

       },

       {
           "id": "clone_1164",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3346",
               "end_line": "3357",
               "source_code": "                dataType = Type.SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;\n                break;\n\n            case FUNC_SESSIONTIMEZONE :\n                dataType = CharacterType.getCharacterType(Types.SQL_VARCHAR,\n                        6);\n                break;\n\n            case FUNC_SYS_EXTRACT_UTC :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;\n                }"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3229",
               "end_line": "3240",
               "source_code": "                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_DBTIMEZONE :\n                dataType = CharacterType.getCharacterType(Types.SQL_VARCHAR,\n                        6);\n                break;\n\n            case FUNC_FROM_TZ :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_TIMESTAMP;\n                }"
           }

       },

       {
           "id": "clone_1165",

           "clone_type": "type-2",

           "origin": {
               "file": "IndexAVL.java",
               "start_line": "1395",
               "end_line": "1425",
               "source_code": "    NodeAVL last(Session session, PersistentStore store, NodeAVL x,\n                 int distinctCount) {\n\n        if (x == null) {\n            return null;\n        }\n\n        if (distinctCount != 0) {\n            return findDistinctNode(session, store, x, distinctCount, true);\n        }\n\n        while (true) {\n            x = last(store, x);\n\n            if (x == null) {\n                return x;\n            }\n\n            if (session == null) {\n                return x;\n            }\n\n            Row row = x.getRow(store);\n\n            if (session.database.txManager.canRead(\n                    session, store, row, TransactionManager.ACTION_READ,\n                    null)) {\n                return x;\n            }\n        }\n    }"
           },

           "clone": {
               "file": "IndexAVL.java",
               "start_line": "1360",
               "end_line": "1393",
               "source_code": "    /**\n     * Returns the node after the given one\n     */\n    NodeAVL next(Session session, PersistentStore store, NodeAVL x,\n                 int distinctCount) {\n\n        if (x == null) {\n            return null;\n        }\n\n        if (distinctCount != 0) {\n            return findDistinctNode(session, store, x, distinctCount, false);\n        }\n\n        while (true) {\n            x = next(store, x);\n\n            if (x == null) {\n                return x;\n            }\n\n            if (session == null) {\n                return x;\n            }\n\n            Row row = x.getRow(store);\n\n            if (session.database.txManager.canRead(\n                    session, store, row, TransactionManager.ACTION_READ,\n                    null)) {\n                return x;\n            }\n        }\n    }"
           }

       },

       {
           "id": "clone_1166",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "3499",
               "end_line": "3506",
               "source_code": "                    break;\n\n                case Tokens.GRANT :\n                    cs     = compileGrantOrRevoke();\n                    cs.sql = getLastPart(position);\n                    break;\n\n                case Tokens.SEMICOLON :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3445",
               "end_line": "3453",
               "source_code": "                            break;\n\n                        case Tokens.CHARACTER :\n                            cs     = compileCreateCharacterSet();\n                            cs.sql = getLastPart(position);\n                            break;\n\n                        // no supported\n                        case Tokens.ASSERTION :"
           }

       },

       {
           "id": "clone_1167",

           "clone_type": "type-2",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "406",
               "end_line": "424",
               "source_code": "        isResult = ps.execute();\n\n        assertFalse(isResult);\n        ps.getMoreResults();\n\n        rs = ps.getResultSet();\n\n        rs.next();\n        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));\n        rs.close();\n\n        more = ps.getMoreResults();\n\n        if (more) {\n            rs = ps.getResultSet();\n\n            rs.next();\n            assertEquals(\"INFORMATION_SCHEMA\",rs.getString(2));\n        }"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "361",
               "end_line": "379",
               "source_code": "        isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));\n        rs.close();\n\n        more = cs.getMoreResults();\n\n        if (more) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));\n        }"
           }

       },

       {
           "id": "clone_1168",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "987",
               "end_line": "991",
               "source_code": "            assertTrue(\"Got no rows with bi = 295L\", rs.next());\n            assertEquals(Long.class, rs.getObject(\"bi\").getClass());\n            assertTrue(\"Got only one row with bi = 295L\", rs.next());\n            assertEquals(295L, rs.getLong(\"bi\"));\n            assertFalse(\"Got too many rows with bi = 295L\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "238",
               "end_line": "242",
               "source_code": "            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(Long.class, rs.getObject(\"bi\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(6, rs.getLong(\"bi\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());"
           }

       },

       {
           "id": "clone_1169",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6246",
               "end_line": "6266",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SQL_FEATURES]);\n\n            addColumn(t, \"FEATURE_ID\", CHARACTER_DATA);\n            addColumn(t, \"FEATURE_NAME\", CHARACTER_DATA);\n            addColumn(t, \"SUB_FEATURE_ID\", CHARACTER_DATA);\n            addColumn(t, \"SUB_FEATURE_NAME\", CHARACTER_DATA);\n            addColumn(t, \"IS_SUPPORTED\", YES_OR_NO);\n            addColumn(t, \"IS_VERIFIED_BY\", CHARACTER_DATA);\n            addColumn(t, \"COMMENTS\", CHARACTER_DATA);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SQL_FEATURES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 2\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6166",
               "end_line": "6187",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SCHEMATA]);\n\n            addColumn(t, \"CATALOG_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCHEMA_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCHEMA_OWNER\", SQL_IDENTIFIER);\n            addColumn(t, \"DEFAULT_CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DEFAULT_CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DEFAULT_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n\n            // order: CATALOG_NAME, SCHEMA_NAME\n            // false PK, as rows may have NULL CATALOG_NAME\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SCHEMATA].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_1170",

           "clone_type": "type-2",

           "origin": {
               "file": "KMPSearchAlgorithm.java",
               "start_line": "321",
               "end_line": "377",
               "source_code": "                             int[] table, final int start) {\n\n        if (source == null || pattern == null || pattern.length == 0) {\n            return -1;\n        }\n\n        final int sourceLength  = source.length;\n        final int patternLength = pattern.length;\n        int       sourceIndex   = start;\n\n        if (patternLength == 1) {\n            final int characterToFind = pattern[0];\n\n            for (; sourceIndex < sourceLength; sourceIndex++) {\n                if (source[sourceIndex] == characterToFind) {\n                    return sourceIndex;\n                }\n            }\n\n            return -1;\n        }\n\n        //\n        int matchStart   = start;\n        int patternIndex = 0;\n\n        //\n        if (table == null) {\n            table = computeTable(pattern);\n        }\n\n        //\n        while ((sourceIndex < sourceLength)\n                && (patternIndex < patternLength)) {\n            if (source[sourceIndex] == pattern[patternIndex]) {\n                patternIndex++;\n            } else {\n                final int tableValue = table[patternIndex];\n\n                matchStart += (patternIndex - tableValue);\n\n                if (patternIndex > 0) {\n                    patternIndex = tableValue;\n                }\n\n                patternIndex++;\n            }\n\n            sourceIndex = (matchStart + patternIndex);\n        }\n\n        if (patternIndex == patternLength) {\n            return matchStart;\n        } else {\n            return -1;\n        }\n    }"
           },

           "clone": {
               "file": "KMPSearchAlgorithm.java",
               "start_line": "248",
               "end_line": "307",
               "source_code": "                             int[] table, final int start) {\n\n        if (source == null || pattern == null || pattern.length == 0) {\n            return -1;\n        }\n\n        //\n        final int sourceLength  = source.length;\n        final int patternLength = pattern.length;\n\n        //\n        int sourceIndex = start;\n\n        if (patternLength == 1) {\n            final int byteToFind = pattern[0];\n\n            for (; sourceIndex < sourceLength; sourceIndex++) {\n                if (source[sourceIndex] == byteToFind) {\n                    return sourceIndex;\n                }\n            }\n\n            return -1;\n        }\n\n        //\n        int matchStart   = start;\n        int patternIndex = 0;\n\n        //\n        if (table == null) {\n            table = computeTable(pattern);\n        }\n\n        //\n        while ((sourceIndex < sourceLength)\n                && (patternIndex < patternLength)) {\n            if (source[sourceIndex] == pattern[patternIndex]) {\n                patternIndex++;\n            } else {\n                final int tableVaue = table[patternIndex];\n\n                matchStart += (patternIndex - tableVaue);\n\n                if (patternIndex > 0) {\n                    patternIndex = tableVaue;\n                }\n\n                patternIndex++;\n            }\n\n            sourceIndex = (matchStart + patternIndex);\n        }\n\n        if (patternIndex == patternLength) {\n            return matchStart;\n        } else {\n            return -1;\n        }\n    }"
           }

       },

       {
           "id": "clone_1171",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3103",
               "end_line": "3109",
               "source_code": "            case Tokens.PLUS :\n                read();\n\n                boole = false;\n                break;\n\n            case Tokens.MINUS :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "3506",
               "end_line": "3512",
               "source_code": "                case Tokens.SEMICOLON :\n                    read();\n\n                    end = true;\n                    break;\n\n                case Tokens.X_ENDPARSE :"
           }

       },

       {
           "id": "clone_1172",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "719",
               "end_line": "726",
               "source_code": "                return true;\n\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n                return true;\n\n            default :\n                return false;"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "2061",
               "end_line": "2068",
               "source_code": "                return true;\n\n            case OpTypes.SMALLER_EQUAL :\n            case OpTypes.SMALLER :\n                return true;\n\n            default :\n                return false;"
           }

       },

       {
           "id": "clone_1173",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "5099",
               "end_line": "5105",
               "source_code": "                case Tokens.ALL :\n                    read();\n                    break;\n\n                case Tokens.RESULT :\n                    read();\n                    readThis(Tokens.SETS);"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2525",
               "end_line": "2531",
               "source_code": "                    case Tokens.NULL :\n                        read();\n                        break;\n\n                    case Tokens.NOT :\n                        read();\n                        readThis(Tokens.NULL);"
           }

       },

       {
           "id": "clone_1174",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSqlPersistent.java",
               "start_line": "296",
               "end_line": "310",
               "source_code": "            stmnt.execute(sqlString);\n\n            sqlString = \"INSERT INTO TESTOBJECT \"\n                        + \"(STOREDOBJECT, STOREDBIN) \" + \"VALUES (?,?)\";\n\n            PreparedStatement ps = connection.prepareStatement(sqlString);\n\n            // initialise\n            stringValue  = \"Test String Value\";\n            integerValue = new Integer(1000);\n            arrayValue   = new Double[] {\n                new Double(1), new Double(Double.NaN),\n                new Double(Double.NEGATIVE_INFINITY),\n                new Double(Double.POSITIVE_INFINITY)\n            };"
           },

           "clone": {
               "file": "TestSqlPersistent.java",
               "start_line": "118",
               "end_line": "133",
               "source_code": "            stmnt.execute(sqlString);\n\n            sqlString = \"INSERT INTO PREFERENCE \"\n                        + \"(User_Id,Pref_Name,Pref_Value,DateCreated) \"\n                        + \"VALUES (?,?,?,current_timestamp)\";\n\n            PreparedStatement ps = connection.prepareStatement(sqlString);\n\n            // initialise\n            stringValue  = \"String Value for Preference 1\";\n            integerValue = new Integer(1000);\n            arrayValue   = new Double[] {\n                new Double(1), new Double(Double.NaN),\n                new Double(Double.NEGATIVE_INFINITY),\n                new Double(Double.POSITIVE_INFINITY)\n            };"
           }

       },

       {
           "id": "clone_1175",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1504",
               "end_line": "1512",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1494",
               "end_line": "1502",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;"
           }

       },

       {
           "id": "clone_1176",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlTool.java",
               "start_line": "303",
               "end_line": "307",
               "source_code": "        boolean interactive      = false;\n        boolean noinput          = false;\n        boolean noautoFile       = false;\n        boolean autoCommit       = false;\n        Boolean coeOverride      = null;"
           },

           "clone": {
               "file": "ParserDML.java",
               "start_line": "349",
               "end_line": "353",
               "source_code": "        boolean         isTable         = false;\n        boolean         withCommit      = false;\n        boolean         noCheck         = false;\n        boolean         restartIdentity = false;\n        HsqlName        objectName      = null;"
           }

       },

       {
           "id": "clone_1177",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "747",
               "end_line": "760",
               "source_code": "        execSQL(\"ALTER TABLE bigtbl \" + pref + \"DROP COLUMN i102\", expect);\n        execSQL(pref + \"ALTER TABLE bigtbl DROP COLUMN i101\", expect);\n        execSQL(pref + \"ALTER TABLE bigtbl ALTER COLUMN i104 RENAME TO j1\",\n                expect);\n        execSQL(\"ALTER \" + pref\n                + \"TABLE bigtbl ALTER COLUMN i105 RENAME TO j2\", expect);\n        execSQL(\"ALTER TABLE bigtbl \" + pref\n                + \"ALTER COLUMN i106 RENAME TO j3\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER \" + pref\n                + \"COLUMN i107 RENAME TO j4\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER COLUMN i108 \" + pref\n                + \"RENAME TO j5\", expect);\n        execSQL(\"ALTER TABLE bigtbl ALTER COLUMN i109 RENAME \" + pref\n                + \"TO j6\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "533",
               "end_line": "543",
               "source_code": "        execSQL(\"SET TABLE tsttbl READONLY \" + pref + \"true\", expect);\n        execSQL(pref + \"CREATE SEQUENCE tstseqa\", expect);\n        execSQL(pref + \"SET PROPERTY \\\"hsqldb.first_identity\\\" 4\", expect);\n        execSQL(\"SET \" + pref + \"PROPERTY \\\"hsqldb.first_identity\\\" 4\",\n                expect);\n\n        /* This block not keywords, but other non-Strings */\n        execSQL(\"SELECT i FROM tsttbl WHERE i = \" + pref + \"1\", expect);\n        execSQL(\"SELECT i FROM tsttbl WHERE vc = \" + pref + \"'1.3'\", expect);\n        execSQL(\"SELECT i FROM tsttbl WHERE vc = \" + pref + \"1\", expect);\n        execSQL(\"SELECT i FROM tsttbl WHERE i = \" + pref + \"'1.3'\", expect);"
           }

       },

       {
           "id": "clone_1178",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "236",
               "end_line": "244",
               "source_code": "                return \"HOUR TO MINUTE\";\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                return \"HOUR TO SECOND\";\n\n            case Types.SQL_INTERVAL_MINUTE :\n                return Tokens.T_MINUTE;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "227",
               "end_line": "235",
               "source_code": "                return \"DAY TO MINUTE\";\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return \"DAY TO SECOND\";\n\n            case Types.SQL_INTERVAL_HOUR :\n                return Tokens.T_HOUR;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :"
           }

       },

       {
           "id": "clone_1179",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "153",
               "end_line": "161",
               "source_code": "                nodes[LEFT].dataType = e.dataType;\n                dataType =\n                    DateTimeType.getDateTimeType(Types.SQL_TIME_WITH_TIME_ZONE,\n                                                 e.dataType.scale);\n                break;\n\n            case Types.SQL_TIMESTAMP :\n                nodes                = new Expression[BINARY];\n                nodes[LEFT]          = e;"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "145",
               "end_line": "152",
               "source_code": "                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP,\n                        e.dataType.scale);\n                break;\n\n            case Types.SQL_TIME :\n                nodes                = new Expression[BINARY];\n                nodes[LEFT]          = e;"
           }

       },

       {
           "id": "clone_1180",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4819",
               "end_line": "4839",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n            addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);\n\n            // order:  TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,\n            // added for unique:  GRANTEE, GRANTOR,\n            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                3, 4, 5, 0, 1\n            }, false);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4027",
               "end_line": "4044",
               "source_code": "            addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);                   // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);                        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);                       // not null\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);                 // not null\n            addColumn(t, \"POSITION_IN_UNIQUE_CONSTRAINT\", CARDINAL_NUMBER);    // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[KEY_COLUMN_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                2, 1, 0, 6, 7\n            }, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_1181",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2185",
               "end_line": "2197",
               "source_code": "                break;\n\n                case SchemaObject.SEQUENCE :\n                case SchemaObject.TABLE :\n                case SchemaObject.VIEW :\n                case SchemaObject.TYPE :\n                case SchemaObject.CHARSET :\n                case SchemaObject.COLLATION :\n                case SchemaObject.SPECIFIC_ROUTINE :\n                    getCascadingReferencesTo(name, objectSet);\n                    break;\n\n                case SchemaObject.DOMAIN :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "663",
               "end_line": "675",
               "source_code": "                break;\n\n            case OpTypes.EQUAL :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.GREATER :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :\n            case OpTypes.NOT_EQUAL :\n                resolveTypesForComparison(session, parent);\n                break;\n\n            case OpTypes.AND :"
           }

       },

       {
           "id": "clone_1182",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "833",
               "end_line": "842",
               "source_code": "            case Tokens.FILES : {\n                return compileSetFilesProperty();\n            }\n            case Tokens.DATABASE : {\n                return compileSetDatabaseProperty();\n            }\n            case Tokens.PROPERTY : {\n                return compileSetProperty();\n            }\n            default :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "319",
               "end_line": "328",
               "source_code": "            case Tokens.SESSION : {\n                return compileAlterSession();\n            }\n            case Tokens.SPECIFIC : {\n                return compileAlterSpecificRoutine();\n            }\n            case Tokens.ROUTINE : {\n                return compileAlterRoutine();\n            }\n            default :"
           }

       },

       {
           "id": "clone_1183",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1071",
               "end_line": "1076",
               "source_code": "            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with r = 876.54D\", rs.next());\n            assertEquals(Double.class, rs.getObject(\"r\").getClass());\n            assertTrue(\"Got only one row with r = 876.54D\", rs.next());\n            assertEquals(876.54D, rs.getDouble(\"r\"), 0D);\n            assertFalse(\"Got too many rows with r = 876.54D\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1031",
               "end_line": "1036",
               "source_code": "            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with f = 98.765F\", rs.next());\n            assertEquals(Double.class, rs.getObject(\"f\").getClass());\n            assertTrue(\"Got only one row with f = 98.765F\", rs.next());\n            assertEquals(98.765D, rs.getDouble(\"f\"), .01D);\n            assertFalse(\"Got too many rows with f = 98.765F\", rs.next());"
           }

       },

       {
           "id": "clone_1184",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1402",
               "end_line": "1442",
               "source_code": "            case '*' :\n                token.tokenString = Tokens.T_ASTERISK;\n                token.tokenType   = Tokens.ASTERISK;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case '=' :\n                token.tokenString = Tokens.T_EQUALS;\n                token.tokenType   = Tokens.EQUALS;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case ';' :\n                token.tokenString = Tokens.T_SEMICOLON;\n                token.tokenType   = Tokens.SEMICOLON;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case '+' :\n                token.tokenString = Tokens.T_PLUS;\n                token.tokenType   = Tokens.PLUS;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case ':' :"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1343",
               "end_line": "1392",
               "source_code": "/*\n            case '%' :\n            case '^' :\n            case '&' :\n            case ':' :\n            case '{' :\n            case '}' :\n                break;\n*/\n            case '[' :\n                token.tokenString = Tokens.T_LEFTBRACKET;\n                token.tokenType   = Tokens.LEFTBRACKET;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case ']' :\n                token.tokenString = Tokens.T_RIGHTBRACKET;\n                token.tokenType   = Tokens.RIGHTBRACKET;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case '(' :\n                token.tokenString = Tokens.T_OPENBRACKET;\n                token.tokenType   = Tokens.OPENBRACKET;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case ')' :\n                token.tokenString = Tokens.T_CLOSEBRACKET;\n                token.tokenType   = Tokens.CLOSEBRACKET;\n\n                currentPosition++;\n\n                token.isDelimiter = true;\n\n                return;\n\n            case ',' :"
           }

       },

       {
           "id": "clone_1185",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5741",
               "end_line": "5787",
               "source_code": "            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1186",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2337",
               "end_line": "2400",
               "source_code": "        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);\n        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);\n        commandSet.put(T_TINYBLOB, TINYBLOB);\n        commandSet.put(T_TINYTEXT, TINYTEXT);\n        commandSet.put(T_TOP, TOP);\n        commandSet.put(T_TRANSACTION, TRANSACTION);\n        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);\n        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);\n        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);\n        commandSet.put(T_TTI, TTI);\n        commandSet.put(T_TYPE, TYPE);\n        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);\n        commandSet.put(T_USAGE, USAGE);\n        commandSet.put(T_VIEW, VIEW);\n        commandSet.put(T_VARCHAR2, VARCHAR2);\n        commandSet.put(T_WORK, WORK);\n        commandSet.put(T_WRAPPER, WRAPPER);\n        commandSet.put(T_WRITE, WRITE);\n        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);\n        commandSet.put(T_ZONE, ZONE);\n\n        //\n        commandSet.put(T_ACOS, ACOS);\n        commandSet.put(T_ACTION_ID, ACTION_ID);\n        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);\n        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);\n        commandSet.put(T_ASCII, ASCII);\n        commandSet.put(T_ASIN, ASIN);\n        commandSet.put(T_ATAN, ATAN);\n        commandSet.put(T_ATAN2, ATAN2);\n        commandSet.put(T_BITAND, BITAND);\n        commandSet.put(T_BITANDNOT, BITANDNOT);\n        commandSet.put(T_BITLENGTH, BITLENGTH);\n        commandSet.put(T_BITNOT, BITNOT);\n        commandSet.put(T_BITOR, BITOR);\n        commandSet.put(T_BITXOR, BITXOR);\n        commandSet.put(T_CASEWHEN, Tokens.CASEWHEN);\n        commandSet.put(T_CONCAT_WORD, CONCAT_WORD);\n        commandSet.put(T_CONCAT_WS, CONCAT_WS);\n        commandSet.put(T_CHR, CHR);\n        commandSet.put(T_COS, COS);\n        commandSet.put(T_COT, COT);\n        commandSet.put(T_DATABASE_NAME, DATABASE_NAME);\n        commandSet.put(T_DATE_ADD, DATE_ADD);\n        commandSet.put(T_DATE_SUB, DATE_SUB);\n        commandSet.put(T_DATEADD, DATEADD);\n        commandSet.put(T_DATEDIFF, DATEDIFF);\n        commandSet.put(T_DAY_NAME, DAY_NAME);\n        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);\n        commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);\n        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);\n        commandSet.put(T_DAYNAME, DAYNAME);\n        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);\n        commandSet.put(T_DAYOFWEEK, DAYOFWEEK);\n        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);\n        commandSet.put(T_DAYS, DAYS);\n        commandSet.put(T_DBTIMEZONE, DBTIMEZONE);\n        commandSet.put(T_DECODE, DECODE);\n        commandSet.put(T_DEGREES, DEGREES);\n        commandSet.put(T_DIFFERENCE, DIFFERENCE);\n        commandSet.put(T_DMOD, DMOD);\n        commandSet.put(T_FROM_TZ, FROM_TZ);\n        commandSet.put(T_GREATEST, GREATEST);\n        commandSet.put(T_HEXTORAW, HEXTORAW);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2119",
               "end_line": "2180",
               "source_code": "        commandSet.put(T_ACTION, ACTION);\n        commandSet.put(T_ADD, ADD);\n        commandSet.put(T_ADMIN, ADMIN);\n        commandSet.put(T_AFTER, AFTER);\n        commandSet.put(T_ALIAS, ALIAS);\n        commandSet.put(T_ALWAYS, ALWAYS);\n        commandSet.put(T_ASC, ASC);\n        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);\n        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);\n        commandSet.put(T_BACKUP, BACKUP);\n        commandSet.put(T_BEFORE, BEFORE);\n        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);\n        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);\n        commandSet.put(T_BIT, BIT);\n        commandSet.put(T_BYTE, BYTE);\n        commandSet.put(T_BLOCKING, BLOCKING);\n        commandSet.put(T_BODY, BODY);\n        commandSet.put(T_CACHE, CACHE);\n        commandSet.put(T_CACHED, CACHED);\n        commandSet.put(T_CASCADE, CASCADE);\n        commandSet.put(T_CATALOG, CATALOG);\n        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);\n        commandSet.put(T_CHARACTERS, CHARACTERS);\n        commandSet.put(T_CHECKPOINT, CHECKPOINT);\n        commandSet.put(T_CITEXT, CITEXT);\n        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);\n        commandSet.put(T_CLASS, CLASS);\n        commandSet.put(T_CLUSTERED, CLUSTERED);\n        commandSet.put(T_COLLATE, COLLATE);\n        commandSet.put(T_COLLATION, COLLATION);\n        commandSet.put(T_COMMENT, COMMENT);\n        commandSet.put(T_COMMITTED, COMMITTED);\n        commandSet.put(T_COMPACT, COMPACT);\n        commandSet.put(T_COMPRESSED, COMPRESSED);\n        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);\n        commandSet.put(T_CONFLICT, CONFLICT);\n        commandSet.put(T_CONTAINS, CONTAINS);\n        commandSet.put(T_CONTINUE, CONTINUE);\n        commandSet.put(T_CONTROL, CONTROL);\n        commandSet.put(T_CURDATE, CURDATE);\n        commandSet.put(T_CURRVAL, CURRVAL);\n        commandSet.put(T_CURTIME, CURTIME);\n        commandSet.put(T_DATA, DATA);\n        commandSet.put(T_DATABASE, DATABASE);\n        commandSet.put(T_DEADLOCK, DEADLOCK);\n        commandSet.put(T_DEFAULTS, DEFAULTS);\n        commandSet.put(T_DEFRAG, DEFRAG);\n        commandSet.put(T_DELAY, DELAY);\n        commandSet.put(T_DESC, DESC);\n        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);\n        commandSet.put(T_DIGEST, DIGEST);\n        commandSet.put(T_DOMAIN, DOMAIN);\n        commandSet.put(T_EVENT, EVENT);\n        commandSet.put(T_EXCLUDING, EXCLUDING);\n        commandSet.put(T_EXPLAIN, EXPLAIN);\n        commandSet.put(T_FILE, FILE);\n        commandSet.put(T_FILES, FILES);\n        commandSet.put(T_FINAL, FINAL);\n        commandSet.put(T_FIRST, FIRST);\n        commandSet.put(T_FORMAT, FORMAT);\n        commandSet.put(T_FOUND, FOUND);\n        commandSet.put(T_G_FACTOR, G);"
           }

       },

       {
           "id": "clone_1187",

           "clone_type": "type-2",

           "origin": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "489",
               "end_line": "493",
               "source_code": "        String            sql;\n        int               i;\n        PreparedStatement ps;\n        ResultSet         rs;\n        Savepoint         sp1;"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "131",
               "end_line": "135",
               "source_code": "        String            msg;\n        int               i;\n        PreparedStatement ps;\n        ResultSet         rs;\n        Savepoint         sp1;"
           }

       },

       {
           "id": "clone_1188",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDatetimeSimple.java",
               "start_line": "234",
               "end_line": "242",
               "source_code": "        st.executeUpdate(\"DROP TABLE ts IF EXISTS\");\n        st.executeUpdate(\n            \"CREATE TABLE ts(id integer generated by default as identity (start with 1), ts timestamp, tsz timestamp with time zone)\");\n        st.executeUpdate(\n            \"INSERT INTO ts VALUES DEFAULT, LOCALTIMESTAMP, CURRENT_TIMESTAMP\");\n\n        rs = st.executeQuery(\"CALL CURRENT_DATE\");\n\n        rs.next();"
           },

           "clone": {
               "file": "TestDatetimeSimple.java",
               "start_line": "217",
               "end_line": "223",
               "source_code": "        st.executeUpdate(\"DROP TABLE t3 IF EXISTS\");\n        st.executeUpdate(\"CREATE TABLE t3(d date)\");\n        st.executeUpdate(\"INSERT INTO t3 VALUES('2008-11-27')\");\n\n        rs = st.executeQuery(\"SELECT d FROM t3\");\n\n        rs.next();"
           }

       },

       {
           "id": "clone_1189",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4534",
               "end_line": "4548",
               "source_code": "        // column number mappings\n        final int constraint_catalog        = 0;\n        final int constraint_schema         = 1;\n        final int constraint_name           = 2;\n        final int unique_constraint_catalog = 3;\n        final int unique_constraint_schema  = 4;\n        final int unique_constraint_name    = 5;\n        final int match_option              = 6;\n        final int update_rule               = 7;\n        final int delete_rule               = 8;\n\n        //\n        Iterator     tables;\n        Table        table;\n        Constraint[] constraints;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1236",
               "end_line": "1250",
               "source_code": "        final int ifile_path   = 4;\n        final int ifile_enc    = 5;\n        final int ifs          = 6;\n        final int ivfs         = 7;\n        final int ilvfs        = 8;\n        final int iif          = 9;\n        final int iiq          = 10;\n        final int iiaq         = 11;\n        final int iid          = 12;\n\n        //\n        // intermediate holders\n        Iterator tables;\n        Table    table;\n        Object[] row;"
           }

       },

       {
           "id": "clone_1190",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3978",
               "end_line": "3984",
               "source_code": "                readCloseBrackets(brackets);\n                break;\n\n            case Tokens.WITH :\n            case Tokens.TABLE :\n            case Tokens.VALUES :\n            case Tokens.SELECT :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "817",
               "end_line": "823",
               "source_code": "                resolveTypesForIn(session);\n                break;\n\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :"
           }

       },

       {
           "id": "clone_1191",

           "clone_type": "type-2",

           "origin": {
               "file": "Database.java",
               "start_line": "295",
               "end_line": "303",
               "source_code": "        lobManager       = null;\n        granteeManager   = null;\n        userManager      = null;\n        nameManager      = null;\n        schemaManager    = null;\n        sessionManager   = null;\n        dbInfo           = null;\n        checkpointRunner = null;\n        timeoutRunner    = null;"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "2046",
               "end_line": "2054",
               "source_code": "        parameterModes    = null;\n        resultMetaData    = null;\n        parameterMetaData = null;\n        resultSetMetaData = null;\n        pmd               = null;\n        connection        = null;\n        session           = null;\n        resultIn          = null;\n        resultOut         = null;"
           }

       },

       {
           "id": "clone_1192",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5755",
               "end_line": "5801",
               "source_code": "            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1193",

           "clone_type": "type-2",

           "origin": {
               "file": "TextFileReader.java",
               "start_line": "216",
               "end_line": "221",
               "source_code": "                case TextFileSettings.LF_CHAR :\n                    complete = true;\n                    break;\n\n                default :\n                    wasNormal = true;"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "73",
               "end_line": "78",
               "source_code": "            case Types.SQL_INTERVAL_MONTH :\n                isYearMonth = true;\n                break;\n\n            default :\n                isYearMonth = false;"
           }

       },

       {
           "id": "clone_1194",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCBlobClient.java",
               "start_line": "370",
               "end_line": "383",
               "source_code": "    private void startUpdate() throws SQLException {\n\n        if (originalBlob != null) {\n            return;\n        }\n\n        originalBlob = blob;\n        blob         = (BlobDataID) blob.duplicate(session);\n\n        resultSet.startUpdate(colIndex + 1);\n\n        resultSet.preparedStatement.parameterValues[colIndex] = blob;\n        resultSet.preparedStatement.parameterSet[colIndex]    = Boolean.TRUE;\n    }"
           },

           "clone": {
               "file": "JDBCClobClient.java",
               "start_line": "717",
               "end_line": "729",
               "source_code": "    private void startUpdate() throws SQLException {\n\n        if (originalClob != null) {\n            return;\n        }\n        originalClob = clob;\n        clob         = (ClobDataID) clob.duplicate(session);\n\n        resultSet.startUpdate(colIndex + 1);\n\n        resultSet.preparedStatement.parameterValues[colIndex] = clob;\n        resultSet.preparedStatement.parameterSet[colIndex]    = Boolean.TRUE;\n    }"
           }

       },

       {
           "id": "clone_1195",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAcl.java",
               "start_line": "411",
               "end_line": "424",
               "source_code": "        newSuite.addTest(new TestAcl(\"testDefaultWithNames\"));\n        newSuite.addTest(new TestAcl(\"testDefaultWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testDenyAllWithNames\"));\n        newSuite.addTest(new TestAcl(\"testDenyAllWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testLocalhostOnlyWithNames\"));\n        newSuite.addTest(new TestAcl(\"testLocalhostOnlyWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalhostOnlyWithNames\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalhostOnlyWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testLocalNetOnlyWithNames\"));\n        newSuite.addTest(new TestAcl(\"testLocalNetOnlyWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalNetOnlyWithNames\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalNetOnlyWithIPs\"));\n\n        return newSuite;"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "999",
               "end_line": "1012",
               "source_code": "        newSuite.addTest(new TestSchemaParse(\"testSanityCheck\"));\n        newSuite.addTest(new TestSchemaParse(\"testTwoPartKeywords\"));\n        newSuite.addTest(new TestSchemaParse(\"testThreePartKeywords\"));\n        newSuite.addTest(new TestSchemaParse(\"testThreePartNames\"));\n        newSuite.addTest(new TestSchemaParse(\"testBasicQueries\"));\n        newSuite.addTest(new TestSchemaParse(\"test2pTables\"));\n        newSuite.addTest(new TestSchemaParse(\"test2pViews\"));\n        newSuite.addTest(new TestSchemaParse(\"test2pSequences\"));\n        newSuite.addTest(new TestSchemaParse(\"test2pIndexes\"));\n        newSuite.addTest(new TestSchemaParse(\"test2pAliases\"));\n        newSuite.addTest(new TestSchemaParse(\"test2pConstraints\"));\n        newSuite.addTest(new TestSchemaParse(\"test2pTriggers\"));\n\n        return newSuite;"
           }

       },

       {
           "id": "clone_1196",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "7457",
               "end_line": "7464",
               "source_code": "        preparedStatement.resultOut.setActionType(\n            ResultConstants.DELETE_CURSOR);\n        preparedStatement.fetchResult();\n        preparedStatement.clearParameters();\n\n        rootWarning = preparedStatement.getWarnings();\n\n        preparedStatement.clearWarnings();"
           },

           "clone": {
               "file": "JDBCResultSet.java",
               "start_line": "7438",
               "end_line": "7445",
               "source_code": "        preparedStatement.resultOut.setActionType(\n            ResultConstants.INSERT_CURSOR);\n        preparedStatement.fetchResult();\n        preparedStatement.clearParameters();\n\n        rootWarning = preparedStatement.getWarnings();\n\n        preparedStatement.clearWarnings();"
           }

       },

       {
           "id": "clone_1197",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5744",
               "end_line": "5790",
               "source_code": "            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1198",

           "clone_type": "type-2",

           "origin": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "228",
               "end_line": "236",
               "source_code": "        okCancel = new JButton(\"  Cancel   \");\n\n        okCancel.setActionCommand(\"ConnectCancel\");\n        okCancel.addActionListener(this);\n        buttons.add(okCancel);\n        buttons.add(Box.createHorizontalGlue());\n        buttons.add(Box.createHorizontalStrut(10));\n\n        JPanel jPanel = new JPanel();"
           },

           "clone": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "170",
               "end_line": "179",
               "source_code": "        // (weconsultants@users) New code\n        clear = new JButton(\"Clear Names\");\n\n        clear.setActionCommand(\"Clear\");\n        clear.addActionListener(this);\n        buttons.add(clear);\n        buttons.add(Box.createHorizontalGlue());\n        buttons.add(Box.createHorizontalStrut(10));\n\n        JComboBox types = new JComboBox();"
           }

       },

       {
           "id": "clone_1199",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDima.java",
               "start_line": "70",
               "end_line": "83",
               "source_code": "            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 1')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 1')\");\n            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 2')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 2')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 2')\");\n            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 3')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 3')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 3')\");"
           },

           "clone": {
               "file": "TestJavaFunctions.java",
               "start_line": "72",
               "end_line": "79",
               "source_code": "        s.executeUpdate(\"DROP FUNCTION TEST_QUERY IF EXISTS\");\n        s.executeUpdate(\"DROP FUNCTION TEST_CUSTOM_RESULT IF EXISTS\");\n        s.executeUpdate(\"DROP TABLE T IF EXISTS\");\n        s.executeUpdate(\"CREATE TABLE T(C VARCHAR(20), I INT)\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Thames', 10\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Fleet', 12\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Brent', 14\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Westbourne', 16\");"
           }

       },

       {
           "id": "clone_1200",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementSimple.java",
               "start_line": "89",
               "end_line": "94",
               "source_code": "                sb.append(Tokens.T_RESIGNAL).append(' ');\n                sb.append(Tokens.T_SQLSTATE);\n                sb.append(' ').append('\\'').append(sqlState).append('\\'');\n                break;\n\n            case StatementTypes.ITERATE :"
           },

           "clone": {
               "file": "StatementSimple.java",
               "start_line": "83",
               "end_line": "88",
               "source_code": "                sb.append(Tokens.T_SIGNAL).append(' ');\n                sb.append(Tokens.T_SQLSTATE);\n                sb.append(' ').append('\\'').append(sqlState).append('\\'');\n                break;\n\n            case StatementTypes.RESIGNAL :"
           }

       },

       {
           "id": "clone_1201",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1779",
               "end_line": "1788",
               "source_code": "        readThis(Tokens.UNTIL);\n\n        Expression e = XreadBooleanValueExpression();\n\n        resolveOuterReferencesAndTypes(routine, context, e);\n\n        StatementExpression condition = new StatementExpression(session,\n            compileContext, StatementTypes.CONDITION, e);\n\n        readThis(Tokens.END);"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1732",
               "end_line": "1741",
               "source_code": "        readThis(Tokens.WHILE);\n\n        Expression e = XreadBooleanValueExpression();\n\n        resolveOuterReferencesAndTypes(routine, context, e);\n\n        StatementExpression condition = new StatementExpression(session,\n            compileContext, StatementTypes.CONDITION, e);\n\n        readThis(Tokens.DO);"
           }

       },

       {
           "id": "clone_1202",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDima.java",
               "start_line": "68",
               "end_line": "79",
               "source_code": "            stat.executeUpdate(\"CHECKPOINT\");\n            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 1')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 1')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 1')\");\n            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 2')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAR (FOOID,VAL) VALUES (IDENTITY(),'bar 2')\");\n            stat.executeUpdate(\n                \"INSERT INTO BAZ (BARID,VAL) VALUES (IDENTITY(),'baz 2')\");\n            stat.executeUpdate(\"INSERT INTO FOO (VAL) VALUES ('foo 3')\");"
           },

           "clone": {
               "file": "TestJavaFunctions.java",
               "start_line": "72",
               "end_line": "79",
               "source_code": "        s.executeUpdate(\"DROP FUNCTION TEST_QUERY IF EXISTS\");\n        s.executeUpdate(\"DROP FUNCTION TEST_CUSTOM_RESULT IF EXISTS\");\n        s.executeUpdate(\"DROP TABLE T IF EXISTS\");\n        s.executeUpdate(\"CREATE TABLE T(C VARCHAR(20), I INT)\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Thames', 10\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Fleet', 12\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Brent', 14\");\n        s.executeUpdate(\"INSERT INTO T VALUES 'Westbourne', 16\");"
           }

       },

       {
           "id": "clone_1203",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementDML.java",
               "start_line": "1253",
               "end_line": "1260",
               "source_code": "            Row      row            = navigator.getCurrentRow();\n            Object[] changedData    = navigator.getCurrentChangedData();\n            int[]    changedColumns = navigator.getCurrentChangedColumns();\n            Table    currentTable   = ((Table) row.getTable());\n\n            if (currentTable instanceof TableDerived) {\n                currentTable = ((TableDerived) currentTable).view;\n            }"
           },

           "clone": {
               "file": "StatementDML.java",
               "start_line": "1024",
               "end_line": "1031",
               "source_code": "            Row      row            = navigator.getCurrentRow();\n            Object[] data           = navigator.getCurrentChangedData();\n            int[]    changedColumns = navigator.getCurrentChangedColumns();\n            Table    currentTable   = ((Table) row.getTable());\n\n            if (currentTable instanceof TableDerived) {\n                currentTable = ((TableDerived) currentTable).view;\n            }"
           }

       },

       {
           "id": "clone_1204",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "698",
               "end_line": "703",
               "source_code": "        execSQL(\"SET \" + pref + \"SCRIPTFORMAT text\", expect);\n        execSQL(pref + \"SET TABLE tsttbl READONLY true\", expect);\n        execSQL(\"SET \" + pref + \"TABLE tsttbl READONLY true\", expect);\n        execSQL(\"SET TABLE tsttbl READONLY false\", 0);    // reset\n        execSQL(pref + \"GRANT ALL ON playtbl TO tstuser\", expect);\n        execSQL(\"GRANT \" + pref + \"ALL ON playtbl TO tstuser\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "682",
               "end_line": "688",
               "source_code": "        execSQL(\"DELETE FROM tsttbl \" + pref + \"WHERE i < 10\", expect);\n\n        execSQL(pref + \"SET AUTOCOMMIT true\", expect);\n        execSQL(\"SET \" + pref + \"AUTOCOMMIT true\", expect);\n        execSQL(\"SET AUTOCOMMIT false\", 0);               // reset\n        execSQL(pref + \"SET IGNORECASE true\", expect);\n        execSQL(\"SET \" + pref + \"IGNORECASE true\", expect);"
           }

       },

       {
           "id": "clone_1205",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "5451",
               "end_line": "5455",
               "source_code": "                        break;\n                    case java.sql.Types.VARCHAR :\n                    case java.sql.Types.BLOB :\n                    case java.sql.Types.CLOB :\n                    case java.sql.Types.LONGVARCHAR :"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "3857",
               "end_line": "3862",
               "source_code": "                            break;\n\n                        case java.sql.Types.VARBINARY :\n                        case java.sql.Types.VARCHAR :\n                        case java.sql.Types.BLOB :\n                        case java.sql.Types.CLOB :"
           }

       },

       {
           "id": "clone_1206",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1211",
               "end_line": "1226",
               "source_code": "                        read();\n                        readThis(Tokens.SCALE);\n\n                        value    = readIntegerObject();\n                        property = HsqlDatabaseProperties.sql_avg_scale;\n                        break;\n\n                    case Tokens.DOUBLE :\n                        read();\n                        readThis(Tokens.NAN);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_double_nan;\n                        break;\n\n                    case Tokens.LONGVAR :"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1195",
               "end_line": "1210",
               "source_code": "                        read();\n                        readThis(Tokens.NULLS);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_unique_nulls;\n                        break;\n\n                    case Tokens.CONVERT :\n                        read();\n                        readThis(Tokens.TRUNCATE);\n\n                        flag     = processTrueOrFalseObject();\n                        property = HsqlDatabaseProperties.sql_convert_trunc;\n                        break;\n\n                    case Tokens.AVG :"
           }

       },

       {
           "id": "clone_1207",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "888",
               "end_line": "900",
               "source_code": "        Iterator    tables;\n        Table       table;\n        Object[]    row;\n        DITableInfo ti;\n\n        // column number mappings\n        final int itable_cat         = 0;\n        final int itable_schem       = 1;\n        final int itable_name        = 2;\n        final int icolumn_name       = 3;\n        final int idata_type         = 4;\n        final int itype_name         = 5;\n        final int icolumn_size       = 6;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8067",
               "end_line": "8079",
               "source_code": "        View     view;\n        Table    table;\n        Object[] row;\n        Iterator iterator;\n\n        // Column number mappings\n        final int view_catalog  = 0;\n        final int view_schema   = 1;\n        final int view_name     = 2;\n        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;\n        final int column_name   = 6;"
           }

       },

       {
           "id": "clone_1208",

           "clone_type": "type-2",

           "origin": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "167",
               "end_line": "175",
               "source_code": "        mName.addActionListener(this);\n        controls.add(mName);\n\n        // (weconsultants@users) New code\n        clear = new JButton(\"Clear Names\");\n\n        clear.setActionCommand(\"Clear\");\n        clear.addActionListener(this);\n        buttons.add(clear);"
           },

           "clone": {
               "file": "ConnectionDialog.java",
               "start_line": "233",
               "end_line": "240",
               "source_code": "        b.addActionListener(this);\n        pButton.add(b);\n\n        b = new Button(\"Cancel\");\n\n        b.setActionCommand(\"ConnectCancel\");\n        b.addActionListener(this);\n        pButton.add(b);"
           }

       },

       {
           "id": "clone_1209",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3104",
               "end_line": "3112",
               "source_code": "                read();\n\n                boole = false;\n                break;\n\n            case Tokens.MINUS :\n                read();\n\n                boole = false;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "1011",
               "end_line": "1019",
               "source_code": "                    read();\n\n                    startPart = true;\n                    break;\n\n                case Tokens.CLOSEBRACKET :\n                    read();\n\n                    end = true;"
           }

       },

       {
           "id": "clone_1210",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDbBackup.java",
               "start_line": "579",
               "end_line": "587",
               "source_code": "        newSuite.addTest(new TestDbBackup(\"testSanity\"));\n        newSuite.addTest(new TestDbBackup(\"testBasicBackup\"));\n        newSuite.addTest(new TestDbBackup(\"testMainAlreadyOpen\"));\n        newSuite.addTest(new TestDbBackup(\"testGzip\"));\n        newSuite.addTest(new TestDbBackup(\"testOnlineBackup\"));\n        newSuite.addTest(new TestDbBackup(\"testTarFileNames\"));\n        newSuite.addTest(new TestDbBackup(\"testAutoNaming\"));\n\n        return newSuite;"
           },

           "clone": {
               "file": "TestAcl.java",
               "start_line": "416",
               "end_line": "424",
               "source_code": "        newSuite.addTest(new TestAcl(\"testLocalhostOnlyWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalhostOnlyWithNames\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalhostOnlyWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testLocalNetOnlyWithNames\"));\n        newSuite.addTest(new TestAcl(\"testLocalNetOnlyWithIPs\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalNetOnlyWithNames\"));\n        newSuite.addTest(new TestAcl(\"testNoLocalNetOnlyWithIPs\"));\n\n        return newSuite;"
           }

       },

       {
           "id": "clone_1211",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementCommand.java",
               "start_line": "190",
               "end_line": "195",
               "source_code": "                isLogged               = false;\n                break;\n\n            case StatementTypes.SET_USER_LOCAL :\n            case StatementTypes.SET_USER_INITIAL_SCHEMA :\n            case StatementTypes.SET_USER_PASSWORD :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "115",
               "end_line": "120",
               "source_code": "                isLogged = false;\n                break;\n\n            case StatementTypes.SET_DATABASE_UNIQUE_NAME :\n            case StatementTypes.SET_DATABASE_FILES_WRITE_DELAY :\n            case StatementTypes.SET_DATABASE_FILES_TEMP_PATH :"
           }

       },

       {
           "id": "clone_1212",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "728",
               "end_line": "736",
               "source_code": "        execSQL(pref + \"ALTER SEQUENCE tstseq RESTART WITH 13\", expect);\n        execSQL(\"ALTER \" + pref + \"SEQUENCE tstseq RESTART WITH 13\", expect);\n        execSQL(\"ALTER SEQUENCE tstseq \" + pref + \"RESTART WITH 13\", expect);\n        execSQL(\"ALTER SEQUENCE tstseq RESTART \" + pref + \"WITH 13\", expect);\n        execSQL(\"ALTER USER tstuser SET PASSWORD \" + pref + \"frank\", expect);\n        execSQL(pref + \"ALTER USER tstuser SET PASSWORD frank\", expect);\n        execSQL(\"ALTER \" + pref + \"USER tstuser SET PASSWORD frank\", expect);\n        execSQL(\"ALTER USER tstuser \" + pref + \"SET PASSWORD frank\", expect);\n        execSQL(\"ALTER USER tstuser SET \" + pref + \"PASSWORD frank\", expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "702",
               "end_line": "712",
               "source_code": "        execSQL(pref + \"GRANT ALL ON playtbl TO tstuser\", expect);\n        execSQL(\"GRANT \" + pref + \"ALL ON playtbl TO tstuser\", expect);\n        execSQL(\"GRANT ALL \" + pref + \"ON playtbl TO tstuser\", expect);\n        execSQL(\"GRANT ALL ON playtbl \" + pref + \"TO tstuser\", expect);\n\n        execSQL(\"GRANT ALL ON playtbl TO \" + pref + \"tstuser\", expect);\n\n        execSQL(pref + \"REVOKE ALL ON playtbl FROM tstuser RESTRICT\", expect);\n        execSQL(\"REVOKE \" + pref + \"ALL ON playtbl FROM tstuser RESTRICT\", expect);\n        execSQL(\"REVOKE ALL \" + pref + \"ON playtbl FROM tstuser RESTRICT\", expect);\n        execSQL(\"REVOKE ALL ON playtbl \" + pref + \"FROM tstuser RESTRICT\", expect);"
           }

       },

       {
           "id": "clone_1213",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "194",
               "end_line": "211",
               "source_code": "            case OpTypes.SUBTRACT :\n                sb.append(\"SUBTRACT \");\n                break;\n\n            case OpTypes.MULTIPLY :\n                sb.append(\"MULTIPLY \");\n                break;\n\n            case OpTypes.DIVIDE :\n                sb.append(\"DIVIDE \");\n                break;\n\n            case OpTypes.CONCAT :\n                sb.append(\"CONCAT \");\n                break;\n\n            case OpTypes.CAST :\n                sb.append(\"CAST \");"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "556",
               "end_line": "573",
               "source_code": "            case OpTypes.GREATER_EQUAL_PRE :\n                sb.append(\"GREATER_EQUAL\");\n                break;\n\n            case OpTypes.GREATER :\n                sb.append(\"GREATER\");\n                break;\n\n            case OpTypes.SMALLER :\n                sb.append(\"SMALLER\");\n                break;\n\n            case OpTypes.SMALLER_EQUAL :\n                sb.append(\"SMALLER_EQUAL\");\n                break;\n\n            case OpTypes.NOT_EQUAL :\n                sb.append(\"NOT_EQUAL\");"
           }

       },

       {
           "id": "clone_1214",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1502",
               "end_line": "1511",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "1492",
               "end_line": "1501",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_DAY :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                limit = DTIType.precisionLimits[(int) precision] * 24 * 60\n                        * 60;"
           }

       },

       {
           "id": "clone_1215",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "1999",
               "end_line": "2006",
               "source_code": "            case SessionInterface.TX_READ_COMMITTED :\n                sb.append(Tokens.T_READ).append(' ').append(\n                    Tokens.T_COMMITTED);\n                break;\n\n            case SessionInterface.TX_SERIALIZABLE :\n                sb.append(Tokens.T_SERIALIZABLE);\n                break;"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "593",
               "end_line": "599",
               "source_code": "            case OpTypes.IS_NULL :\n                sb.append(Tokens.T_IS).append(' ').append(Tokens.T_NULL);\n                break;\n\n            case OpTypes.UNIQUE :\n                sb.append(Tokens.T_UNIQUE);\n                break;"
           }

       },

       {
           "id": "clone_1216",

           "clone_type": "type-2",

           "origin": {
               "file": "Transfer.java",
               "start_line": "1066",
               "end_line": "1080",
               "source_code": "        p.add(tSourceTable);\n        p.add(cTransfer);\n        p.add(tDestTable);\n        p.add(cDrop);\n        p.add(tDestDrop);\n        p.add(cCreate);\n        p.add(tDestCreate);\n        p.add(cDropIndex);\n        p.add(tDestDropIndex);\n        p.add(cCreateIndex);\n        p.add(tDestCreateIndex);\n        p.add(cDelete);\n        p.add(tDestDelete);\n        p.add(cAlter);\n        p.add(tDestAlter);"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "231",
               "end_line": "245",
               "source_code": "        nonDeterministicFuncSet.add(FUNC_ISOLATION_LEVEL);\n        nonDeterministicFuncSet.add(FUNC_SESSION_ID);\n        nonDeterministicFuncSet.add(FUNC_SESSION_ISOLATION_LEVEL);\n        nonDeterministicFuncSet.add(FUNC_SESSION_TIMEZONE);\n        nonDeterministicFuncSet.add(FUNC_SESSIONTIMEZONE);\n        nonDeterministicFuncSet.add(FUNC_SYSDATE);\n        nonDeterministicFuncSet.add(FUNC_SYSTIMESTAMP);\n        nonDeterministicFuncSet.add(FUNC_TIMESTAMP);\n        nonDeterministicFuncSet.add(FUNC_TIMEZONE);\n        nonDeterministicFuncSet.add(FUNC_TRANSACTION_CONTROL);\n        nonDeterministicFuncSet.add(FUNC_TRANSACTION_ID);\n        nonDeterministicFuncSet.add(FUNC_TRANSACTION_SIZE);\n        nonDeterministicFuncSet.add(FUNC_UUID);\n        nonDeterministicFuncSet.add(FUNC_UNIX_TIMESTAMP);\n        nonDeterministicFuncSet.add(FUNC_UNIX_MILLIS);"
           }

       },

       {
           "id": "clone_1217",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "1361",
               "end_line": "1367",
               "source_code": "            case Types.SQL_CHAR :\n            case Types.SQL_VARCHAR :\n                setClobForStringParameter(parameterIndex, x);\n\n                return;\n            case Types.SQL_CLOB :\n                setClobParameter(parameterIndex, x);"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "1267",
               "end_line": "1273",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                setBlobForBinaryParameter(parameterIndex, x);\n\n                return;\n            case Types.SQL_BLOB :\n                setBlobParameter(parameterIndex, x);"
           }

       },

       {
           "id": "clone_1218",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "525",
               "end_line": "532",
               "source_code": "        execSQL(\"CREATE TRIGGER adroptrig AFTER INSERT ON adroptbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", 0);\n        execSQL(\"CREATE TRIGGER bdroptrig AFTER INSERT ON bdroptbl CALL \\\"\"\n                + \"org.hsqldb.test.BlaineTrig\\\"\", 0);\n        execSQL(\"CREATE VIEW adropviewx AS SELECT * FROM adroptbl\", 0);\n        execSQL(\"CREATE VIEW bdropviewx AS SELECT * FROM bdroptbl\", 0);\n        execSQL(\"ALTER TABLE playtbl ADD COLUMN newc VARCHAR(100)\", 0);    // prep\n        execSQL(\"SET TABLE tsttbl READONLY false\", 0);                // reset"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "82",
               "end_line": "92",
               "source_code": "        execSQL(\"CREATE TABLE primarytbl (i8 INT, i18 INT, vc8 VARCHAR(100), \"\n                + \"UNIQUE(i8), UNIQUE(i18))\", 0);\n        execSQL(\n            \"CREATE TABLE foreigntbl (i7 INT, vc7 VARCHAR(100), \"\n            + \"CONSTRAINT tstfk FOREIGN KEY (i7) REFERENCES primarytbl (i8))\", 0);\n        execSQL(\"CREATE TABLE playtbl (i9 INT, vc9 VARCHAR(100))\", 0);\n        execSQL(\"CREATE TABLE toindextbl (i10 INT, vc10 VARCHAR(100))\", 0);\n        execSQL(\"INSERT INTO toindextbl VALUES (10, 'zehn')\", 1);\n\n        // Do the view last since it can cause dependendies with indexes, etc.\n        execSQL(\"CREATE VIEW tstview AS SELECT * FROM tsttbl WHERE i < 10\", 0);"
           }

       },

       {
           "id": "clone_1219",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "5572",
               "end_line": "5586",
               "source_code": "        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        Expression c = XreadValueExpression();\n\n        readThis(Tokens.COMMA);\n\n        Expression e1 = XreadValueExpression();"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "5541",
               "end_line": "5555",
               "source_code": "        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        Expression c = XreadValueExpression();\n\n        readThis(Tokens.COMMA);\n\n        Expression e           = XreadValueExpression();"
           }

       },

       {
           "id": "clone_1220",

           "clone_type": "type-2",

           "origin": {
               "file": "SetFunction.java",
               "start_line": "517",
               "end_line": "523",
               "source_code": "                    case Types.SQL_REAL :\n                    case Types.SQL_FLOAT :\n                    case Types.SQL_DOUBLE :\n                        return Type.SQL_DOUBLE;\n\n                    case Types.SQL_NUMERIC :\n                    case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "1603",
               "end_line": "1609",
               "source_code": "                        case OpTypes.MATCH_SIMPLE :\n                        case OpTypes.MATCH_PARTIAL :\n                        case OpTypes.MATCH_FULL :\n                            return Boolean.TRUE;\n\n                        case OpTypes.MATCH_UNIQUE_SIMPLE :\n                        case OpTypes.MATCH_UNIQUE_PARTIAL :"
           }

       },

       {
           "id": "clone_1221",

           "clone_type": "type-2",

           "origin": {
               "file": "Result.java",
               "start_line": "756",
               "end_line": "762",
               "source_code": "        result.mainString   = user;\n        result.subString    = password;\n        result.zoneString   = zoneString;\n        result.databaseName = database;\n        result.updateCount  = timeZoneSeconds;\n\n        return result;"
           },

           "clone": {
               "file": "NumberSequence.java",
               "start_line": "569",
               "end_line": "575",
               "source_code": "        copy.dataType   = dataType;\n        copy.minValue   = minValue;\n        copy.maxValue   = maxValue;\n        copy.isCycle    = isCycle;\n        copy.isAlways   = isAlways;\n\n        return copy;"
           }

       },

       {
           "id": "clone_1222",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3347",
               "end_line": "3368",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TABLE_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n            addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);\n\n            //\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2920",
               "end_line": "2941",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[COLUMN_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[COLUMN_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                2, 3, 4, 5, 6, 1, 0\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_1223",

           "clone_type": "type-2",

           "origin": {
               "file": "Right.java",
               "start_line": "937",
               "end_line": "951",
               "source_code": "            case GrantConstants.REFERENCES :\n                if (set == null) {\n                    isFullReferences = true;\n                }\n\n                referencesColumnSet = set;\n                break;\n\n            case GrantConstants.TRIGGER :\n                if (set == null) {\n                    isFullTrigger = true;\n                }\n\n                triggerColumnSet = set;\n                break;"
           },

           "clone": {
               "file": "Right.java",
               "start_line": "921",
               "end_line": "935",
               "source_code": "            case GrantConstants.INSERT :\n                if (set == null) {\n                    isFullInsert = true;\n                }\n\n                insertColumnSet = set;\n                break;\n\n            case GrantConstants.UPDATE :\n                if (set == null) {\n                    isFullUpdate = true;\n                }\n\n                updateColumnSet = set;\n                break;"
           }

       },

       {
           "id": "clone_1224",

           "clone_type": "type-2",

           "origin": {
               "file": "TestDatabaseMetaData.java",
               "start_line": "273",
               "end_line": "294",
               "source_code": "    public static void main(String[] args) throws Exception {\n\n        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();\n        test   = new TestDatabaseMetaData(\"test\");\n\n        test.run(result);\n\n        count = result.failureCount();\n\n        System.out.println(\"TestDatabaseMetaData failure count: \" + count);\n\n        failures = result.failures();\n\n        while (failures.hasMoreElements()) {\n            System.out.println(failures.nextElement());\n        }\n    }"
           },

           "clone": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "289",
               "end_line": "312",
               "source_code": "    /* Runs TestLikePredicate test from the command line*/\n    public static void main(String[] args) throws Exception {\n\n        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();\n        test   = new TestLikePredicateOptimizations(\"test\");\n\n        test.run(result);\n\n        count = result.failureCount();\n\n        System.out.println(\"TestLikePredicateOptimizations failure count: \"\n                           + count);\n\n        failures = result.failures();\n\n        while (failures.hasMoreElements()) {\n            System.out.println(failures.nextElement());\n        }\n    }"
           }

       },

       {
           "id": "clone_1225",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "715",
               "end_line": "719",
               "source_code": "          yyline++;\n          yycolumn = 0;\n          zzR = true;\n          break;\n        case '\n':"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "710",
               "end_line": "714",
               "source_code": "          yyline++;\n          yycolumn = 0;\n          zzR = false;\n          break;\n        case '\r':"
           }

       },

       {
           "id": "clone_1226",

           "clone_type": "type-2",

           "origin": {
               "file": "Logger.java",
               "start_line": "1978",
               "end_line": "1988",
               "source_code": "            case TransactionManager.MVCC :\n                sb.append(Tokens.T_MVCC);\n                break;\n\n            case TransactionManager.MVLOCKS :\n                sb.append(Tokens.T_MVLOCKS);\n                break;\n\n            case TransactionManager.LOCKS :\n                sb.append(Tokens.T_LOCKS);\n                break;"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "597",
               "end_line": "607",
               "source_code": "            case OpTypes.UNIQUE :\n                sb.append(Tokens.T_UNIQUE);\n                break;\n\n            case OpTypes.EXISTS :\n                sb.append(Tokens.T_EXISTS);\n                break;\n\n            case OpTypes.OVERLAPS :\n                sb.append(Tokens.T_OVERLAPS);\n                break;"
           }

       },

       {
           "id": "clone_1227",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1637",
               "end_line": "1650",
               "source_code": "            addColumn(t, \"IS_NULLABLE\", CHARACTER_DATA);            // 18\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);          // 19\n\n            // order: PROCEDURE_SCHEM, PROCEDURE_NAME, SPECIFIC_NAME, ORDINAL_POSITION\n            //\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_PROCEDURECOLUMNS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 19, 17\n            }, false);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7515",
               "end_line": "7526",
               "source_code": "            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[UDT_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4\n            }, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_1228",

           "clone_type": "type-2",

           "origin": {
               "file": "TestBench.java",
               "start_line": "594",
               "end_line": "601",
               "source_code": "                pstmt.setInt(1, i);\n                pstmt.setInt(2, i / naccounts);\n                pstmt.executeUpdate();\n                pstmt.clearWarnings();\n\n                if (i % 10000 == 0) {\n                    Conn.commit();\n                }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "575",
               "end_line": "582",
               "source_code": "                pstmt.setInt(1, i);\n                pstmt.setInt(2, i / ntellers);\n                pstmt.executeUpdate();\n                pstmt.clearWarnings();\n\n                if (i % 100 == 0) {\n                    Conn.commit();\n                }"
           }

       },

       {
           "id": "clone_1229",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1890",
               "end_line": "1915",
               "source_code": "            case FUNC_LN : {\n                sb.append(Tokens.T_LN).append('(')                       //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_EXP : {\n                sb.append(Tokens.T_EXP).append('(')                      //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_POWER : {\n                sb.append(Tokens.T_POWER).append('(')                    //\n                    .append(nodes[0].getSQL()).append(',')               //\n                    .append(nodes[1].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_SQRT : {\n                sb.append(Tokens.T_SQRT).append('(')                     //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_FLOOR :"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1858",
               "end_line": "1883",
               "source_code": "            case FUNC_CARDINALITY : {\n                sb.append(Tokens.T_CARDINALITY).append('(')              //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_MAX_CARDINALITY : {\n                sb.append(Tokens.T_MAX_CARDINALITY).append('(')          //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_TRIM_ARRAY : {\n                sb.append(Tokens.T_TRIM_ARRAY).append('(')               //\n                    .append(nodes[0].getSQL()).append(',')               //\n                    .append(nodes[1].getSQL()).append(')');              //\n\n                break;\n            }\n            case FUNC_ABS : {\n                sb.append(Tokens.T_ABS).append('(')                      //\n                    .append(nodes[0].getSQL()).append(')');\n\n                break;\n            }\n            case FUNC_MOD :"
           }

       },

       {
           "id": "clone_1230",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2422",
               "end_line": "2484",
               "source_code": "        commandSet.put(T_OCTETLENGTH, OCTETLENGTH);\n        commandSet.put(T_PI, PI);\n        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);\n        commandSet.put(T_QUARTER, QUARTER);\n        commandSet.put(T_RADIANS, RADIANS);\n        commandSet.put(T_RAND, RAND);\n        commandSet.put(T_RAWTOHEX, RAWTOHEX);\n        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);\n        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);\n        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);\n        commandSet.put(T_REPLACE, REPLACE);\n        commandSet.put(T_REVERSE, REVERSE);\n        commandSet.put(T_ROUND, ROUND);\n        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);\n        commandSet.put(T_RPAD, RPAD);\n        commandSet.put(T_RTRIM, RTRIM);\n        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);\n        commandSet.put(T_SESSION_ID, SESSION_ID);\n        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);\n        commandSet.put(T_SIGN, SIGN);\n        commandSet.put(T_SIN, SIN);\n        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);\n        commandSet.put(T_SOUNDEX, SOUNDEX);\n        commandSet.put(T_SPACE, SPACE);\n        commandSet.put(T_SUBSTR, SUBSTR);\n        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);\n        commandSet.put(T_SYSDATE, SYSDATE);\n        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);\n        commandSet.put(T_TAN, TAN);\n        commandSet.put(T_TO_CHAR, TO_CHAR);\n        commandSet.put(T_TO_DATE, TO_DATE);\n        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);\n        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);\n        commandSet.put(T_TO_NUMBER, TO_NUMBER);\n        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);\n        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);\n        commandSet.put(T_TODAY, TODAY);\n        commandSet.put(T_TRUNC, TRUNC);\n        commandSet.put(T_UCASE, UCASE);\n        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);\n        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);\n        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);\n        commandSet.put(T_UUID, UUID);\n        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);\n        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);\n        commandSet.put(T_WEEK, WEEK);\n        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);\n\n        //\n        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);\n        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);\n        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);\n        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);\n        commandSet.put(T_TIMEZONE, TIMEZONE);\n        commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE);\n        commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE);\n        commandSet.put(T_DATABASE_VERSION, DATABASE_VERSION);\n        commandSet.put(T_LOB_ID, LOB_ID);\n        commandSet.put(T_SEQUENCE_ARRAY, SEQUENCE_ARRAY);\n\n        //\n        commandSet.put(T_ASTERISK, Tokens.ASTERISK);\n        commandSet.put(T_CLOSEBRACKET, CLOSEBRACKET);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2314",
               "end_line": "2374",
               "source_code": "        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);\n        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);\n        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);\n        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);\n        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);\n        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);\n        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);\n        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);\n        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);\n        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);\n        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);\n        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);\n        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);\n        commandSet.put(T_STATEMENT, STATEMENT);\n        commandSet.put(T_STYLE, STYLE);\n        commandSet.put(T_SYNTAX, SYNTAX);\n        commandSet.put(T_T_FACTOR, T);\n        commandSet.put(T_TDC, TDC);\n        commandSet.put(T_TEMP, TEMP);\n        commandSet.put(T_TEMPORARY, TEMPORARY);\n        commandSet.put(T_TEXT, TEXT);\n        commandSet.put(T_TYPES, TYPES);\n        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);\n        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);\n        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);\n        commandSet.put(T_TINYBLOB, TINYBLOB);\n        commandSet.put(T_TINYTEXT, TINYTEXT);\n        commandSet.put(T_TOP, TOP);\n        commandSet.put(T_TRANSACTION, TRANSACTION);\n        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);\n        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);\n        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);\n        commandSet.put(T_TTI, TTI);\n        commandSet.put(T_TYPE, TYPE);\n        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);\n        commandSet.put(T_USAGE, USAGE);\n        commandSet.put(T_VIEW, VIEW);\n        commandSet.put(T_VARCHAR2, VARCHAR2);\n        commandSet.put(T_WORK, WORK);\n        commandSet.put(T_WRAPPER, WRAPPER);\n        commandSet.put(T_WRITE, WRITE);\n        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);\n        commandSet.put(T_ZONE, ZONE);\n\n        //\n        commandSet.put(T_ACOS, ACOS);\n        commandSet.put(T_ACTION_ID, ACTION_ID);\n        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);\n        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);\n        commandSet.put(T_ASCII, ASCII);\n        commandSet.put(T_ASIN, ASIN);\n        commandSet.put(T_ATAN, ATAN);\n        commandSet.put(T_ATAN2, ATAN2);\n        commandSet.put(T_BITAND, BITAND);\n        commandSet.put(T_BITANDNOT, BITANDNOT);\n        commandSet.put(T_BITLENGTH, BITLENGTH);\n        commandSet.put(T_BITNOT, BITNOT);\n        commandSet.put(T_BITOR, BITOR);\n        commandSet.put(T_BITXOR, BITXOR);\n        commandSet.put(T_CASEWHEN, Tokens.CASEWHEN);\n        commandSet.put(T_CONCAT_WORD, CONCAT_WORD);"
           }

       },

       {
           "id": "clone_1231",

           "clone_type": "type-2",

           "origin": {
               "file": "SetFunction.java",
               "start_line": "514",
               "end_line": "519",
               "source_code": "                    case Types.SQL_BIGINT :\n                        return Type.SQL_DECIMAL_BIGINT_SQR;\n\n                    case Types.SQL_REAL :\n                    case Types.SQL_FLOAT :\n                    case Types.SQL_DOUBLE :"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "1448",
               "end_line": "1453",
               "source_code": "            case OpTypes.ROW :\n                return nodes.length;\n\n            case OpTypes.TABLE :\n            case OpTypes.ROW_SUBQUERY :\n            case OpTypes.TABLE_SUBQUERY :"
           }

       },

       {
           "id": "clone_1232",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3371",
               "end_line": "3381",
               "source_code": "                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_INTERVAL_DAY_TO_SECOND_MAX_PRECISION;\n                break;\n\n            case FUNC_TO_YMINTERVAL :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_VARCHAR;\n                }"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "3302",
               "end_line": "3312",
               "source_code": "                if (nodes[1].dataType == null) {\n                    nodes[1].dataType = Type.SQL_VARCHAR;\n                }\n\n                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;\n                break;\n\n            case FUNC_NUMTODSINTERVAL :\n                if (nodes[0].dataType == null) {\n                    nodes[0].dataType = Type.SQL_DOUBLE;\n                }"
           }

       },

       {
           "id": "clone_1233",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "536",
               "end_line": "540",
               "source_code": "            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(java.sql.Time.class, rs.getObject(\"t\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "505",
               "end_line": "509",
               "source_code": "            st = netConn.createStatement();\n            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");\n            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(java.sql.Date.class, rs.getObject(\"d\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());"
           }

       },

       {
           "id": "clone_1234",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1500",
               "end_line": "1506",
               "source_code": "                read();\n                readThis(Tokens.PATH);\n\n                type  = StatementTypes.SET_DATABASE_FILES_TEMP_PATH;\n                value = readIntegerObject();\n\n                break;"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1120",
               "end_line": "1125",
               "source_code": "                        read();\n                        readThis(Tokens.NAMES);\n\n                        property = HsqlDatabaseProperties.sql_regular_names;\n                        flag     = processTrueOrFalseObject();\n                        break;"
           }

       },

       {
           "id": "clone_1235",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5873",
               "end_line": "5919",
               "source_code": "        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;\n        final int declared_data_type                     = 82;\n        final int declared_numeric_precision             = 83;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1236",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3366",
               "end_line": "3390",
               "source_code": "    Expression XreadIntervalValueExpression() {\n\n        Expression e = XreadDateTimeIntervalTerm();\n\n        while (true) {\n            int type;\n\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n\n            read();\n\n            Expression a = e;\n\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n\n        return e;\n    }"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3340",
               "end_line": "3364",
               "source_code": "    Expression XreadDatetimeValueExpression() {\n\n        Expression e = XreadDateTimeIntervalTerm();\n\n        while (true) {\n            int type;\n\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n\n            read();\n\n            Expression a = e;\n\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n\n        return e;\n    }"
           }

       },

       {
           "id": "clone_1237",

           "clone_type": "type-2",

           "origin": {
               "file": "Tokens.java",
               "start_line": "2417",
               "end_line": "2480",
               "source_code": "        commandSet.put(T_NEW_TIME, NEW_TIME);\n        commandSet.put(T_NEXT_DAY, NEXT_DAY);\n        commandSet.put(T_NUMTODSINTERVAL, NUMTODSINTERVAL);\n        commandSet.put(T_NUMTOYMINTERVAL, NUMTOYMINTERVAL);\n        commandSet.put(T_NVL, Tokens.IFNULL);\n        commandSet.put(T_OCTETLENGTH, OCTETLENGTH);\n        commandSet.put(T_PI, PI);\n        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);\n        commandSet.put(T_QUARTER, QUARTER);\n        commandSet.put(T_RADIANS, RADIANS);\n        commandSet.put(T_RAND, RAND);\n        commandSet.put(T_RAWTOHEX, RAWTOHEX);\n        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);\n        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);\n        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);\n        commandSet.put(T_REPLACE, REPLACE);\n        commandSet.put(T_REVERSE, REVERSE);\n        commandSet.put(T_ROUND, ROUND);\n        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);\n        commandSet.put(T_RPAD, RPAD);\n        commandSet.put(T_RTRIM, RTRIM);\n        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);\n        commandSet.put(T_SESSION_ID, SESSION_ID);\n        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);\n        commandSet.put(T_SIGN, SIGN);\n        commandSet.put(T_SIN, SIN);\n        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);\n        commandSet.put(T_SOUNDEX, SOUNDEX);\n        commandSet.put(T_SPACE, SPACE);\n        commandSet.put(T_SUBSTR, SUBSTR);\n        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);\n        commandSet.put(T_SYSDATE, SYSDATE);\n        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);\n        commandSet.put(T_TAN, TAN);\n        commandSet.put(T_TO_CHAR, TO_CHAR);\n        commandSet.put(T_TO_DATE, TO_DATE);\n        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);\n        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);\n        commandSet.put(T_TO_NUMBER, TO_NUMBER);\n        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);\n        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);\n        commandSet.put(T_TODAY, TODAY);\n        commandSet.put(T_TRUNC, TRUNC);\n        commandSet.put(T_UCASE, UCASE);\n        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);\n        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);\n        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);\n        commandSet.put(T_UUID, UUID);\n        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);\n        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);\n        commandSet.put(T_WEEK, WEEK);\n        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);\n\n        //\n        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);\n        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);\n        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);\n        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);\n        commandSet.put(T_TIMEZONE, TIMEZONE);\n        commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE);\n        commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE);\n        commandSet.put(T_DATABASE_VERSION, DATABASE_VERSION);\n        commandSet.put(T_LOB_ID, LOB_ID);\n        commandSet.put(T_SEQUENCE_ARRAY, SEQUENCE_ARRAY);"
           },

           "clone": {
               "file": "Tokens.java",
               "start_line": "2182",
               "end_line": "2244",
               "source_code": "        commandSet.put(T_GENERATED, GENERATED);\n        commandSet.put(T_GRANTED, GRANTED);\n        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);\n        commandSet.put(T_HEADER, HEADER);\n        commandSet.put(T_IF, Tokens.IF);\n        commandSet.put(T_IGNORECASE, IGNORECASE);\n        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);\n        commandSet.put(T_INCLUDING, INCLUDING);\n        commandSet.put(T_INCREMENT, INCREMENT);\n        commandSet.put(T_INDEX, INDEX);\n        commandSet.put(T_INDEXER, INDEXER);\n        commandSet.put(T_INITIAL, INITIAL);\n        commandSet.put(T_INPUT, INPUT);\n        commandSet.put(T_INSTEAD, INSTEAD);\n        commandSet.put(T_INTEGRITY, INTEGRITY);\n        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);\n        commandSet.put(T_ISOLATION, ISOLATION);\n        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);\n        commandSet.put(T_IS_READONLY_DATABASE_FILES,\n                       IS_READONLY_DATABASE_FILES);\n        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);\n        commandSet.put(T_JAVA, JAVA);\n        commandSet.put(T_K_FACTOR, K);\n        commandSet.put(T_KEY, KEY);\n        commandSet.put(T_LAST, LAST);\n        commandSet.put(T_LASTVAL, LASTVAL);\n        commandSet.put(T_LENGTH, LENGTH);\n        commandSet.put(T_LEVEL, LEVEL);\n        commandSet.put(T_LIBRARY, LIBRARY);\n        commandSet.put(T_LIMIT, LIMIT);\n        commandSet.put(T_LOB, LOB);\n        commandSet.put(T_LOCK, LOCK);\n        commandSet.put(T_LOCKS, LOCKS);\n        commandSet.put(T_LONG, LONG);\n        commandSet.put(T_LONGBLOB, LONGBLOB);\n        commandSet.put(T_LONGTEXT, LONGTEXT);\n        commandSet.put(T_LONGVAR, LONGVAR);\n        commandSet.put(T_M_FACTOR, M);\n        commandSet.put(T_MATCHED, MATCHED);\n        commandSet.put(T_MAXROWS, MAXROWS);\n        commandSet.put(T_MAXVALUE, MAXVALUE);\n        commandSet.put(T_MEDIAN, MEDIAN);\n        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);\n        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);\n        commandSet.put(T_MEMORY, MEMORY);\n        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);\n        commandSet.put(T_MILLIS, MILLIS);\n        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);\n        commandSet.put(T_MINVALUE, MINVALUE);\n        commandSet.put(T_MORE, MORE);\n        commandSet.put(T_MVCC, MVCC);\n        commandSet.put(T_MVLOCKS, MVLOCKS);\n        commandSet.put(T_NAME, NAME);\n        commandSet.put(T_NEXT, NEXT);\n        commandSet.put(T_NEXTVAL, NEXTVAL);\n        commandSet.put(T_NAN, NAN);\n        commandSet.put(T_NIO, NIO);\n        commandSet.put(T_NOW, NOW);\n        commandSet.put(T_NULLS, NULLS);\n        commandSet.put(T_NUMBER, NUMBER);\n        commandSet.put(T_NVARCHAR2, NVARCHAR2);\n        commandSet.put(T_NVL2, NVL2);\n        commandSet.put(T_OBJECT, OBJECT);"
           }

       },

       {
           "id": "clone_1238",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "800",
               "end_line": "813",
               "source_code": "        execSQL(\"ALTER TABLE constrainedtbl ADD CONSTRAINT ucons \" + pref\n                + \"UNIQUE (i6)\", expect);\n        execSQL(\"ALTER TABLE constrainedtbl ADD CONSTRAINT ucons UNIQUE (i6)\",\n                true);                                                        // reset\n        execSQL(pref + \"ALTER TABLE playtbl RENAME TO renamedtbl\", expect);\n        execSQL(\"ALTER TABLE renamedtbl RENAME TO playtbl\", true);            // reset\n        execSQL(\"ALTER \" + pref + \"TABLE playtbl RENAME TO renamedtbl\",\n                expect);\n        execSQL(\"ALTER TABLE renamedtbl RENAME TO playtbl\", true);            // reset\n        execSQL(\"ALTER TABLE playtbl \" + pref + \"RENAME TO renamedtbl\",\n                expect);\n        execSQL(\"ALTER TABLE renamedtbl RENAME TO playtbl\", true);            // reset\n        execSQL(\"ALTER TABLE playtbl RENAME \" + pref + \"TO renamedtbl\",\n                expect);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "783",
               "end_line": "798",
               "source_code": "        execSQL(\"ALTER TABLE constrainedtbl ADD CONSTRAINT con6 \" + pref\n                + \"CHECK (i6 > 4)\", expect);\n        execSQL(\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true);    // reset\n        execSQL(\n            pref\n            + \"ALTER TABLE constrainedtbl ADD CONSTRAINT ucons UNIQUE (i6)\", expect);\n        execSQL(\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true);    // reset\n        execSQL(\n            \"ALTER \" + pref\n            + \"TABLE constrainedtbl ADD CONSTRAINT ucons UNIQUE (i6)\", expect);\n        execSQL(\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true);    // reset\n        execSQL(\"ALTER TABLE constrainedtbl \" + pref\n                + \"ADD CONSTRAINT ucons UNIQUE (i6)\", expect);\n        execSQL(\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true);    // reset\n        execSQL(\"ALTER TABLE constrainedtbl ADD \" + pref\n                + \"CONSTRAINT ucons UNIQUE (i6)\", expect);"
           }

       },

       {
           "id": "clone_1239",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "985",
               "end_line": "990",
               "source_code": "                        continue;\n                    case Token.SPECIAL_TYPE:\n                        // Storing prevToken as an attempted hack\n                        prevToken = buffer;\n                        setBuf(token);\n                        historize();"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "978",
               "end_line": "983",
               "source_code": "                        continue;\n                    case Token.PL_TYPE:\n                        // Storing prevToken as an attempted hack\n                        prevToken = buffer;\n                        setBuf(token);\n                        historize();"
           }

       },

       {
           "id": "clone_1240",

           "clone_type": "type-2",

           "origin": {
               "file": "RangeVariable.java",
               "start_line": "1795",
               "end_line": "1802",
               "source_code": "                        opType                         = OpTypes.NOT;\n                        opTypes[indexedColumnCount]    = OpTypes.NOT;\n                        opTypeEnd                      = e.opType;\n                        opTypesEnd[indexedColumnCount] = e.opType;\n\n                        indexedColumnCount++;\n\n                        return true;"
           },

           "clone": {
               "file": "RangeVariable.java",
               "start_line": "1765",
               "end_line": "1772",
               "source_code": "                        opType                         = e.opType;\n                        opTypes[indexedColumnCount]    = e.opType;\n                        opTypeEnd                      = OpTypes.MAX;\n                        opTypesEnd[indexedColumnCount] = OpTypes.MAX;\n\n                        indexedColumnCount++;\n\n                        return true;"
           }

       },

       {
           "id": "clone_1241",

           "clone_type": "type-2",

           "origin": {
               "file": "TestViewAsterisks.java",
               "start_line": "84",
               "end_line": "91",
               "source_code": "            executeStatement(\n                \"CREATE TABLE TABLE_A (ID_A INTEGER NOT NULL PRIMARY KEY, NAME_A VARCHAR(50))\");\n            executeStatement(\"INSERT INTO TABLE_A VALUES (1, 'first A')\");\n            executeStatement(\"INSERT INTO TABLE_A VALUES (2, 'second A')\");\n            executeStatement(\n                \"CREATE TABLE TABLE_B (ID_B INTEGER NOT NULL PRIMARY KEY, NAME_B VARCHAR(50))\");\n            executeStatement(\"INSERT INTO TABLE_B VALUES (1, 'first B')\");\n            executeStatement(\"INSERT INTO TABLE_B VALUES (2, 'second B')\");"
           },

           "clone": {
               "file": "TestViewAsterisks.java",
               "start_line": "77",
               "end_line": "83",
               "source_code": "            executeStatement(\"DROP TABLE TABLE_A IF EXISTS CASCADE\");\n            executeStatement(\"DROP TABLE TABLE_B IF EXISTS CASCADE\");\n            executeStatement(\"DROP VIEW V1 IF EXISTS CASCADE\"); // V1 is created by a previous test case\n            executeStatement(\n                \"CREATE TABLE ABC (ID INTEGER NOT NULL PRIMARY KEY, A VARCHAR(50), B VARCHAR(50), C VARCHAR(50))\");\n            executeStatement(\"INSERT INTO ABC VALUES (1, 'a', 'b', 'c')\");\n            executeStatement(\"INSERT INTO ABC VALUES (2, 'd', 'e', 'f')\");"
           }

       },

       {
           "id": "clone_1242",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "510",
               "end_line": "526",
               "source_code": "            case Tokens.VIEW :\n                read();\n\n                statementType = StatementTypes.DROP_VIEW;\n                objectType    = SchemaObject.VIEW;\n                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            case Tokens.TABLE :\n                read();\n\n                statementType = StatementTypes.DROP_TABLE;\n                objectType    = SchemaObject.TABLE;\n                canCascade    = true;\n                useIfExists   = true;\n                break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "473",
               "end_line": "489",
               "source_code": "            case Tokens.DOMAIN :\n                read();\n\n                statementType = StatementTypes.DROP_DOMAIN;\n                objectType    = SchemaObject.DOMAIN;\n                canCascade    = true;\n                useIfExists   = true;\n                break;\n\n            case Tokens.TYPE :\n                read();\n\n                statementType = StatementTypes.DROP_TYPE;\n                objectType    = SchemaObject.TYPE;\n                canCascade    = true;\n                useIfExists   = true;\n                break;"
           }

       },

       {
           "id": "clone_1243",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5859",
               "end_line": "5905",
               "source_code": "        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1244",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "675",
               "end_line": "701",
               "source_code": "            case Types.LONGVARBINARY :\n            case Types.SQL_ARRAY :\n            case Types.SQL_BINARY :\n            case Types.SQL_BIT :\n            case Types.SQL_BIT_VARYING :\n            case Types.SQL_BLOB :\n            case Types.SQL_CHAR :\n            case Types.SQL_NCHAR :\n            case Types.SQL_CLOB :\n            case Types.NCLOB :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_VARCHAR :\n            case Types.SQL_NVARCHAR :\n            case Types.VARCHAR_IGNORECASE :\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_FLOAT :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "126",
               "end_line": "155",
               "source_code": "//\n            case StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA :\n            case StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_ROWS :\n            case StatementTypes.SET_DATABASE_FILES_CACHE_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_CHECK :\n            case StatementTypes.SET_DATABASE_FILES_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_SPACE :\n            case StatementTypes.SET_DATABASE_FILES_DEFRAG :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_SCALE :\n            case StatementTypes.SET_DATABASE_FILES_LOBS_COMPRESSED :\n            case StatementTypes.SET_DATABASE_FILES_LOG :\n            case StatementTypes.SET_DATABASE_FILES_LOG_SIZE :\n            case StatementTypes.SET_DATABASE_FILES_NIO :\n            case StatementTypes.SET_DATABASE_FILES_SCRIPT_FORMAT :\n            case StatementTypes.SET_DATABASE_AUTHENTICATION :\n            case StatementTypes.SET_DATABASE_PASSWORD_CHECK :\n            case StatementTypes.SET_DATABASE_PROPERTY :\n            case StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS :\n            case StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY :\n            case StatementTypes.SET_DATABASE_SQL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONTROL :\n            case StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL :\n            case StatementTypes.SET_DATABASE_TRANSACTION_CONFLICT :\n            case StatementTypes.SET_DATABASE_GC :\n\n//\n            case StatementTypes.SET_DATABASE_SQL_COLLATION :\n            case StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT :\n            case StatementTypes.SET_DATABASE_TEXT_SOURCE :"
           }

       },

       {
           "id": "clone_1245",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "99",
               "end_line": "107",
               "source_code": "                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return (int) precision + 4;\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return (int) precision + 7;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "90",
               "end_line": "98",
               "source_code": "                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n                return (int) precision + 4;\n\n            case Types.SQL_INTERVAL_MONTH :\n                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_DAY :"
           }

       },

       {
           "id": "clone_1246",

           "clone_type": "type-2",

           "origin": {
               "file": "TransferSQLText.java",
               "start_line": "717",
               "end_line": "732",
               "source_code": "                currentLine = currentLine.trim() + \";\";\n                Tokenizer   = new StringTokenizer(currentLine);\n\n                try {\n                    Token = Tokenizer.nextToken();\n                } catch (NoSuchElementException NSE) {\n                    continue;\n                }\n\n                if (Token == null) {\n                    continue;\n                }\n\n                if (!Token.toUpperCase().equals(\"INSERT\")) {\n                    continue;\n                }"
           },

           "clone": {
               "file": "TransferSQLText.java",
               "start_line": "391",
               "end_line": "406",
               "source_code": "                currentLine = currentLine.trim() + \";\";\n                Tokenizer   = new StringTokenizer(currentLine);\n\n                try {\n                    Token = Tokenizer.nextToken();\n                } catch (NoSuchElementException NSE) {\n                    continue;\n                }\n\n                if (Token == null) {\n                    continue;\n                }\n\n                if (!Token.toUpperCase().equals(\"CREATE\")) {\n                    continue;\n                }"
           }

       },

       {
           "id": "clone_1247",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3621",
               "end_line": "3630",
               "source_code": "                read();\n                readThis(Tokens.OPENBRACKET);\n\n                e = XreadRowElementList(true);\n\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n\n            default :\n                position = getPosition();"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2376",
               "end_line": "2385",
               "source_code": "                read();\n                readThis(Tokens.OPENBRACKET);\n\n                e = XreadRowElementList(true);\n\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n\n            default :\n                e = XreadSimpleValueExpressionPrimary();"
           }

       },

       {
           "id": "clone_1248",

           "clone_type": "type-2",

           "origin": {
               "file": "IntValueHashMap.java",
               "start_line": "60",
               "end_line": "74",
               "source_code": "    public int get(Object key) throws NoSuchElementException {\n\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n\n        int hash   = key.hashCode();\n        int lookup = getLookup(key, hash);\n\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n\n        throw new NoSuchElementException();\n    }"
           },

           "clone": {
               "file": "LongValueHashMap.java",
               "start_line": "59",
               "end_line": "73",
               "source_code": "    public long get(Object key) throws NoSuchElementException {\n\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n\n        int hash   = key.hashCode();\n        int lookup = getLookup(key, hash);\n\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n\n        throw new NoSuchElementException();\n    }"
           }

       },

       {
           "id": "clone_1249",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5753",
               "end_line": "5799",
               "source_code": "            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1250",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "850",
               "end_line": "855",
               "source_code": "            addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // not null\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);                 // not null\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);          // 18\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);           // 19\n            addColumn(t, \"SCOPE_TABLE\", SQL_IDENTIFIER);            // 20\n            addColumn(t, \"SOURCE_DATA_TYPE\", SQL_IDENTIFIER);       // 21"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1047",
               "end_line": "1052",
               "source_code": "            addColumn(t, \"TRANSACTION\", Type.SQL_BOOLEAN);\n            addColumn(t, \"TRANSACTION_SIZE\", CARDINAL_NUMBER);\n            addColumn(t, \"WAITING_FOR_THIS\", CHARACTER_DATA);\n            addColumn(t, \"THIS_WAITING_FOR\", CHARACTER_DATA);\n            addColumn(t, \"CURRENT_STATEMENT\", CHARACTER_DATA);\n            addColumn(t, \"LATCH_COUNT\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1251",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "464",
               "end_line": "470",
               "source_code": "                        read();\n                        readThis(Tokens.COMMITTED);\n\n                        level = SessionInterface.TX_READ_COMMITTED;\n                        break;\n\n                    case Tokens.SERIALIZABLE :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "4795",
               "end_line": "4801",
               "source_code": "                read();\n                readThis(Tokens.SET);\n\n                objectType = SchemaObject.CHARSET;\n                break;\n\n            case Tokens.TABLE :"
           }

       },

       {
           "id": "clone_1252",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1428",
               "end_line": "1436",
               "source_code": "            case Tokens.SPACE : {\n                read();\n\n                flag  = processTrueOrFalseObject();\n                type  = StatementTypes.SET_DATABASE_FILES_SPACE;\n                names = database.schemaManager.getCatalogAndBaseTableNames();\n\n                break;\n            }"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "1419",
               "end_line": "1427",
               "source_code": "            case Tokens.SCALE : {\n                read();\n\n                value = readIntegerObject();\n                type  = StatementTypes.SET_DATABASE_FILES_SCALE;\n                names = database.schemaManager.getCatalogAndBaseTableNames();\n\n                break;\n            }"
           }

       },

       {
           "id": "clone_1253",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "2206",
               "end_line": "2214",
               "source_code": "                        HsqlName hsqlName = database.nameManager.newHsqlName(\n                            table.getSchemaName(), n, isDelimitedIdentifier(),\n                            SchemaObject.TRANSITION);\n                        Table transition = new Table(table, hsqlName);\n                        RangeVariable range = new RangeVariable(transition,\n                            null, null, null, compileContext);\n\n                        transitions[TriggerDef.NEW_TABLE] = transition;\n                        rangeVars[TriggerDef.NEW_TABLE]   = range;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2133",
               "end_line": "2141",
               "source_code": "                        HsqlName hsqlName = database.nameManager.newHsqlName(\n                            table.getSchemaName(), n, isDelimitedIdentifier(),\n                            SchemaObject.TRANSITION);\n                        Table transition = new Table(table, hsqlName);\n                        RangeVariable range = new RangeVariable(transition,\n                            null, null, null, compileContext);\n\n                        transitions[TriggerDef.OLD_TABLE] = transition;\n                        rangeVars[TriggerDef.OLD_TABLE]   = range;"
           }

       },

       {
           "id": "clone_1254",

           "clone_type": "type-2",

           "origin": {
               "file": "TestMultipleConnections.java",
               "start_line": "62",
               "end_line": "68",
               "source_code": "        st.execute(\"DROP TABLE T IF EXISTS\");\n        st.execute(\"CREATE TABLE T (I INT)\");\n        st.execute(\"INSERT INTO T VALUES (2)\");\n\n        ResultSet rs = st.executeQuery(\"SELECT * FROM T\");\n\n        rs.next();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "128",
               "end_line": "136",
               "source_code": "            statement.execute(\"create user testuser password 'test'\");\n            statement.execute(\"create table testtable(v varchar(20))\");\n            statement.execute(\n                \"insert into testtable values ('tennis'), ('tent'), ('television'), ('radio')\");\n\n            ResultSet rs = statement.executeQuery(\n                \"call \\\"org.hsqldb.test.TestStoredProcedure.funcTest2\\\"('test')\");\n\n            rs.next();"
           }

       },

       {
           "id": "clone_1255",

           "clone_type": "type-2",

           "origin": {
               "file": "QueryExpression.java",
               "start_line": "791",
               "end_line": "797",
               "source_code": "            case EXCEPT :\n                temp = Tokens.T_EXCEPT;\n                break;\n\n            case EXCEPT_ALL :\n                temp = Tokens.T_EXCEPT + ' ' + Tokens.T_ALL;\n                break;"
           },

           "clone": {
               "file": "QueryExpression.java",
               "start_line": "783",
               "end_line": "789",
               "source_code": "            case INTERSECT :\n                temp = Tokens.T_INTERSECT;\n                break;\n\n            case INTERSECT_ALL :\n                temp = Tokens.T_INTERSECT + ' ' + Tokens.T_ALL;\n                break;"
           }

       },

       {
           "id": "clone_1256",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8399",
               "end_line": "8416",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[VIEWS]);\n\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);               // not null\n            addColumn(t, \"VIEW_DEFINITION\", CHARACTER_DATA);          // not null\n            addColumn(t, \"CHECK_OPTION\", CHARACTER_DATA);             // not null\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);                  // not null\n            addColumn(t, \"INSERTABLE_INTO\", YES_OR_NO);               // not null\n            addColumn(t, \"IS_TRIGGER_UPDATABLE\", YES_OR_NO);          // not null\n            addColumn(t, \"IS_TRIGGER_DELETABLE\", YES_OR_NO);          // not null\n            addColumn(t, \"IS_TRIGGER_INSERTABLE_INTO\", YES_OR_NO);    // not null\n\n            // order TABLE_NAME\n            // added for unique: TABLE_SCHEMA, TABLE_CATALOG\n            // false PK, as TABLE_SCHEMA and/or TABLE_CATALOG may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[VIEWS].name, false, SchemaObject.INDEX);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5180",
               "end_line": "5196",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[ROUTINE_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n\n            //\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINE_PRIVILEGES].name, false,\n                SchemaObject.INDEX);"
           }

       },

       {
           "id": "clone_1257",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementCommand.java",
               "start_line": "341",
               "end_line": "351",
               "source_code": "                    int     value = ((Integer) parameters[0]).intValue();\n                    boolean check = parameters[1] == null;\n\n                    session.checkAdmin();\n                    session.checkDDLWrite();\n\n                    if (check && !session.database.getProperties()\n                            .validateProperty(HsqlDatabaseProperties\n                                .hsqldb_cache_size, value)) {\n                        throw Error.error(ErrorCode.X_42556);\n                    }"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "320",
               "end_line": "330",
               "source_code": "                    int     value = ((Integer) parameters[0]).intValue();\n                    boolean check = parameters[1] == null;\n\n                    session.checkAdmin();\n                    session.checkDDLWrite();\n\n                    if (check && !session.database.getProperties()\n                            .validateProperty(HsqlDatabaseProperties\n                                .hsqldb_cache_rows, value)) {\n                        throw Error.error(ErrorCode.X_42556);\n                    }"
           }

       },

       {
           "id": "clone_1258",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementCommand.java",
               "start_line": "184",
               "end_line": "193",
               "source_code": "                group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.SET_TABLE_INDEX :\n                group                  = StatementTypes.X_HSQLDB_SETTING;\n                isTransactionStatement = false;\n                isLogged               = false;\n                break;\n\n            case StatementTypes.SET_USER_LOCAL :"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "174",
               "end_line": "183",
               "source_code": "                group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.DATABASE_SHUTDOWN :\n                group = StatementTypes.X_HSQLDB_DATABASE_OPERATION;\n                isTransactionStatement = false;\n                isLogged               = false;\n                break;\n\n            case StatementTypes.SET_TABLE_TYPE :"
           }

       },

       {
           "id": "clone_1259",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSqlPersistent.java",
               "start_line": "101",
               "end_line": "106",
               "source_code": "        Object  arrayValue         = null;\n        Object  bytearrayValue     = null;\n        Object  stringValueResult  = null;\n        Object  integerValueResult = null;\n        Object  arrayValueResult   = null;\n        boolean wasNull            = false;"
           },

           "clone": {
               "file": "SqlTool.java",
               "start_line": "289",
               "end_line": "299",
               "source_code": "        /*\n         * The big picture is, we parse input args; load a RCData;\n         * get a JDBC Connection with the RCData; instantiate and\n         * execute as many SqlFiles as we need to.\n         */\n        String  rcFile           = null;\n        PipedReader  tmpReader   = null;\n        String  sqlText          = null;\n        String  driver           = null;\n        String  targetDb         = null;\n        boolean debug            = false;"
           }

       },

       {
           "id": "clone_1260",

           "clone_type": "type-2",

           "origin": {
               "file": "PgType.java",
               "start_line": "268",
               "end_line": "273",
               "source_code": "            case Types.SQL_INTERVAL_MINUTE_TO_SECOND:\n                PgType.ignoredConstraintWarning(hType);\n                return minSecIntervalSingleton;\n            case Types.SQL_INTERVAL_SECOND:\n                PgType.ignoredConstraintWarning(hType);\n                return secIntervalSingleton;"
           },

           "clone": {
               "file": "PgType.java",
               "start_line": "262",
               "end_line": "267",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_SECOND:\n                PgType.ignoredConstraintWarning(hType);\n                return daySecIntervalSingleton;\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND:\n                PgType.ignoredConstraintWarning(hType);\n                return hourSecIntervalSingleton;"
           }

       },

       {
           "id": "clone_1261",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "768",
               "end_line": "776",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                return a;\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "142",
               "end_line": "150",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                return typeWidth;\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :"
           }

       },

       {
           "id": "clone_1262",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "878",
               "end_line": "883",
               "source_code": "                    read();\n                    readThis(Tokens.SQL);\n                    readThis(Tokens.DATA);\n                    routine.setDataImpact(Routine.READS_SQL);\n\n                    break;"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "855",
               "end_line": "860",
               "source_code": "                    read();\n                    readThis(Tokens.SQL);\n                    readThis(Tokens.DATA);\n                    routine.setDataImpact(Routine.MODIFIES_SQL);\n\n                    break;"
           }

       },

       {
           "id": "clone_1263",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2791",
               "end_line": "2810",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[SYSTEM_VERSIONCOLUMNS]);\n\n            // ----------------------------------------------------------------\n            // required by DatabaseMetaData.getVersionColumns result set\n            // ----------------------------------------------------------------\n            addColumn(t, \"SCOPE\", Type.SQL_INTEGER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);         // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);        // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"COLUMN_SIZE\", Type.SQL_SMALLINT);\n            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);\n            addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);\n            addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null\n\n            // -----------------------------------------------------------------\n            // required by DatabaseMetaData.getVersionColumns filter parameters\n            // -----------------------------------------------------------------\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "640",
               "end_line": "652",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[SYSTEM_BESTROWIDENTIFIER]);\n\n            addColumn(t, \"SCOPE\", Type.SQL_SMALLINT);            // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);         // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);        // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);\n            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);\n            addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);\n            addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null"
           }

       },

       {
           "id": "clone_1264",

           "clone_type": "type-2",

           "origin": {
               "file": "Schema.java",
               "start_line": "263",
               "end_line": "285",
               "source_code": "            case SchemaObject.TABLE :\n            case SchemaObject.VIEW :\n                return tableLookup;\n\n            case SchemaObject.CHARSET :\n                return charsetLookup;\n\n            case SchemaObject.COLLATION :\n                return collationLookup;\n\n            case SchemaObject.PROCEDURE :\n                return procedureLookup;\n\n            case SchemaObject.FUNCTION :\n                return functionLookup;\n\n            case SchemaObject.ROUTINE :\n                return functionLookup;\n\n            case SchemaObject.SPECIFIC_ROUTINE :\n                return specificRoutineLookup;\n\n            case SchemaObject.DOMAIN :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "846",
               "end_line": "868",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :\n                return SQL_NUMERIC;\n\n            case Types.SQL_DECIMAL :\n                return SQL_DECIMAL;\n\n            case Types.SQL_BOOLEAN :\n                return SQL_BOOLEAN;\n\n            case Types.SQL_BINARY :\n                return SQL_BINARY_DEFAULT;\n\n            case Types.SQL_VARBINARY :\n                return SQL_VARBINARY_DEFAULT;\n\n            case Types.SQL_BLOB :\n                return SQL_BLOB;\n\n            case Types.SQL_BIT :"
           }

       },

       {
           "id": "clone_1265",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "1723",
               "end_line": "1735",
               "source_code": "            case Types.TINYINT :\n                return 8;\n\n            case Types.SQL_SMALLINT :\n                return 16;\n\n            case Types.SQL_INTEGER :\n                return 32;\n\n            case Types.SQL_BIGINT :\n                return 64;\n\n            case Types.SQL_REAL :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "215",
               "end_line": "227",
               "source_code": "            case Types.SQL_DOUBLE :\n                return 23;                   // String.valueOf(-Double.MAX_VALUE).length();\n\n            case Types.SQL_BIGINT :\n                return 20;                   // decimal precision + \"-\".length();\n\n            case Types.SQL_INTEGER :\n                return 11;                   // decimal precision + \"-\".length();\n\n            case Types.SQL_SMALLINT :\n                return 6;                    // decimal precision + \"-\".length();\n\n            case Types.TINYINT :"
           }

       },

       {
           "id": "clone_1266",

           "clone_type": "type-2",

           "origin": {
               "file": "StatementCommand.java",
               "start_line": "181",
               "end_line": "190",
               "source_code": "                break;\n\n            case StatementTypes.SET_TABLE_TYPE :\n                group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.SET_TABLE_INDEX :\n                group                  = StatementTypes.X_HSQLDB_SETTING;\n                isTransactionStatement = false;\n                isLogged               = false;"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "171",
               "end_line": "180",
               "source_code": "                break;\n\n            case StatementTypes.SET_TABLE_READONLY :\n                group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;\n                break;\n\n            case StatementTypes.DATABASE_SHUTDOWN :\n                group = StatementTypes.X_HSQLDB_DATABASE_OPERATION;\n                isTransactionStatement = false;\n                isLogged               = false;"
           }

       },

       {
           "id": "clone_1267",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "1096",
               "end_line": "1108",
               "source_code": "                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));\n\n                    case Tokens.SQL_TSI_DAY :\n                        t = Type.SQL_INTERVAL_DAY_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));\n\n                    case Tokens.SQL_TSI_WEEK :\n                        t = Type.SQL_INTERVAL_DAY_MAX_PRECISION;"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "1082",
               "end_line": "1094",
               "source_code": "                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));\n\n                    case Tokens.SQL_TSI_MINUTE :\n                        t = Type.SQL_INTERVAL_MINUTE_MAX_PRECISION;\n\n                        return new Long(\n                            t.convertToLongEndUnits(\n                                t.subtract(session, a, b, null)));\n\n                    case Tokens.SQL_TSI_HOUR :\n                        t = Type.SQL_INTERVAL_HOUR_MAX_PRECISION;"
           }

       },

       {
           "id": "clone_1268",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5749",
               "end_line": "5795",
               "source_code": "            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1269",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2836",
               "end_line": "2841",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[SYSTEM_USERS]);\n\n            addColumn(t, \"USER_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ADMIN\", Type.SQL_BOOLEAN);\n            addColumn(t, \"INITIAL_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"AUTHENTICATION\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1902",
               "end_line": "1908",
               "source_code": "            t = createBlankTable(\n                sysTableHsqlNames[SYSTEM_CONNECTION_PROPERTIES]);\n\n            addColumn(t, \"NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAX_LEN\", Type.SQL_INTEGER);\n            addColumn(t, \"DEFAULT_VALUE\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"DESCRIPTION\", SQL_IDENTIFIER);      // not null"
           }

       },

       {
           "id": "clone_1270",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1393",
               "end_line": "1400",
               "source_code": "                    row                    = t.getEmptyRowData();\n                    row[itable_cat]        = tableCatalog;\n                    row[itable_schem]      = tableSchema;\n                    row[itable_name]       = tableName;\n                    row[inon_unique]       = nonUnique;\n                    row[iindex_qualifier]  = indexQualifier;\n                    row[iindex_name]       = indexName;\n                    row[itype]             = indexType;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1215",
               "end_line": "1222",
               "source_code": "                row                  = t.getEmptyRowData();\n                row[ipk_table_cat]   = pkTableCatalog;\n                row[ipk_table_schem] = pkTableSchema;\n                row[ipk_table_name]  = pkTableName;\n                row[ipk_column_name] = pkColumnName;\n                row[ifk_table_cat]   = fkTableCatalog;\n                row[ifk_table_schem] = fkTableSchema;\n                row[ifk_table_name]  = fkTableName;"
           }

       },

       {
           "id": "clone_1271",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5769",
               "end_line": "5815",
               "source_code": "            addColumn(t, \"ROUTINE_BODY\", CHARACTER_DATA);\n            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1272",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7113",
               "end_line": "7149",
               "source_code": "        Table t = sysTables[TRIGGER_TABLE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TRIGGER_TABLE_USAGE]);\n\n            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TRIGGER_TABLE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int trigger_catalog = 0;\n        final int trigger_schema  = 1;\n        final int trigger_name    = 2;\n        final int table_catalog   = 3;\n        final int table_schema    = 4;\n        final int table_name      = 5;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.TRIGGER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7003",
               "end_line": "7039",
               "source_code": "        Table t = sysTables[TRIGGER_SEQUENCE_USAGE];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[TRIGGER_SEQUENCE_USAGE]);\n\n            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);    // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TRIGGER_SEQUENCE_USAGE].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5\n            }, false);\n\n            return t;\n        }\n\n        // column number mappings\n        final int trigger_catalog  = 0;\n        final int trigger_schema   = 1;\n        final int trigger_name     = 2;\n        final int sequence_catalog = 3;\n        final int sequence_schema  = 4;\n        final int sequence_name    = 5;\n\n        //\n        Iterator it;\n        Object[] row;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.TRIGGER);"
           }

       },

       {
           "id": "clone_1273",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7826",
               "end_line": "7863",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[USER_DEFINED_TYPES]);\n\n            addColumn(t, \"USER_DEFINED_TYPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"USER_DEFINED_TYPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"USER_DEFINED_TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"USER_DEFINED_TYPE_CATEGORY\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_INSTANTIABLE\", YES_OR_NO);\n            addColumn(t, \"IS_FINAL\", YES_OR_NO);\n            addColumn(t, \"ORDERING_FORM\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDERING_CATEGORY\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDERING_ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDERING_ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDERING_ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"REFERENCE_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"SOURCE_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"REF_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"JAVA_INTERFACE\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5731",
               "end_line": "5768",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[ROUTINES]);\n\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"MODULE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"MODULE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_1274",

           "clone_type": "type-2",

           "origin": {
               "file": "Types.java",
               "start_line": "684",
               "end_line": "707",
               "source_code": "            case Types.NCLOB :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_VARCHAR :\n            case Types.SQL_NVARCHAR :\n            case Types.VARCHAR_IGNORECASE :\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_FLOAT :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                return true;"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "576",
               "end_line": "601",
               "source_code": "            case OpTypes.LIKE :\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :\n            case OpTypes.UNIQUE :\n            case OpTypes.EXISTS :\n            case OpTypes.ARRAY :\n            case OpTypes.ARRAY_SUBQUERY :\n            case OpTypes.TABLE_SUBQUERY :\n\n            //\n            case OpTypes.COUNT :\n            case OpTypes.SUM :\n            case OpTypes.MIN :\n            case OpTypes.MAX :\n            case OpTypes.AVG :\n            case OpTypes.EVERY :\n            case OpTypes.SOME :\n            case OpTypes.STDDEV_POP :\n            case OpTypes.STDDEV_SAMP :\n            case OpTypes.VAR_POP :\n            case OpTypes.VAR_SAMP :\n                return false;"
           }

       },

       {
           "id": "clone_1275",

           "clone_type": "type-2",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "457",
               "end_line": "532",
               "source_code": "                break;\n\n            case FUNC_CURRENT_CATALOG :\n                name      = Tokens.T_CURRENT_CATALOG;\n                parseList = noParamList;\n                break;\n\n            /*\n            case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :\n                break;\n            case FUNC_CURRENT_PATH :\n                break;\n            */\n            case FUNC_CURRENT_ROLE :\n                name      = Tokens.T_CURRENT_ROLE;\n                parseList = noParamList;\n                break;\n\n            case FUNC_CURRENT_SCHEMA :\n                name      = Tokens.T_CURRENT_SCHEMA;\n                parseList = noParamList;\n                break;\n\n            /*\n            case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :\n                break;\n            */\n            case FUNC_CURRENT_USER :\n                name      = Tokens.T_CURRENT_USER;\n                parseList = noParamList;\n                break;\n\n            case FUNC_SESSION_USER :\n                name      = Tokens.T_SESSION_USER;\n                parseList = noParamList;\n                break;\n\n            case FUNC_SYSTEM_USER :\n                name      = Tokens.T_SYSTEM_USER;\n                parseList = noParamList;\n                break;\n\n            case FUNC_USER :\n                name      = Tokens.T_USER;\n                parseList = optionalNoParamList;\n                break;\n\n            case FUNC_VALUE :\n                name      = Tokens.T_VALUE;\n                parseList = noParamList;\n                break;\n\n            case FUNC_CURRENT_DATE :\n                name      = Tokens.T_CURRENT_DATE;\n                parseList = noParamList;\n                break;\n\n            case FUNC_CURRENT_TIME :\n                name      = Tokens.T_CURRENT_TIME;\n                parseList = optionalIntegerParamList;\n                break;\n\n            case FUNC_CURRENT_TIMESTAMP :\n                name      = Tokens.T_CURRENT_TIMESTAMP;\n                parseList = optionalIntegerParamList;\n                break;\n\n            case FUNC_LOCALTIME :\n                name      = Tokens.T_LOCALTIME;\n                parseList = optionalIntegerParamList;\n                break;\n\n            case FUNC_LOCALTIMESTAMP :\n                name      = Tokens.T_LOCALTIMESTAMP;\n                parseList = optionalIntegerParamList;\n                break;"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "322",
               "end_line": "387",
               "source_code": "                break;\n\n            case FUNC_OCTET_LENGTH :\n                name      = Tokens.T_OCTET_LENGTH;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_CARDINALITY :\n                name      = Tokens.T_CARDINALITY;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_MAX_CARDINALITY :\n                name      = Tokens.T_MAX_CARDINALITY;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_TRIM_ARRAY :\n                name      = Tokens.T_TRIM_ARRAY;\n                parseList = doubleParamList;\n                break;\n\n            case FUNC_ABS :\n                name      = Tokens.T_ABS;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_MOD :\n                name      = Tokens.T_MOD;\n                parseList = doubleParamList;\n                break;\n\n            case FUNC_LN :\n                name      = Tokens.T_LN;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_EXP :\n                name      = Tokens.T_EXP;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_POWER :\n                name      = Tokens.T_POWER;\n                parseList = doubleParamList;\n                break;\n\n            case FUNC_SQRT :\n                name      = Tokens.T_SQRT;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_FLOOR :\n                name      = Tokens.T_FLOOR;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_CEILING :\n                name      = Tokens.T_CEILING;\n                parseList = singleParamList;\n                break;\n\n            case FUNC_WIDTH_BUCKET :\n                name      = Tokens.T_WIDTH_BUCKET;\n                parseList = quadParamList;\n                break;"
           }

       },

       {
           "id": "clone_1276",

           "clone_type": "type-2",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "214",
               "end_line": "222",
               "source_code": "                break;\n\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                o = readTimestamp(type);\n                break;\n\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "176",
               "end_line": "184",
               "source_code": "                break;\n\n            case Types.SQL_CHAR :\n            case Types.SQL_VARCHAR :\n                o = readChar(type);\n                break;\n\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :"
           }

       },

       {
           "id": "clone_1277",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "379",
               "end_line": "390",
               "source_code": "        execSQL(\"GRANT ALL ON playtbl TO tstuser\", 0);\n        execSQL(\"REVOKE ALL ON playtbl FROM tstuser RESTRICT\", 0);\n\n// TODO:  These should not throw a Null Pointer exception.\n        execSQL(\"ALTER INDEX tstind RENAME TO renamedind\", 0);\n        execSQL(\"ALTER INDEX renamedind RENAME TO tstind\", 0);\n        execSQL(\"ALTER USER tstuser SET PASSWORD frank\", 0);\n        execSQL(\"ALTER USER tstuser SET PASSWORD 'frank'\", 0);\n        execSQL(\"ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0);\n        execSQL(\"ALTER TABLE tsttbl ALTER COLUMN vco1 RENAME TO j1\", 0);\n        execSQL(\"ALTER TABLE constrainedtbl DROP CONSTRAINT con1\", 0);\n        execSQL(\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", 0);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "368",
               "end_line": "378",
               "source_code": "        // Remember that inserts must change after adding a column.\n        execSQL(\"ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0);\n        execSQL(\"ALTER TABLE tsttbl DROP COLUMN vco1\", 0);\n        execSQL(\"CREATE UNIQUE INDEX tstind ON tsttbl (i)\", 0);\n        execSQL(\"SET AUTOCOMMIT true\", 0);\n        execSQL(\"SET AUTOCOMMIT false\", 0);\n        execSQL(\"SET IGNORECASE true\", 0);\n        execSQL(\"SET IGNORECASE false\", 0);\n        execSQL(\"SET PASSWORD blah\", 0);\n        execSQL(\"SET PASSWORD 'blah'\", 0);\n        execSQL(\"SET DATABASE REFERENTIAL INTEGRITY true\", 0);"
           }

       },

       {
           "id": "clone_1278",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "2973",
               "end_line": "2985",
               "source_code": "                tmpString = getParameter(\"showSchemas\");\n\n                if (tmpString != null) {\n                    showSchemas = Boolean.valueOf(tmpString).booleanValue();\n                }\n\n                tmpString = getParameter(\"resultGrid\");\n\n                if (tmpString != null) {\n                    resultGrid = Boolean.valueOf(tmpString).booleanValue();\n                }\n\n                tmpString = getParameter(\"laf\");"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "2954",
               "end_line": "2967",
               "source_code": "                // LOAD PREFERENCES FROM APPLET PARAMS\n                tmpString = getParameter(\"autoRefresh\");\n\n                if (tmpString != null) {\n                    autoRefresh = Boolean.valueOf(tmpString).booleanValue();\n                }\n\n                tmpString = getParameter(\"showRowCounts\");\n\n                if (tmpString != null) {\n                    showRowCounts = Boolean.valueOf(tmpString).booleanValue();\n                }\n\n                tmpString = getParameter(\"showSysTables\");"
           }

       },

       {
           "id": "clone_1279",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6356",
               "end_line": "6392",
               "source_code": "    /**\n     * SQL:2008 VIEW<p>\n     *\n     * The SQL_PARTS view lists the parts of the SQL Standard supported by\n     * HyperSQL.<p>\n     *\n     */\n    Table SQL_PARTS(Session session, PersistentStore store) {\n\n        Table t = sysTables[SQL_PARTS];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SQL_PARTS]);\n\n            addColumn(t, \"PART\", CHARACTER_DATA);\n            addColumn(t, \"NAME\", CHARACTER_DATA);\n            addColumn(t, \"IS_SUPPORTED\", YES_OR_NO);\n            addColumn(t, \"IS_VERIFIED_BY\", CHARACTER_DATA);\n            addColumn(t, \"COMMENTS\", CHARACTER_DATA);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SQL_PARTS].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);\n\n            return t;\n        }\n\n        Session sys = database.sessionManager.newSysSession(\n            SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser());\n        String sql = (String) statementMap.get(\"/*sql_parts*/\");\n        Result rs  = sys.executeDirectStatement(sql);\n\n        t.insertSys(session, store, rs);\n\n        return t;\n    }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6317",
               "end_line": "6354",
               "source_code": "    /**\n     * SQL:2008 VIEW<p>\n     *\n     * The SQL_PACHAGES view lists the packages of the SQL Standard supported by\n     * HyperSQL.<p>\n     *\n     */\n    Table SQL_PACKAGES(Session session, PersistentStore store) {\n\n        Table t = sysTables[SQL_PACKAGES];\n\n        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[SQL_PACKAGES]);\n\n            addColumn(t, \"ID\", CHARACTER_DATA);\n            addColumn(t, \"NAME\", CHARACTER_DATA);\n            addColumn(t, \"IS_SUPPORTED\", YES_OR_NO);\n            addColumn(t, \"IS_VERIFIED_BY\", CHARACTER_DATA);\n            addColumn(t, \"COMMENTS\", CHARACTER_DATA);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SQL_PACKAGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);\n\n            return t;\n        }\n\n        Session sys = database.sessionManager.newSysSession(\n            SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser());\n        String sql = (String) statementMap.get(\"/*sql_packages*/\");\n        Result rs  = sys.executeDirectStatement(sql);\n\n        t.insertSys(session, store, rs);\n\n        return t;\n    }"
           }

       },

       {
           "id": "clone_1280",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "1316",
               "end_line": "1322",
               "source_code": "                break;\n\n            case Types.SQL_BIGINT :\n                break;\n\n            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "806",
               "end_line": "812",
               "source_code": "                            break;\n\n                        case StatementTypes.DROP_ASSERTION :\n                            break;\n\n                        case StatementTypes.DROP_CHARACTER_SET :\n                        case StatementTypes.DROP_COLLATION :"
           }

       },

       {
           "id": "clone_1281",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "487",
               "end_line": "491",
               "source_code": "                    case SchemaObject.TYPE :\n                    case SchemaObject.DOMAIN :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.SPECIFIC_ROUTINE :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "314",
               "end_line": "318",
               "source_code": "            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.ASSERTION :\n            case SchemaObject.INDEX :\n            case SchemaObject.TRIGGER :"
           }

       },

       {
           "id": "clone_1282",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "587",
               "end_line": "620",
               "source_code": "            String dml0 = \"INSERT INTO VARIABLE VALUES (?, ?, 'N', ?, ?)\";\n            String dml1 =\n                \"UPDATE VARIABLE SET varid = varid + 1 WHERE stateid = ? AND \"\n                + \"varid = ? AND scalabilitypassivated = 'N' AND scopeguid = ?\";\n            PreparedStatement ps = connection.prepareStatement(dml0);\n\n            connection.setAutoCommit(false);\n\n            //\n            JDBCClob dataClob =\n                new JDBCClob(\"the quick brown fox jumps on the lazy dog\");\n            Reader    reader = null;\n            StopWatch sw     = new StopWatch();\n\n            sw.start();\n\n            for (int i = 0; i < 100; i++) {\n                reader = dataClob.getCharacterStream();\n\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }\n\n            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n\n            ps = connection.prepareStatement(dml1);\n\n            sw.zero();\n            sw.start();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "514",
               "end_line": "547",
               "source_code": "            String dml0 = \"INSERT INTO VARIABLE VALUES (?, ?, 'N', ?, ?)\";\n            String dml1 =\n                \"UPDATE VARIABLE SET value = ? WHERE stateid = ? AND \"\n                + \"varid = ? AND scalabilitypassivated = 'N' AND scopeguid = ?\";\n            PreparedStatement ps = connection.prepareStatement(dml0);\n\n            connection.setAutoCommit(false);\n\n            //\n            JDBCClob dataClob =\n                new JDBCClob(\"the quick brown fox jumps on the lazy dog\");\n            Reader    reader = null;\n            StopWatch sw     = new StopWatch();\n\n            sw.start();\n\n            for (int i = 0; i < 1000; i++) {\n                reader = dataClob.getCharacterStream();\n\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }\n\n            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n\n            ps = connection.prepareStatement(dml1);\n\n            sw.zero();\n            sw.start();"
           }

       },

       {
           "id": "clone_1283",

           "clone_type": "type-2",

           "origin": {
               "file": "CharacterType.java",
               "start_line": "209",
               "end_line": "222",
               "source_code": "            case Types.SQL_CHAR :\n                return other.typeCode == Types.SQL_CLOB ? 4\n                                                        : 2;\n\n            case Types.SQL_VARCHAR :\n                return other.typeCode == Types.SQL_CLOB ? 4\n                                                        : 2;\n\n            case Types.SQL_CLOB :\n                return other.typeCode == Types.SQL_CHAR ? -4\n                                                        : -2;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"CharacterType\");"
           },

           "clone": {
               "file": "BinaryType.java",
               "start_line": "170",
               "end_line": "183",
               "source_code": "            case Types.SQL_BINARY :\n                return other.typeCode == Types.SQL_BLOB ? 4\n                                                        : 2;\n\n            case Types.SQL_VARBINARY :\n                return other.typeCode == Types.SQL_BLOB ? 4\n                                                        : 2;\n\n            case Types.SQL_BLOB :\n                return other.typeCode == Types.SQL_BINARY ? -4\n                                                          : -2;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"BinaryType\");"
           }

       },

       {
           "id": "clone_1284",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "232",
               "end_line": "241",
               "source_code": "            case Types.SQL_INTERVAL_HOUR :\n                return Tokens.T_HOUR;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                return \"HOUR TO MINUTE\";\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                return \"HOUR TO SECOND\";\n\n            case Types.SQL_INTERVAL_MINUTE :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "220",
               "end_line": "229",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n                return Tokens.T_DAY;\n\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n                return \"DAY TO HOUR\";\n\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                return \"DAY TO MINUTE\";\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :"
           }

       },

       {
           "id": "clone_1285",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2510",
               "end_line": "2523",
               "source_code": "            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);\n            addColumn(t, \"NUM_PREC_RADIX\", Type.SQL_INTEGER);\n\n            //-------------------------------------------\n            // SQL CLI / ODBC - not in JDBC spec\n            // ------------------------------------------\n            addColumn(t, \"INTERVAL_PRECISION\", Type.SQL_INTEGER);\n\n            // order:  DATA_TYPE, TYPE_NAME\n            // true primary key\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_TYPEINFO].name, false,\n                SchemaObject.INDEX);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1214",
               "end_line": "1222",
               "source_code": "            addColumn(t, \"IS_IGNORE_FIRST\", Type.SQL_BOOLEAN);\n            addColumn(t, \"IS_ALL_QUOTED\", Type.SQL_BOOLEAN);\n            addColumn(t, \"IS_QUOTED\", Type.SQL_BOOLEAN);\n            addColumn(t, \"IS_DESC\", Type.SQL_BOOLEAN);\n\n            // ------------------------------------------------------------\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[SYSTEM_TEXTTABLES].name, false,\n                SchemaObject.INDEX);"
           }

       },

       {
           "id": "clone_1286",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2766",
               "end_line": "2778",
               "source_code": "                if (object.getName().comment == null) {\n                    continue;\n                }\n\n                sb.setLength(0);\n                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);\n                sb.append(' ').append(Tokens.T_ROUTINE).append(' ');\n                sb.append(object.getName().getSchemaQualifiedStatementName());\n                sb.append(' ').append(Tokens.T_IS).append(' ');\n                sb.append(\n                    StringConverter.toQuotedString(\n                        object.getName().comment, '\\'', true));\n                list.add(sb.toString());"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "2746",
               "end_line": "2758",
               "source_code": "                if (table.getName().comment == null) {\n                    continue;\n                }\n\n                sb.setLength(0);\n                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);\n                sb.append(' ').append(Tokens.T_TABLE).append(' ');\n                sb.append(table.getName().getSchemaQualifiedStatementName());\n                sb.append(' ').append(Tokens.T_IS).append(' ');\n                sb.append(\n                    StringConverter.toQuotedString(\n                        table.getName().comment, '\\'', true));\n                list.add(sb.toString());"
           }

       },

       {
           "id": "clone_1287",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3484",
               "end_line": "3497",
               "source_code": "        Table     table;\n        Object[]  row;\n        final int table_catalog                = 0;\n        final int table_schema                 = 1;\n        final int table_name                   = 2;\n        final int table_type                   = 3;\n        final int self_referencing_column_name = 4;\n        final int reference_generation         = 5;\n        final int user_defined_type_catalog    = 6;\n        final int user_defined_type_schema     = 7;\n        final int user_defined_type_name       = 8;\n        final int is_insertable_into           = 9;\n        final int is_typed                     = 10;\n        final int commit_action                = 11;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1132",
               "end_line": "1147",
               "source_code": "        HsqlArrayList fkConstraintsList;\n        Object[]      row;\n\n        // column number mappings\n        final int ipk_table_cat   = 0;\n        final int ipk_table_schem = 1;\n        final int ipk_table_name  = 2;\n        final int ipk_column_name = 3;\n        final int ifk_table_cat   = 4;\n        final int ifk_table_schem = 5;\n        final int ifk_table_name  = 6;\n        final int ifk_column_name = 7;\n        final int ikey_seq        = 8;\n        final int iupdate_rule    = 9;\n        final int idelete_rule    = 10;\n        final int ifk_name        = 11;"
           }

       },

       {
           "id": "clone_1288",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "224",
               "end_line": "244",
               "source_code": "        assertEquals(\"Sub-query\", 1,\n                     queryRowCount(\"SELECT vc FROM \" + prefix\n                                   + \"tstview WHERE i = (\n\"\n                                   + \"    SELECT i2 FROM \" + prefix\n                                   + \"joinedtbl\n\" + \")\"));\n        assertEquals(\"Join\", 1,\n                     queryRowCount(\"SELECT vc FROM \" + prefix + \"tstview, \"\n                                   + prefix + \"joinedtbl\n\"\n                                   + \"WHERE tstview.i = joinedtbl.i2\n\"\n                                   + \"AND joinedtbl.vc2 = 'zwei'\"));\n        assertEquals(\n            2, queryRowCount(\n                \"SELECT i FROM \" + prefix\n                + \"tstview ali WHERE ali.i IN (1, 2, 3)\"));\n\n        // view\n        execSQL(\"CREATE VIEW \" + prefix\n                + \"tstview2 AS SELECT * FROM tsttbl WHERE i < 10\", 0);\n\n        // grant, revoke\n        execSQL(\"GRANT ALL ON \" + prefix + \"tstview TO tstuser\", 0);"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "125",
               "end_line": "142",
               "source_code": "        assertEquals(\"Sub-query\", 1,\n                     queryRowCount(\"SELECT vc FROM \" + prefix\n                                   + \"tsttbl WHERE i = (\n\"\n                                   + \"    SELECT i2 FROM \" + prefix\n                                   + \"joinedtbl\n\" + \")\"));\n        assertEquals(\"Join\", 1,\n                     queryRowCount(\"SELECT vc FROM \" + prefix + \"tsttbl, \"\n                                   + prefix + \"joinedtbl\n\"\n                                   + \"WHERE tsttbl.i = joinedtbl.i2\n\"\n                                   + \"AND joinedtbl.vc2 = 'zwei'\"));\n\n        // Selects using Labels/Aliases\n        assertEquals(\n            2, queryRowCount(\n                \"SELECT ali.i FROM \" + prefix\n                + \"tsttbl ali WHERE ali.i IN (1, 2, 3)\"));\n        execSQL(\"CREATE TABLE \" + prefix + \"newtbl2 AS (SELECT * FROM tsttbl) WITH DATA\", 0);\n        execSQL(\"CREATE TABLE newtbl3 AS (SELECT * FROM \" + prefix + \"tsttbl ali) WITH DATA\", 0);"
           }

       },

       {
           "id": "clone_1289",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "488",
               "end_line": "496",
               "source_code": "                return sb.toString();\n\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n                sb.append(left).append(' ').append(Tokens.T_MATCH).append(\n                    ' ').append(Tokens.UNIQUE).append(right);\n\n                return sb.toString();\n\n            case OpTypes.MATCH_UNIQUE_PARTIAL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "476",
               "end_line": "484",
               "source_code": "                return sb.toString();\n\n            case OpTypes.MATCH_PARTIAL :\n                sb.append(left).append(' ').append(Tokens.T_MATCH).append(\n                    ' ').append(Tokens.PARTIAL).append(right);\n\n                return sb.toString();\n\n            case OpTypes.MATCH_FULL :"
           }

       },

       {
           "id": "clone_1290",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCDriver.java",
               "start_line": "463",
               "end_line": "472",
               "source_code": "        p          = new DriverPropertyInfo(\"default_schema\", null);\n        p.value    = info.getProperty(\"default_schema\", \"false\");\n        p.required = false;\n        p.choices  = choices;\n        pinfo[4]   = p;\n        p          = new DriverPropertyInfo(\"shutdown\", null);\n        p.value    = info.getProperty(\"shutdown\", \"false\");\n        p.required = false;\n        p.choices  = choices;\n        pinfo[5]   = p;"
           },

           "clone": {
               "file": "JDBCDriver.java",
               "start_line": "453",
               "end_line": "462",
               "source_code": "        p          = new DriverPropertyInfo(\"get_column_name\", null);\n        p.value    = info.getProperty(\"get_column_name\", \"true\");\n        p.required = false;\n        p.choices  = choices;\n        pinfo[2]   = p;\n        p          = new DriverPropertyInfo(\"ifexists\", null);\n        p.value    = info.getProperty(\"ifexists\", \"false\");\n        p.required = false;\n        p.choices  = choices;\n        pinfo[3]   = p;"
           }

       },

       {
           "id": "clone_1291",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6421",
               "end_line": "6428",
               "source_code": "        Session sys = database.sessionManager.newSysSession(\n            SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser());\n        String sql = (String) statementMap.get(\"/*sql_sizing*/\");\n        Result rs  = sys.executeDirectStatement(sql);\n\n        t.insertSys(session, store, rs);\n\n        return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6384",
               "end_line": "6391",
               "source_code": "        Session sys = database.sessionManager.newSysSession(\n            SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser());\n        String sql = (String) statementMap.get(\"/*sql_parts*/\");\n        Result rs  = sys.executeDirectStatement(sql);\n\n        t.insertSys(session, store, rs);\n\n        return t;"
           }

       },

       {
           "id": "clone_1292",

           "clone_type": "type-2",

           "origin": {
               "file": "Collation.java",
               "start_line": "118",
               "end_line": "164",
               "source_code": "        nameToJavaName.put(\"Latvian\", \"lv-LV\");\n        nameToJavaName.put(\"Maori\", \"mi-NZ\");\n        nameToJavaName.put(\"Macedonian\", \"mk-MK\");\n        nameToJavaName.put(\"Malayalam\", \"ml-IN\");\n        nameToJavaName.put(\"Mongolian\", \"mn-MN\");\n        nameToJavaName.put(\"Manipuri\", \"mni-IN\");\n        nameToJavaName.put(\"Marathi\", \"mr-IN\");\n        nameToJavaName.put(\"Malay\", \"ms-MY\");\n        nameToJavaName.put(\"Maltese\", \"mt-MT\");\n        nameToJavaName.put(\"Burmese\", \"my-MM\");\n        nameToJavaName.put(\"Danish_Norwegian\", \"nb-NO\");\n        nameToJavaName.put(\"Nepali\", \"ne-NP\");\n        nameToJavaName.put(\"Dutch\", \"nl-NL\");\n        nameToJavaName.put(\"Norwegian\", \"nn-NO\");\n        nameToJavaName.put(\"Oriya\", \"or-IN\");\n        nameToJavaName.put(\"Punjabi\", \"pa-IN\");\n        nameToJavaName.put(\"Polish\", \"pl-PL\");\n        nameToJavaName.put(\"Pashto\", \"ps-AF\");\n        nameToJavaName.put(\"Portuguese\", \"pt-PT\");\n        nameToJavaName.put(\"Romanian\", \"ro-RO\");\n        nameToJavaName.put(\"Russian\", \"ru-RU\");\n        nameToJavaName.put(\"Sanskrit\", \"sa-IN\");\n        nameToJavaName.put(\"Sindhi\", \"sd-IN\");\n        nameToJavaName.put(\"Slovak\", \"sk-SK\");\n        nameToJavaName.put(\"Slovenian\", \"sl-SI\");\n        nameToJavaName.put(\"Somali\", \"so-SO\");\n        nameToJavaName.put(\"Albanian\", \"sq-AL\");\n        nameToJavaName.put(\"Serbian_Cyrillic\", \"sr-YU\");\n        nameToJavaName.put(\"Serbian_Latin\", \"sh-BA\");\n        nameToJavaName.put(\"Swedish\", \"sv-SE\");\n        nameToJavaName.put(\"Swahili\", \"sw-KE\");\n        nameToJavaName.put(\"Tamil\", \"ta-IN\");\n        nameToJavaName.put(\"Telugu\", \"te-IN\");\n        nameToJavaName.put(\"Tajik\", \"tg-TJ\");\n        nameToJavaName.put(\"Thai\", \"th-TH\");\n        nameToJavaName.put(\"Turkmen\", \"tk-TM\");\n        nameToJavaName.put(\"Tswana\", \"tn-BW\");\n        nameToJavaName.put(\"Turkish\", \"tr-TR\");\n        nameToJavaName.put(\"Tatar\", \"tt-RU\");\n        nameToJavaName.put(\"Ukrainian\", \"uk-UA\");\n        nameToJavaName.put(\"Urdu\", \"ur-PK\");\n        nameToJavaName.put(\"Uzbek_Latin\", \"uz-UZ\");\n        nameToJavaName.put(\"Venda\", \"ven-ZA\");\n        nameToJavaName.put(\"Vietnamese\", \"vi-VN\");\n        nameToJavaName.put(\"Yoruba\", \"yo-NG\");\n        nameToJavaName.put(\"Chinese\", \"zh-CN\");\n        nameToJavaName.put(\"Zulu\", \"zu-ZA\");"
           },

           "clone": {
               "file": "Collation.java",
               "start_line": "71",
               "end_line": "117",
               "source_code": "        nameToJavaName.put(\"Amharic\", \"am-ET\");\n        nameToJavaName.put(\"Arabic\", \"ar\");\n        nameToJavaName.put(\"Assamese\", \"as-IN\");\n        nameToJavaName.put(\"Azerbaijani_Latin\", \"az-AZ\");\n        nameToJavaName.put(\"Azerbaijani_Cyrillic\", \"az-cyrillic\");\n        nameToJavaName.put(\"Belarusian\", \"be-BY\");\n        nameToJavaName.put(\"Bulgarian\", \"bg-BG\");\n        nameToJavaName.put(\"Bengali\", \"bn-IN\");\n        nameToJavaName.put(\"Tibetan\", \"bo-CN\");\n        nameToJavaName.put(\"Bosnian\", \"bs-BA\");\n        nameToJavaName.put(\"Catalan\", \"ca-ES\");\n        nameToJavaName.put(\"Czech\", \"cs-CZ\");\n        nameToJavaName.put(\"Welsh\", \"cy-GB\");\n        nameToJavaName.put(\"Danish\", \"da-DK\");\n        nameToJavaName.put(\"German\", \"de-DE\");\n        nameToJavaName.put(\"Greek\", \"el-GR\");\n        nameToJavaName.put(\"Latin1_General\", \"en-US\");\n        nameToJavaName.put(\"English\", \"en-US\");\n        nameToJavaName.put(\"Spanish\", \"es-ES\");\n        nameToJavaName.put(\"Estonian\", \"et-EE\");\n        nameToJavaName.put(\"Basque\", \"eu\");\n        nameToJavaName.put(\"Finnish\", \"fi-FI\");\n        nameToJavaName.put(\"French\", \"fr-FR\");\n        nameToJavaName.put(\"Guarani\", \"gn-PY\");\n        nameToJavaName.put(\"Gujarati\", \"gu-IN\");\n        nameToJavaName.put(\"Hausa\", \"ha-NG\");\n        nameToJavaName.put(\"Hebrew\", \"he-IL\");\n        nameToJavaName.put(\"Hindi\", \"hi-IN\");\n        nameToJavaName.put(\"Croatian\", \"hr-HR\");\n        nameToJavaName.put(\"Hungarian\", \"hu-HU\");\n        nameToJavaName.put(\"Armenian\", \"hy-AM\");\n        nameToJavaName.put(\"Indonesian\", \"id-ID\");\n        nameToJavaName.put(\"Igbo\", \"ig-NG\");\n        nameToJavaName.put(\"Icelandic\", \"is-IS\");\n        nameToJavaName.put(\"Italian\", \"it-IT\");\n        nameToJavaName.put(\"Inuktitut\", \"iu-CA\");\n        nameToJavaName.put(\"Japanese\", \"ja-JP\");\n        nameToJavaName.put(\"Georgian\", \"ka-GE\");\n        nameToJavaName.put(\"Kazakh\", \"kk-KZ\");\n        nameToJavaName.put(\"Khmer\", \"km-KH\");\n        nameToJavaName.put(\"Kannada\", \"kn-IN\");\n        nameToJavaName.put(\"Korean\", \"ko-KR\");\n        nameToJavaName.put(\"Konkani\", \"kok-IN\");\n        nameToJavaName.put(\"Kashmiri\", \"ks\");\n        nameToJavaName.put(\"Kirghiz\", \"ky-KG\");\n        nameToJavaName.put(\"Lao\", \"lo-LA\");\n        nameToJavaName.put(\"Lithuanian\", \"lt-LT\");"
           }

       },

       {
           "id": "clone_1293",

           "clone_type": "type-2",

           "origin": {
               "file": "Preprocessor.java",
               "start_line": "524",
               "end_line": "538",
               "source_code": "            case LineType.ELIF : {\n                processElseIf(this.defines.evaluate(line.getArguments()));\n\n                break;\n            }\n            case LineType.ELIFDEF : {\n                processElseIf(this.defines.isDefined(line.getArguments()));\n\n                break;\n            }\n            case LineType.ELIFNDEF : {\n                processElseIf(!this.defines.isDefined(line.getArguments()));\n\n                break;\n            }"
           },

           "clone": {
               "file": "Preprocessor.java",
               "start_line": "509",
               "end_line": "523",
               "source_code": "            case LineType.IF : {\n                processIf(this.defines.evaluate(line.getArguments()));\n\n                break;\n            }\n            case LineType.IFDEF : {\n                processIf(this.defines.isDefined(line.getArguments()));\n\n                break;\n            }\n            case LineType.IFNDEF : {\n                processIf(!this.defines.isDefined(line.getArguments()));\n\n                break;\n            }"
           }

       },

       {
           "id": "clone_1294",

           "clone_type": "type-2",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "284",
               "end_line": "292",
               "source_code": "                break;\n\n\n            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n                writeBinary((BinaryData) o);\n                break;\n\n            case Types.SQL_BIT :"
           },

           "clone": {
               "file": "RowOutputBase.java",
               "start_line": "207",
               "end_line": "214",
               "source_code": "                break;\n\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n                writeSmallint((Number) o);\n                break;\n\n            case Types.SQL_INTEGER :"
           }

       },

       {
           "id": "clone_1295",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2707",
               "end_line": "2716",
               "source_code": "        // column number mappings\n        final int type_catalog = 0;\n        final int type_schema  = 1;\n        final int type_name    = 2;\n        final int class_name   = 3;\n        final int data_type    = 4;\n        final int remarks      = 5;\n        final int base_type    = 6;\n        Iterator it =\n            database.schemaManager.databaseObjectIterator(SchemaObject.TYPE);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1853",
               "end_line": "1863",
               "source_code": "        final int procedure_name    = 2;\n        final int col_4             = 3;\n        final int col_5             = 4;\n        final int col_6             = 5;\n        final int remarks           = 6;\n        final int procedure_type    = 7;\n        final int specific_name     = 8;\n\n        //\n        Iterator it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SPECIFIC_ROUTINE);"
           }

       },

       {
           "id": "clone_1296",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5875",
               "end_line": "5921",
               "source_code": "        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;\n        final int last_altered                           = 55;\n        final int new_savepoint_level                    = 56;\n        final int is_udt_dependent                       = 57;\n        final int result_cast_from_data_type             = 58;\n        final int result_cast_as_locator                 = 59;\n        final int result_cast_char_max_length            = 60;\n        final int result_cast_char_octet_length          = 61;\n        final int result_cast_char_set_catalog           = 62;\n        final int result_cast_char_set_schema            = 63;\n        final int result_cast_character_set_name         = 64;\n        final int result_cast_collation_catalog          = 65;\n        final int result_cast_collation_schema           = 66;\n        final int result_cast_collation_name             = 67;\n        final int result_cast_numeric_precision          = 68;\n        final int result_cast_numeric_radix              = 69;\n        final int result_cast_numeric_scale              = 70;\n        final int result_cast_datetime_precision         = 71;\n        final int result_cast_interval_type              = 72;\n        final int result_cast_interval_precision         = 73;\n        final int result_cast_type_udt_catalog           = 74;\n        final int result_cast_type_udt_schema            = 75;\n        final int result_cast_type_udt_name              = 76;\n        final int result_cast_scope_catalog              = 77;\n        final int result_cast_scope_schema               = 78;\n        final int result_cast_scope_name                 = 79;\n        final int result_cast_max_cardinality            = 80;\n        final int result_cast_dtd_identifier             = 81;\n        final int declared_data_type                     = 82;\n        final int declared_numeric_precision             = 83;\n        final int declared_numeric_scale                 = 84;\n        final int result_cast_from_declared_data_type    = 85;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1297",

           "clone_type": "type-2",

           "origin": {
               "file": "Expression.java",
               "start_line": "123",
               "end_line": "137",
               "source_code": "        subqueryAggregateExpressionSet.add(OpTypes.COUNT);\n        subqueryAggregateExpressionSet.add(OpTypes.SUM);\n        subqueryAggregateExpressionSet.add(OpTypes.MIN);\n        subqueryAggregateExpressionSet.add(OpTypes.MAX);\n        subqueryAggregateExpressionSet.add(OpTypes.AVG);\n        subqueryAggregateExpressionSet.add(OpTypes.EVERY);\n        subqueryAggregateExpressionSet.add(OpTypes.SOME);\n        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_POP);\n        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_SAMP);\n        subqueryAggregateExpressionSet.add(OpTypes.VAR_POP);\n        subqueryAggregateExpressionSet.add(OpTypes.VAR_SAMP);\n        subqueryAggregateExpressionSet.add(OpTypes.GROUP_CONCAT);\n        subqueryAggregateExpressionSet.add(OpTypes.ARRAY_AGG);\n        subqueryAggregateExpressionSet.add(OpTypes.MEDIAN);\n        subqueryAggregateExpressionSet.add(OpTypes.USER_AGGREGATE);"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "87",
               "end_line": "101",
               "source_code": "        aggregateFunctionSet.add(OpTypes.COUNT);\n        aggregateFunctionSet.add(OpTypes.SUM);\n        aggregateFunctionSet.add(OpTypes.MIN);\n        aggregateFunctionSet.add(OpTypes.MAX);\n        aggregateFunctionSet.add(OpTypes.AVG);\n        aggregateFunctionSet.add(OpTypes.EVERY);\n        aggregateFunctionSet.add(OpTypes.SOME);\n        aggregateFunctionSet.add(OpTypes.STDDEV_POP);\n        aggregateFunctionSet.add(OpTypes.STDDEV_SAMP);\n        aggregateFunctionSet.add(OpTypes.VAR_POP);\n        aggregateFunctionSet.add(OpTypes.VAR_SAMP);\n        aggregateFunctionSet.add(OpTypes.GROUP_CONCAT);\n        aggregateFunctionSet.add(OpTypes.ARRAY_AGG);\n        aggregateFunctionSet.add(OpTypes.MEDIAN);\n        aggregateFunctionSet.add(OpTypes.USER_AGGREGATE);"
           }

       },

       {
           "id": "clone_1298",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "463",
               "end_line": "467",
               "source_code": "            ps.setString(1, \"test-id-3\");\n            ps.setLong(2, 23456789123458L);\n            ps.setCharacterStream(3, reader, 100);\n            ps.setString(4, \"test-scope-3\");\n            ps.addBatch();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "457",
               "end_line": "462",
               "source_code": "            //\n            ps.setString(1, \"test-id-2\");\n            ps.setLong(2, 23456789123457L);\n            ps.setCharacterStream(3, reader, 100);\n            ps.setString(4, \"test-scope-2\");\n            ps.addBatch();"
           }

       },

       {
           "id": "clone_1299",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcService.java",
               "start_line": "111",
               "end_line": "121",
               "source_code": "            ps.setInt(1, 16);\n            ps.setInt(2, 100);\n            rs = ps.executeQuery();\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(5, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"five\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcService.java",
               "start_line": "92",
               "end_line": "102",
               "source_code": "            ps.setInt(1, 10);\n            ps.setInt(2, 30);\n            rs = ps.executeQuery();\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(5, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"five\", rs.getString(3));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());"
           }

       },

       {
           "id": "clone_1300",

           "clone_type": "type-2",

           "origin": {
               "file": "SetFunction.java",
               "start_line": "264",
               "end_line": "269",
               "source_code": "                return;\n\n            case OpTypes.STDDEV_POP :\n            case OpTypes.STDDEV_SAMP :\n            case OpTypes.VAR_POP :\n            case OpTypes.VAR_SAMP :"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4218",
               "end_line": "4222",
               "source_code": "                return;\n            case Types.SQL_DATE :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIME :"
           }

       },

       {
           "id": "clone_1301",

           "clone_type": "type-2",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "238",
               "end_line": "249",
               "source_code": "            char[] pattern, long offset) {\n\n        ResultLob result = new ResultLob();\n\n        result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;\n        result.lobID       = id;\n        result.blockOffset = offset;\n        result.charBlock   = pattern;\n        result.blockLength = pattern.length;\n\n        return result;\n    }"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "212",
               "end_line": "223",
               "source_code": "            byte[] pattern, long offset) {\n\n        ResultLob result = new ResultLob();\n\n        result.subType     = LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION;\n        result.lobID       = id;\n        result.blockOffset = offset;\n        result.byteBlock   = pattern;\n        result.blockLength = pattern.length;\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_1302",

           "clone_type": "type-2",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1553",
               "end_line": "1560",
               "source_code": "                if (charAt(currentPosition + 1) == '|') {\n                    token.tokenString = Tokens.T_CONCAT;\n                    token.tokenType   = Tokens.CONCAT;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1534",
               "end_line": "1541",
               "source_code": "                if (charAt(currentPosition + 1) == '=') {\n                    token.tokenString = Tokens.T_GREATER_EQUALS;\n                    token.tokenType   = Tokens.GREATER_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           }

       },

       {
           "id": "clone_1303",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1569",
               "end_line": "1614",
               "source_code": "        byte[] ba1, ba2;\n\n        try {\n            ps = netConn.prepareStatement(\n                \"INSERT INTO alltypes(id, vb) VALUES(?, ?)\");\n            ps.setInt(1, 3);\n            ps.setBytes(2, expectedBytes);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();\n            ps = netConn.prepareStatement(\n                \"SELECT * FROM alltypes WHERE vb = ?\");\n            ps.setBytes(1, expectedBytes);\n            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with vb = b'AA99'\", rs.next());\n            ba1 = rs.getBytes(\"vb\");\n            assertTrue(\"Got only one row with vb = b'AA99'\", rs.next());\n            ba2 = rs.getBytes(\"vb\");\n            assertFalse(\"Got too many rows with vb = b'AA99'\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n        }"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1517",
               "end_line": "1562",
               "source_code": "        byte[] ba1, ba2;\n\n        try {\n            ps = netConn.prepareStatement(\n                \"INSERT INTO alltypes(id, bin) VALUES(?, ?)\");\n            ps.setInt(1, 3);\n            ps.setBytes(2, expectedBytes);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();\n            ps = netConn.prepareStatement(\n                \"SELECT * FROM alltypes WHERE bin = ?\");\n            ps.setBytes(1, expectedBytes);\n            rs = ps.executeQuery();\n            assertTrue(\"Got no rows with bin = b'AA99'\", rs.next());\n            ba1 = rs.getBytes(\"bin\");\n            assertTrue(\"Got only one row with bin = b'AA99'\", rs.next());\n            ba2 = rs.getBytes(\"bin\");\n            assertFalse(\"Got too many rows with bin = b'AA99'\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n        }"
           }

       },

       {
           "id": "clone_1304",

           "clone_type": "type-2",

           "origin": {
               "file": "PersistentStoreCollectionSession.java",
               "start_line": "91",
               "end_line": "106",
               "source_code": "            case TableBase.SCOPE_TRANSACTION :\n                if (store == null) {\n                    rowStoreMapTransaction.remove(table.getPersistenceId());\n                } else {\n                    rowStoreMapTransaction.put(table.getPersistenceId(),\n                                               store);\n                }\n                break;\n\n            case TableBase.SCOPE_SESSION :\n                if (store == null) {\n                    rowStoreMapSession.remove(table.getPersistenceId());\n                } else {\n                    rowStoreMapSession.put(table.getPersistenceId(), store);\n                }\n                break;"
           },

           "clone": {
               "file": "PersistentStoreCollectionSession.java",
               "start_line": "73",
               "end_line": "87",
               "source_code": "            case TableBase.SCOPE_ROUTINE :\n                if (store == null) {\n                    rowStoreMapRoutine.remove(table.getPersistenceId());\n                } else {\n                    rowStoreMapRoutine.put(table.getPersistenceId(), store);\n                }\n                break;\n\n            case TableBase.SCOPE_STATEMENT :\n                if (store == null) {\n                    rowStoreMapStatement.remove(table.getPersistenceId());\n                } else {\n                    rowStoreMapStatement.put(table.getPersistenceId(), store);\n                }\n                break;"
           }

       },

       {
           "id": "clone_1305",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2183",
               "end_line": "2188",
               "source_code": "            case Tokens.PLUS :\n                read();\n                break;\n\n            case Tokens.MINUS :\n                read();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "5137",
               "end_line": "5142",
               "source_code": "            case Tokens.CLOSE :\n                read();\n                break;\n\n            case Tokens.RELEASE :\n                read();"
           }

       },

       {
           "id": "clone_1306",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "2070",
               "end_line": "2080",
               "source_code": "                case Tokens.COMPRESSED :\n                    if (compression != null) {\n                        throw unexpectedToken();\n                    }\n\n                    compression = Boolean.TRUE;\n\n                    read();\n                    break;\n\n                case Tokens.NOT :"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "2050",
               "end_line": "2060",
               "source_code": "                case Tokens.BLOCKING :\n                    if (blockingMode != null) {\n                        throw unexpectedToken();\n                    }\n\n                    blockingMode = Boolean.TRUE;\n\n                    read();\n                    break;\n\n                case Tokens.SCRIPT :"
           }

       },

       {
           "id": "clone_1307",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1620",
               "end_line": "1638",
               "source_code": "            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not null\n            addColumn(t, \"PRECISION\", Type.SQL_INTEGER);            // 7\n            addColumn(t, \"LENGTH\", Type.SQL_INTEGER);               // 8\n            addColumn(t, \"SCALE\", Type.SQL_SMALLINT);               // 9\n            addColumn(t, \"RADIX\", Type.SQL_SMALLINT);               // 10\n            addColumn(t, \"NULLABLE\", Type.SQL_SMALLINT);            // not null\n            addColumn(t, \"REMARKS\", CHARACTER_DATA);                // 12\n\n            // ----------------------------------------------------------------\n            // JDBC 4.0\n            // ----------------------------------------------------------------\n            addColumn(t, \"COLUMN_DEF\", CHARACTER_DATA);             // 13\n            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);        // 14\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);     // 15\n            addColumn(t, \"CHAR_OCTET_LENGTH\", Type.SQL_INTEGER);    // 16\n            addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // 17\n            addColumn(t, \"IS_NULLABLE\", CHARACTER_DATA);            // 18\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);          // 19"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "838",
               "end_line": "852",
               "source_code": "            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not null\n            addColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);          // 6\n            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);        // 7\n            addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_INTEGER);       // 8\n            addColumn(t, \"NUM_PREC_RADIX\", Type.SQL_INTEGER);       // 9\n            addColumn(t, \"NULLABLE\", Type.SQL_INTEGER);             // not null\n            addColumn(t, \"REMARKS\", CHARACTER_DATA);                // 11\n            addColumn(t, \"COLUMN_DEF\", CHARACTER_DATA);             // 12\n            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);        // 13\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);     // 14\n            addColumn(t, \"CHAR_OCTET_LENGTH\", Type.SQL_INTEGER);    // 15\n            addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // not null\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);                 // not null\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);          // 18"
           }

       },

       {
           "id": "clone_1308",

           "clone_type": "type-2",

           "origin": {
               "file": "TestAcl.java",
               "start_line": "152",
               "end_line": "183",
               "source_code": "        acls.clear();\n\n        file = File.createTempFile(\"aclPermitLocalNet1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Permit Local Net test ACL\n\");\n        pw.println(\"permit 127.0.0.0/24\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclPermitLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclPermitLocalNets.length; i++) {\n                aclPermitLocalNets[i].setPrintWriter(\n                    new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclDenyLocalNet1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Deny Local Net test ACL\n\");\n        pw.println(\"deny 127.0.0.0/24\");"
           },

           "clone": {
               "file": "TestAcl.java",
               "start_line": "98",
               "end_line": "128",
               "source_code": "        acls.clear();\n\n        file = File.createTempFile(\"aclDenyAll1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Deny all test ACL\n\");\n        pw.println(\"deny 0.0.0.0/0\");\n        pw.close();\n        acls.add(new ServerAcl(file));\n\n        aclDenyAlls = (ServerAcl[]) acls.toArray(new ServerAcl[0]);\n\n        if (verbose) {\n            for (int i = 0; i < aclDenyAlls.length; i++) {\n                aclDenyAlls[i].setPrintWriter(new PrintWriter(System.out));\n            }\n        }\n\n        acls.clear();\n\n        file = File.createTempFile(\"aclPermitLocalhost1\", \".txt\");\n\n        file.deleteOnExit();\n\n        pw = new PrintWriter(new FileWriter(file));\n\n        pw.println(\"# Permit Localhost test ACL\n\");\n        pw.println(\"permit 127.0.0.1\");"
           }

       },

       {
           "id": "clone_1309",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5844",
               "end_line": "5890",
               "source_code": "        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;\n        final int as_locator                             = 53;\n        final int created                                = 54;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1310",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6223",
               "end_line": "6229",
               "source_code": "            row[default_character_set_catalog] =\n                database.getCatalogName().name;\n            row[default_character_set_schema] = dcsSchema;\n            row[default_character_set_name]   = dcsName;\n            row[sql_path]                     = sqlPath;\n\n            t.insertSys(session, store, row);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2153",
               "end_line": "2158",
               "source_code": "            row[collation_catalog] = database.getCatalogName().name;\n            row[collation_schema]  = collationSchema;\n            row[collation_name]    = collationName;\n            row[pad_attribute]     = padAttribute;\n\n            t.insertSys(session, store, row);"
           }

       },

       {
           "id": "clone_1311",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "115",
               "end_line": "124",
               "source_code": "                return (int) precision + 4;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                return (int) precision + 7 + (scale == 0 ? 0\n                                                         : scale + 1);\n\n            case Types.SQL_INTERVAL_MINUTE :\n                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :"
           },

           "clone": {
               "file": "IntervalType.java",
               "start_line": "105",
               "end_line": "114",
               "source_code": "                return (int) precision + 7;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                return (int) precision + 10 + (scale == 0 ? 0\n                                                          : scale + 1);\n\n            case Types.SQL_INTERVAL_HOUR :\n                return (int) precision + 1;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :"
           }

       },

       {
           "id": "clone_1312",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "348",
               "end_line": "376",
               "source_code": "            case SchemaObject.DOMAIN :\n                return Tokens.T_DOMAIN;\n\n            case SchemaObject.TYPE :\n                return Tokens.T_TYPE;\n\n            case SchemaObject.CONSTRAINT :\n                return Tokens.T_CONSTRAINT;\n\n            case SchemaObject.COLLATION :\n                return Tokens.T_COLLATION;\n\n            case SchemaObject.PROCEDURE :\n                return Tokens.T_PROCEDURE;\n\n            case SchemaObject.FUNCTION :\n                return Tokens.T_FUNCTION;\n\n            case SchemaObject.ASSERTION :\n                return Tokens.T_ASSERTION;\n\n            case SchemaObject.INDEX :\n                return Tokens.T_INDEX;\n\n            case SchemaObject.TRIGGER :\n                return Tokens.T_TRIGGER;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "300",
               "end_line": "328",
               "source_code": "            case Types.TINYINT :\n                return Tokens.T_TINYINT;\n\n            case Types.SQL_SMALLINT :\n                return Tokens.T_SMALLINT;\n\n            case Types.SQL_INTEGER :\n                return Tokens.T_INTEGER;\n\n            case Types.SQL_BIGINT :\n                return Tokens.T_BIGINT;\n\n            case Types.SQL_REAL :\n                return Tokens.T_REAL;\n\n            case Types.SQL_FLOAT :\n                return Tokens.T_FLOAT;\n\n            case Types.SQL_DOUBLE :\n                return Tokens.T_DOUBLE;\n\n            case Types.SQL_NUMERIC :\n                return Tokens.T_NUMERIC;\n\n            case Types.SQL_DECIMAL :\n                return Tokens.T_DECIMAL;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
           }

       },

       {
           "id": "clone_1313",

           "clone_type": "type-2",

           "origin": {
               "file": "CharacterType.java",
               "start_line": "154",
               "end_line": "160",
               "source_code": "            case Types.SQL_VARCHAR :\n                return \"CHARACTER VARYING\";\n\n            case Types.SQL_CLOB :\n                return \"CHARACTER LARGE OBJECT\";\n\n            default :"
           },

           "clone": {
               "file": "DITableInfo.java",
               "start_line": "230",
               "end_line": "236",
               "source_code": "            case TableBase.TEMP_TEXT_TABLE :\n                return \"GLOBAL TEMPORARY\";\n\n            case TableBase.INFO_SCHEMA_TABLE :\n                return \"SYSTEM TABLE\";\n\n            default :"
           }

       },

       {
           "id": "clone_1314",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "298",
               "end_line": "327",
               "source_code": "    static int getGetErrorCode(int type) {\n\n        int code;\n\n        switch (type) {\n\n            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.COLUMN :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.CONSTRAINT :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.ASSERTION :\n            case SchemaObject.INDEX :\n            case SchemaObject.TRIGGER :\n                code = ErrorCode.X_42501;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");\n        }\n\n        return code;\n    }"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "267",
               "end_line": "296",
               "source_code": "    static int getAddErrorCode(int type) {\n\n        int code;\n\n        switch (type) {\n\n            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.COLUMN :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.CONSTRAINT :\n            case SchemaObject.ASSERTION :\n            case SchemaObject.INDEX :\n            case SchemaObject.TRIGGER :\n                code = ErrorCode.X_42504;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");\n        }\n\n        return code;\n    }"
           }

       },

       {
           "id": "clone_1315",

           "clone_type": "type-2",

           "origin": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "218",
               "end_line": "249",
               "source_code": "// --\n        sql = \"select count(*) from test where left(name,5) = 'name4' and right(name,1) = '5'\";\n        rs = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like 'name4%5'\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n        sql = \"select count(*) from test\";\n        rs  = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like '%'\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "183",
               "end_line": "216",
               "source_code": "// --\n// --\n        sql = \"select count(*) from test where name is not null\";\n        rs  = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like '%'\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);\n\n// --\n        sql = \"select count(*) from test where substring(name from 1 for 6) = 'name44'\";\n        rs = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like 'name44%'\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_1316",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcService.java",
               "start_line": "172",
               "end_line": "181",
               "source_code": "        assertEquals(\"str\", rs.getString(4));\n\n        assertTrue(\"Not enough rows fetched\", rs.next());\n        assertEquals(\"str\", rs.getString(4));\n        assertEquals(3, rs.getInt(2));\n        assertEquals(40, rs.getInt(1));\n        assertEquals(\"forty\", rs.getString(3));\n\n        assertFalse(\"Too many rows fetched\", rs.next());\n        rs.close();"
           },

           "clone": {
               "file": "TestOdbcService.java",
               "start_line": "125",
               "end_line": "134",
               "source_code": "            assertEquals(\"ten\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(15, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"fifteen\", rs.getString(3));\n\n            assertFalse(\"Too many rows fetched\", rs.next());\n            rs.close();"
           }

       },

       {
           "id": "clone_1317",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5842",
               "end_line": "5888",
               "source_code": "        final int routine_type                           = 6;\n        final int module_catalog                         = 7;\n        final int module_schema                          = 8;\n        final int module_name                            = 9;\n        final int udt_catalog                            = 10;\n        final int udt_schema                             = 11;\n        final int udt_name                               = 12;\n        final int data_type                              = 13;\n        final int character_maximum_length               = 14;\n        final int character_octet_length                 = 15;\n        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;\n        final int numeric_precision                      = 22;\n        final int numeric_precision_radix                = 23;\n        final int numeric_scale                          = 24;\n        final int datetime_precision                     = 25;\n        final int interval_type                          = 26;\n        final int interval_precision                     = 27;\n        final int type_udt_catalog                       = 28;\n        final int type_udt_schema                        = 29;\n        final int type_udt_name                          = 30;\n        final int scope_catalog                          = 31;\n        final int scope_schema                           = 32;\n        final int scope_name                             = 33;\n        final int maximum_cardinality                    = 34;\n        final int dtd_identifier                         = 35;\n        final int routine_body                           = 36;\n        final int routine_definition                     = 37;\n        final int external_name                          = 38;\n        final int external_language                      = 39;\n        final int parameter_style                        = 40;\n        final int is_deterministic                       = 41;\n        final int sql_data_access                        = 42;\n        final int is_null_call                           = 43;\n        final int sql_path                               = 44;\n        final int schema_level_routine                   = 45;\n        final int max_dynamic_result_sets                = 46;\n        final int is_user_defined_cast                   = 47;\n        final int is_implicitly_invocable                = 48;\n        final int security_type                          = 49;\n        final int to_sql_specific_catalog                = 50;\n        final int to_sql_specific_schema                 = 51;\n        final int to_sql_specific_name                   = 52;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2595",
               "end_line": "2642",
               "source_code": "        // column number mappings\n        final int table_cat                  = 0;\n        final int table_schem                = 1;\n        final int table_name                 = 2;\n        final int column_name                = 3;\n        final int ordinal_position           = 4;\n        final int column_default             = 5;\n        final int is_nullable                = 6;\n        final int data_type                  = 7;\n        final int character_maximum_length   = 8;\n        final int character_octet_length     = 9;\n        final int numeric_precision          = 10;\n        final int numeric_precision_radix    = 11;\n        final int numeric_scale              = 12;\n        final int datetime_precision         = 13;\n        final int interval_type              = 14;\n        final int interval_precision         = 15;\n        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;\n        final int domain_catalog             = 22;\n        final int domain_schema              = 23;\n        final int domain_name                = 24;\n        final int udt_catalog                = 25;\n        final int udt_schema                 = 26;\n        final int udt_name                   = 27;\n        final int scope_catalog              = 28;\n        final int scope_schema               = 29;\n        final int scope_name                 = 30;\n        final int maximum_cardinality        = 31;\n        final int dtd_identifier             = 32;\n        final int is_self_referencing        = 33;\n        final int is_identity                = 34;\n        final int identity_generation        = 35;\n        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;"
           }

       },

       {
           "id": "clone_1318",

           "clone_type": "type-2",

           "origin": {
               "file": "Log.java",
               "start_line": "159",
               "end_line": "164",
               "source_code": "                break;\n\n            case HsqlDatabaseProperties.FILES_MODIFIED_NEW :\n                database.logger.logInfoEvent(\"open start - state new files\");\n                renameNewDataFile();\n                renameNewScript();"
           },

           "clone": {
               "file": "Log.java",
               "start_line": "133",
               "end_line": "138",
               "source_code": "                break;\n\n            case HsqlDatabaseProperties.FILES_MODIFIED :\n                database.logger.logInfoEvent(\"open start - state modified\");\n                deleteNewAndOldFiles();\n                deleteOldTempFiles();"
           }

       },

       {
           "id": "clone_1319",

           "clone_type": "type-2",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "5452",
               "end_line": "5463",
               "source_code": "                    case java.sql.Types.VARCHAR :\n                    case java.sql.Types.BLOB :\n                    case java.sql.Types.CLOB :\n                    case java.sql.Types.LONGVARCHAR :\n                        autonulls[i] = false;\n                        // This means to preserve white space and to insert\n                        // \"\" for \"\".  Otherwise we trim white space and\n                        // insert null for \\s*.\n                        break;\n                    case java.sql.Types.DATE:\n                    case java.sql.Types.TIME:\n                    case java.sql.Types.TIMESTAMP:"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "3852",
               "end_line": "3861",
               "source_code": "                        case java.sql.Types.NUMERIC :\n                        case java.sql.Types.REAL :\n                        case java.sql.Types.SMALLINT :\n                        case java.sql.Types.TINYINT :\n                            rightJust[insi] = true;\n                            break;\n\n                        case java.sql.Types.VARBINARY :\n                        case java.sql.Types.VARCHAR :\n                        case java.sql.Types.BLOB :"
           }

       },

       {
           "id": "clone_1320",

           "clone_type": "type-2",

           "origin": {
               "file": "TestSchemaParse.java",
               "start_line": "838",
               "end_line": "844",
               "source_code": "        execSQL(\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true);        // reset\n        execSQL(\"ALTER TABLE foreigntbl ADD CONSTRAINT tstfk \" + pref\n                + \"FOREIGN KEY \" + \"(i7) REFERENCES primarytbl (i8)\", expect);\n        execSQL(\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true);        // reset\n        execSQL(\"ALTER TABLE foreigntbl ADD CONSTRAINT tstfk FOREIGN \" + pref\n                + \"KEY \" + \"(i7) REFERENCES primarytbl (i8)\", expect);\n        execSQL(\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true);        // reset"
           },

           "clone": {
               "file": "TestSchemaParse.java",
               "start_line": "826",
               "end_line": "834",
               "source_code": "        execSQL(\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true);        // reset\n        execSQL(\"ALTER \" + pref\n                + \"TABLE foreigntbl ADD CONSTRAINT tstfk FOREIGN KEY \"\n                + \"(i7) REFERENCES primarytbl (i8)\", expect);\n        execSQL(\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true);        // reset\n        execSQL(\"ALTER TABLE foreigntbl \" + pref\n                + \"ADD CONSTRAINT tstfk FOREIGN KEY \"\n                + \"(i7) REFERENCES primarytbl (i8)\", expect);\n        execSQL(\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true);        // reset"
           }

       },

       {
           "id": "clone_1321",

           "clone_type": "type-2",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "1355",
               "end_line": "1385",
               "source_code": "            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR :\n                endType = Types.SQL_INTERVAL_HOUR;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE :\n                endType = Types.SQL_INTERVAL_MINUTE;\n                break;\n\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;\n\n            case Types.SQL_INTERVAL_SECOND :\n                endType = Types.SQL_INTERVAL_SECOND;\n                break;"
           },

           "clone": {
               "file": "ParserBase.java",
               "start_line": "251",
               "end_line": "281",
               "source_code": "                case Tokens.X_MALFORMED_BINARY_STRING :\n                    errorCode = ErrorCode.X_42587;\n                    break;\n\n                case Tokens.X_MALFORMED_BIT_STRING :\n                    errorCode = ErrorCode.X_42588;\n                    break;\n\n                case Tokens.X_MALFORMED_UNICODE_STRING :\n                    errorCode = ErrorCode.X_42586;\n                    break;\n\n                case Tokens.X_MALFORMED_STRING :\n                    errorCode = ErrorCode.X_42584;\n                    break;\n\n                case Tokens.X_UNKNOWN_TOKEN :\n                    errorCode = ErrorCode.X_42582;\n                    break;\n\n                case Tokens.X_MALFORMED_NUMERIC :\n                    errorCode = ErrorCode.X_42585;\n                    break;\n\n                case Tokens.X_MALFORMED_COMMENT :\n                    errorCode = ErrorCode.X_42589;\n                    break;\n\n                case Tokens.X_MALFORMED_IDENTIFIER :\n                    errorCode = ErrorCode.X_42583;\n                    break;"
           }

       },

       {
           "id": "clone_1322",

           "clone_type": "type-2",

           "origin": {
               "file": "Charset.java",
               "start_line": "121",
               "end_line": "151",
               "source_code": "        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"ASCII_FULL\", false,\n                SchemaObject.CHARSET);\n        ASCII_FULL = new Charset(name);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"ISO8BIT\", false,\n                SchemaObject.CHARSET);\n        ISO8BIT = new Charset(name);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"UTF32\", false,\n                SchemaObject.CHARSET);\n        UTF32 = new Charset(name);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"UTF16\", false,\n                SchemaObject.CHARSET);\n        UTF16 = new Charset(name);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"UTF8\", false,\n                SchemaObject.CHARSET);\n        UTF8 = new Charset(name);\n        /*\n         * Foundattion 4.2.1\n         * Character sets defined by standards or by SQL-implementations reside\n         * in the Information Schema (named INFORMATION_SCHEMA) in each catalog,\n         * as do collations defined by standards and collations,\n         * transliterations, and transcodings defined by SQL implementations.\n         */"
           },

           "clone": {
               "file": "Charset.java",
               "start_line": "96",
               "end_line": "119",
               "source_code": "        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"SQL_IDENTIFIER\",\n                false, SchemaObject.CHARSET);\n        SQL_IDENTIFIER_CHARSET = new Charset(name);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"SQL_CHARACTER\", false,\n                SchemaObject.CHARSET);\n        SQL_CHARACTER = new Charset(name);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"LATIN1\", false,\n                SchemaObject.CHARSET);\n        LATIN1 = new Charset(name);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"ASCII_GRAPHIC\", false,\n                SchemaObject.CHARSET);\n        ASCII_GRAPHIC = new Charset(name);\n\n        //\n        name = HsqlNameManager.newInfoSchemaObjectName(\"GRAPHIC_IRV\", false,\n                SchemaObject.CHARSET);\n        GRAPHIC_IRV = new Charset(name);"
           }

       },

       {
           "id": "clone_1323",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "1024",
               "end_line": "1030",
               "source_code": "                    Query += \"SET    Bbalance = Bbalance + \" + delta + \" \";\n                    Query += \"WHERE  Bid = \" + bid;\n\n                    Stmt.executeUpdate(Query);\n                    Stmt.clearWarnings();\n\n                    Query = \"INSERT INTO history(Tid, Bid, Aid, delta) \";"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "1017",
               "end_line": "1023",
               "source_code": "                    Query += \"SET    Tbalance = Tbalance + \" + delta + \" \";\n                    Query += \"WHERE  Tid = \" + tid;\n\n                    Stmt.executeUpdate(Query);\n                    Stmt.clearWarnings();\n\n                    Query = \"UPDATE branches \";"
           }

       },

       {
           "id": "clone_1324",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7683",
               "end_line": "7707",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[USAGE_PRIVILEGES]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null\n\n            // order: COLUMN_NAME, PRIVILEGE\n            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEM, TABLE_CAT\n            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[USAGE_PRIVILEGES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6, 7\n            }, false);\n\n            return t;\n        }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4972",
               "end_line": "4993",
               "source_code": "        if (t == null) {\n            t = createBlankTable(sysTableHsqlNames[ROLE_USAGE_GRANTS]);\n\n            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROLE_USAGE_GRANTS].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 3, 4, 5, 6, 7\n            }, false);\n\n            return t;\n        }"
           }

       },

       {
           "id": "clone_1325",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "1338",
               "end_line": "1343",
               "source_code": "                case Tokens.INNER :\n                    read();\n                    readThis(Tokens.JOIN);\n                    break;\n\n                case Tokens.CROSS :"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "5103",
               "end_line": "5108",
               "source_code": "                case Tokens.RESULT :\n                    read();\n                    readThis(Tokens.SETS);\n                    break;\n\n                case Tokens.TABLE :"
           }

       },

       {
           "id": "clone_1326",

           "clone_type": "type-2",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "525",
               "end_line": "535",
               "source_code": "            Query += \"Aid         INTEGER, \";\n            Query += \"delta       INTEGER, \";\n            Query += \"tstime        TIMESTAMP, \";\n            Query += \"filler      CHAR(22))\";    /* pad to 50 bytes  */\n\n            if (createExtension.length() > 0) {\n                Query += createExtension;\n            }\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           },

           "clone": {
               "file": "JDBCBench.java",
               "start_line": "505",
               "end_line": "515",
               "source_code": "            Query += \"Aid         INTEGER NOT NULL PRIMARY KEY, \";\n            Query += \"Bid         INTEGER, \";\n            Query += \"Abalance    INTEGER, \";\n            Query += \"filler      CHAR(84))\";    /* pad to 100 bytes */\n\n            if (createExtension.length() > 0) {\n                Query += createExtension;\n            }\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           }

       },

       {
           "id": "clone_1327",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5770",
               "end_line": "5816",
               "source_code": "            addColumn(t, \"ROUTINE_DEFINITION\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"PARAMETER_STYLE\", CHARACTER_DATA);\n            addColumn(t, \"IS_DETERMINISTIC\", YES_OR_NO);\n            addColumn(t, \"SQL_DATA_ACCESS\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULL_CALL\", YES_OR_NO);\n            addColumn(t, \"SQL_PATH\", CHARACTER_DATA);\n            addColumn(t, \"SCHEMA_LEVEL_ROUTINE\", YES_OR_NO);           //\n            addColumn(t, \"MAX_DYNAMIC_RESULT_SETS\", CARDINAL_NUMBER);\n            addColumn(t, \"IS_USER_DEFINED_CAST\", YES_OR_NO);\n            addColumn(t, \"IS_IMPLICITLY_INVOCABLE\", YES_OR_NO);\n            addColumn(t, \"SECURITY_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //\n            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2580",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);\n            addColumn(t, \"COLUMN_DEFAULT\", CHARACTER_DATA);\n            addColumn(t, \"IS_NULLABLE\", YES_OR_NO);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);      //10\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_SELF_REFERENCING\", YES_OR_NO);\n            addColumn(t, \"IS_IDENTITY\", YES_OR_NO);\n            addColumn(t, \"IDENTITY_GENERATION\", CHARACTER_DATA);     // ALWAYS / BY DEFAULT\n            addColumn(t, \"IDENTITY_START\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MAXIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_MINIMUM\", CHARACTER_DATA);\n            addColumn(t, \"IDENTITY_CYCLE\", YES_OR_NO);               //40\n            addColumn(t, \"IS_GENERATED\", CHARACTER_DATA);            // ALWAYS / NEVER\n            addColumn(t, \"GENERATION_EXPRESSION\", CHARACTER_DATA);\n            addColumn(t, \"IS_UPDATABLE\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_1328",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3573",
               "end_line": "3597",
               "source_code": "        final int object_catalog             = 0;\n        final int object_schema              = 1;\n        final int object_name                = 2;\n        final int object_type                = 3;\n        final int collection_type_identifier = 4;\n\n        //\n        final int udt_catalog   = 20;\n        final int udt_schema    = 21;\n        final int udt_name      = 22;\n        final int scope_catalog = 23;\n        final int scope_schema  = 24;\n        final int scope_name    = 25;\n\n        //\n        // intermediate holders\n        int            columnCount;\n        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        OrderedHashSet columnList;\n        Type           type;\n\n        // Initialization\n        tables = allTables();"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2632",
               "end_line": "2654",
               "source_code": "        final int identity_start             = 36;\n        final int identity_increment         = 37;\n        final int identity_maximum           = 38;\n        final int identity_minimum           = 39;\n        final int identity_cycle             = 40;\n        final int is_generated               = 41;\n        final int generation_expression      = 42;\n        final int is_updatable               = 43;\n        final int declared_data_type         = 44;\n        final int declared_numeric_precision = 45;\n        final int declared_numeric_scale     = 46;\n\n        //\n        // intermediate holders\n        int            columnCount;\n        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        OrderedHashSet columnList;\n        Type           type;\n\n        // Initialization\n        tables = allTables();"
           }

       },

       {
           "id": "clone_1329",

           "clone_type": "type-2",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "866",
               "end_line": "870",
               "source_code": "            assertTrue(\"Got no rows with i = 495\", rs.next());\n            assertEquals(Integer.class, rs.getObject(\"i\").getClass());\n            assertTrue(\"Got only one row with i = 495\", rs.next());\n            assertEquals(495, rs.getInt(\"i\"));\n            assertFalse(\"Got too many rows with i = 495\", rs.next());"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "149",
               "end_line": "153",
               "source_code": "            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());\n            assertEquals(Integer.class, rs.getObject(\"i\").getClass());\n            assertTrue(\"Got only one row with id in (1, 2)\", rs.next());\n            assertEquals(5, rs.getInt(\"i\"));\n            assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());"
           }

       },

       {
           "id": "clone_1330",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6581",
               "end_line": "6597",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[TABLE_CONSTRAINTS]);\n\n            addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"CONSTRAINT_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);         // not null\n            addColumn(t, \"IS_DEFERRABLE\", YES_OR_NO);           // not null\n            addColumn(t, \"INITIALLY_DEFERRED\", YES_OR_NO);      // not null\n\n            // false PK, as CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA,\n            // TABLE_CATALOG and/or TABLE_SCHEMA may be null\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[TABLE_CONSTRAINTS].name, false,\n                SchemaObject.INDEX);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5643",
               "end_line": "5657",
               "source_code": "            t = createBlankTable(sysTableHsqlNames[ROUTINE_TABLE_USAGE]);\n\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINE_TABLE_USAGE].name, false,\n                SchemaObject.INDEX);"
           }

       },

       {
           "id": "clone_1331",

           "clone_type": "type-2",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3617",
               "end_line": "3622",
               "source_code": "            case Tokens.UNIQUE :\n                return XreadPredicate();\n\n            case Tokens.ROW :\n                read();\n                readThis(Tokens.OPENBRACKET);"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "212",
               "end_line": "218",
               "source_code": "            case Tokens.COLLATION :\n                return compileCreateCollation();\n\n            // index\n            case Tokens.UNIQUE :\n                read();\n                checkIsThis(Tokens.INDEX);"
           }

       },

       {
           "id": "clone_1332",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "224",
               "end_line": "231",
               "source_code": "                return sb.toString();\n\n            case OpTypes.ALTERNATIVE :\n                sb.append(left).append(',').append(right);\n\n                return sb.toString();\n\n            case OpTypes.LIMIT :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "433",
               "end_line": "440",
               "source_code": "                return sb.toString();\n\n            case OpTypes.SMALLER :\n                sb.append(left).append('<').append(right);\n\n                return sb.toString();\n\n            case OpTypes.SMALLER_EQUAL :"
           }

       },

       {
           "id": "clone_1333",

           "clone_type": "type-2",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "1916",
               "end_line": "1922",
               "source_code": "                case SchemaObject.FUNCTION :\n                    return schema.functionLookup.getObject(name.name);\n\n                case RoutineSchema.SPECIFIC_ROUTINE :\n                    return schema.specificRoutineLookup.getObject(name.name);\n\n                case RoutineSchema.ROUTINE :"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "1907",
               "end_line": "1913",
               "source_code": "                case SchemaObject.CHARSET :\n                    return schema.charsetLookup.getObject(name.name);\n\n                case SchemaObject.COLLATION :\n                    return schema.collationLookup.getObject(name.name);\n\n                case SchemaObject.PROCEDURE :"
           }

       },

       {
           "id": "clone_1334",

           "clone_type": "type-2",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "455",
               "end_line": "468",
               "source_code": "        conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n\n        Statement st = conn.createStatement();\n        ResultSet rs = st.executeQuery(\n            \"select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'\");\n\n        if (rs.next()) {\n            intparam[0] = rs.getInt(1);\n\n            rs.close();\n        }\n\n        resultparamOne[0] = st.executeQuery(\n            \"select table_schema, table_name from information_schema.tables where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'\");"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "435",
               "end_line": "448",
               "source_code": "        conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n\n        Statement st = conn.createStatement();\n        ResultSet rs = st.executeQuery(\n            \"select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'\");\n\n        if (rs.next()) {\n            intparam[0] = rs.getInt(1);\n\n            rs.close();\n        }\n\n        resultparam[0] = st.executeQuery(\n            \"select table_schema, table_name from information_schema.tables where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'\");"
           }

       },

       {
           "id": "clone_1335",

           "clone_type": "type-2",

           "origin": {
               "file": "TestMerge.java",
               "start_line": "411",
               "end_line": "416",
               "source_code": "        TestCase   testC  = new TestMerge(\"testMerge3\");\n        TestCase   testD  = new TestMerge(\"testMerge4\");\n        TestCase   testE  = new TestMerge(\"testMerge5\");\n        TestCase   testF  = new TestMerge(\"testMerge6\");\n        TestCase   testG  = new TestMerge(\"testMerge7\");\n        TestCase   testH  = new TestMerge(\"testMerge8\");"
           },

           "clone": {
               "file": "TransferDb.java",
               "start_line": "438",
               "end_line": "443",
               "source_code": "        String    alterCreate    = new String(\"\");\n        String    alterDrop      = new String(\"\");\n        String    ConstraintName = new String(\"\");\n        String    RefTableName   = new String(\"\");\n        String    foreignKeyName = new String(\"\");\n        String    columnName     = new String(\"\");"
           }

       },

       {
           "id": "clone_1336",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "284",
               "end_line": "393",
               "source_code": "            case ROLE_AUTHORIZATION_DESCRIPTORS :\n                return ROLE_AUTHORIZATION_DESCRIPTORS(session, store);\n\n            case ROLE_COLUMN_GRANTS :\n                return ROLE_COLUMN_GRANTS(session, store);\n\n            case ROLE_ROUTINE_GRANTS :\n                return ROLE_ROUTINE_GRANTS(session, store);\n\n            case ROLE_TABLE_GRANTS :\n                return ROLE_TABLE_GRANTS(session, store);\n\n            case ROLE_USAGE_GRANTS :\n                return ROLE_USAGE_GRANTS(session, store);\n\n            case ROLE_UDT_GRANTS :\n                return ROLE_UDT_GRANTS(session, store);\n\n            case ROUTINE_COLUMN_USAGE :\n                return ROUTINE_COLUMN_USAGE(session, store);\n\n            case ROUTINE_JAR_USAGE :\n                return ROUTINE_JAR_USAGE(session, store);\n\n            case ROUTINE_PRIVILEGES :\n                return ROUTINE_PRIVILEGES(session, store);\n\n            case ROUTINE_ROUTINE_USAGE :\n                return ROUTINE_ROUTINE_USAGE(session, store);\n\n            case ROUTINE_SEQUENCE_USAGE :\n                return ROUTINE_SEQUENCE_USAGE(session, store);\n\n            case ROUTINE_TABLE_USAGE :\n                return ROUTINE_TABLE_USAGE(session, store);\n\n            case ROUTINES :\n                return ROUTINES(session, store);\n\n            case SCHEMATA :\n                return SCHEMATA(session, store);\n\n            case SEQUENCES :\n                return SEQUENCES(session, store);\n\n            case SQL_FEATURES :\n                return SQL_FEATURES(session, store);\n\n            case SQL_IMPLEMENTATION_INFO :\n                return SQL_IMPLEMENTATION_INFO(session, store);\n\n            case SQL_PACKAGES :\n                return SQL_PACKAGES(session, store);\n\n            case SQL_PARTS :\n                return SQL_PARTS(session, store);\n\n            case SQL_SIZING :\n                return SQL_SIZING(session, store);\n\n            case SQL_SIZING_PROFILES :\n                return SQL_SIZING_PROFILES(session, store);\n\n            case TABLE_CONSTRAINTS :\n                return TABLE_CONSTRAINTS(session, store);\n\n            case TABLES :\n                return TABLES(session, store);\n\n            case TRANSLATIONS :\n                return TRANSLATIONS(session, store);\n\n            case TRIGGERED_UPDATE_COLUMNS :\n                return TRIGGERED_UPDATE_COLUMNS(session, store);\n\n            case TRIGGER_COLUMN_USAGE :\n                return TRIGGER_COLUMN_USAGE(session, store);\n\n            case TRIGGER_ROUTINE_USAGE :\n                return TRIGGER_ROUTINE_USAGE(session, store);\n\n            case TRIGGER_SEQUENCE_USAGE :\n                return TRIGGER_SEQUENCE_USAGE(session, store);\n\n            case TRIGGER_TABLE_USAGE :\n                return TRIGGER_TABLE_USAGE(session, store);\n\n            case TRIGGERS :\n                return TRIGGERS(session, store);\n\n            case UDT_PRIVILEGES :\n                return UDT_PRIVILEGES(session, store);\n\n            case USAGE_PRIVILEGES :\n                return USAGE_PRIVILEGES(session, store);\n\n            case USER_DEFINED_TYPES :\n                return USER_DEFINED_TYPES(session, store);\n\n            case VIEW_COLUMN_USAGE :\n                return VIEW_COLUMN_USAGE(session, store);\n\n            case VIEW_ROUTINE_USAGE :\n                return VIEW_ROUTINE_USAGE(session, store);\n\n            case VIEW_TABLE_USAGE :\n                return VIEW_TABLE_USAGE(session, store);\n\n            case VIEWS :\n                return VIEWS(session, store);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "171",
               "end_line": "282",
               "source_code": "            // HSQLDB-specific\n            case SYSTEM_CACHEINFO :\n                return SYSTEM_CACHEINFO(session, store);\n\n            case SYSTEM_COLUMN_SEQUENCE_USAGE :\n                return SYSTEM_COLUMN_SEQUENCE_USAGE(session, store);\n\n            case SYSTEM_COMMENTS :\n                return SYSTEM_COMMENTS(session, store);\n\n            case SYSTEM_SESSIONINFO :\n                return SYSTEM_SESSIONINFO(session, store);\n\n            case SYSTEM_PROPERTIES :\n                return SYSTEM_PROPERTIES(session, store);\n\n            case SYSTEM_SESSIONS :\n                return SYSTEM_SESSIONS(session, store);\n\n            case SYSTEM_TEXTTABLES :\n                return SYSTEM_TEXTTABLES(session, store);\n\n            case SYSTEM_TABLESTATS :\n                return SYSTEM_TABLESTATS(session, store);\n\n            // SQL views\n            case ADMINISTRABLE_ROLE_AUTHORIZATIONS :\n                return ADMINISTRABLE_ROLE_AUTHORIZATIONS(session, store);\n\n            case APPLICABLE_ROLES :\n                return APPLICABLE_ROLES(session, store);\n\n            case ASSERTIONS :\n                return ASSERTIONS(session, store);\n\n            case AUTHORIZATIONS :\n                return AUTHORIZATIONS(session, store);\n\n            case CHARACTER_SETS :\n                return CHARACTER_SETS(session, store);\n\n            case CHECK_CONSTRAINT_ROUTINE_USAGE :\n                return CHECK_CONSTRAINT_ROUTINE_USAGE(session, store);\n\n            case CHECK_CONSTRAINTS :\n                return CHECK_CONSTRAINTS(session, store);\n\n            case COLLATIONS :\n                return COLLATIONS(session, store);\n\n            case COLUMN_COLUMN_USAGE :\n                return COLUMN_COLUMN_USAGE(session, store);\n\n            case COLUMN_DOMAIN_USAGE :\n                return COLUMN_DOMAIN_USAGE(session, store);\n\n            case COLUMN_UDT_USAGE :\n                return COLUMN_UDT_USAGE(session, store);\n\n            case CONSTRAINT_COLUMN_USAGE :\n                return CONSTRAINT_COLUMN_USAGE(session, store);\n\n            case CONSTRAINT_TABLE_USAGE :\n                return CONSTRAINT_TABLE_USAGE(session, store);\n\n            case COLUMNS :\n                return COLUMNS(session, store);\n\n            case DATA_TYPE_PRIVILEGES :\n                return DATA_TYPE_PRIVILEGES(session, store);\n\n            case DOMAIN_CONSTRAINTS :\n                return DOMAIN_CONSTRAINTS(session, store);\n\n            case DOMAINS :\n                return DOMAINS(session, store);\n\n            case ELEMENT_TYPES :\n                return ELEMENT_TYPES(session, store);\n\n            case ENABLED_ROLES :\n                return ENABLED_ROLES(session, store);\n\n            case JAR_JAR_USAGE :\n                return JAR_JAR_USAGE(session, store);\n\n            case JARS :\n                return JARS(session, store);\n\n            case KEY_COLUMN_USAGE :\n                return KEY_COLUMN_USAGE(session, store);\n\n            case METHOD_SPECIFICATIONS :\n                return METHOD_SPECIFICATIONS(session, store);\n\n            case MODULE_COLUMN_USAGE :\n                return MODULE_COLUMN_USAGE(session, store);\n\n            case MODULE_PRIVILEGES :\n                return MODULE_PRIVILEGES(session, store);\n\n            case MODULE_TABLE_USAGE :\n                return MODULE_TABLE_USAGE(session, store);\n\n            case MODULES :\n                return MODULES(session, store);\n\n            case PARAMETERS :\n                return PARAMETERS(session, store);\n\n            case REFERENTIAL_CONSTRAINTS :\n                return REFERENTIAL_CONSTRAINTS(session, store);"
           }

       },

       {
           "id": "clone_1337",

           "clone_type": "type-2",

           "origin": {
               "file": "WebServer.java",
               "start_line": "163",
               "end_line": "195",
               "source_code": "        propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);\n\n        ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(\n            ServerConstants.SC_PROTOCOL_HTTP, propsPath, propsExtension);\n        ServerProperties props =\n            fileProps == null\n            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP)\n            : fileProps;\n\n        props.addProperties(argProps);\n        ServerConfiguration.translateDefaultDatabaseProperty(props);\n\n        // Standard behaviour when started from the command line\n        // is to halt the VM when the server shuts down.  This may, of\n        // course, be overridden by whatever, if any, security policy\n        // is in place.\n        ServerConfiguration.translateDefaultNoSystemExitProperty(props);\n        ServerConfiguration.translateAddressProperty(props);\n\n        // finished setting up properties;\n        Server server = new WebServer();\n\n        try {\n            server.setProperties(props);\n        } catch (Exception e) {\n            server.printError(\"Failed to set properties\");\n            server.printStackTrace(e);\n\n            return;\n        }\n\n        // now messages go to the channel specified in properties\n        server.print(\"Startup sequence initiated from main() method\");"
           },

           "clone": {
               "file": "Server.java",
               "start_line": "2491",
               "end_line": "2523",
               "source_code": "        propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);\n\n        ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(\n            ServerConstants.SC_PROTOCOL_HSQL, propsPath, propsExtension);\n        ServerProperties props =\n            fileProps == null\n            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HSQL)\n            : fileProps;\n\n        props.addProperties(argProps);\n        ServerConfiguration.translateDefaultDatabaseProperty(props);\n\n        // Standard behaviour when started from the command line\n        // is to halt the VM when the server shuts down.  This may, of\n        // course, be overridden by whatever, if any, security policy\n        // is in place.\n        ServerConfiguration.translateDefaultNoSystemExitProperty(props);\n        ServerConfiguration.translateAddressProperty(props);\n\n        // finished setting up properties;\n        Server server = new Server();\n\n        try {\n            server.setProperties(props);\n        } catch (Exception e) {\n            server.printError(\"Failed to set properties\");\n            server.printStackTrace(e);\n\n            return;\n        }\n\n        // now messages go to the channel specified in properties\n        server.print(\"Startup sequence initiated from main() method\");"
           }

       },

       {
           "id": "clone_1338",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7828",
               "end_line": "7873",
               "source_code": "            addColumn(t, \"USER_DEFINED_TYPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"USER_DEFINED_TYPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"USER_DEFINED_TYPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"USER_DEFINED_TYPE_CATEGORY\", SQL_IDENTIFIER);\n            addColumn(t, \"IS_INSTANTIABLE\", YES_OR_NO);\n            addColumn(t, \"IS_FINAL\", YES_OR_NO);\n            addColumn(t, \"ORDERING_FORM\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDERING_CATEGORY\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDERING_ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDERING_ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDERING_ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"REFERENCE_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"SOURCE_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"REF_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"EXTERNAL_NAME\", CHARACTER_DATA);\n            addColumn(t, \"EXTERNAL_LANGUAGE\", CHARACTER_DATA);\n            addColumn(t, \"JAVA_INTERFACE\", CHARACTER_DATA);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[USER_DEFINED_TYPES].name, false,\n                SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2, 4, 5, 6\n            }, false);\n\n            return t;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5785",
               "end_line": "5832",
               "source_code": "            addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"CREATED\", TIME_STAMP);\n            addColumn(t, \"LAST_ALTERED\", TIME_STAMP);\n            addColumn(t, \"NEW_SAVEPOINT_LEVEL\", YES_OR_NO);\n            addColumn(t, \"IS_UDT_DEPENDENT\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_FROM_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_AS_LOCATOR\", YES_OR_NO);\n            addColumn(t, \"RESULT_CAST_CHAR_MAX_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_CHAR_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_TYPE_UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"RESULT_CAST_MAX_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DTD_IDENTIFIER\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_FROM_DECLARED_DATA_TYPE\",\n                      CHARACTER_DATA);\n            addColumn(t, \"RESULT_CAST_DECLARED_NUMERIC_PRECISION\",\n                      CARDINAL_NUMBER);\n            addColumn(t, \"RESULT_CAST_DECLARED_NUMERIC_SCALE\",\n                      CARDINAL_NUMBER);\n\n            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(\n                sysTableHsqlNames[ROUTINES].name, false, SchemaObject.INDEX);\n\n            t.createPrimaryKeyConstraint(name, new int[] {\n                3, 4, 5, 0, 1, 2\n            }, false);\n\n            return t;"
           }

       },

       {
           "id": "clone_1339",

           "clone_type": "type-2",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "300",
               "end_line": "305",
               "source_code": "        ResultSet rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"INFORMATION_SCHEMA\");\n        assertEquals(rs.getString(2), \"_SYSTEM\");\n        rs.close();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "262",
               "end_line": "267",
               "source_code": "        ResultSet rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();"
           }

       },

       {
           "id": "clone_1340",

           "clone_type": "type-2",

           "origin": {
               "file": "NumberType.java",
               "start_line": "1937",
               "end_line": "1947",
               "source_code": "            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL : {\n                BigDecimal value = ((BigDecimal) a).setScale(0,\n                    BigDecimal.ROUND_FLOOR);\n\n                return value;\n            }\n\n            // fall through\n            default :\n                return a;"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "1906",
               "end_line": "1914",
               "source_code": "            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL : {\n                BigDecimal value = ((BigDecimal) a).setScale(0,\n                    BigDecimal.ROUND_CEILING);\n\n                return value;\n            }\n            default :\n                return a;"
           }

       },

       {
           "id": "clone_1341",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "142",
               "end_line": "148",
               "source_code": "            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n                nodes                = new Expression[UNARY];\n                nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);\n                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP,\n                        e.dataType.scale);\n                break;"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "134",
               "end_line": "140",
               "source_code": "            case Types.SQL_TIME_WITH_TIME_ZONE :\n                nodes                = new Expression[UNARY];\n                nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);\n                nodes[LEFT].dataType = e.dataType;\n                dataType = DateTimeType.getDateTimeType(Types.SQL_TIME,\n                        e.dataType.scale);\n                break;"
           }

       },

       {
           "id": "clone_1342",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3482",
               "end_line": "3495",
               "source_code": "        // intermediate holders\n        Iterator  tables;\n        Table     table;\n        Object[]  row;\n        final int table_catalog                = 0;\n        final int table_schema                 = 1;\n        final int table_name                   = 2;\n        final int table_type                   = 3;\n        final int self_referencing_column_name = 4;\n        final int reference_generation         = 5;\n        final int user_defined_type_catalog    = 6;\n        final int user_defined_type_schema     = 7;\n        final int user_defined_type_name       = 8;\n        final int is_insertable_into           = 9;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8425",
               "end_line": "8437",
               "source_code": "        Iterator  tables;\n        Table     table;\n        Object[]  row;\n        final int table_catalog              = 0;\n        final int table_schema               = 1;\n        final int table_name                 = 2;\n        final int view_definition            = 3;\n        final int check_option               = 4;\n        final int is_updatable               = 5;\n        final int insertable_into            = 6;\n        final int is_trigger_updatable       = 7;\n        final int is_trigger_deletable       = 8;\n        final int is_trigger_insertable_into = 9;"
           }

       },

       {
           "id": "clone_1343",

           "clone_type": "type-2",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "317",
               "end_line": "325",
               "source_code": "                break;\n\n            case OpTypes.CASEWHEN :\n                sb.append(Tokens.T_CASEWHEN).append(' ');\n                break;\n\n            case OpTypes.CONCAT_WS :\n                sb.append(Tokens.T_CONCAT_WS).append(' ');\n                break;"
           },

           "clone": {
               "file": "ExpressionAggregate.java",
               "start_line": "184",
               "end_line": "192",
               "source_code": "                break;\n\n            case OpTypes.VAR_POP :\n                sb.append(Tokens.T_VAR_POP).append(' ');\n                break;\n\n            case OpTypes.VAR_SAMP :\n                sb.append(Tokens.T_VAR_SAMP).append(' ');\n                break;"
           }

       },

       {
           "id": "clone_1344",

           "clone_type": "type-2",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2532",
               "end_line": "2559",
               "source_code": "        //-----------------------------------------\n        // Same as SYSTEM_TYPEINFO\n        //-----------------------------------------\n        final int itype_name          = 0;\n        final int idata_type          = 1;\n        final int iprecision          = 2;\n        final int iliteral_prefix     = 3;\n        final int iliteral_suffix     = 4;\n        final int icreate_params      = 5;\n        final int inullable           = 6;\n        final int icase_sensitive     = 7;\n        final int isearchable         = 8;\n        final int iunsigned_attribute = 9;\n        final int ifixed_prec_scale   = 10;\n        final int iauto_increment     = 11;\n        final int ilocal_type_name    = 12;\n        final int iminimum_scale      = 13;\n        final int imaximum_scale      = 14;\n        final int isql_data_type      = 15;\n        final int isql_datetime_sub   = 16;\n        final int inum_prec_radix     = 17;\n\n        //------------------------------------------\n        // Extensions\n        //------------------------------------------\n        // not in JDBC, but in SQL CLI SQLDA / ODBC\n        //------------------------------------------\n        final int iinterval_precision = 18;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2090",
               "end_line": "2110",
               "source_code": "        final int ischem     = 1;\n        final int iname      = 2;\n        final int icol_name  = 3;\n        final int icol_type  = 4;\n        final int idata_type = 5;\n        final int itype_name = 6;\n        final int iprec      = 7;\n        final int ilength    = 8;\n        final int iscale     = 9;\n        final int iradix     = 10;\n        final int inullable  = 11;\n        final int iremark    = 12;\n\n        // JDBC 4.0\n        final int icol_default      = 13;\n        final int isql_data_type    = 14;\n        final int isql_datetime_sub = 15;\n        final int ichar_octet_len   = 16;\n        final int iordinal_position = 17;\n        final int iis_nullable      = 18;\n        final int ispecific_name    = 19;"
           }

       }
   ]      
}
