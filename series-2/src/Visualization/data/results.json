{ 
   "summary": {
       "project_name": "HyperSQL"
   },

   "directories": [ 	
       "/org/hsqldb/dbinfo",		
       "/org/hsqldb/cmdline",		
       "/org/hsqldb/lib",		
       "/org/hsqldb/cmdline/sqltool",		
       "/org/hsqldb/server",		
       "/org/hsqldb/persist",		
       "/org/hsqldb/test",		
       "/org/hsqldb/jdbc/pool",		
       "/org/hsqldb",		
       "/org/hsqldb/sample",		
       "/org/hsqldb/util",		
       "/org/hsqldb/rowio",		
       "/org/hsqldb/result",		
       "/org/hsqldb/jdbc",		
       "/org/hsqldb/map",		
       "/org/hsqldb/types",		
       "/org/hsqldb/navigator",		
       "/org/hsqldb/scriptio",		
       "/org/hsqldb/index"	
   ],

   "files": [ 
       {
          "name": "PgType.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "TestCacheSize.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ExpressionLogical.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowStoreAVLMemory.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "TestOdbcTypes.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestNullInUnion.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestUpdatableResultSets.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "PostgresTransferHelper.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "NodeAVLDisk.java", 
          "dir": "/org/hsqldb/index"
       },

       {
          "name": "DatabaseManager.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "DTIType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "StatementSet.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestSqlPersistent.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "JDBCClobFile.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "ArrayType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "StatementDMQL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "StatementDML.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "DoubleIntIndex.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "TestUtil.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "RowType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TableWorks.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "JDBCStatement.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "ScriptWriterEncode.java", 
          "dir": "/org/hsqldb/scriptio"
       },

       {
          "name": "SqlFileScanner.java", 
          "dir": "/org/hsqldb/cmdline/sqltool"
       },

       {
          "name": "JDBCBlobFile.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "DateTimeType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "WebServerConnection.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "StatementResultUpdate.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "JDBCBench.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "RowSetNavigatorDataTable.java", 
          "dir": "/org/hsqldb/navigator"
       },

       {
          "name": "ClobType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TransactionManagerMV2PL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "FunctionSQL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "JDBCPreparedStatement.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "BlobType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "OracleTransferHelper.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "RowStoreAVLDiskData.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "Expression.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestLikePredicateOptimizations.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TransactionManagerMVCC.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ConnectionDialogSwing.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "RangeVariable.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ExpressionOp.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowSetNavigatorData.java", 
          "dir": "/org/hsqldb/navigator"
       },

       {
          "name": "JDBCConnection.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "Types.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "HsqlProperties.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "KMPSearchAlgorithm.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "StatementCompound.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "Type.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "QuerySpecification.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "JDBCPooledDataSource.java", 
          "dir": "/org/hsqldb/jdbc/pool"
       },

       {
          "name": "ArrayUtil.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "BinaryType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TestJDBCGeneratedColumns.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "JDBCCallableStatement.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "StatementCommand.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowOutputBinary.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "TestSql.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "RowAVL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowInputText.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "Result.java", 
          "dir": "/org/hsqldb/result"
       },

       {
          "name": "BaseHashMap.java", 
          "dir": "/org/hsqldb/map"
       },

       {
          "name": "RefCapablePropertyResourceBundle.java", 
          "dir": "/org/hsqldb/lib"
       },

       {
          "name": "TestStoredProcedure.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "Tree.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "JDBCArray.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "TestBench.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "Scanner.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TransactionManager2PL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "IntervalType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "RangeVariableResolver.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ParserDQL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestMultiInsert.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "QueryExpression.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestHashStructures.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "DatabaseInformationFull.java", 
          "dir": "/org/hsqldb/dbinfo"
       },

       {
          "name": "RowInputBase.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "ClobDataID.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "ServerConnection.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "ValuePoolHashMap.java", 
          "dir": "/org/hsqldb/map"
       },

       {
          "name": "StatementSimple.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestBug1191815.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ExpressionArithmetic.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TriggerSample.java", 
          "dir": "/org/hsqldb/sample"
       },

       {
          "name": "ResultLob.java", 
          "dir": "/org/hsqldb/result"
       },

       {
          "name": "Calculator.java", 
          "dir": "/org/hsqldb/cmdline/sqltool"
       },

       {
          "name": "RangeVariableJoined.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "SchemaObjectSet.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "BlobDataID.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "CharacterType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "NumberType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TestTextTables.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ParserDML.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowAVLDiskData.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ParserRoutine.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "IndexAVL.java", 
          "dir": "/org/hsqldb/index"
       },

       {
          "name": "RowStoreAVLHybridExtended.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "Servlet.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "Grid.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "TestLobs.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ConnectionDialog.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "TestMerge.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestINPredicateParameterizationAndCorrelation.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "StatementExpression.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "BitType.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "StatementSession.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "RowInputTextLog.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "StatementInsert.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "HsqlSocketFactorySecure.java", 
          "dir": "/org/hsqldb/server"
       },

       {
          "name": "FunctionCustom.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "NodeAVLDiskLarge.java", 
          "dir": "/org/hsqldb/index"
       },

       {
          "name": "TestBug785429.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "JDBCXADataSource.java", 
          "dir": "/org/hsqldb/jdbc/pool"
       },

       {
          "name": "JDBCResultSet.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "NumberSequence.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "DatabaseInformationMain.java", 
          "dir": "/org/hsqldb/dbinfo"
       },

       {
          "name": "TestAllTypes.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "SqlFile.java", 
          "dir": "/org/hsqldb/cmdline"
       },

       {
          "name": "RowStoreAVLHybrid.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "DatabaseManagerSwing.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "RowOutputBase.java", 
          "dir": "/org/hsqldb/rowio"
       },

       {
          "name": "ParserCommand.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TextFileReader.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "SchemaManager.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ParserDDL.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "TestJDBCSavepoints.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "RowStoreAVLDisk.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "BlobInputStream.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "TestOdbcService.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "TestDateTime.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "ExpressionColumn.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ClobInputStream.java", 
          "dir": "/org/hsqldb/types"
       },

       {
          "name": "LobManager.java", 
          "dir": "/org/hsqldb/persist"
       },

       {
          "name": "Table.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "ScriptWriterBase.java", 
          "dir": "/org/hsqldb/scriptio"
       },

       {
          "name": "BitMap.java", 
          "dir": "/org/hsqldb/map"
       },

       {
          "name": "TransferSQLText.java", 
          "dir": "/org/hsqldb/util"
       },

       {
          "name": "TestBatchExecution.java", 
          "dir": "/org/hsqldb/test"
       },

       {
          "name": "JDBCArrayBasic.java", 
          "dir": "/org/hsqldb/jdbc"
       },

       {
          "name": "StatementSchema.java", 
          "dir": "/org/hsqldb"
       },

       {
          "name": "Transfer.java", 
          "dir": "/org/hsqldb/util"
       }
   ],
   
   "clone_pairs": [ 
       {
           "id": "clone_0",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "408",
               "end_line": "413",
               "source_code": "                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.byteBlock   = new byte[(int) result.blockLength];\n\n                dataInput.readFully(result.byteBlock);\n                break;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "384",
               "end_line": "389",
               "source_code": "                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.byteBlock   = new byte[(int) result.blockLength];\n\n                dataInput.readFully(result.byteBlock);\n                break;"
           }

       },

       {
           "id": "clone_1",

           "clone_type": "type-1",

           "origin": {
               "file": "ArrayUtil.java",
               "start_line": "564",
               "end_line": "582",
               "source_code": "    public static int countSameElements(char[] arra, int start, char[] arrb) {\n\n        int k     = 0;\n        int limit = arra.length - start;\n\n        if (limit > arrb.length) {\n            limit = arrb.length;\n        }\n\n        for (int i = 0; i < limit; i++) {\n            if (arra[i + start] == arrb[i]) {\n                k++;\n            } else {\n                break;\n            }\n        }\n\n        return k;\n    }"
           },

           "clone": {
               "file": "ArrayUtil.java",
               "start_line": "540",
               "end_line": "558",
               "source_code": "    public static int countSameElements(byte[] arra, int start, byte[] arrb) {\n\n        int k     = 0;\n        int limit = arra.length - start;\n\n        if (limit > arrb.length) {\n            limit = arrb.length;\n        }\n\n        for (int i = 0; i < limit; i++) {\n            if (arra[i + start] == arrb[i]) {\n                k++;\n            } else {\n                break;\n            }\n        }\n\n        return k;\n    }"
           }

       },

       {
           "id": "clone_2",

           "clone_type": "type-1",

           "origin": {
               "file": "TestOdbcService.java",
               "start_line": "288",
               "end_line": "321",
               "source_code": "            rs = ps.executeQuery();\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(5, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"five\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(10, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"ten\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(15, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"fifteen\", rs.getString(3));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(25, rs.getInt(1));\n            assertNull(rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(40, rs.getInt(1));\n            assertEquals(\"forty\", rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertFalse(\"Too many rows fetched\", rs.next());\n            rs.close();"
           },

           "clone": {
               "file": "TestOdbcService.java",
               "start_line": "253",
               "end_line": "286",
               "source_code": "            rs = ps.executeQuery();\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(5, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"five\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(10, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"ten\", rs.getString(3));\n\n            assertTrue(\"No rows fetched\", rs.next());\n            assertEquals(\"str\", rs.getString(4));\n            assertEquals(15, rs.getInt(1));\n            assertEquals(3, rs.getInt(2));\n            assertEquals(\"fifteen\", rs.getString(3));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(25, rs.getInt(1));\n            assertNull(rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertTrue(\"Not enough rows fetched\", rs.next());\n            assertEquals(3, rs.getInt(2));\n            assertEquals(40, rs.getInt(1));\n            assertEquals(\"forty\", rs.getString(3));\n            assertEquals(\"str\", rs.getString(4));\n\n            assertFalse(\"Too many rows fetched\", rs.next());\n            rs.close();"
           }

       },

       {
           "id": "clone_3",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2801",
               "end_line": "2810",
               "source_code": "            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);\n            addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);\n            addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null\n\n            // -----------------------------------------------------------------\n            // required by DatabaseMetaData.getVersionColumns filter parameters\n            // -----------------------------------------------------------------\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "647",
               "end_line": "652",
               "source_code": "            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);\n            addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);\n            addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null\n            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null"
           }

       },

       {
           "id": "clone_4",

           "clone_type": "type-1",

           "origin": {
               "file": "TransactionManagerMV2PL.java",
               "start_line": "189",
               "end_line": "202",
               "source_code": "    public void rollbackSavepoint(Session session, int index) {\n\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n\n        rollbackPartial(session, start, timestamp);\n    }"
           },

           "clone": {
               "file": "TransactionManager2PL.java",
               "start_line": "139",
               "end_line": "152",
               "source_code": "    public void rollbackSavepoint(Session session, int index) {\n\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n\n        rollbackPartial(session, start, timestamp);\n    }"
           }

       },

       {
           "id": "clone_5",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "1004",
               "end_line": "1015",
               "source_code": "            Statement statement = compileSQLProcedureStatementOrNull(routine,\n                null);\n\n            if (statement == null) {\n                throw unexpectedToken();\n            }\n\n            Token[] tokenisedStatement = getRecordedStatement();\n            String  sql                = Token.getSQL(tokenisedStatement);\n\n            statement.setSQL(sql);\n            routine.setProcedure(statement);"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2412",
               "end_line": "2423",
               "source_code": "        Statement statement = compileSQLProcedureStatementOrNull(routine,\n            null);\n\n        if (statement == null) {\n            throw unexpectedToken();\n        }\n\n        Token[] tokenisedStatement = getRecordedStatement();\n        String  sql                = Token.getSQL(tokenisedStatement);\n\n        statement.setSQL(sql);\n        routine.setProcedure(statement);"
           }

       },

       {
           "id": "clone_6",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "1002",
               "end_line": "1023",
               "source_code": "            int    i = all.indexOf(';');\n            String sql;\n\n            if (i != -1) {\n                sql = all.substring(0, i);\n                all = all.substring(i + 1);\n            } else {\n                sql = all;\n                all = \"\";\n            }\n\n            if (sql.startsWith(\"--#\")) {\n                max = Integer.parseInt(sql.substring(3));\n\n                continue;\n            } else if (sql.startsWith(\"--\")) {\n                continue;\n            }\n\n            g[2] = sql;\n\n            long l = 0;"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1825",
               "end_line": "1846",
               "source_code": "            int    i = all.indexOf(';');\n            String sql;\n\n            if (i != -1) {\n                sql = all.substring(0, i);\n                all = all.substring(i + 1);\n            } else {\n                sql = all;\n                all = \"\";\n            }\n\n            if (sql.startsWith(\"--#\")) {\n                max = Integer.parseInt(sql.substring(3));\n\n                continue;\n            } else if (sql.startsWith(\"--\")) {\n                continue;\n            }\n\n            g[2] = sql;\n\n            long l = 0;"
           }

       },

       {
           "id": "clone_7",

           "clone_type": "type-1",

           "origin": {
               "file": "TestHashStructures.java",
               "start_line": "119",
               "end_line": "125",
               "source_code": "            compareByUIteratorInt(uMap, hIntMap);\n            compareByHIteratorInt(uMap, hIntMap);\n\n            //\n            clearByIntIterator(uMap, hIntMap);\n            compareByUIteratorInt(uMap, hIntMap);\n            compareByHIteratorInt(uMap, hIntMap);"
           },

           "clone": {
               "file": "TestHashStructures.java",
               "start_line": "109",
               "end_line": "115",
               "source_code": "            compareByUIteratorInt(uMap, hIntMap);\n            compareByHIteratorInt(uMap, hIntMap);\n\n            //\n            clearByIntIterator(uMap, hIntMap);\n            compareByUIteratorInt(uMap, hIntMap);\n            compareByHIteratorInt(uMap, hIntMap);"
           }

       },

       {
           "id": "clone_8",

           "clone_type": "type-1",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "1218",
               "end_line": "1224",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP : {\n                return new TimestampData(millis / 1000, 0,\n                                         ((TimestampData) a).getZone());\n            }\n            default :"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "1186",
               "end_line": "1192",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP : {\n                return new TimestampData(millis / 1000, 0,\n                                         ((TimestampData) a).getZone());\n            }\n            default :"
           }

       },

       {
           "id": "clone_9",

           "clone_type": "type-1",

           "origin": {
               "file": "Table.java",
               "start_line": "644",
               "end_line": "654",
               "source_code": "            ColumnSchema column  = getColumn(j);\n            String       colname = column.getName().statementName;\n            Type         type    = column.getDataType();\n\n            if (j > 0) {\n                sb.append(',');\n            }\n\n            sb.append(colname);\n            sb.append(' ');\n            sb.append(type.getTypeDefinition());"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "369",
               "end_line": "379",
               "source_code": "            ColumnSchema column  = getColumn(j);\n            String       colname = column.getName().statementName;\n            Type         type    = column.getDataType();\n\n            if (j > 0) {\n                sb.append(',');\n            }\n\n            sb.append(colname);\n            sb.append(' ');\n            sb.append(type.getTypeDefinition());"
           }

       },

       {
           "id": "clone_10",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6842",
               "end_line": "6849",
               "source_code": "                row[table_catalog]   = database.getCatalogName().name;\n                row[table_schema]    = refName.parent.schema.name;\n                row[table_name]      = refName.parent.name;\n                row[column_name]     = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5121",
               "end_line": "5128",
               "source_code": "                row[table_catalog]    = database.getCatalogName().name;\n                row[table_schema]     = refName.parent.schema.name;\n                row[table_name]       = refName.parent.name;\n                row[column_name]      = refName.name;\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           }

       },

       {
           "id": "clone_11",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCClobFile.java",
               "start_line": "963",
               "end_line": "989",
               "source_code": "    protected final void checkIsFile(boolean checkExists) throws SQLException {\n\n        boolean exists = false;\n        boolean isFile = false;\n\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }"
           },

           "clone": {
               "file": "JDBCBlobFile.java",
               "start_line": "770",
               "end_line": "796",
               "source_code": "    protected final void checkIsFile(boolean checkExists) throws SQLException {\n\n        boolean exists = false;\n        boolean isFile = false;\n\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }"
           }

       },

       {
           "id": "clone_12",

           "clone_type": "type-1",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1618",
               "end_line": "1635",
               "source_code": "                if (charAt(currentPosition + 1) == '-') {\n                    int pos = sqlString.indexOf('\\r', currentPosition + 2);\n\n                    if (pos == -1) {\n                        pos = sqlString.indexOf('\\n', currentPosition + 2);\n                    }\n\n                    if (pos == -1) {\n                        pos = limit;\n                    }\n\n                    token.tokenString = sqlString.substring(currentPosition\n                            + 2, pos);\n                    token.tokenType   = Tokens.X_REMARK;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1570",
               "end_line": "1587",
               "source_code": "                if (charAt(currentPosition + 1) == '/') {\n                    int pos = sqlString.indexOf('\\r', currentPosition + 2);\n\n                    if (pos == -1) {\n                        pos = sqlString.indexOf('\\n', currentPosition + 2);\n                    }\n\n                    if (pos == -1) {\n                        pos = limit;\n                    }\n\n                    token.tokenString = sqlString.substring(currentPosition\n                            + 2, pos);\n                    token.tokenType   = Tokens.X_REMARK;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           }

       },

       {
           "id": "clone_13",

           "clone_type": "type-1",

           "origin": {
               "file": "TestSql.java",
               "start_line": "467",
               "end_line": "485",
               "source_code": "                stmnt.execute(\"drop table CDTYPE if exists\");\n\n                // test for the value MAX(column) in an empty table\n                stmnt.execute(\n                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");\n\n                rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");\n\n                if (rs.next()) {\n                    int max = rs.getInt(1);\n\n                    System.out.println(\"Max value for ID: \" + max);\n                } else {\n                    System.out.println(\"Max value for ID not returned\");\n                }\n\n                stmnt.executeUpdate(\n                    \"INSERT INTO cdType VALUES (10,'Test String');\");\n                stmnt.execute(\"CALL IDENTITY();\");"
           },

           "clone": {
               "file": "TestSqlPersistent.java",
               "start_line": "542",
               "end_line": "560",
               "source_code": "                stmnt.execute(\"drop table CDTYPE if exists\");\n\n                // test for the value MAX(column) in an empty table\n                stmnt.execute(\n                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");\n\n                rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");\n\n                if (rs.next()) {\n                    int max = rs.getInt(1);\n\n                    System.out.println(\"Max value for ID: \" + max);\n                } else {\n                    System.out.println(\"Max value for ID not returned\");\n                }\n\n                stmnt.executeUpdate(\n                    \"INSERT INTO cdType VALUES (10,'Test String');\");\n                stmnt.execute(\"CALL IDENTITY();\");"
           }

       },

       {
           "id": "clone_14",

           "clone_type": "type-1",

           "origin": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "504",
               "end_line": "519",
               "source_code": "        //-- setup for following tests\n        conn1.setAutoCommit(false);\n\n        sql = \"insert into t values(?,?,?,?)\";\n        ps  = conn1.prepareStatement(sql);\n\n        ps.setString(2, \"Mary\");\n        ps.setString(3, \"Peterson-Clancy\");\n\n        i = 0;\n\n        for (; i < 10; i++) {\n            ps.setInt(1, i);\n            ps.setInt(4, i);\n            ps.executeUpdate();\n        }"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "168",
               "end_line": "183",
               "source_code": "        //-- setup for following tests\n        conn1.setAutoCommit(false);\n\n        sql = \"insert into t values(?,?,?,?)\";\n        ps  = conn1.prepareStatement(sql);\n\n        ps.setString(2, \"Mary\");\n        ps.setString(3, \"Peterson-Clancy\");\n\n        i = 0;\n\n        for (; i < 10; i++) {\n            ps.setInt(1, i);\n            ps.setInt(4, i);\n            ps.executeUpdate();\n        }"
           }

       },

       {
           "id": "clone_15",

           "clone_type": "type-1",

           "origin": {
               "file": "DoubleIntIndex.java",
               "start_line": "244",
               "end_line": "250",
               "source_code": "        hasChanged    = true;\n        keys[count]   = key;\n        values[count] = value;\n\n        count++;\n\n        return true;"
           },

           "clone": {
               "file": "DoubleIntIndex.java",
               "start_line": "204",
               "end_line": "210",
               "source_code": "        hasChanged    = true;\n        keys[count]   = key;\n        values[count] = value;\n\n        count++;\n\n        return true;"
           }

       },

       {
           "id": "clone_16",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "192",
               "end_line": "197",
               "source_code": "        result.lobID       = id;\n        result.blockOffset = offset;\n        result.charBlock   = chars;\n        result.blockLength = chars.length;\n\n        return result;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "153",
               "end_line": "158",
               "source_code": "        result.lobID       = id;\n        result.blockOffset = offset;\n        result.charBlock   = chars;\n        result.blockLength = chars.length;\n\n        return result;"
           }

       },

       {
           "id": "clone_17",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementDML.java",
               "start_line": "1297",
               "end_line": "1308",
               "source_code": "                Row             row          = navigator.getCurrentRow();\n                Object[]        data = navigator.getCurrentChangedData();\n                Table           currentTable = ((Table) row.getTable());\n                int[] changedColumns = navigator.getCurrentChangedColumns();\n                PersistentStore store = currentTable.getRowStore(session);\n\n                if (data == null) {\n                    continue;\n                }\n\n                Row newRow = currentTable.insertSingleRow(session, store,\n                    data, changedColumns);"
           },

           "clone": {
               "file": "StatementDML.java",
               "start_line": "1059",
               "end_line": "1070",
               "source_code": "            Row             row          = navigator.getCurrentRow();\n            Object[]        data         = navigator.getCurrentChangedData();\n            Table           currentTable = ((Table) row.getTable());\n            int[] changedColumns = navigator.getCurrentChangedColumns();\n            PersistentStore store        = currentTable.getRowStore(session);\n\n            if (data == null) {\n                continue;\n            }\n\n            Row newRow = currentTable.insertSingleRow(session, store, data,\n                changedColumns);"
           }

       },

       {
           "id": "clone_18",

           "clone_type": "type-1",

           "origin": {
               "file": "Table.java",
               "start_line": "2512",
               "end_line": "2516",
               "source_code": "            case TableBase.FUNCTION_TABLE :\n            case TableBase.SYSTEM_SUBQUERY :\n            case TableBase.INFO_SCHEMA_TABLE :\n            case TableBase.VIEW_TABLE :\n            case TableBase.TEMP_TABLE :"
           },

           "clone": {
               "file": "Table.java",
               "start_line": "2415",
               "end_line": "2420",
               "source_code": "//            case TableBase.MEMORY_TABLE :\n            case TableBase.FUNCTION_TABLE :\n            case TableBase.SYSTEM_SUBQUERY :\n            case TableBase.INFO_SCHEMA_TABLE :\n            case TableBase.VIEW_TABLE :\n            case TableBase.TEMP_TABLE :"
           }

       },

       {
           "id": "clone_19",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDML.java",
               "start_line": "575",
               "end_line": "587",
               "source_code": "            HsqlList unresolved = condition.resolveColumnReferences(session,\n                rangeGroup, rangeGroups, null);\n\n            ExpressionColumn.checkColumnsResolved(unresolved);\n            condition.resolveTypes(session, null);\n\n            if (condition.isUnresolvedParam()) {\n                condition.dataType = Type.SQL_BOOLEAN;\n            }\n\n            if (condition.getDataType() != Type.SQL_BOOLEAN) {\n                throw Error.error(ErrorCode.X_42568);\n            }"
           },

           "clone": {
               "file": "ParserDML.java",
               "start_line": "462",
               "end_line": "474",
               "source_code": "            HsqlList unresolved = condition.resolveColumnReferences(session,\n                rangeGroup, rangeGroups, null);\n\n            ExpressionColumn.checkColumnsResolved(unresolved);\n            condition.resolveTypes(session, null);\n\n            if (condition.isUnresolvedParam()) {\n                condition.dataType = Type.SQL_BOOLEAN;\n            }\n\n            if (condition.getDataType() != Type.SQL_BOOLEAN) {\n                throw Error.error(ErrorCode.X_42568);\n            }"
           }

       },

       {
           "id": "clone_20",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCXADataSource.java",
               "start_line": "132",
               "end_line": "151",
               "source_code": "    /**\n     * Retrieves the Reference of this object.\n     *\n     * @return The non-null javax.naming.Reference of this object.\n     * @exception NamingException If a naming exception was encountered\n     *          while retrieving the reference.\n     */\n    public Reference getReference() throws NamingException {\n\n        String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";\n        Reference ref   = new Reference(getClass().getName(), cname, null);\n\n        ref.add(new StringRefAddr(\"database\", getDatabase()));\n        ref.add(new StringRefAddr(\"user\", getUser()));\n        ref.add(new StringRefAddr(\"password\", password));\n        ref.add(new StringRefAddr(\"loginTimeout\",\n                                  Integer.toString(loginTimeout)));\n\n        return ref;\n    }"
           },

           "clone": {
               "file": "JDBCPooledDataSource.java",
               "start_line": "93",
               "end_line": "112",
               "source_code": "    /**\n     * Retrieves the Reference of this object.\n     *\n     * @return The non-null javax.naming.Reference of this object.\n     * @exception NamingException If a naming exception was encountered\n     *          while retrieving the reference.\n     */\n    public Reference getReference() throws NamingException {\n\n        String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";\n        Reference ref   = new Reference(getClass().getName(), cname, null);\n\n        ref.add(new StringRefAddr(\"database\", getDatabase()));\n        ref.add(new StringRefAddr(\"user\", getUser()));\n        ref.add(new StringRefAddr(\"password\", password));\n        ref.add(new StringRefAddr(\"loginTimeout\",\n                                  Integer.toString(loginTimeout)));\n\n        return ref;\n    }"
           }

       },

       {
           "id": "clone_21",

           "clone_type": "type-1",

           "origin": {
               "file": "TestUtil.java",
               "start_line": "1350",
               "end_line": "1369",
               "source_code": "    protected String getResultString() {\n\n        StringBuffer sb = new StringBuffer();\n\n        if (lines.length == 1 && lines[0].trim().length() < 1) {\n            return null;\n        }\n\n        for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n\n            sb.append(\"+ \" + lines[i]);\n        }\n\n        TestUtil.expandStamps(sb);\n\n        return sb.toString().trim();\n    }"
           },

           "clone": {
               "file": "TestUtil.java",
               "start_line": "1042",
               "end_line": "1061",
               "source_code": "    protected String getResultString() {\n\n        StringBuffer sb = new StringBuffer();\n\n        if (lines.length == 1 && lines[0].trim().length() < 1) {\n            return null;\n        }\n\n        for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n\n            sb.append(\"+ \" + lines[i]);\n        }\n\n        TestUtil.expandStamps(sb);\n\n        return sb.toString().trim();\n    }"
           }

       },

       {
           "id": "clone_22",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3274",
               "end_line": "3309",
               "source_code": "        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3169",
               "end_line": "3204",
               "source_code": "        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }"
           }

       },

       {
           "id": "clone_23",

           "clone_type": "type-1",

           "origin": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "465",
               "end_line": "479",
               "source_code": "            Object[] currentData = getNext();\n            boolean newGroup =\n                compareData == null\n                || fullIndex.compareRowNonUnique(\n                    session, currentData, compareData,\n                    fullIndex.getColumnCount()) != 0;\n\n            if (newGroup) {\n                compareData = currentData;\n                it          = other.findFirstRow(currentData);\n            }\n\n            otherRow  = it.getNextRow();\n            otherData = otherRow == null ? null\n                                         : otherRow.getData();"
           },

           "clone": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "406",
               "end_line": "420",
               "source_code": "            Object[] currentData = getNext();\n            boolean newGroup =\n                compareData == null\n                || fullIndex.compareRowNonUnique(\n                    session, currentData, compareData,\n                    fullIndex.getColumnCount()) != 0;\n\n            if (newGroup) {\n                compareData = currentData;\n                it          = other.findFirstRow(currentData);\n            }\n\n            otherRow  = it.getNextRow();\n            otherData = otherRow == null ? null\n                                         : otherRow.getData();"
           }

       },

       {
           "id": "clone_24",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "255",
               "end_line": "278",
               "source_code": "    public void commitRow(Session session, Row row, int changeAction,\n                          int txModel) {\n\n        switch (changeAction) {\n\n            case RowAction.ACTION_DELETE :\n                remove(row);\n                break;\n\n            case RowAction.ACTION_INSERT :\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELEETE\n                remove(row);\n                break;\n\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                remove(row);\n                break;\n        }\n    }"
           },

           "clone": {
               "file": "RowStoreAVLHybridExtended.java",
               "start_line": "132",
               "end_line": "155",
               "source_code": "    public void commitRow(Session session, Row row, int changeAction,\n                          int txModel) {\n\n        switch (changeAction) {\n\n            case RowAction.ACTION_DELETE :\n                remove(row);\n                break;\n\n            case RowAction.ACTION_INSERT :\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELEETE\n                remove(row);\n                break;\n\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                remove(row);\n                break;\n        }\n    }"
           }

       },

       {
           "id": "clone_25",

           "clone_type": "type-1",

           "origin": {
               "file": "Tree.java",
               "start_line": "481",
               "end_line": "496",
               "source_code": "            String   folder = s[2];\n            int      ci     = currentindent;\n\n            for (; ci > 0; ci--) {\n                if (key.startsWith(root[ci])) {\n                    break;\n                }\n            }\n\n            if (root[ci].length() < key.length()) {\n                ci++;\n            }\n\n            if (closed && ci > currentindent) {\n                continue;\n            }"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "351",
               "end_line": "366",
               "source_code": "            String   folder = s[2];\n            int      ci     = currentindent;\n\n            for (; ci > 0; ci--) {\n                if (key.startsWith(root[ci])) {\n                    break;\n                }\n            }\n\n            if (root[ci].length() < key.length()) {\n                ci++;\n            }\n\n            if (closed && ci > currentindent) {\n                continue;\n            }"
           }

       },

       {
           "id": "clone_26",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7932",
               "end_line": "7985",
               "source_code": "            // common type block\n            if (type.isCharacterType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] = ValuePool.getLong(type.precision\n                        * 2);\n                row[character_set_catalog] = database.getCatalogName().name;\n                row[character_set_schema] =\n                    ((CharacterType) type).getCharacterSet().getSchemaName()\n                        .name;\n                row[character_set_name] =\n                    ((CharacterType) type).getCharacterSet().getName().name;\n                row[collation_catalog] = database.getCatalogName().name;\n                row[collation_schema] =\n                    ((CharacterType) type).getCollation().getSchemaName().name;\n                row[collation_name] =\n                    ((CharacterType) type).getCollation().getName().name;\n            } else if (type.isNumberType()) {\n                row[numeric_precision] = ValuePool.getLong(\n                    ((NumberType) type).getNumericPrecisionInRadix());\n                row[declared_numeric_precision] = ValuePool.getLong(\n                    ((NumberType) type).getNumericPrecisionInRadix());\n\n                if (type.isExactNumberType()) {\n                    row[numeric_scale] = row[declared_numeric_scale] =\n                        ValuePool.getLong(type.scale);\n                }\n\n                row[numeric_precision_radix] =\n                    ValuePool.getLong(type.getPrecisionRadix());\n            } else if (type.isBooleanType()) {}\n            else if (type.isDateTimeType()) {\n                row[datetime_precision] = ValuePool.getLong(type.scale);\n            } else if (type.isIntervalType()) {\n                row[data_type] = \"INTERVAL\";\n                row[interval_type] =\n                    ((IntervalType) type).getQualifier(type.typeCode);\n                row[interval_precision] = ValuePool.getLong(type.precision);\n                row[datetime_precision] = ValuePool.getLong(type.scale);\n            } else if (type.isBinaryType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] =\n                    ValuePool.getLong(type.precision);\n            } else if (type.isBitType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] =\n                    ValuePool.getLong(type.precision);\n            } else if (type.isArrayType()) {\n                row[maximum_cardinality] =\n                    ValuePool.getLong(type.arrayLimitCardinality());\n                row[data_type] = \"ARRAY\";\n            }"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5967",
               "end_line": "6026",
               "source_code": "                // common type block\n                if (type.isCharacterType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision * 2);\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n                } else if (type.isNumberType()) {\n                    row[numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    row[declared_numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n\n                    if (type.isExactNumberType()) {\n                        row[numeric_scale] = row[declared_numeric_scale] =\n                            ValuePool.getLong(type.scale);\n                    }\n\n                    row[numeric_precision_radix] =\n                        ValuePool.getLong(type.getPrecisionRadix());\n                } else if (type.isBooleanType()) {\n\n                    //\n                } else if (type.isDateTimeType()) {\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isIntervalType()) {\n                    row[data_type] = \"INTERVAL\";\n                    row[interval_type] =\n                        ((IntervalType) type).getQualifier(type.typeCode);\n                    row[interval_precision] =\n                        ValuePool.getLong(type.precision);\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isBinaryType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isBitType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isArrayType()) {\n                    row[maximum_cardinality] =\n                        ValuePool.getLong(type.arrayLimitCardinality());\n                    row[data_type] = \"ARRAY\";\n                }"
           }

       },

       {
           "id": "clone_27",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "818",
               "end_line": "825",
               "source_code": "                break;\n\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "582",
               "end_line": "589",
               "source_code": "                break;\n\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :"
           }

       },

       {
           "id": "clone_28",

           "clone_type": "type-1",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "291",
               "end_line": "306",
               "source_code": "    protected Integer readInteger() throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        return ValuePool.getInt(Integer.parseInt(s));\n    }"
           },

           "clone": {
               "file": "RowInputText.java",
               "start_line": "274",
               "end_line": "289",
               "source_code": "    protected Integer readSmallint() throws IOException {\n\n        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        return ValuePool.getInt(Integer.parseInt(s));\n    }"
           }

       },

       {
           "id": "clone_29",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "2826",
               "end_line": "2830",
               "source_code": "            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "1569",
               "end_line": "1573",
               "source_code": "            case FUNC_BITAND :\n            case FUNC_BITANDNOT :\n            case FUNC_BITNOT :\n            case FUNC_BITOR :\n            case FUNC_BITXOR :"
           }

       },

       {
           "id": "clone_30",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberType.java",
               "start_line": "2017",
               "end_line": "2022",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1057",
               "end_line": "1063",
               "source_code": "            // fall through\n            case Types.SQL_REAL :\n            case Types.SQL_DOUBLE :\n                return SQL_DOUBLE;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_31",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "665",
               "end_line": "670",
               "source_code": "            case OpTypes.EQUAL :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.GREATER :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "136",
               "end_line": "141",
               "source_code": "            case OpTypes.EQUAL :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.GREATER :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :"
           }

       },

       {
           "id": "clone_32",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "2503",
               "end_line": "2513",
               "source_code": "                        if (database.sqlSyntaxPgs) {\n                            read();\n\n                            isIdentity   = true;\n                            isPKIdentity = true;\n                            typeObject   = Type.SQL_BIGINT;\n                            sequence = new NumberSequence(null, 1, 1,\n                                                          typeObject);\n\n                            break;\n                        }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2482",
               "end_line": "2492",
               "source_code": "                        if (database.sqlSyntaxMys) {\n                            read();\n\n                            isIdentity   = true;\n                            isPKIdentity = true;\n                            typeObject   = Type.SQL_BIGINT;\n                            sequence = new NumberSequence(null, 1, 1,\n                                                          typeObject);\n\n                            break;\n                        }"
           }

       },

       {
           "id": "clone_33",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "5572",
               "end_line": "5584",
               "source_code": "        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        Expression c = XreadValueExpression();\n\n        readThis(Tokens.COMMA);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "5541",
               "end_line": "5553",
               "source_code": "        int position = getPosition();\n\n        read();\n\n        if (!readIfThis(Tokens.OPENBRACKET)) {\n            rewind(position);\n\n            return null;\n        }\n\n        Expression c = XreadValueExpression();\n\n        readThis(Tokens.COMMA);"
           }

       },

       {
           "id": "clone_34",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "274",
               "end_line": "288",
               "source_code": "        /*\n         ** Barrier to complete this test session\n         */\n        e = vClient.elements();\n\n        while (e.hasMoreElements()) {\n            Client = (Thread) e.nextElement();\n\n            Client.join();\n        }\n\n        vClient.removeAllElements();\n        reportDone();\n\n        guardian = connect(url, user, password);"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "297",
               "end_line": "311",
               "source_code": "        /*\n         ** Barrier to complete this test session\n         */\n        e = vClient.elements();\n\n        while (e.hasMoreElements()) {\n            Client = (Thread) e.nextElement();\n\n            Client.join();\n        }\n\n        vClient.removeAllElements();\n        reportDone();\n\n        guardian = connect(url, user, password);"
           }

       },

       {
           "id": "clone_35",

           "clone_type": "type-1",

           "origin": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "373",
               "end_line": "385",
               "source_code": "        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           },

           "clone": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "343",
               "end_line": "355",
               "source_code": "        NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           }

       },

       {
           "id": "clone_36",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7840",
               "end_line": "7854",
               "source_code": "            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5746",
               "end_line": "5760",
               "source_code": "            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_37",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "793",
               "end_line": "808",
               "source_code": "            st1 = conn.createStatement();\n            rs  = st1.executeQuery(\"select sum(bbalance) from branches\");\n\n            rs.next();\n\n            bbalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(tbalance) from tellers\");\n\n            rs.next();\n\n            tbalancesum = rs.getInt(1);\n\n            rs.close();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "702",
               "end_line": "717",
               "source_code": "            st1 = conn.createStatement();\n            rs  = st1.executeQuery(\"select sum(bbalance) from branches\");\n\n            rs.next();\n\n            bbalancesum = rs.getInt(1);\n\n            rs.close();\n\n            rs = st1.executeQuery(\"select sum(tbalance) from tellers\");\n\n            rs.next();\n\n            tbalancesum = rs.getInt(1);\n\n            rs.close();"
           }

       },

       {
           "id": "clone_38",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "505",
               "end_line": "512",
               "source_code": "                break;\n\n            case LobResultTypes.REQUEST_GET_LOB :\n            case LobResultTypes.REQUEST_DUPLICATE_LOB :\n\n            //\n            case LobResultTypes.REQUEST_GET_BYTES :\n            case LobResultTypes.REQUEST_GET_CHARS :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "370",
               "end_line": "377",
               "source_code": "                break;\n\n            case LobResultTypes.REQUEST_GET_LOB :\n            case LobResultTypes.REQUEST_DUPLICATE_LOB :\n\n            //\n            case LobResultTypes.REQUEST_GET_BYTES :\n            case LobResultTypes.REQUEST_GET_CHARS :"
           }

       },

       {
           "id": "clone_39",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "730",
               "end_line": "751",
               "source_code": "    public static int getRandomID(int type) {\n\n        int min = 0,\n            max = 0;\n\n        switch (type) {\n\n            case TELLER :\n                max = ntellers * tps - 1;\n                break;\n\n            case BRANCH :\n                max = nbranches * tps - 1;\n                break;\n\n            case ACCOUNT :\n                max = naccounts * tps - 1;\n                break;\n        }\n\n        return (getRandomInt(min, max));\n    }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "638",
               "end_line": "659",
               "source_code": "    public static int getRandomID(int type) {\n\n        int min = 0,\n            max = 0;\n\n        switch (type) {\n\n            case TELLER :\n                max = ntellers * tps - 1;\n                break;\n\n            case BRANCH :\n                max = nbranches * tps - 1;\n                break;\n\n            case ACCOUNT :\n                max = naccounts * tps - 1;\n                break;\n        }\n\n        return (getRandomInt(min, max));\n    }"
           }

       },

       {
           "id": "clone_40",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2115",
               "end_line": "2139",
               "source_code": "        // Do it.\n        row[icat]       = cat;\n        row[ischem]     = schem;\n        row[iname]      = pName;\n        row[icol_name]  = cName;\n        row[icol_type]  = cType;\n        row[idata_type] = dType;\n        row[itype_name] = tName;\n        row[iprec]      = prec;\n        row[ilength]    = len;\n        row[iscale]     = scale;\n        row[iradix]     = radix;\n        row[inullable]  = nullability;\n        row[iremark]    = remark;\n\n        // JDBC 4.0\n        row[icol_default]      = colDefault;\n        row[isql_data_type]    = sqlDataType;\n        row[isql_datetime_sub] = sqlDateTimeSub;\n        row[ichar_octet_len]   = charOctetLength;\n        row[iordinal_position] = ordinalPosition;\n        row[iis_nullable]      = isNullable;\n        row[ispecific_name]    = specificName;\n\n        t.insertSys(session, store, row);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2147",
               "end_line": "2170",
               "source_code": "                row[icat]       = cat;\n                row[ischem]     = schem;\n                row[iname]      = pName;\n                row[icol_name]  = cName;\n                row[icol_type]  = cType;\n                row[idata_type] = dType;\n                row[itype_name] = tName;\n                row[iprec]      = prec;\n                row[ilength]    = len;\n                row[iscale]     = scale;\n                row[iradix]     = radix;\n                row[inullable]  = nullability;\n                row[iremark]    = remark;\n\n                // JDBC 4.0\n                row[icol_default]      = colDefault;\n                row[isql_data_type]    = sqlDataType;\n                row[isql_datetime_sub] = sqlDateTimeSub;\n                row[ichar_octet_len]   = charOctetLength;\n                row[iordinal_position] = ordinalPosition;\n                row[iis_nullable]      = isNullable;\n                row[ispecific_name]    = specificName;\n\n                t.insertSys(session, store, row);"
           }

       },

       {
           "id": "clone_41",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "236",
               "end_line": "249",
               "source_code": "        rs  = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like '%'\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestLikePredicateOptimizations.java",
               "start_line": "186",
               "end_line": "199",
               "source_code": "        rs  = stmt.executeQuery(sql);\n\n        rs.next();\n\n        expectedCount = rs.getInt(1);\n        sql           = \"select count(*) from test where name like '%'\";\n        pstmt         = conn.prepareStatement(sql);\n        rs            = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_42",

           "clone_type": "type-1",

           "origin": {
               "file": "NodeAVLDisk.java",
               "start_line": "367",
               "end_line": "377",
               "source_code": "        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iBalance = b;\n\n        row.keepInMemory(false);\n\n        return node;"
           },

           "clone": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "328",
               "end_line": "338",
               "source_code": "        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();\n\n        node.iBalance = b;\n\n        row.keepInMemory(false);\n\n        return node;"
           }

       },

       {
           "id": "clone_43",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "532",
               "end_line": "537",
               "source_code": "                break;\n\n            case LobResultTypes.RESPONSE_SET :\n            case LobResultTypes.RESPONSE_CREATE_BYTES :\n            case LobResultTypes.RESPONSE_CREATE_CHARS :\n            case LobResultTypes.RESPONSE_TRUNCATE :"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "423",
               "end_line": "428",
               "source_code": "                break;\n\n            case LobResultTypes.RESPONSE_SET :\n            case LobResultTypes.RESPONSE_CREATE_BYTES :\n            case LobResultTypes.RESPONSE_CREATE_CHARS :\n            case LobResultTypes.RESPONSE_TRUNCATE :"
           }

       },

       {
           "id": "clone_44",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberType.java",
               "start_line": "2005",
               "end_line": "2015",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1040",
               "end_line": "1050",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;"
           }

       },

       {
           "id": "clone_45",

           "clone_type": "type-1",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "257",
               "end_line": "276",
               "source_code": "        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();\n\n        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n        }"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "221",
               "end_line": "240",
               "source_code": "        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();\n\n        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n        }"
           }

       },

       {
           "id": "clone_46",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "1989",
               "end_line": "2006",
               "source_code": "        switch (targetType.typeCode) {\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                targetType = Type.SQL_DECIMAL;\n\n                break;\n            case Types.SQL_DOUBLE :\n            default :\n                targetType = Type.SQL_DECIMAL_DEFAULT;\n\n                break;\n        }"
           },

           "clone": {
               "file": "JDBCCallableStatement.java",
               "start_line": "983",
               "end_line": "1000",
               "source_code": "        switch (targetType.typeCode) {\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                targetType = Type.SQL_DECIMAL;\n\n                break;\n            case Types.SQL_DOUBLE :\n            default :\n                targetType = Type.SQL_DECIMAL_DEFAULT;\n\n                break;\n        }"
           }

       },

       {
           "id": "clone_47",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7136",
               "end_line": "7142",
               "source_code": "        // column number mappings\n        final int trigger_catalog = 0;\n        final int trigger_schema  = 1;\n        final int trigger_name    = 2;\n        final int table_catalog   = 3;\n        final int table_schema    = 4;\n        final int table_name      = 5;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6799",
               "end_line": "6805",
               "source_code": "        // column number mappings\n        final int trigger_catalog = 0;\n        final int trigger_schema  = 1;\n        final int trigger_name    = 2;\n        final int table_catalog   = 3;\n        final int table_schema    = 4;\n        final int table_name      = 5;"
           }

       },

       {
           "id": "clone_48",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5645",
               "end_line": "5653",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5056",
               "end_line": "5064",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_49",

           "clone_type": "type-1",

           "origin": {
               "file": "WebServerConnection.java",
               "start_line": "395",
               "end_line": "400",
               "source_code": "                dataOut.writeByte(ResultConstants.DISCONNECT);    // Mode\n                dataOut.writeInt(4);                              //Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                dataOut.writeByte(ResultConstants.NONE);          // No Additional results\n                dataOut.close();\n\n                return;"
           },

           "clone": {
               "file": "Servlet.java",
               "start_line": "299",
               "end_line": "304",
               "source_code": "                    dataOut.writeByte(ResultConstants.DISCONNECT);      // Mode\n                    dataOut.writeInt(4);                                //Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            // No Additional results\n                    dataOut.close();\n\n                    return;"
           }

       },

       {
           "id": "clone_50",

           "clone_type": "type-1",

           "origin": {
               "file": "TestSql.java",
               "start_line": "852",
               "end_line": "860",
               "source_code": "            r = sStatement.executeQuery(s);\n\n            r.next();\n\n            b1n = r.getBytes(1);\n\n            r.next();\n\n            b1n = r.getBytes(1);"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "839",
               "end_line": "847",
               "source_code": "            r = sStatement.executeQuery(s);\n\n            r.next();\n\n            b1n = r.getBytes(1);\n\n            r.next();\n\n            b1n = r.getBytes(1);"
           }

       },

       {
           "id": "clone_51",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "336",
               "end_line": "349",
               "source_code": "        System.out.println(\"\\n--------------------\");\n        System.out.println(\"Time to execute \" + transaction_count\n                           + \" transactions: \" + completion_time\n                           + \" seconds.\");\n        System.out.println(\"Max/Min memory usage: \"\n                           + (MemoryWatcher.max / 1024) + \" / \"\n                           + (MemoryWatcher.min / 1024) + \" kb\");\n        System.out.println(failed_transactions + \" / \" + transaction_count\n                           + \" failed to complete.\");\n\n        double rate = (transaction_count - failed_transactions)\n                      / completion_time;\n\n        System.out.println(\"Transaction rate: \" + rate + \" txn/sec.\");"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "327",
               "end_line": "340",
               "source_code": "        System.out.println(\"\\n--------------------\");\n        System.out.println(\"Time to execute \" + transaction_count\n                           + \" transactions: \" + completion_time\n                           + \" seconds.\");\n        System.out.println(\"Max/Min memory usage: \"\n                           + (MemoryWatcher.max / 1024) + \" / \"\n                           + (MemoryWatcher.min / 1024) + \" kb\");\n        System.out.println(failed_transactions + \" / \" + transaction_count\n                           + \" failed to complete.\");\n\n        double rate = (transaction_count - failed_transactions)\n                      / completion_time;\n\n        System.out.println(\"Transaction rate: \" + rate + \" txn/sec.\");"
           }

       },

       {
           "id": "clone_52",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "884",
               "end_line": "895",
               "source_code": "            lTime = System.currentTimeMillis() - lTime;\n            g[0]  = \"SQL Error\";\n\n            gResult.setHead(g);\n\n            String s = e.getMessage();\n\n            s    += \" / Error Code: \" + e.getErrorCode();\n            s    += \" / State: \" + e.getSQLState();\n            g[0] = s;\n\n            gResult.addRow(g);"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1671",
               "end_line": "1682",
               "source_code": "            lTime = System.currentTimeMillis() - lTime;\n            g[0]  = \"SQL Error\";\n\n            gResult.setHead(g);\n\n            String s = e.getMessage();\n\n            s    += \" / Error Code: \" + e.getErrorCode();\n            s    += \" / State: \" + e.getSQLState();\n            g[0] = s;\n\n            gResult.addRow(g);"
           }

       },

       {
           "id": "clone_53",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberSequence.java",
               "start_line": "509",
               "end_line": "539",
               "source_code": "        switch (dataType.typeCode) {\n\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n        }"
           },

           "clone": {
               "file": "NumberSequence.java",
               "start_line": "468",
               "end_line": "498",
               "source_code": "        switch (dataType.typeCode) {\n\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n        }"
           }

       },

       {
           "id": "clone_54",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "191",
               "end_line": "202",
               "source_code": "            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 / 1000D;\n\n                System.out.println(\"done. in \" + seconds + \" seconds\\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "207",
               "end_line": "218",
               "source_code": "            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 / 1000D;\n\n                System.out.println(\"done. in \" + seconds + \" seconds\\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }"
           }

       },

       {
           "id": "clone_55",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "532",
               "end_line": "538",
               "source_code": "            Long           lobID    = getNewLobID();\n            ResultMetaData meta     = createLob.getParametersMetaData();\n            Object         params[] = new Object[meta.getColumnCount()];\n\n            params[LOB_IDS.LOB_ID]          = lobID;\n            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);\n            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "507",
               "end_line": "513",
               "source_code": "            Long           lobID    = getNewLobID();\n            ResultMetaData meta     = createLob.getParametersMetaData();\n            Object         params[] = new Object[meta.getColumnCount()];\n\n            params[LOB_IDS.LOB_ID]          = lobID;\n            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);\n            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;"
           }

       },

       {
           "id": "clone_56",

           "clone_type": "type-1",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "525",
               "end_line": "533",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "BitType.java",
               "start_line": "275",
               "end_line": "283",
               "source_code": "            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_57",

           "clone_type": "type-1",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "335",
               "end_line": "365",
               "source_code": "                if (!other.isDateTimeType()) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n\n                DateTimeType otherType = (DateTimeType) other;\n\n                // DATE with TIME caught here\n                if (otherType.startIntervalType > endIntervalType\n                        || startIntervalType > otherType.endIntervalType) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n\n                int     newType = typeCode;\n                int     scale   = this.scale > otherType.scale ? this.scale\n                                                               : otherType\n                                                                   .scale;\n                boolean zone    = withTimeZone || otherType.withTimeZone;\n                int startType = otherType.startIntervalType\n                                > startIntervalType ? startIntervalType\n                                                    : otherType\n                                                        .startIntervalType;\n\n                if (startType == Types.SQL_INTERVAL_HOUR) {\n                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE\n                                   : Types.SQL_TIME;\n                } else {\n                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE\n                                   : Types.SQL_TIMESTAMP;\n                }\n\n                return getDateTimeType(newType, scale);"
           },

           "clone": {
               "file": "DateTimeType.java",
               "start_line": "286",
               "end_line": "314",
               "source_code": "        if (!other.isDateTimeType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n\n        DateTimeType otherType = (DateTimeType) other;\n\n        // DATE with TIME caught here\n        if (otherType.startIntervalType > endIntervalType\n                || startIntervalType > otherType.endIntervalType) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n\n        int     newType = typeCode;\n        int     scale   = this.scale > otherType.scale ? this.scale\n                                                       : otherType.scale;\n        boolean zone    = withTimeZone || otherType.withTimeZone;\n        int startType = otherType.startIntervalType > startIntervalType\n                        ? startIntervalType\n                        : otherType.startIntervalType;\n\n        if (startType == Types.SQL_INTERVAL_HOUR) {\n            newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE\n                           : Types.SQL_TIME;\n        } else {\n            newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE\n                           : Types.SQL_TIMESTAMP;\n        }\n\n        return getDateTimeType(newType, scale);"
           }

       },

       {
           "id": "clone_58",

           "clone_type": "type-1",

           "origin": {
               "file": "TestMultiInsert.java",
               "start_line": "69",
               "end_line": "88",
               "source_code": "    private void printTable(String table, String cols, int expected) throws SQLException {\n        int rows = 0;\n        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);\n\n        ResultSetMetaData rsmd = rs.getMetaData();\n        String result = \"Table \" + table + \", expecting \"\n            + expected + \" rows total:\\n\";\n\n        while (rs.next()) {\n            for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                result += rsmd.getColumnLabel(i + 1) + \":\"\n                           + rs.getString(i + 1) + \":\";\n            }\n            result += \"\\n\";\n            rows++;\n        }\n        rs.close();\n        System.out.println(result);\n        assertEquals(expected, rows);\n    }"
           },

           "clone": {
               "file": "TestMerge.java",
               "start_line": "69",
               "end_line": "96",
               "source_code": "    /**\n     * Prints a table displaying specified columns, and checks the expected\n     * number of rows.\n     */\n    private void printTable(String table, String cols,\n                            int expected) throws SQLException {\n\n        int               rows = 0;\n        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);\n        ResultSetMetaData rsmd = rs.getMetaData();\n        String result = \"Table \" + table + \", expecting \" + expected\n                        + \" rows total:\\n\";\n\n        while (rs.next()) {\n            for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                result += rsmd.getColumnLabel(i + 1) + \":\"\n                          + rs.getString(i + 1) + \":\";\n            }\n\n            result += \"\\n\";\n\n            rows++;\n        }\n\n        rs.close();\n        System.out.println(result);\n        assertEquals(expected, rows);\n    }"
           }

       },

       {
           "id": "clone_59",

           "clone_type": "type-1",

           "origin": {
               "file": "TestUtil.java",
               "start_line": "1096",
               "end_line": "1105",
               "source_code": "        /* Can't use the super constructor, since it does funny things when\n         * constructing the SQL Buffer, which we don't need. */\n        lines = (String[]) linesArray.toArray();\n\n        int    closeCmd = lines[0].indexOf(\"*/\");\n        String cmd      = lines[0].substring(0, closeCmd);\n\n        lines[0] = lines[0].substring(closeCmd + 2).trim();\n\n        String trimmed = cmd.trim();"
           },

           "clone": {
               "file": "TestUtil.java",
               "start_line": "1004",
               "end_line": "1013",
               "source_code": "        /* Can't user the super constructor, since it does funny things when\n         * constructing the SQL Buffer, which we don't need. */\n        lines = (String[]) linesArray.toArray();\n\n        int    closeCmd = lines[0].indexOf(\"*/\");\n        String cmd      = lines[0].substring(0, closeCmd);\n\n        lines[0] = lines[0].substring(closeCmd + 2).trim();\n\n        String trimmed = cmd.trim();"
           }

       },

       {
           "id": "clone_60",

           "clone_type": "type-1",

           "origin": {
               "file": "Grid.java",
               "start_line": "178",
               "end_line": "204",
               "source_code": "    /**\n     * Method declaration\n     *\n     *\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     */\n    public void setBounds(int x, int y, int w, int h) {\n\n        // fredt@users 20011210 - patch 450412 by elise@users\n        super.setBounds(x, y, w, h);\n\n        iSbHeight = sbHoriz.getPreferredSize().height;\n        iSbWidth  = sbVert.getPreferredSize().width;\n        iHeight   = h - iSbHeight;\n        iWidth    = w - iSbWidth;\n\n        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);\n        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);\n        adjustScroll();\n\n        iImage = null;\n\n        repaint();\n    }"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "159",
               "end_line": "187",
               "source_code": "    /**\n     * Method declaration\n     *\n     *\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     */\n\n// fredt@users 20011210 - patch 450412 by elise@users\n// with additional replacement of deprecated methods\n    public void setBounds(int x, int y, int w, int h) {\n\n        super.setBounds(x, y, w, h);\n\n        iSbHeight = sbHoriz.getPreferredSize().height;\n        iSbWidth  = sbVert.getPreferredSize().width;\n        iHeight   = h - iSbHeight;\n        iWidth    = w - iSbWidth;\n\n        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);\n        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);\n        adjustScroll();\n\n        iImage = null;\n\n        repaint();\n    }"
           }

       },

       {
           "id": "clone_61",

           "clone_type": "type-1",

           "origin": {
               "file": "Types.java",
               "start_line": "694",
               "end_line": "706",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1089",
               "end_line": "1101",
               "source_code": "            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_YEAR_TO_MONTH :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           }

       },

       {
           "id": "clone_62",

           "clone_type": "type-1",

           "origin": {
               "file": "RowSetNavigatorData.java",
               "start_line": "441",
               "end_line": "448",
               "source_code": "        Object[]    compareData = null;\n        RowIterator it;\n        Object[]    otherData = null;\n\n        sortFull(session);\n        other.sortFull(session);\n\n        it = queryExpression.fullIndex.emptyIterator();"
           },

           "clone": {
               "file": "RowSetNavigatorData.java",
               "start_line": "385",
               "end_line": "392",
               "source_code": "        Object[]    compareData = null;\n        RowIterator it;\n        Object[]    otherData = null;\n\n        sortFull(session);\n        other.sortFull(session);\n\n        it = queryExpression.fullIndex.emptyIterator();"
           }

       },

       {
           "id": "clone_63",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "2034",
               "end_line": "2043",
               "source_code": "            case FUNC_CURRENT_CATALOG :\n            case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :\n            case FUNC_CURRENT_PATH :\n            case FUNC_CURRENT_ROLE :\n            case FUNC_CURRENT_SCHEMA :\n            case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :\n            case FUNC_CURRENT_USER :\n            case FUNC_SESSION_USER :\n            case FUNC_SYSTEM_USER :\n            case FUNC_USER :"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1714",
               "end_line": "1727",
               "source_code": "            /*\n            case FUNCTION_CHAR_NORMALIZE :\n                break;\n            */\n            case FUNC_CURRENT_CATALOG :\n            case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :\n            case FUNC_CURRENT_PATH :\n            case FUNC_CURRENT_ROLE :\n            case FUNC_CURRENT_SCHEMA :\n            case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :\n            case FUNC_CURRENT_USER :\n            case FUNC_SESSION_USER :\n            case FUNC_SYSTEM_USER :\n            case FUNC_USER :"
           }

       },

       {
           "id": "clone_64",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSimple.java",
               "start_line": "106",
               "end_line": "119",
               "source_code": "    protected String describe(Session session, int blanks) {\n\n        StringBuffer sb = new StringBuffer();\n\n        sb.append('\\n');\n\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n\n        sb.append(Tokens.T_STATEMENT);\n\n        return sb.toString();\n    }"
           },

           "clone": {
               "file": "StatementSet.java",
               "start_line": "270",
               "end_line": "283",
               "source_code": "    protected String describe(Session session, int blanks) {\n\n        StringBuffer sb = new StringBuffer();\n\n        sb.append('\\n');\n\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n\n        sb.append(Tokens.T_STATEMENT);\n\n        return sb.toString();\n    }"
           }

       },

       {
           "id": "clone_65",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1110",
               "end_line": "1130",
               "source_code": "                if (data[0] == null || data[1] == null || data[2] == null) {\n                    return null;\n                }\n\n                Object value;\n\n                value = Type.SQL_BIGINT.convertToType(session, data[2],\n                                                      nodes[2].dataType);\n\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;\n\n                if (nodes[3] != null) {\n                    if (data[3] == null) {\n                        return null;\n                    }\n\n                    value = Type.SQL_BIGINT.convertToType(session, data[3],\n                                                          nodes[3].dataType);\n                    length = ((Number) value).longValue();\n                }"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "1013",
               "end_line": "1033",
               "source_code": "                if (data[0] == null || data[1] == null || data[2] == null) {\n                    return null;\n                }\n\n                Object value;\n\n                value = Type.SQL_BIGINT.convertToType(session, data[2],\n                                                      nodes[2].dataType);\n\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;\n\n                if (nodes[3] != null) {\n                    if (data[3] == null) {\n                        return null;\n                    }\n\n                    value = Type.SQL_BIGINT.convertToType(session, data[3],\n                                                          nodes[3].dataType);\n                    length = ((Number) value).longValue();\n                }"
           }

       },

       {
           "id": "clone_66",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "816",
               "end_line": "830",
               "source_code": "            rs.close();\n\n            rs = st1.executeQuery(\"select sum(delta) from history\");\n\n            rs.next();\n\n            deltasum = rs.getInt(1);\n\n            rs.close();\n\n            rs = null;\n\n            st1.close();\n\n            st1 = null;"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "727",
               "end_line": "741",
               "source_code": "            rs.close();\n\n            rs = st1.executeQuery(\"select sum(delta) from history\");\n\n            rs.next();\n\n            deltasum = rs.getInt(1);\n\n            rs.close();\n\n            rs = null;\n\n            st1.close();\n\n            st1 = null;"
           }

       },

       {
           "id": "clone_67",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "1482",
               "end_line": "1503",
               "source_code": "    static void checkSchemaUpdateAuthorisation(Session session,\n            HsqlName schema) {\n\n        if (session.isProcessingLog()) {\n            return;\n        }\n\n        if (SqlInvariants.isSystemSchemaName(schema.name)) {\n            throw Error.error(ErrorCode.X_42503);\n        }\n\n        if (session.parser.isSchemaDefinition) {\n            if (schema == session.getCurrentSchemaHsqlName()) {\n                return;\n            }\n\n            Error.error(ErrorCode.X_42505, schema.name);\n        }\n\n        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);\n        session.checkDDLWrite();\n    }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "5185",
               "end_line": "5205",
               "source_code": "    void checkSchemaUpdateAuthorisation(Session session, HsqlName schema) {\n\n        if (session.isProcessingLog()) {\n            return;\n        }\n\n        if (SqlInvariants.isSystemSchemaName(schema.name)) {\n            throw Error.error(ErrorCode.X_42503);\n        }\n\n        if (session.parser.isSchemaDefinition) {\n            if (schema == session.getCurrentSchemaHsqlName()) {\n                return;\n            }\n\n            Error.error(ErrorCode.X_42505, schema.name);\n        }\n\n        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);\n        session.checkDDLWrite();\n    }"
           }

       },

       {
           "id": "clone_68",

           "clone_type": "type-1",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "153",
               "end_line": "163",
               "source_code": "        pstmt = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "106",
               "end_line": "116",
               "source_code": "        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_69",

           "clone_type": "type-1",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "755",
               "end_line": "759",
               "source_code": "        case '\\u000B':\n        case '\\u000C':\n        case '\\u0085':\n        case '\\u2028':\n        case '\\u2029':"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "705",
               "end_line": "709",
               "source_code": "        case '\\u000B':\n        case '\\u000C':\n        case '\\u0085':\n        case '\\u2028':\n        case '\\u2029':"
           }

       },

       {
           "id": "clone_70",

           "clone_type": "type-1",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "1312",
               "end_line": "1317",
               "source_code": "                        case ResultConstants.DATA :\n                            break;\n\n                        case ResultConstants.ERROR :\n                            throw new RecoverableOdbcFailure(rOut);\n                        default :"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "740",
               "end_line": "745",
               "source_code": "                            case ResultConstants.DATA :\n                                break;\n\n                            case ResultConstants.ERROR :\n                                throw new RecoverableOdbcFailure(rOut);\n                            default :"
           }

       },

       {
           "id": "clone_71",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6606",
               "end_line": "6611",
               "source_code": "        // Intermediate holders\n        Iterator     tables;\n        Table        table;\n        Constraint[] constraints;\n        int          constraintCount;\n        Constraint   constraint;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2893",
               "end_line": "2898",
               "source_code": "        // Intermediate holders\n        Iterator     tables;\n        Table        table;\n        Constraint[] constraints;\n        int          constraintCount;\n        Constraint   constraint;"
           }

       },

       {
           "id": "clone_72",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3621",
               "end_line": "3629",
               "source_code": "                read();\n                readThis(Tokens.OPENBRACKET);\n\n                e = XreadRowElementList(true);\n\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n\n            default :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2376",
               "end_line": "2384",
               "source_code": "                read();\n                readThis(Tokens.OPENBRACKET);\n\n                e = XreadRowElementList(true);\n\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n\n            default :"
           }

       },

       {
           "id": "clone_73",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionColumn.java",
               "start_line": "469",
               "end_line": "474",
               "source_code": "                                dataType   = seq.getDataType();\n                                sequence   = seq;\n                                schema     = null;\n                                tableName  = null;\n                                columnName = null;\n                                resolved   = true;"
           },

           "clone": {
               "file": "ExpressionColumn.java",
               "start_line": "454",
               "end_line": "459",
               "source_code": "                                dataType   = seq.getDataType();\n                                sequence   = seq;\n                                schema     = null;\n                                tableName  = null;\n                                columnName = null;\n                                resolved   = true;"
           }

       },

       {
           "id": "clone_74",

           "clone_type": "type-1",

           "origin": {
               "file": "TestCacheSize.java",
               "start_line": "929",
               "end_line": "934",
               "source_code": "        StopWatch        sw        = new StopWatch();\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;\n        int              count     = 0;\n        int              random    = 0;"
           },

           "clone": {
               "file": "TestCacheSize.java",
               "start_line": "878",
               "end_line": "883",
               "source_code": "        StopWatch        sw        = new StopWatch();\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;\n        int              count     = 0;\n        int              random    = 0;"
           }

       },

       {
           "id": "clone_75",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "1897",
               "end_line": "1902",
               "source_code": "                read();\n                readThis(Tokens.MEMORY);\n                readThis(Tokens.ROWS);\n\n                Integer  size = readIntegerObject();\n                Object[] args = new Object[]{ size };"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "419",
               "end_line": "424",
               "source_code": "                read();\n                readThis(Tokens.MEMORY);\n                readThis(Tokens.ROWS);\n\n                Integer  size = readIntegerObject();\n                Object[] args = new Object[]{ size };"
           }

       },

       {
           "id": "clone_76",

           "clone_type": "type-1",

           "origin": {
               "file": "TestAllTypes.java",
               "start_line": "383",
               "end_line": "387",
               "source_code": "        StopWatch        sw        = new StopWatch();\n        int              smallrows = 0xfff;\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;"
           },

           "clone": {
               "file": "TestAllTypes.java",
               "start_line": "328",
               "end_line": "332",
               "source_code": "        StopWatch        sw        = new StopWatch();\n        int              smallrows = 0xfff;\n        java.util.Random randomgen = new java.util.Random();\n        int              i         = 0;\n        boolean          slow      = false;"
           }

       },

       {
           "id": "clone_77",

           "clone_type": "type-1",

           "origin": {
               "file": "ScriptWriterEncode.java",
               "start_line": "102",
               "end_line": "118",
               "source_code": "    protected void openFile() {\n\n        try {\n            FileAccess   fa  = isDump ? FileUtil.getFileUtil()\n                                      : database.logger.getFileAccess();\n            OutputStream fos = fa.openOutputStreamElement(outFile);\n\n            outDescriptor = fa.getFileSync(fos);\n            fileStreamOut = fos;\n            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n        }\n    }"
           },

           "clone": {
               "file": "ScriptWriterBase.java",
               "start_line": "265",
               "end_line": "285",
               "source_code": "    /**\n     *  File is opened in append mode although in current usage the file\n     *  never pre-exists\n     */\n    protected void openFile() {\n\n        try {\n            FileAccess   fa  = isDump ? FileUtil.getFileUtil()\n                                      : database.logger.getFileAccess();\n            OutputStream fos = fa.openOutputStreamElement(outFile);\n\n            outDescriptor = fa.getFileSync(fos);\n            fileStreamOut = fos;\n            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n        }\n    }"
           }

       },

       {
           "id": "clone_78",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "837",
               "end_line": "841",
               "source_code": "            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);            // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not null\n            addColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);          // 6\n            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);        // 7"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "643",
               "end_line": "647",
               "source_code": "            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);         // not null\n            addColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);        // not null\n            addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);\n            addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);"
           }

       },

       {
           "id": "clone_79",

           "clone_type": "type-1",

           "origin": {
               "file": "PostgresTransferHelper.java",
               "start_line": "120",
               "end_line": "135",
               "source_code": "        if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n\n            t.Stmts.sDestDrop += DropSequence;\n        }"
           },

           "clone": {
               "file": "OracleTransferHelper.java",
               "start_line": "98",
               "end_line": "113",
               "source_code": "        if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n\n            t.Stmts.sDestDrop += DropSequence;\n        }"
           }

       },

       {
           "id": "clone_80",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8291",
               "end_line": "8296",
               "source_code": "            addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);    // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8041",
               "end_line": "8046",
               "source_code": "            addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_81",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "449",
               "end_line": "466",
               "source_code": "        if (exprList.size() > 1) {\n            throw Error.parseError(ErrorCode.X_42602, null,\n                                   scanner.getLineNumber());\n        }\n\n        Expression expression = (Expression) exprList.get(0);\n\n        if (expression.getDegree() != targetSet.size()) {\n            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);\n        }\n\n        int[] columnMap = new int[colIndexList.size()];\n\n        colIndexList.toArray(columnMap);\n\n        Expression[] targets = new Expression[targetSet.size()];\n\n        targetSet.toArray(targets);"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "388",
               "end_line": "405",
               "source_code": "        if (exprList.size() > 1) {\n            throw Error.parseError(ErrorCode.X_42602, null,\n                                   scanner.getLineNumber());\n        }\n\n        Expression expression = (Expression) exprList.get(0);\n\n        if (expression.getDegree() != targetSet.size()) {\n            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);\n        }\n\n        int[] columnMap = new int[colIndexList.size()];\n\n        colIndexList.toArray(columnMap);\n\n        Expression[] targets = new Expression[targetSet.size()];\n\n        targetSet.toArray(targets);"
           }

       },

       {
           "id": "clone_82",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "726",
               "end_line": "748",
               "source_code": "                readThis(Tokens.TYPE);\n\n                int type = TableBase.MEMORY_TABLE;\n\n                switch (token.tokenType) {\n\n                    case Tokens.MEMORY :\n                        break;\n\n                    case Tokens.CACHED :\n                        type = TableBase.CACHED_TABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }\n\n                read();\n\n                Object[] args = new Object[]{ ValuePool.getInt(type) };\n\n                return new StatementCommand(\n                    StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "431",
               "end_line": "453",
               "source_code": "                readThis(Tokens.TYPE);\n\n                int type = TableBase.MEMORY_TABLE;\n\n                switch (token.tokenType) {\n\n                    case Tokens.MEMORY :\n                        break;\n\n                    case Tokens.CACHED :\n                        type = TableBase.CACHED_TABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }\n\n                read();\n\n                Object[] args = new Object[]{ ValuePool.getInt(type) };\n\n                return new StatementCommand(\n                    StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);"
           }

       },

       {
           "id": "clone_83",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3377",
               "end_line": "3387",
               "source_code": "        // intermediate holders\n        Iterator tables;\n        Table    table;\n        Object[] row;\n\n        // column number mappings\n        final int grantor        = 0;\n        final int grantee        = 1;\n        final int table_catalog  = 2;\n        final int table_schema   = 3;\n        final int table_name     = 4;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2951",
               "end_line": "2960",
               "source_code": "        Iterator tables;\n        Table    table;\n        Object[] row;\n\n// column number mappings\n        final int grantor        = 0;\n        final int grantee        = 1;\n        final int table_catalog  = 2;\n        final int table_schema   = 3;\n        final int table_name     = 4;"
           }

       },

       {
           "id": "clone_84",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserCommand.java",
               "start_line": "730",
               "end_line": "741",
               "source_code": "                switch (token.tokenType) {\n\n                    case Tokens.MEMORY :\n                        break;\n\n                    case Tokens.CACHED :\n                        type = TableBase.CACHED_TABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }"
           },

           "clone": {
               "file": "ParserCommand.java",
               "start_line": "435",
               "end_line": "446",
               "source_code": "                switch (token.tokenType) {\n\n                    case Tokens.MEMORY :\n                        break;\n\n                    case Tokens.CACHED :\n                        type = TableBase.CACHED_TABLE;\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }"
           }

       },

       {
           "id": "clone_85",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementCompound.java",
               "start_line": "499",
               "end_line": "514",
               "source_code": "            for (int i = 0; i < statements.length; i++) {\n                result = executeProtected(session, statements[i]);\n                result = handleCondition(session, result);\n\n                if (result.isError()) {\n                    break;\n                }\n\n                if (result.getType() == ResultConstants.VALUE) {\n                    break;\n                }\n\n                if (result.getType() == ResultConstants.DATA) {\n                    break;\n                }\n            }"
           },

           "clone": {
               "file": "StatementCompound.java",
               "start_line": "375",
               "end_line": "390",
               "source_code": "        for (int i = 0; i < statements.length; i++) {\n            result = executeProtected(session, statements[i]);\n            result = handleCondition(session, result);\n\n            if (result.isError()) {\n                break;\n            }\n\n            if (result.getType() == ResultConstants.VALUE) {\n                break;\n            }\n\n            if (result.getType() == ResultConstants.DATA) {\n                break;\n            }\n        }"
           }

       },

       {
           "id": "clone_86",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "120",
               "end_line": "131",
               "source_code": "            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.ASSERTION :\n            case SchemaObject.TRIGGER :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "89",
               "end_line": "100",
               "source_code": "            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.ASSERTION :\n            case SchemaObject.TRIGGER :"
           }

       },

       {
           "id": "clone_87",

           "clone_type": "type-1",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "221",
               "end_line": "225",
               "source_code": "        c.core.uniqueName = uniqueConstraint.getName();\n        c.core.mainName   = mainName;\n        c.core.mainIndex  = mainIndex;\n        c.core.refTable   = table;\n        c.core.refName    = c.getName();"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "1433",
               "end_line": "1437",
               "source_code": "        c.core.uniqueName = uniqueConstraint.getName();\n        c.core.mainName   = mainName;\n        c.core.mainIndex  = mainIndex;\n        c.core.refTable   = table;\n        c.core.refName    = c.getName();"
           }

       },

       {
           "id": "clone_88",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3350",
               "end_line": "3357",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n            addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4819",
               "end_line": "4826",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null\n            addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);"
           }

       },

       {
           "id": "clone_89",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2462",
               "end_line": "2478",
               "source_code": "        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;\n        final int column_name   = 6;\n\n        // intermediate holders\n        int      columnCount;\n        Iterator tables;\n        Table    table;\n        Object[] row;\n        Type     type;\n        HsqlName tableName;\n\n        // Initialization\n        tables = allTables();\n\n        Grantee grantee = session.getGrantee();"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2344",
               "end_line": "2360",
               "source_code": "        final int table_catalog  = 3;\n        final int table_schema   = 4;\n        final int table_name     = 5;\n        final int column_name    = 6;\n\n        // intermediate holders\n        int      columnCount;\n        Iterator tables;\n        Table    table;\n        Object[] row;\n        Type     type;\n        HsqlName tableName;\n\n        // Initialization\n        tables = allTables();\n\n        Grantee grantee = session.getGrantee();"
           }

       },

       {
           "id": "clone_90",

           "clone_type": "type-1",

           "origin": {
               "file": "RowType.java",
               "start_line": "362",
               "end_line": "376",
               "source_code": "        if (a == b) {\n            return 0;\n        }\n\n        // not related to sort\n        if (a == null) {\n            return -1;\n        }\n\n        if (b == null) {\n            return 1;\n        }\n\n        Object[] arra   = (Object[]) a;\n        Object[] arrb   = (Object[]) b;"
           },

           "clone": {
               "file": "RowType.java",
               "start_line": "119",
               "end_line": "132",
               "source_code": "        if (a == b) {\n            return 0;\n        }\n\n        if (a == null) {\n            return -1;\n        }\n\n        if (b == null) {\n            return 1;\n        }\n\n        Object[] arra   = (Object[]) a;\n        Object[] arrb   = (Object[]) b;"
           }

       },

       {
           "id": "clone_91",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7118",
               "end_line": "7123",
               "source_code": "            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6780",
               "end_line": "6785",
               "source_code": "            addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null"
           }

       },

       {
           "id": "clone_92",

           "clone_type": "type-1",

           "origin": {
               "file": "NodeAVLDisk.java",
               "start_line": "143",
               "end_line": "154",
               "source_code": "    public void delete() {\n\n        iLeft    = NO_POS;\n        iRight   = NO_POS;\n        iParent  = NO_POS;\n        nLeft    = null;\n        nRight   = null;\n        nParent  = null;\n        iBalance = 0;\n\n        row.setNodesChanged();\n    }"
           },

           "clone": {
               "file": "NodeAVLDiskLarge.java",
               "start_line": "99",
               "end_line": "110",
               "source_code": "    public void delete() {\n\n        iLeft    = NO_POS;\n        iRight   = NO_POS;\n        iParent  = NO_POS;\n        nLeft    = null;\n        nRight   = null;\n        nParent  = null;\n        iBalance = 0;\n\n        row.setNodesChanged();\n    }"
           }

       },

       {
           "id": "clone_93",

           "clone_type": "type-1",

           "origin": {
               "file": "ClobInputStream.java",
               "start_line": "117",
               "end_line": "132",
               "source_code": "    public long skip(long n) throws IOException {\n\n        checkClosed();\n\n        if (n <= 0) {\n            return 0;\n        }\n\n        if (currentPosition + n > availableLength) {\n            n = availableLength - currentPosition;\n        }\n\n        currentPosition += n;\n\n        return n;\n    }"
           },

           "clone": {
               "file": "BlobInputStream.java",
               "start_line": "98",
               "end_line": "113",
               "source_code": "    public long skip(long n) throws IOException {\n\n        checkClosed();\n\n        if (n <= 0) {\n            return 0;\n        }\n\n        if (currentPosition + n > availableLength) {\n            n = availableLength - currentPosition;\n        }\n\n        currentPosition += n;\n\n        return n;\n    }"
           }

       },

       {
           "id": "clone_94",

           "clone_type": "type-1",

           "origin": {
               "file": "NodeAVLDisk.java",
               "start_line": "407",
               "end_line": "419",
               "source_code": "        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           },

           "clone": {
               "file": "NodeAVLDisk.java",
               "start_line": "382",
               "end_line": "394",
               "source_code": "        NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n        }\n\n        if (!row.isInMemory()) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");\n        }\n\n        row.setNodesChanged();"
           }

       },

       {
           "id": "clone_95",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4512",
               "end_line": "4516",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.OTHER :\n                throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));\n            default :"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4480",
               "end_line": "4484",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.OTHER :\n                throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));\n            default :"
           }

       },

       {
           "id": "clone_96",

           "clone_type": "type-1",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1506",
               "end_line": "1513",
               "source_code": "                if (charAt(currentPosition + 1) == '>') {\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "1489",
               "end_line": "1496",
               "source_code": "                if (charAt(currentPosition + 1) == '=') {\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n\n                    return;\n                }"
           }

       },

       {
           "id": "clone_97",

           "clone_type": "type-1",

           "origin": {
               "file": "RowInputTextLog.java",
               "start_line": "457",
               "end_line": "469",
               "source_code": "        readFieldPrefix();\n\n        if (scanner.scanNull()) {\n            return null;\n        }\n\n        scanner.scanBinaryStringWithQuote();\n\n        if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) {\n            throw Error.error(ErrorCode.X_42587);\n        }\n\n        value = scanner.getValue();"
           },

           "clone": {
               "file": "RowInputTextLog.java",
               "start_line": "419",
               "end_line": "431",
               "source_code": "        readFieldPrefix();\n\n        if (scanner.scanNull()) {\n            return null;\n        }\n\n        scanner.scanBinaryStringWithQuote();\n\n        if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) {\n            throw Error.error(ErrorCode.X_42587);\n        }\n\n        value = scanner.getValue();"
           }

       },

       {
           "id": "clone_98",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4029",
               "end_line": "4033",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);                        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);                       // not null\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);                 // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2534",
               "end_line": "2538",
               "source_code": "            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_99",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4266",
               "end_line": "4287",
               "source_code": "            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3539",
               "end_line": "3560",
               "source_code": "            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_100",

           "clone_type": "type-1",

           "origin": {
               "file": "QueryExpression.java",
               "start_line": "763",
               "end_line": "771",
               "source_code": "        StringBuffer sb;\n        String       temp;\n        StringBuffer b = new StringBuffer(blanks);\n\n        for (int i = 0; i < blanks; i++) {\n            b.append(' ');\n        }\n\n        sb = new StringBuffer();"
           },

           "clone": {
               "file": "QuerySpecification.java",
               "start_line": "1959",
               "end_line": "1967",
               "source_code": "        StringBuffer sb;\n        String       temp;\n        StringBuffer b = new StringBuffer(blanks);\n\n        for (int i = 0; i < blanks; i++) {\n            b.append(' ');\n        }\n\n        sb = new StringBuffer();"
           }

       },

       {
           "id": "clone_101",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "159",
               "end_line": "168",
               "source_code": "            int size = object.getRealSize(cache.rowOut);\n\n            size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;\n            size = cache.rowOut.getStorageSize(size);\n\n            object.setStorageSize(size);\n\n            long pos = tableSpace.getFilePosition(size, false);\n\n            object.setPos(pos);"
           },

           "clone": {
               "file": "RowStoreAVLHybridExtended.java",
               "start_line": "80",
               "end_line": "89",
               "source_code": "            int size = object.getRealSize(cache.rowOut);\n\n            size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;\n            size = cache.rowOut.getStorageSize(size);\n\n            object.setStorageSize(size);\n\n            long pos = tableSpace.getFilePosition(size, false);\n\n            object.setPos(pos);"
           }

       },

       {
           "id": "clone_102",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "603",
               "end_line": "612",
               "source_code": "            for (int i = 0; i < 100; i++) {\n                reader = dataClob.getCharacterStream();\n\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "530",
               "end_line": "539",
               "source_code": "            for (int i = 0; i < 1000; i++) {\n                reader = dataClob.getCharacterStream();\n\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }"
           }

       },

       {
           "id": "clone_103",

           "clone_type": "type-1",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1181",
               "end_line": "1187",
               "source_code": "            ps.setInt(1, 3);\n            ps.setString(2, \"xy\");\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1141",
               "end_line": "1147",
               "source_code": "            ps.setInt(1, 3);\n            ps.setString(2, \"xy\");\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           }

       },

       {
           "id": "clone_104",

           "clone_type": "type-1",

           "origin": {
               "file": "Grid.java",
               "start_line": "294",
               "end_line": "324",
               "source_code": "    /**\n     * Method declaration\n     *\n     *\n     * @param e\n     */\n\n    // fredt@users 20020130 - comment by fredt\n    // to remove this deprecated method we need to rewrite the Grid class as a\n    // ScrollPane component\n    // sqlbob:  I believe that changing to the JDK1.1 event handler\n    // would require browsers to use the Java plugin.\n    public boolean handleEvent(Event e) {\n\n        switch (e.id) {\n\n            case Event.SCROLL_LINE_UP :\n            case Event.SCROLL_LINE_DOWN :\n            case Event.SCROLL_PAGE_UP :\n            case Event.SCROLL_PAGE_DOWN :\n            case Event.SCROLL_ABSOLUTE :\n                iX = sbHoriz.getValue();\n                iY = iRowHeight * sbVert.getValue();\n\n                repaint();\n\n                return true;\n        }\n\n        return super.handleEvent(e);\n    }"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "280",
               "end_line": "308",
               "source_code": "    /**\n     * Method declaration\n     *\n     *\n     * @param e\n     */\n\n// fredt@users 20020130 - comment by fredt\n// to remove this deprecated method we need to rewrite the Tree class as a\n// ScrollPane component\n    public boolean handleEvent(Event e) {\n\n        switch (e.id) {\n\n            case Event.SCROLL_LINE_UP :\n            case Event.SCROLL_LINE_DOWN :\n            case Event.SCROLL_PAGE_UP :\n            case Event.SCROLL_PAGE_DOWN :\n            case Event.SCROLL_ABSOLUTE :\n                iX = sbHoriz.getValue();\n                iY = iRowHeight * sbVert.getValue();\n\n                repaint();\n\n                return true;\n        }\n\n        return super.handleEvent(e);\n    }"
           }

       },

       {
           "id": "clone_105",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3222",
               "end_line": "3241",
               "source_code": "//            case Token.OCCURRENCES_REGEX :\n//            case Token.POSITION_REGEX :\n            case Tokens.EXTRACT :\n            case Tokens.CHAR_LENGTH :\n            case Tokens.CHARACTER_LENGTH :\n            case Tokens.OCTET_LENGTH :\n            case Tokens.CARDINALITY :\n            case Tokens.ABS :\n            case Tokens.MOD :\n            case Tokens.LN :\n            case Tokens.EXP :\n            case Tokens.POWER :\n            case Tokens.SQRT :\n            case Tokens.FLOOR :\n            case Tokens.CEILING :\n            case Tokens.CEIL :\n            case Tokens.WIDTH_BUCKET :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2827",
               "end_line": "2844",
               "source_code": "            case Tokens.EXTRACT :\n            case Tokens.CHAR_LENGTH :\n            case Tokens.CHARACTER_LENGTH :\n            case Tokens.OCTET_LENGTH :\n            case Tokens.CARDINALITY :\n            case Tokens.ABS :\n            case Tokens.MOD :\n            case Tokens.LN :\n            case Tokens.EXP :\n            case Tokens.POWER :\n            case Tokens.SQRT :\n            case Tokens.FLOOR :\n            case Tokens.CEILING :\n            case Tokens.CEIL :\n            case Tokens.WIDTH_BUCKET :\n                FunctionSQL function =\n                    FunctionSQL.newSQLFunction(token.tokenString,\n                                               compileContext);"
           }

       },

       {
           "id": "clone_106",

           "clone_type": "type-1",

           "origin": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "494",
               "end_line": "502",
               "source_code": "        int               rowcount = 0;\n\n        sql = \"drop table t if exists\";\n\n        stmt.executeUpdate(sql);\n\n        sql = \"create table t(id int, fn varchar(40), ln varchar(40), zip int)\";\n\n        stmt.executeUpdate(sql);"
           },

           "clone": {
               "file": "TestJDBCSavepoints.java",
               "start_line": "142",
               "end_line": "150",
               "source_code": "        int               rowcount = 0;\n\n        sql = \"drop table t if exists\";\n\n        stmt.executeUpdate(sql);\n\n        sql = \"create table t(id int, fn varchar(40), ln varchar(40), zip int)\";\n\n        stmt.executeUpdate(sql);"
           }

       },

       {
           "id": "clone_107",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "613",
               "end_line": "625",
               "source_code": "            case OpTypes.VALUE :\n                return valueData;\n\n            case OpTypes.SIMPLE_COLUMN : {\n                Object value =\n                    session.sessionContext.rangeIterators[rangePosition]\n                        .getCurrent(columnIndex);\n\n                return value;\n            }\n            case OpTypes.NEGATE :\n                return ((NumberType) dataType).negate(\n                    nodes[LEFT].getValue(session, nodes[LEFT].dataType));"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "1192",
               "end_line": "1204",
               "source_code": "            case OpTypes.VALUE :\n                return valueData;\n\n            case OpTypes.SIMPLE_COLUMN : {\n                Object value =\n                    session.sessionContext.rangeIterators[rangePosition]\n                        .getCurrent(columnIndex);\n\n                return value;\n            }\n            case OpTypes.NEGATE :\n                return ((NumberType) dataType).negate(\n                    nodes[LEFT].getValue(session, nodes[LEFT].dataType));"
           }

       },

       {
           "id": "clone_108",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "869",
               "end_line": "877",
               "source_code": "            ps.setBlob(1, blob);\n            ps.executeUpdate();\n\n            data[4] = 50;\n            blob    = new JDBCBlob(data);\n\n            ps.setBlob(1, blob);\n            ps.executeUpdate();\n            ps.close();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "107",
               "end_line": "115",
               "source_code": "            ps.setBlob(1, blob);\n            ps.executeUpdate();\n\n            data[4] = 50;\n            blob    = new JDBCBlob(data);\n\n            ps.setBlob(1, blob);\n            ps.executeUpdate();\n            ps.close();"
           }

       },

       {
           "id": "clone_109",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2923",
               "end_line": "2930",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4642",
               "end_line": "4649",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null"
           }

       },

       {
           "id": "clone_110",

           "clone_type": "type-1",

           "origin": {
               "file": "DoubleIntIndex.java",
               "start_line": "340",
               "end_line": "349",
               "source_code": "        hasChanged = true;\n\n        if (count != i) {\n            moveRows(i, i + 1, count - i);\n        }\n\n        keys[i]   = key;\n        values[i] = value;\n\n        count++;"
           },

           "clone": {
               "file": "DoubleIntIndex.java",
               "start_line": "283",
               "end_line": "292",
               "source_code": "        hasChanged = true;\n\n        if (count != i) {\n            moveRows(i, i + 1, count - i);\n        }\n\n        keys[i]   = key;\n        values[i] = value;\n\n        count++;"
           }

       },

       {
           "id": "clone_111",

           "clone_type": "type-1",

           "origin": {
               "file": "RangeVariableResolver.java",
               "start_line": "1456",
               "end_line": "1460",
               "source_code": "                case OpTypes.SMALLER :\n                case OpTypes.SMALLER_EQUAL :\n                case OpTypes.GREATER :\n                case OpTypes.GREATER_EQUAL :\n                case OpTypes.GREATER_EQUAL_PRE :"
           },

           "clone": {
               "file": "RangeVariableResolver.java",
               "start_line": "1078",
               "end_line": "1082",
               "source_code": "                case OpTypes.SMALLER :\n                case OpTypes.SMALLER_EQUAL :\n                case OpTypes.GREATER :\n                case OpTypes.GREATER_EQUAL :\n                case OpTypes.GREATER_EQUAL_PRE :"
           }

       },

       {
           "id": "clone_112",

           "clone_type": "type-1",

           "origin": {
               "file": "ConnectionDialogSwing.java",
               "start_line": "359",
               "end_line": "365",
               "source_code": "            if (setting != null) {\n                mName.setText(setting.getName());\n                mDriver.setText(setting.getDriver());\n                mURL.setText(setting.getUrl());\n                mUser.setText(setting.getUser());\n                mPassword.setText(setting.getPassword());\n            }"
           },

           "clone": {
               "file": "ConnectionDialog.java",
               "start_line": "159",
               "end_line": "165",
               "source_code": "                if (setting != null) {\n                    mName.setText(setting.getName());\n                    mDriver.setText(setting.getDriver());\n                    mURL.setText(setting.getUrl());\n                    mUser.setText(setting.getUser());\n                    mPassword.setText(setting.getPassword());\n                }"
           }

       },

       {
           "id": "clone_113",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBench.java",
               "start_line": "977",
               "end_line": "985",
               "source_code": "            while (count-- > 0) {\n                int account = TestBench.getRandomID(ACCOUNT);\n                int branch  = TestBench.getRandomID(BRANCH);\n                int teller  = TestBench.getRandomID(TELLER);\n                int delta   = TestBench.getRandomInt(-1000, 1000);\n\n                doOne(branch, teller, account, delta);\n                incrementTransactionCount();\n            }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "818",
               "end_line": "826",
               "source_code": "            while (count-- > 0) {\n                int account = TestBench.getRandomID(ACCOUNT);\n                int branch  = TestBench.getRandomID(BRANCH);\n                int teller  = TestBench.getRandomID(TELLER);\n                int delta   = TestBench.getRandomInt(-1000, 1000);\n\n                doOne(branch, teller, account, delta);\n                incrementTransactionCount();\n            }"
           }

       },

       {
           "id": "clone_114",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBug1191815.java",
               "start_line": "107",
               "end_line": "113",
               "source_code": "        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration exceptions;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();"
           },

           "clone": {
               "file": "TestBug785429.java",
               "start_line": "164",
               "end_line": "170",
               "source_code": "        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration exceptions;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();"
           }

       },

       {
           "id": "clone_115",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4418",
               "end_line": "4429",
               "source_code": "            if (is.session.getDatabaseUniqueName().equals(\n                    session.getDatabaseUniqueName())) {\n                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,\n                                        \"invalid Reader\");\n            }\n\n            // in the same database ? see if it blocks in\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n\n            return;"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4348",
               "end_line": "4357",
               "source_code": "            if (is.session.getDatabaseUniqueName().equals(\n                    session.getDatabaseUniqueName())) {\n                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,\n                                        \"invalid Reader\");\n            }\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n\n            return;"
           }

       },

       {
           "id": "clone_116",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "285",
               "end_line": "292",
               "source_code": "            ps.executeUpdate();\n            ps.close();\n\n            ps = connection.prepareStatement(dql0);\n\n            ResultSet rs = ps.executeQuery();\n\n            rs.next();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "114",
               "end_line": "121",
               "source_code": "            ps.executeUpdate();\n            ps.close();\n\n            ps = connection.prepareStatement(dql0);\n\n            ResultSet rs = ps.executeQuery();\n\n            rs.next();"
           }

       },

       {
           "id": "clone_117",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "4193",
               "end_line": "4200",
               "source_code": "                            read();\n                            readThis(Tokens.BY);\n\n                            long value = readBigint();\n\n                            sequence.setIncrement(value);\n\n                            break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "2809",
               "end_line": "2816",
               "source_code": "                    read();\n                    readThis(Tokens.BY);\n\n                    long value = readBigint();\n\n                    sequence.setIncrement(value);\n\n                    break;"
           }

       },

       {
           "id": "clone_118",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1154",
               "end_line": "1165",
               "source_code": "        try {\n            Object[] data = getLobHeader(lobID);\n\n            if (data == null) {\n                throw Error.error(ErrorCode.X_0F502);\n            }\n\n            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();\n\n            return ResultLob.newLobSetResponse(lobID, length);\n        }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "672",
               "end_line": "683",
               "source_code": "        try {\n            Object[] data = getLobHeader(lobID);\n\n            if (data == null) {\n                throw Error.error(ErrorCode.X_0F502);\n            }\n\n            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();\n\n            return ResultLob.newLobSetResponse(lobID, length);\n        }"
           }

       },

       {
           "id": "clone_119",

           "clone_type": "type-1",

           "origin": {
               "file": "RefCapablePropertyResourceBundle.java",
               "start_line": "271",
               "end_line": "278",
               "source_code": "                case EMPTYSTRING_BEHAVIOR:\n                    varValue = \"\";\n                    break;\n                case NOOP_BEHAVIOR:\n                    break;\n                default:\n                    throw new RuntimeException(\n                            \"Undefined value for behavior: \" + behavior);"
           },

           "clone": {
               "file": "RefCapablePropertyResourceBundle.java",
               "start_line": "223",
               "end_line": "230",
               "source_code": "                case EMPTYSTRING_BEHAVIOR:\n                    varValue = \"\";\n                    break;\n                case NOOP_BEHAVIOR:\n                    break;\n                default:\n                    throw new RuntimeException(\n                            \"Undefined value for behavior: \" + behavior);"
           }

       },

       {
           "id": "clone_120",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "144",
               "end_line": "152",
               "source_code": "                case Tokens.TRUE :\n                    read();\n\n                    return Expression.EXPR_TRUE;\n\n                case Tokens.FALSE :\n                    read();\n\n                    return Expression.EXPR_FALSE;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2215",
               "end_line": "2223",
               "source_code": "            case Tokens.TRUE :\n                read();\n\n                return Expression.EXPR_TRUE;\n\n            case Tokens.FALSE :\n                read();\n\n                return Expression.EXPR_FALSE;"
           }

       },

       {
           "id": "clone_121",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2320",
               "end_line": "2337",
               "source_code": "            case Tokens.COLON :\n                read();\n\n                if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER\n                        || token.tokenType == Tokens.X_IDENTIFIER) {}\n                else {\n                    throw unexpectedToken(Tokens.T_COLON);\n                }\n\n            // fall through\n            case Tokens.QUESTION :\n                ExpressionColumn p =\n                    new ExpressionColumn(OpTypes.DYNAMIC_PARAM);\n\n                compileContext.addParameter(p, getPosition());\n                read();\n\n                return p;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2257",
               "end_line": "2274",
               "source_code": "            case Tokens.COLON :\n                read();\n\n                if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER\n                        || token.tokenType == Tokens.X_IDENTIFIER) {}\n                else {\n                    throw unexpectedToken(Tokens.T_COLON);\n                }\n\n            // fall through\n            case Tokens.QUESTION :\n                ExpressionColumn p =\n                    new ExpressionColumn(OpTypes.DYNAMIC_PARAM);\n\n                compileContext.addParameter(p, getPosition());\n                read();\n\n                return p;"
           }

       },

       {
           "id": "clone_122",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2350",
               "end_line": "2356",
               "source_code": "                    break;\n\n                case SchemaObject.INDEX :\n                    set = schema.indexLookup;\n                    break;\n\n                case SchemaObject.CONSTRAINT :"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "700",
               "end_line": "706",
               "source_code": "                    break;\n\n                case SchemaObject.INDEX :\n                    set = schema.indexLookup;\n                    break;\n\n                case SchemaObject.CONSTRAINT :"
           }

       },

       {
           "id": "clone_123",

           "clone_type": "type-1",

           "origin": {
               "file": "Calculator.java",
               "start_line": "248",
               "end_line": "259",
               "source_code": "            if (startAtomIndex + remaining < i + 3)\n                throw new IllegalStateException(\n                        \"No operator/operand pairing remaining\");\n            nextAtom = atoms.get(i + 1);\n            if (nextAtom.op == null)\n                throw new IllegalStateException(\n                        \"Operator expected but got value \" + nextAtom.val);\n            op = nextAtom.op;\n            nextAtom = atoms.get(i + 2);\n            if (nextAtom.op != null)\n                throw new IllegalStateException(\n                        \"Value expected but got operator \" + nextAtom.op);"
           },

           "clone": {
               "file": "Calculator.java",
               "start_line": "213",
               "end_line": "224",
               "source_code": "            if (startAtomIndex + remaining < i + 3)\n                throw new IllegalStateException(\n                        \"No operator/operand pairing remaining\");\n            nextAtom = atoms.get(i + 1);\n            if (nextAtom.op == null)\n                throw new IllegalStateException(\n                        \"Operator expected but got value \" + nextAtom.val);\n            op = nextAtom.op;\n            nextAtom = atoms.get(i + 2);\n            if (nextAtom.op != null)\n                throw new IllegalStateException(\n                        \"Value expected but got operator \" + nextAtom.op);"
           }

       },

       {
           "id": "clone_124",

           "clone_type": "type-1",

           "origin": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "454",
               "end_line": "462",
               "source_code": "        Object[]    compareData = null;\n        RowIterator it;\n        Row         otherRow  = null;\n        Object[]    otherData = null;\n\n        sortFull(session);\n        other.sortFull(session);\n\n        it = fullIndex.emptyIterator();"
           },

           "clone": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "395",
               "end_line": "403",
               "source_code": "        Object[]    compareData = null;\n        RowIterator it;\n        Row         otherRow  = null;\n        Object[]    otherData = null;\n\n        sortFull(session);\n        other.sortFull(session);\n\n        it = fullIndex.emptyIterator();"
           }

       },

       {
           "id": "clone_125",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2502",
               "end_line": "2507",
               "source_code": "                row[table_catalog] = database.getCatalogName().name;\n                row[table_schema]  = tableName.schema.name;\n                row[table_name]    = tableName.name;\n                row[column_name]   = column.getNameString();\n\n                t.insertSys(session, store, row);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2384",
               "end_line": "2389",
               "source_code": "                row[table_catalog]  = database.getCatalogName().name;\n                row[table_schema]   = tableName.schema.name;\n                row[table_name]     = tableName.name;\n                row[column_name]    = column.getNameString();\n\n                t.insertSys(session, store, row);"
           }

       },

       {
           "id": "clone_126",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "880",
               "end_line": "894",
               "source_code": "            ps = connection.prepareStatement(dql0);\n\n            ResultSet rs = ps.executeQuery();\n\n            rs.next();\n\n            Blob blob1 = rs.getBlob(2);\n\n            rs.next();\n\n            Blob   blob2 = rs.getBlob(2);\n            byte[] data1 = blob1.getBytes(1, 10);\n            byte[] data2 = blob2.getBytes(1, 10);\n\n            assertTrue(data1[4] == 5 && data2[4] == 50);"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "117",
               "end_line": "131",
               "source_code": "            ps = connection.prepareStatement(dql0);\n\n            ResultSet rs = ps.executeQuery();\n\n            rs.next();\n\n            Blob blob1 = rs.getBlob(2);\n\n            rs.next();\n\n            Blob   blob2 = rs.getBlob(2);\n            byte[] data1 = blob1.getBytes(1, 10);\n            byte[] data2 = blob2.getBytes(1, 10);\n\n            assertTrue(data1[4] == 5 && data2[4] == 50);"
           }

       },

       {
           "id": "clone_127",

           "clone_type": "type-1",

           "origin": {
               "file": "ValuePoolHashMap.java",
               "start_line": "277",
               "end_line": "286",
               "source_code": "        lookup                 = hashIndex.linkNode(index, lastLookup);\n        objectKeyTable[lookup] = testValue;\n\n        if (accessCount > ACCESS_MAX) {\n            resetAccessCount();\n        }\n\n        accessTable[lookup] = accessCount++;\n\n        return testValue;"
           },

           "clone": {
               "file": "ValuePoolHashMap.java",
               "start_line": "232",
               "end_line": "241",
               "source_code": "        lookup                 = hashIndex.linkNode(index, lastLookup);\n        objectKeyTable[lookup] = testValue;\n\n        if (accessCount > ACCESS_MAX) {\n            resetAccessCount();\n        }\n\n        accessTable[lookup] = accessCount++;\n\n        return testValue;"
           }

       },

       {
           "id": "clone_128",

           "clone_type": "type-1",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "6308",
               "end_line": "6312",
               "source_code": "        char[] readBfr = new char[1024];\n        int i;\n        StringWriter sWriter = new StringWriter();\n        InputStreamReader isr = null;\n        String str;"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "6269",
               "end_line": "6273",
               "source_code": "        char[] readBfr = new char[1024];\n        int i;\n        StringWriter sWriter = new StringWriter();\n        InputStreamReader isr = null;\n        String str;"
           }

       },

       {
           "id": "clone_129",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2317",
               "end_line": "2328",
               "source_code": "                    RoutineSchema routine =\n                        (RoutineSchema) set.getObject(name.name);\n\n                    object = routine;\n\n                    Routine[] specifics = routine.getSpecificRoutines();\n\n                    for (int i = 0; i < specifics.length; i++) {\n                        removeSchemaObject(specifics[i].getSpecificName());\n                    }\n\n                    break;"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "2301",
               "end_line": "2312",
               "source_code": "                    RoutineSchema routine =\n                        (RoutineSchema) set.getObject(name.name);\n\n                    object = routine;\n\n                    Routine[] specifics = routine.getSpecificRoutines();\n\n                    for (int i = 0; i < specifics.length; i++) {\n                        removeSchemaObject(specifics[i].getSpecificName());\n                    }\n\n                    break;"
           }

       },

       {
           "id": "clone_130",

           "clone_type": "type-1",

           "origin": {
               "file": "BaseHashMap.java",
               "start_line": "525",
               "end_line": "531",
               "source_code": "                            objectKeyTable[lookup]   = null;\n                            returnValue = objectValueTable[lookup];\n                            objectValueTable[lookup] = null;\n\n                            hashIndex.unlinkNode(index, lastLookup, lookup);\n\n                            multiValueTable[lookup] = false;"
           },

           "clone": {
               "file": "BaseHashMap.java",
               "start_line": "508",
               "end_line": "514",
               "source_code": "                        objectKeyTable[lookup]   = null;\n                        returnValue              = objectValueTable[lookup];\n                        objectValueTable[lookup] = null;\n\n                        hashIndex.unlinkNode(index, lastLookup, lookup);\n\n                        multiValueTable[lookup] = false;"
           }

       },

       {
           "id": "clone_131",

           "clone_type": "type-1",

           "origin": {
               "file": "SqlFile.java",
               "start_line": "6323",
               "end_line": "6327",
               "source_code": "            isr = new InputStreamReader(is);\n            while ((i = isr.read(readBfr)) > -1) sWriter.write(readBfr, 0, i);\n            readBfr = null;\n            str = sWriter.toString();\n            sWriter.close();"
           },

           "clone": {
               "file": "SqlFile.java",
               "start_line": "6284",
               "end_line": "6289",
               "source_code": "            isr = new InputStreamReader(is);\n            while ((i = isr.read(readBfr)) > -1)\n                sWriter.write(readBfr, 0, i);\n            readBfr = null;\n            str = sWriter.toString();\n            sWriter.close();"
           }

       },

       {
           "id": "clone_132",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementDML.java",
               "start_line": "279",
               "end_line": "292",
               "source_code": "        for (int i = 0; i < rangeVariables.length; i++) {\n            Table    rangeTable = rangeVariables[i].rangeTable;\n            HsqlName name       = rangeTable.getName();\n\n            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {\n                continue;\n            }\n\n            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n\n            set.add(name);\n        }"
           },

           "clone": {
               "file": "StatementSet.java",
               "start_line": "329",
               "end_line": "342",
               "source_code": "        for (int i = 0; i < rangeVariables.length; i++) {\n            Table    rangeTable = rangeVariables[i].rangeTable;\n            HsqlName name       = rangeTable.getName();\n\n            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {\n                continue;\n            }\n\n            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n\n            set.add(name);\n        }"
           }

       },

       {
           "id": "clone_133",

           "clone_type": "type-1",

           "origin": {
               "file": "TestHashStructures.java",
               "start_line": "149",
               "end_line": "154",
               "source_code": "            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            depopulateRandomly(uMap, hMap, 20);"
           },

           "clone": {
               "file": "TestHashStructures.java",
               "start_line": "143",
               "end_line": "148",
               "source_code": "            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            depopulateRandomly(uMap, hMap, 20);"
           }

       },

       {
           "id": "clone_134",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "1118",
               "end_line": "1135",
               "source_code": "            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n\n                switch (name.type) {\n\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n\n                        object.compile(session, null);\n                        break;\n                }\n            }"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "1070",
               "end_line": "1087",
               "source_code": "            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n\n                switch (name.type) {\n\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n\n                        object.compile(session, null);\n                        break;\n                }\n            }"
           }

       },

       {
           "id": "clone_135",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLDisk.java",
               "start_line": "86",
               "end_line": "92",
               "source_code": "        this.database     = table.database;\n        this.manager      = manager;\n        this.table        = table;\n        this.indexList    = table.getIndexList();\n        this.accessorList = new CachedObject[indexList.length];\n\n        manager.setStore(table, this);"
           },

           "clone": {
               "file": "RowStoreAVLDiskData.java",
               "start_line": "66",
               "end_line": "72",
               "source_code": "        this.database     = table.database;\n        this.manager      = manager;\n        this.table        = table;\n        this.indexList    = table.getIndexList();\n        this.accessorList = new CachedObject[indexList.length];\n\n        manager.setStore(table, this);"
           }

       },

       {
           "id": "clone_136",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "2150",
               "end_line": "2161",
               "source_code": "            if (readIfThis(Tokens.SET)) {\n                readThis(Tokens.MESSAGE_TEXT);\n                readThis(Tokens.EQUALS);\n\n                message = XreadSimpleValueSpecificationOrNull();\n\n                if (message == null) {\n                    throw unexpectedToken();\n                }\n\n                resolveOuterReferencesAndTypes(routine, context, message);\n            }"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "2119",
               "end_line": "2130",
               "source_code": "        if (readIfThis(Tokens.SET)) {\n            readThis(Tokens.MESSAGE_TEXT);\n            readThis(Tokens.EQUALS);\n\n            message = XreadSimpleValueSpecificationOrNull();\n\n            if (message == null) {\n                throw unexpectedToken();\n            }\n\n            resolveOuterReferencesAndTypes(routine, context, message);\n        }"
           }

       },

       {
           "id": "clone_137",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1079",
               "end_line": "1093",
               "source_code": "                    case Tokens.BOTH :\n                        leading = trailing = true;\n                        break;\n\n                    case Tokens.LEADING :\n                        leading = true;\n                        break;\n\n                    case Tokens.TRAILING :\n                        trailing = true;\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500,\n                                                 \"FunctionSQL\");"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "983",
               "end_line": "997",
               "source_code": "                    case Tokens.BOTH :\n                        leading = trailing = true;\n                        break;\n\n                    case Tokens.LEADING :\n                        leading = true;\n                        break;\n\n                    case Tokens.TRAILING :\n                        trailing = true;\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500,\n                                                 \"FunctionSQL\");"
           }

       },

       {
           "id": "clone_138",

           "clone_type": "type-1",

           "origin": {
               "file": "BitType.java",
               "start_line": "93",
               "end_line": "107",
               "source_code": "    public String getDefinition() {\n\n        if (precision == 0) {\n            return getNameString();\n        }\n\n        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n\n        return sb.toString();\n    }"
           },

           "clone": {
               "file": "BinaryType.java",
               "start_line": "118",
               "end_line": "132",
               "source_code": "    public String getDefinition() {\n\n        if (precision == 0) {\n            return getNameString();\n        }\n\n        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n\n        return sb.toString();\n    }"
           }

       },

       {
           "id": "clone_139",

           "clone_type": "type-1",

           "origin": {
               "file": "RowType.java",
               "start_line": "337",
               "end_line": "352",
               "source_code": "        if (!other.isRowType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n\n        Type[] newTypes   = new Type[dataTypes.length];\n        Type[] otherTypes = ((RowType) other).getTypesArray();\n\n        if (dataTypes.length != otherTypes.length) {\n            throw Error.error(ErrorCode.X_42564);\n        }\n\n        for (int i = 0; i < dataTypes.length; i++) {\n            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);\n        }\n\n        return new RowType(newTypes);"
           },

           "clone": {
               "file": "RowType.java",
               "start_line": "309",
               "end_line": "324",
               "source_code": "        if (!other.isRowType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n\n        Type[] newTypes   = new Type[dataTypes.length];\n        Type[] otherTypes = ((RowType) other).getTypesArray();\n\n        if (dataTypes.length != otherTypes.length) {\n            throw Error.error(ErrorCode.X_42564);\n        }\n\n        for (int i = 0; i < dataTypes.length; i++) {\n            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);\n        }\n\n        return new RowType(newTypes);"
           }

       },

       {
           "id": "clone_140",

           "clone_type": "type-1",

           "origin": {
               "file": "TestHashStructures.java",
               "start_line": "142",
               "end_line": "150",
               "source_code": "            populateBySerialIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n            depopulateRandomly(uMap, hMap, 20);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);"
           },

           "clone": {
               "file": "TestHashStructures.java",
               "start_line": "62",
               "end_line": "74",
               "source_code": "            populateBySerialIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n\n            // -\n            populateByRandomIntKeys(uMap, hMap, testSize);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);\n\n            //\n            depopulateRandomly(uMap, hMap, 20);\n            compareByUIterator(uMap, hMap);\n            compareByHIterator(uMap, hMap);"
           }

       },

       {
           "id": "clone_141",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "244",
               "end_line": "317",
               "source_code": "        System.getProperties().put(\"sun.java2d.noddraw\", \"true\");\n\n        // (ulrivo): read all arguments from the command line\n        String  currentArg;\n        String  lowerArg;\n        String  urlid        = null;\n        String  rcFile       = null;\n        boolean autoConnect  = false;\n        boolean urlidConnect = false;\n\n        bMustExit = true;\n\n        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg   = arg[i].toLowerCase();\n\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n\n                //\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n\n            i++;\n\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n\n                return;\n            } else {\n                /* Syntax ERRORS should either throw or exit with non-0 status.\n                 * In our case, it may be unsafe to exit, so we throw.\n                 * (I.e. should provide easy way for caller to programmatically\n                 * determine that there was an invocation problem).\n                 */\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n\n                // No reason to localize, since the main syntax message is\n                // not localized.\n            }\n        }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "466",
               "end_line": "539",
               "source_code": "        System.getProperties().put(\"sun.java2d.noddraw\", \"true\");\n\n        // (ulrivo): read all arguments from the command line\n        String  currentArg;\n        String  lowerArg;\n        String  urlid        = null;\n        String  rcFile       = null;\n        boolean autoConnect  = false;\n        boolean urlidConnect = false;\n\n        bMustExit = true;\n\n        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg = arg[i].toLowerCase();\n\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n\n                //\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n\n            i++;\n\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n\n                return;\n            } else {\n                /* Syntax ERRORS should either throw or exit with non-0 status.\n                 * In our case, it may be unsafe to exit, so we throw.\n                 * (I.e. should provide easy way for caller to programmatically\n                 * determine that there was an invocation problem).\n                 */\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n\n                // No reason to localize, since the main syntax message is\n                // not localized.\n            }\n        }"
           }

       },

       {
           "id": "clone_142",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "304",
               "end_line": "310",
               "source_code": "            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.COLUMN :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "273",
               "end_line": "279",
               "source_code": "            case SchemaObject.VIEW :\n            case SchemaObject.TABLE :\n            case SchemaObject.COLUMN :\n            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :"
           }

       },

       {
           "id": "clone_143",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7510",
               "end_line": "7516",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4899",
               "end_line": "4905",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);     // not null"
           }

       },

       {
           "id": "clone_144",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementDMQL.java",
               "start_line": "679",
               "end_line": "691",
               "source_code": "                appendColumns(sb, updateColumnMap).append('\\n');\n                appendTable(sb).append('\\n');\n                appendCondition(session, sb);\n\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\\n');\n                }\n\n                appendParms(sb).append('\\n');\n                appendSubqueries(session, sb, 2).append(']');\n\n                return sb.toString();"
           },

           "clone": {
               "file": "StatementDMQL.java",
               "start_line": "639",
               "end_line": "651",
               "source_code": "                appendColumns(sb, updateColumnMap).append('\\n');\n                appendTable(sb).append('\\n');\n                appendCondition(session, sb);\n\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\\n');\n                }\n\n                appendParms(sb).append('\\n');\n                appendSubqueries(session, sb, 2).append(']');\n\n                return sb.toString();"
           }

       },

       {
           "id": "clone_145",

           "clone_type": "type-1",

           "origin": {
               "file": "RangeVariable.java",
               "start_line": "1341",
               "end_line": "1348",
               "source_code": "                                value = null;\n                                break;\n\n                            default :\n                                it = conditions[condIndex].rangeIndex\n                                    .emptyIterator();\n\n                                return;"
           },

           "clone": {
               "file": "RangeVariable.java",
               "start_line": "1328",
               "end_line": "1335",
               "source_code": "                                value = null;\n                                break;\n\n                            default :\n                                it = conditions[condIndex].rangeIndex\n                                    .emptyIterator();\n\n                                return;"
           }

       },

       {
           "id": "clone_146",

           "clone_type": "type-1",

           "origin": {
               "file": "HsqlSocketFactorySecure.java",
               "start_line": "156",
               "end_line": "162",
               "source_code": "        if (Error.TRACESYSTEMOUT) {\n            Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");\n            Error.printSystemOut(\"capabilities for \" + ss + \":\");\n            Error.printSystemOut(\"----------------------------\");\n            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());\n            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());\n        }"
           },

           "clone": {
               "file": "HsqlSocketFactorySecure.java",
               "start_line": "126",
               "end_line": "132",
               "source_code": "        if (Error.TRACESYSTEMOUT) {\n            Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");\n            Error.printSystemOut(\"capabilities for \" + ss + \":\");\n            Error.printSystemOut(\"----------------------------\");\n            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());\n            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());\n        }"
           }

       },

       {
           "id": "clone_147",

           "clone_type": "type-1",

           "origin": {
               "file": "Scanner.java",
               "start_line": "1807",
               "end_line": "1816",
               "source_code": "            case '0' :\n            case '1' :\n            case '2' :\n            case '3' :\n            case '4' :\n            case '5' :\n            case '6' :\n            case '7' :\n            case '8' :\n            case '9' :"
           },

           "clone": {
               "file": "Scanner.java",
               "start_line": "986",
               "end_line": "995",
               "source_code": "                case '0' :\n                case '1' :\n                case '2' :\n                case '3' :\n                case '4' :\n                case '5' :\n                case '6' :\n                case '7' :\n                case '8' :\n                case '9' :"
           }

       },

       {
           "id": "clone_148",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3740",
               "end_line": "3751",
               "source_code": "                row                             = t.getEmptyRowData();\n                row[object_catalog] = database.getCatalogName().name;\n                row[object_schema]              = routine.getSchemaName().name;\n                row[object_name]                = routine.getName().name;\n                row[object_type]                = \"ROUTINE\";\n                row[collection_type_identifier] = type.getDefinition();\n\n                addTypeInfo(row, ((ArrayType) type).collectionBaseType());\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3709",
               "end_line": "3720",
               "source_code": "                row                             = t.getEmptyRowData();\n                row[object_catalog] = database.getCatalogName().name;\n                row[object_schema]              = routine.getSchemaName().name;\n                row[object_name]                = routine.getName().name;\n                row[object_type]                = \"ROUTINE\";\n                row[collection_type_identifier] = type.getDefinition();\n\n                addTypeInfo(row, ((ArrayType) type).collectionBaseType());\n\n                try {\n                    t.insertSys(session, store, row);\n                } catch (HsqlException e) {}"
           }

       },

       {
           "id": "clone_149",

           "clone_type": "type-1",

           "origin": {
               "file": "KMPSearchAlgorithm.java",
               "start_line": "488",
               "end_line": "521",
               "source_code": "    public static int[] computeTable(final char[] pattern) {\n\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern must  not be null.\");\n        } else if (pattern.length < 2) {\n            throw new IllegalArgumentException(\"Pattern length must be > 1.\");\n        }\n\n        int[] table = new int[pattern.length];\n        int   i     = 2;\n        int   j     = 0;\n\n        table[0] = -1;\n        table[1] = 0;\n\n        while (i < pattern.length) {\n            if (pattern[i - 1] == pattern[j]) {\n                table[i] = j + 1;\n\n                j++;\n                i++;\n            } else if (j > 0) {\n                j = table[j];\n            } else {\n                table[i] = 0;\n\n                i++;\n\n                j = 0;\n            }\n        }\n\n        return table;\n    }"
           },

           "clone": {
               "file": "KMPSearchAlgorithm.java",
               "start_line": "449",
               "end_line": "486",
               "source_code": "    public static int[] computeTable(final byte[] pattern) {\n\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern must  not be null.\");\n        } else if (pattern.length < 2) {\n            throw new IllegalArgumentException(\"Pattern length must be > 1.\");\n        }\n\n        //\n        final int[] table = new int[pattern.length];\n        int         i     = 2;\n        int         j     = 0;\n\n        //\n        table[0] = -1;\n        table[1] = 0;\n\n        //\n        while (i < pattern.length) {\n            if (pattern[i - 1] == pattern[j]) {\n                table[i] = j + 1;\n\n                j++;\n                i++;\n            } else if (j > 0) {\n                j = table[j];\n            } else {\n                table[i] = 0;\n\n                i++;\n\n                j = 0;\n            }\n        }\n\n        //\n        return table;\n    }"
           }

       },

       {
           "id": "clone_150",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "312",
               "end_line": "316",
               "source_code": "            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.ASSERTION :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "68",
               "end_line": "72",
               "source_code": "            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :\n            case SchemaObject.ASSERTION :"
           }

       },

       {
           "id": "clone_151",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "265",
               "end_line": "274",
               "source_code": "                case OpTypes.VALUE :\n                case OpTypes.DYNAMIC_PARAM :\n                case OpTypes.PARAMETER :\n                case OpTypes.VARIABLE :\n                    isSingleColumnCondition = true;\n\n                    if (opType == OpTypes.EQUAL) {\n                        isSingleColumnEqual = true;\n                    }\n                    break;"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "249",
               "end_line": "258",
               "source_code": "                case OpTypes.VALUE :\n                case OpTypes.DYNAMIC_PARAM :\n                case OpTypes.PARAMETER :\n                case OpTypes.VARIABLE :\n                    isSingleColumnCondition = true;\n\n                    if (opType == OpTypes.EQUAL) {\n                        isSingleColumnEqual = true;\n                    }\n                    break;"
           }

       },

       {
           "id": "clone_152",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "557",
               "end_line": "578",
               "source_code": "            Statement Stmt = Conn.createStatement();\n            String    Query;\n\n            Query = \"DELETE FROM history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "520",
               "end_line": "541",
               "source_code": "            Statement Stmt = Conn.createStatement();\n            String    Query;\n\n            Query = \"DELETE FROM history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DELETE FROM branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           }

       },

       {
           "id": "clone_153",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "4714",
               "end_line": "4724",
               "source_code": "                switch (token.tokenType) {\n\n                    case Tokens.ROUTINE :\n                    case Tokens.PROCEDURE :\n                    case Tokens.FUNCTION :\n                        read();\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "386",
               "end_line": "396",
               "source_code": "                switch (token.tokenType) {\n\n                    case Tokens.ROUTINE :\n                    case Tokens.PROCEDURE :\n                    case Tokens.FUNCTION :\n                        read();\n                        break;\n\n                    default :\n                        throw unexpectedToken();\n                }"
           }

       },

       {
           "id": "clone_154",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberSequence.java",
               "start_line": "236",
               "end_line": "260",
               "source_code": "            //\n            sb.append(Tokens.T_START).append(' ');\n            sb.append(Tokens.T_WITH).append(' ');\n            sb.append(startValue);\n\n            if (getIncrement() != 1) {\n                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n                sb.append(Tokens.T_BY).append(' ');\n                sb.append(getIncrement());\n            }\n\n            if (!hasDefaultMinMax()) {\n                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n                sb.append(getMinValue());\n                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n                sb.append(getMaxValue());\n            }\n\n            if (isCycle()) {\n                sb.append(' ').append(Tokens.T_CYCLE);\n            }\n\n            if (name == null) {\n                sb.append(Tokens.T_CLOSEBRACKET);\n            }"
           },

           "clone": {
               "file": "NumberSequence.java",
               "start_line": "191",
               "end_line": "215",
               "source_code": "        //\n        sb.append(Tokens.T_START).append(' ');\n        sb.append(Tokens.T_WITH).append(' ');\n        sb.append(startValue);\n\n        if (getIncrement() != 1) {\n            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n            sb.append(Tokens.T_BY).append(' ');\n            sb.append(getIncrement());\n        }\n\n        if (!hasDefaultMinMax()) {\n            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n            sb.append(getMinValue());\n            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n            sb.append(getMaxValue());\n        }\n\n        if (isCycle()) {\n            sb.append(' ').append(Tokens.T_CYCLE);\n        }\n\n        if (name == null) {\n            sb.append(Tokens.T_CLOSEBRACKET);\n        }"
           }

       },

       {
           "id": "clone_155",

           "clone_type": "type-1",

           "origin": {
               "file": "Grid.java",
               "start_line": "143",
               "end_line": "151",
               "source_code": "        setLayout(null);\n\n        sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL);\n\n        add(sbHoriz);\n\n        sbVert = new Scrollbar(Scrollbar.VERTICAL);\n\n        add(sbVert);"
           },

           "clone": {
               "file": "Tree.java",
               "start_line": "138",
               "end_line": "146",
               "source_code": "        setLayout(null);\n\n        sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL);\n\n        add(sbHoriz);\n\n        sbVert = new Scrollbar(Scrollbar.VERTICAL);\n\n        add(sbVert);"
           }

       },

       {
           "id": "clone_156",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3426",
               "end_line": "3431",
               "source_code": "                        row                 = t.getEmptyRowData();\n                        row[grantor] = right.getGrantor().getName().name;\n                        row[grantee] = right.getGrantee().getName().name;\n                        row[table_catalog]  = tableCatalog;\n                        row[table_schema]   = tableSchema;\n                        row[table_name]     = tableName;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3007",
               "end_line": "3012",
               "source_code": "                            row                 = t.getEmptyRowData();\n                            row[grantor] = right.getGrantor().getName().name;\n                            row[grantee] = right.getGrantee().getName().name;\n                            row[table_catalog]  = tableCatalog;\n                            row[table_schema]   = tableSchema;\n                            row[table_name]     = tableName;"
           }

       },

       {
           "id": "clone_157",

           "clone_type": "type-1",

           "origin": {
               "file": "Expression.java",
               "start_line": "677",
               "end_line": "688",
               "source_code": "            case OpTypes.COUNT :\n            case OpTypes.SUM :\n            case OpTypes.MIN :\n            case OpTypes.MAX :\n            case OpTypes.AVG :\n            case OpTypes.EVERY :\n            case OpTypes.SOME :\n            case OpTypes.STDDEV_POP :\n            case OpTypes.STDDEV_SAMP :\n            case OpTypes.VAR_POP :\n            case OpTypes.VAR_SAMP :\n                return false;"
           },

           "clone": {
               "file": "Expression.java",
               "start_line": "589",
               "end_line": "601",
               "source_code": "            //\n            case OpTypes.COUNT :\n            case OpTypes.SUM :\n            case OpTypes.MIN :\n            case OpTypes.MAX :\n            case OpTypes.AVG :\n            case OpTypes.EVERY :\n            case OpTypes.SOME :\n            case OpTypes.STDDEV_POP :\n            case OpTypes.STDDEV_SAMP :\n            case OpTypes.VAR_POP :\n            case OpTypes.VAR_SAMP :\n                return false;"
           }

       },

       {
           "id": "clone_158",

           "clone_type": "type-1",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "269",
               "end_line": "276",
               "source_code": "        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n        }"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "233",
               "end_line": "240",
               "source_code": "        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n        }"
           }

       },

       {
           "id": "clone_159",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCConnection.java",
               "start_line": "883",
               "end_line": "891",
               "source_code": "                        sb.append(sql.substring(tail, i));\n\n                        i       = onStartEscapeSequence(sql, sb, i);\n                        tail    = i;\n                        changed = true;\n\n                        nest++;\n\n                        state = inside_escape;"
           },

           "clone": {
               "file": "JDBCConnection.java",
               "start_line": "838",
               "end_line": "846",
               "source_code": "                        sb.append(sql.substring(tail, i));\n\n                        i       = onStartEscapeSequence(sql, sb, i);\n                        tail    = i;\n                        changed = true;\n\n                        nest++;\n\n                        state = inside_escape;"
           }

       },

       {
           "id": "clone_160",

           "clone_type": "type-1",

           "origin": {
               "file": "TransferSQLText.java",
               "start_line": "443",
               "end_line": "454",
               "source_code": "        if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n\n        String        currentLine  = \"\";\n        String        Token        = \"\";\n        String        name         = \"\";\n        TransferTable relatedTable = null;"
           },

           "clone": {
               "file": "TransferSQLText.java",
               "start_line": "376",
               "end_line": "387",
               "source_code": "        if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n\n        String        currentLine  = \"\";\n        String        Token        = \"\";\n        String        name         = \"\";\n        TransferTable relatedTable = null;"
           }

       },

       {
           "id": "clone_161",

           "clone_type": "type-1",

           "origin": {
               "file": "TestNullInUnion.java",
               "start_line": "51",
               "end_line": "82",
               "source_code": "        st.execute(\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\n        st.execute(\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");\n\n        ResultSet rs = st.executeQuery(\n            \"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(\"\n            + \"(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union\"\n            + \"(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue\");\n\n        assertTrue(rs.next());\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\n        assertEquals(1, rs.getInt(\"idvalue\"));\n        assertEquals(1, rs.getInt(\"value1\"));\n        assertEquals(1, rs.getInt(\"value2\"));\n        assertEquals(null, rs.getObject(\"value3\"));\n        assertTrue(rs.next());\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\n        assertEquals(2, rs.getInt(\"idvalue\"));\n        assertEquals(2, rs.getInt(\"value1\"));\n        assertEquals(2, rs.getInt(\"value2\"));\n        assertEquals(null, rs.getObject(\"value3\"));\n        assertTrue(rs.next());\n        assertEquals(\"t2\", rs.getObject(\"atable\"));\n        assertEquals(1, rs.getInt(\"idvalue\"));\n        assertEquals(3, rs.getInt(\"value1\"));\n        assertEquals(null, rs.getObject(\"value2\"));\n        assertEquals(3, rs.getInt(\"value3\"));    //this fails!\n        assertFalse(rs.next());"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "696",
               "end_line": "727",
               "source_code": "        st.execute(\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\n        st.execute(\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");\n\n        ResultSet rs = st.executeQuery(\n            \"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(\"\n            + \"(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union\"\n            + \"(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue\");\n\n        assertTrue(rs.next());\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\n        assertEquals(1, rs.getInt(\"idvalue\"));\n        assertEquals(1, rs.getInt(\"value1\"));\n        assertEquals(1, rs.getInt(\"value2\"));\n        assertEquals(null, rs.getObject(\"value3\"));\n        assertTrue(rs.next());\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\n        assertEquals(2, rs.getInt(\"idvalue\"));\n        assertEquals(2, rs.getInt(\"value1\"));\n        assertEquals(2, rs.getInt(\"value2\"));\n        assertEquals(null, rs.getObject(\"value3\"));\n        assertTrue(rs.next());\n        assertEquals(\"t2\", rs.getObject(\"atable\"));\n        assertEquals(1, rs.getInt(\"idvalue\"));\n        assertEquals(3, rs.getInt(\"value1\"));\n        assertEquals(null, rs.getObject(\"value2\"));\n        assertEquals(3, rs.getInt(\"value3\"));    //this fails!\n        assertFalse(rs.next());"
           }

       },

       {
           "id": "clone_162",

           "clone_type": "type-1",

           "origin": {
               "file": "TransactionManagerMV2PL.java",
               "start_line": "177",
               "end_line": "183",
               "source_code": "            session.abortTransaction        = false;\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n\n            rollbackPartial(session, 0, session.transactionTimestamp);\n            endTransaction(session);\n            endTransactionTPL(session);"
           },

           "clone": {
               "file": "TransactionManagerMVCC.java",
               "start_line": "235",
               "end_line": "241",
               "source_code": "            session.abortTransaction        = false;\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n\n            rollbackPartial(session, 0, session.transactionTimestamp);\n            endTransaction(session);\n            endTransactionTPL(session);"
           }

       },

       {
           "id": "clone_163",

           "clone_type": "type-1",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "711",
               "end_line": "722",
               "source_code": "                        outPacket.writeShort(4);              // Datatype size  [adtsize]\n                        outPacket.writeInt(-1);               // Var size [atttypmod]\n                        outPacket.writeShort(0);              // text \"format code\"\n                        outPacket.xmit('T', dataOutput);      // sending a Tuple (row)\n\n                        // This query returns no rows.  typenam \"lo\"??\n                        outPacket.write(\"SELECT\");\n                        outPacket.xmit('C', dataOutput);\n\n                        sendReadyForQuery = true;\n\n                        break;"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "675",
               "end_line": "686",
               "source_code": "                        outPacket.writeShort(4);\n                        outPacket.writeInt(-1);\n                        outPacket.writeShort(0);\n                        outPacket.xmit('T', dataOutput);      // Xmit Row Definition\n\n                        // This query returns no rows.  typenam \"lo\"??\n                        outPacket.write(\"SELECT\");\n                        outPacket.xmit('C', dataOutput);\n\n                        sendReadyForQuery = true;\n\n                        break;"
           }

       },

       {
           "id": "clone_164",

           "clone_type": "type-1",

           "origin": {
               "file": "TestSql.java",
               "start_line": "370",
               "end_line": "464",
               "source_code": "            stmnt.execute(ddl1);\n\n            PreparedStatement ps = connection.prepareStatement(\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\n\n            ps.setString(1, \"0.2\");\n            ps.setDouble(2, 0.2);\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\n            ps.setInt(4, Integer.MAX_VALUE);\n            ps.setInt(5, Short.MAX_VALUE);\n            ps.setInt(6, 0);\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\n            ps.setTimestamp(\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.NaN);\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setInt(5, Short.MIN_VALUE);\n            ps.setInt(6, 0);\n\n            // allowed conversions\n            ps.setTimestamp(\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\n            ps.execute();\n\n            //\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\n            ps.setInt(4, Integer.MIN_VALUE);\n\n            // test conversion\n            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int\n            // ps.setBoolean(5, true);\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\n            ps.setObject(6, new Integer(2), Types.TINYINT);\n\n            // allowed conversions\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\n                                                   + 2));\n            ps.execute();\n            ps.setObject(1, new Float(0), Types.INTEGER);\n            ps.setObject(4, new Float(1), Types.INTEGER);\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\n            ps.execute();\n\n            ResultSet rs =\n                stmnt.executeQuery(\"SELECT d, f, l, i, s*2, t FROM t1\");\n            boolean result = rs.next();\n\n            value = rs.getDouble(2);\n\n//            int smallintValue = rs.getShort(3);\n            int integerValue = rs.getInt(4);\n\n            if (rs.next()) {\n                value        = rs.getDouble(2);\n                wasEqual     = Double.isNaN(value);\n                integerValue = rs.getInt(4);\n\n                // tests for conversion\n                // getInt on DECIMAL\n                integerValue = rs.getInt(1);\n            }\n\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\n            }\n\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\n            }\n\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\n\n            if (rs.next()) {\n                int max = rs.getInt(1);\n\n                System.out.println(\"Max value for i: \" + max);\n            }\n\n            try {\n\n                // cause errors\n                ps.setString(5, \"three\");\n                fail(\"update did not fail\");\n            } catch (SQLException e) {}"
           },

           "clone": {
               "file": "TestSqlPersistent.java",
               "start_line": "445",
               "end_line": "539",
               "source_code": "            stmnt.execute(ddl1);\n\n            PreparedStatement ps = connection.prepareStatement(\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\n\n            ps.setString(1, \"0.2\");\n            ps.setDouble(2, 0.2);\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\n            ps.setInt(4, Integer.MAX_VALUE);\n            ps.setInt(5, Short.MAX_VALUE);\n            ps.setInt(6, 0);\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\n            ps.setTimestamp(\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.NaN);\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setInt(5, Short.MIN_VALUE);\n            ps.setInt(6, 0);\n\n            // allowed conversions\n            ps.setTimestamp(\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\n            ps.execute();\n\n            //\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\n            ps.setInt(4, Integer.MIN_VALUE);\n\n            // test conversion\n            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int\n            // ps.setBoolean(5, true);\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\n            ps.setObject(6, new Integer(2), Types.TINYINT);\n\n            // allowed conversions\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\n                                                   + 2));\n            ps.execute();\n            ps.setObject(1, new Float(0), Types.INTEGER);\n            ps.setObject(4, new Float(1), Types.INTEGER);\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\n            ps.execute();\n\n            ResultSet rs =\n                stmnt.executeQuery(\"SELECT d, f, l, i, s*2, t FROM t1\");\n            boolean result = rs.next();\n\n            value = rs.getDouble(2);\n\n//            int smallintValue = rs.getShort(3);\n            int integerValue = rs.getInt(4);\n\n            if (rs.next()) {\n                value        = rs.getDouble(2);\n                wasEqual     = Double.isNaN(value);\n                integerValue = rs.getInt(4);\n\n                // tests for conversion\n                // getInt on DECIMAL\n                integerValue = rs.getInt(1);\n            }\n\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\n            }\n\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\n            }\n\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\n\n            if (rs.next()) {\n                int max = rs.getInt(1);\n\n                System.out.println(\"Max value for i: \" + max);\n            }\n\n            try {\n\n                // cause errors\n                ps.setString(5, \"three\");\n                fail(\"update did not fail\");\n            } catch (SQLException e) {}"
           }

       },

       {
           "id": "clone_165",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "431",
               "end_line": "449",
               "source_code": "            Query = \"DROP TABLE history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "417",
               "end_line": "435",
               "source_code": "            Query = \"DROP TABLE history\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE accounts\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE tellers\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();\n\n            Query = \"DROP TABLE branches\";\n\n            Stmt.execute(Query);\n            Stmt.clearWarnings();"
           }

       },

       {
           "id": "clone_166",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCStatement.java",
               "start_line": "1097",
               "end_line": "1118",
               "source_code": "        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n\n        return updateCounts;"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "1924",
               "end_line": "1945",
               "source_code": "        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n\n        return updateCounts;"
           }

       },

       {
           "id": "clone_167",

           "clone_type": "type-1",

           "origin": {
               "file": "BlobDataID.java",
               "start_line": "131",
               "end_line": "147",
               "source_code": "    public long length(SessionInterface session) {\n\n        if (length > -1) {\n            return length;\n        }\n\n        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);\n        Result    resultIn  = session.execute(resultOut);\n\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n\n        length = ((ResultLob) resultIn).getBlockLength();\n\n        return length;\n    }"
           },

           "clone": {
               "file": "ClobDataID.java",
               "start_line": "72",
               "end_line": "88",
               "source_code": "    public long length(SessionInterface session) {\n\n        if (length > -1) {\n            return length;\n        }\n\n        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);\n        Result    resultIn  = session.execute(resultOut);\n\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n\n        length = ((ResultLob) resultIn).getBlockLength();\n\n        return length;\n    }"
           }

       },

       {
           "id": "clone_168",

           "clone_type": "type-1",

           "origin": {
               "file": "SqlFileScanner.java",
               "start_line": "267",
               "end_line": "277",
               "source_code": "  private static int zzUnpackAttribute(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"
           },

           "clone": {
               "file": "SqlFileScanner.java",
               "start_line": "118",
               "end_line": "128",
               "source_code": "  private static int zzUnpackAction(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"
           }

       },

       {
           "id": "clone_169",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8311",
               "end_line": "8317",
               "source_code": "        // Column number mappings\n        final int view_catalog  = 0;\n        final int view_schema   = 1;\n        final int view_name     = 2;\n        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8072",
               "end_line": "8078",
               "source_code": "        // Column number mappings\n        final int view_catalog  = 0;\n        final int view_schema   = 1;\n        final int view_name     = 2;\n        final int table_catalog = 3;\n        final int table_schema  = 4;\n        final int table_name    = 5;"
           }

       },

       {
           "id": "clone_170",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "2001",
               "end_line": "2010",
               "source_code": "        statements = new Statement[list.size()];\n\n        list.toArray(statements);\n\n        StatementCompound result = new StatementCompound(StatementTypes.IF,\n            null);\n\n        result.setStatements(statements);\n\n        return result;"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "1954",
               "end_line": "1963",
               "source_code": "        statements = new Statement[list.size()];\n\n        list.toArray(statements);\n\n        StatementCompound result = new StatementCompound(StatementTypes.IF,\n            null);\n\n        result.setStatements(statements);\n\n        return result;"
           }

       },

       {
           "id": "clone_171",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1675",
               "end_line": "1681",
               "source_code": "        // intermediate holders\n        int           columnCount;\n        Iterator      routines;\n        RoutineSchema routineSchema;\n        Routine       routine;\n        Object[]      row;\n        Type          type;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4338",
               "end_line": "4344",
               "source_code": "        // intermediate holders\n        int           columnCount;\n        Iterator      routines;\n        RoutineSchema routineSchema;\n        Routine       routine;\n        Object[]      row;\n        Type          type;"
           }

       },

       {
           "id": "clone_172",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "856",
               "end_line": "872",
               "source_code": "            if (r == -1) {\n                ResultSet rs = sStatement.getResultSet();\n\n                try {\n                    formatResultSet(rs);\n                } catch (Throwable t) {\n                    g[0] = \"Error displaying the ResultSet\";\n\n                    gResult.setHead(g);\n\n                    String s = t.getMessage();\n\n                    g[0] = s;\n\n                    gResult.addRow(g);\n                }\n            }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1636",
               "end_line": "1652",
               "source_code": "            if (r == -1) {\n                ResultSet rs = sStatement.getResultSet();\n\n                try {\n                    formatResultSet(rs);\n                } catch (Throwable t) {\n                    g[0] = \"Error displaying the ResultSet\";\n\n                    gResult.setHead(g);\n\n                    String s = t.getMessage();\n\n                    g[0] = s;\n\n                    gResult.addRow(g);\n                }\n            }"
           }

       },

       {
           "id": "clone_173",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3587",
               "end_line": "3597",
               "source_code": "        //\n        // intermediate holders\n        int            columnCount;\n        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        OrderedHashSet columnList;\n        Type           type;\n\n        // Initialization\n        tables = allTables();"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2644",
               "end_line": "2654",
               "source_code": "        //\n        // intermediate holders\n        int            columnCount;\n        Iterator       tables;\n        Table          table;\n        Object[]       row;\n        OrderedHashSet columnList;\n        Type           type;\n\n        // Initialization\n        tables = allTables();"
           }

       },

       {
           "id": "clone_174",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCConnection.java",
               "start_line": "2213",
               "end_line": "2243",
               "source_code": "        checkClosed();\n\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n        }"
           },

           "clone": {
               "file": "JDBCConnection.java",
               "start_line": "2124",
               "end_line": "2154",
               "source_code": "        checkClosed();\n\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n\n            throw JDBCUtil.invalidArgument(msg);\n        }\n\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n        }"
           }

       },

       {
           "id": "clone_175",

           "clone_type": "type-1",

           "origin": {
               "file": "RowInputText.java",
               "start_line": "529",
               "end_line": "541",
               "source_code": "        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        long id = Long.parseLong(s);"
           },

           "clone": {
               "file": "RowInputText.java",
               "start_line": "510",
               "end_line": "522",
               "source_code": "        String s = readString();\n\n        if (s == null) {\n            return null;\n        }\n\n        s = s.trim();\n\n        if (s.length() == 0) {\n            return null;\n        }\n\n        long id = Long.parseLong(s);"
           }

       },

       {
           "id": "clone_176",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBench.java",
               "start_line": "944",
               "end_line": "963",
               "source_code": "                                     int transactionMode) {\n\n            System.out.println(number_of_txns);\n\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n\n            if (Conn == null) {\n                return;\n            }\n\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n            }\n        }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "773",
               "end_line": "792",
               "source_code": "                            String password, int transactionMode) {\n\n            System.out.println(number_of_txns);\n\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n\n            if (Conn == null) {\n                return;\n            }\n\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n            }\n        }"
           }

       },

       {
           "id": "clone_177",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBatchExecution.java",
               "start_line": "200",
               "end_line": "208",
               "source_code": "        preparedTestOne(runs);\n\n        // drop the test table\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "176",
               "end_line": "184",
               "source_code": "        preparedTestOne(runs);\n\n        // drop the test table and shut down database\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");"
           }

       },

       {
           "id": "clone_178",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "614",
               "end_line": "620",
               "source_code": "            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n\n            ps = connection.prepareStatement(dml1);\n\n            sw.zero();\n            sw.start();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "541",
               "end_line": "547",
               "source_code": "            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n\n            ps = connection.prepareStatement(dml1);\n\n            sw.zero();\n            sw.start();"
           }

       },

       {
           "id": "clone_179",

           "clone_type": "type-1",

           "origin": {
               "file": "IndexAVL.java",
               "start_line": "811",
               "end_line": "833",
               "source_code": "        for (int j = start; j < colIndex.length; j++) {\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[colIndex[j]]);\n\n            if (i != 0) {\n                if (isSimpleOrder) {\n                    return i;\n                }\n\n                boolean nulls = a[colIndex[j]] == null\n                                || b[colIndex[j]] == null;\n\n                if (colDesc[j] && !nulls) {\n                    i = -i;\n                }\n\n                if (nullsLast[j] && nulls) {\n                    i = -i;\n                }\n\n                return i;\n            }\n        }"
           },

           "clone": {
               "file": "IndexAVL.java",
               "start_line": "766",
               "end_line": "788",
               "source_code": "        for (int j = 0; j < colIndex.length; j++) {\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[colIndex[j]]);\n\n            if (i != 0) {\n                if (isSimpleOrder) {\n                    return i;\n                }\n\n                boolean nulls = a[colIndex[j]] == null\n                                || b[colIndex[j]] == null;\n\n                if (colDesc[j] && !nulls) {\n                    i = -i;\n                }\n\n                if (nullsLast[j] && nulls) {\n                    i = -i;\n                }\n\n                return i;\n            }\n        }"
           }

       },

       {
           "id": "clone_180",

           "clone_type": "type-1",

           "origin": {
               "file": "TestDateTime.java",
               "start_line": "272",
               "end_line": "287",
               "source_code": "        iUpdateCount = insertStatement.executeUpdate();\n\n        insertStatement.close();\n        Assert.assertEquals(\n            \"Exactly one record with time data shoud have been inserted.\",\n            iUpdateCount, 1);\n\n        // Now select it back to be sure it is there\n        PreparedStatement selectStatement = null;\n        PreparedStatement deleteStatement = null;\n        ResultSet         results         = null;\n        java.sql.Time     retrievedTime;\n        int               iDeletedCount = 0;\n        java.sql.Time     selectTime;\n\n        selectStatement = connection.prepareStatement(SELECT_TIME);"
           },

           "clone": {
               "file": "TestDateTime.java",
               "start_line": "177",
               "end_line": "192",
               "source_code": "        iUpdateCount = insertStatement.executeUpdate();\n\n        insertStatement.close();\n        Assert.assertEquals(\n            \"Exactly one record with time data shoud have been inserted.\",\n            iUpdateCount, 1);\n\n        // Now select it back to be sure it is there\n        PreparedStatement selectStatement = null;\n        PreparedStatement deleteStatement = null;\n        ResultSet         results         = null;\n        java.sql.Time     retrievedTime;\n        int               iDeletedCount = 0;\n        java.sql.Time     selectTime;\n\n        selectStatement = connection.prepareStatement(SELECT_TIME);"
           }

       },

       {
           "id": "clone_181",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5696",
               "end_line": "5707",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;\n                row[specific_name]    = routine.getSpecificName().name;\n                row[routine_catalog]  = database.getCatalogName().name;\n                row[routine_schema]   = routine.getSchemaName().name;\n                row[routine_name]     = routine.getName().name;\n                row[table_catalog]    = database.getCatalogName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5108",
               "end_line": "5121",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row = t.getEmptyRowData();\n\n                //\n                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;\n                row[specific_name]    = routine.getSpecificName().name;\n                row[routine_catalog]  = database.getCatalogName().name;\n                row[routine_schema]   = routine.getSchemaName().name;\n                row[routine_name]     = routine.getName().name;\n                row[table_catalog]    = database.getCatalogName().name;"
           }

       },

       {
           "id": "clone_182",

           "clone_type": "type-1",

           "origin": {
               "file": "RowOutputBase.java",
               "start_line": "255",
               "end_line": "266",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           },

           "clone": {
               "file": "RowOutputBinary.java",
               "start_line": "390",
               "end_line": "401",
               "source_code": "                break;\n\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :"
           }

       },

       {
           "id": "clone_183",

           "clone_type": "type-1",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "66",
               "end_line": "71",
               "source_code": "        TestUtil.deleteDatabase(\"/hsql/testtext/test\");\n        TestUtil.delete(\"/hsql/testtext/t.txt\");\n        TestUtil.delete(\"/hsql/testtext/tt.txt\");\n        TestUtil.delete(\"/hsql/testtext/tident.txt\");\n        TestUtil.delete(\"/hsql/testtext/tsingle.txt\");\n        initDatabase();"
           },

           "clone": {
               "file": "TestTextTables.java",
               "start_line": "54",
               "end_line": "59",
               "source_code": "        TestUtil.deleteDatabase(\"/hsql/testtext/test\");\n        TestUtil.delete(\"/hsql/testtext/t.txt\");\n        TestUtil.delete(\"/hsql/testtext/tt.txt\");\n        TestUtil.delete(\"/hsql/testtext/tident.txt\");\n        TestUtil.delete(\"/hsql/testtext/tsingle.txt\");\n        initDatabase();"
           }

       },

       {
           "id": "clone_184",

           "clone_type": "type-1",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "200",
               "end_line": "205",
               "source_code": "        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "544",
               "end_line": "549",
               "source_code": "        TestResult            result;\n        TestCase              test;\n        java.util.Enumeration failures;\n        int                   count;\n\n        result = new TestResult();"
           }

       },

       {
           "id": "clone_185",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3248",
               "end_line": "3311",
               "source_code": "        //\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n\n        //\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }\n\n        return t;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3143",
               "end_line": "3206",
               "source_code": "        //\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n\n        //\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n\n            row = t.getEmptyRowData();\n\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n\n            t.insertSys(session, store, row);\n        }\n\n        return t;"
           }

       },

       {
           "id": "clone_186",

           "clone_type": "type-1",

           "origin": {
               "file": "BaseHashMap.java",
               "start_line": "469",
               "end_line": "486",
               "source_code": "        int hash = (int) longKey;\n\n        if (isObjectKey) {\n            if (objectKey == null) {\n                return null;\n            }\n\n            if (comparator == null) {\n                hash = objectKey.hashCode();\n            } else {\n                hash = comparator.hashCode(objectKey);\n            }\n        }\n\n        int     index       = hashIndex.getHashIndex(hash);\n        int     lookup      = hashIndex.hashTable[index];\n        int     lastLookup  = -1;\n        Object  returnValue = null;"
           },

           "clone": {
               "file": "BaseHashMap.java",
               "start_line": "310",
               "end_line": "327",
               "source_code": "        int hash = (int) longKey;\n\n        if (isObjectKey) {\n            if (objectKey == null) {\n                return null;\n            }\n\n            if (comparator == null) {\n                hash = objectKey.hashCode();\n            } else {\n                hash = comparator.hashCode(objectKey);\n            }\n        }\n\n        int    index       = hashIndex.getHashIndex(hash);\n        int    lookup      = hashIndex.hashTable[index];\n        int    lastLookup  = -1;\n        Object returnValue = null;"
           }

       },

       {
           "id": "clone_187",

           "clone_type": "type-1",

           "origin": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "124",
               "end_line": "143",
               "source_code": "            statement.execute(\"drop table t1 if exists\");\n            statement.execute(\n                \"create table t1 (i int primary key, c varchar(10), t varbinary(3))\");\n\n            String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n\n            connection.setAutoCommit(false);\n\n            ResultSet rs = statement.executeQuery(select);"
           },

           "clone": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "67",
               "end_line": "86",
               "source_code": "            statement.execute(\"drop table t1 if exists\");\n            statement.execute(\n                \"create table t1 (i int primary key, c varchar(10), t varbinary(3))\");\n\n            String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n\n            connection.setAutoCommit(false);\n\n            ResultSet rs = statement.executeQuery(select);"
           }

       },

       {
           "id": "clone_188",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSession.java",
               "start_line": "234",
               "end_line": "259",
               "source_code": "    public Result execute(Session session) {\n\n        Result result;\n\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n\n            return result;\n        }\n\n        try {\n            if (isLogged) {\n                session.database.logger.writeOtherStatement(session, sql);\n            }\n        } catch (Throwable e) {\n            return Result.newErrorResult(e, sql);\n        }\n\n        return result;\n    }"
           },

           "clone": {
               "file": "StatementCommand.java",
               "start_line": "212",
               "end_line": "237",
               "source_code": "    public Result execute(Session session) {\n\n        Result result;\n\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n\n            return result;\n        }\n\n        try {\n            if (isLogged) {\n                session.database.logger.writeOtherStatement(session, sql);\n            }\n        } catch (Throwable e) {\n            return Result.newErrorResult(e, sql);\n        }\n\n        return result;\n    }"
           }

       },

       {
           "id": "clone_189",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5764",
               "end_line": "5768",
               "source_code": "            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4280",
               "end_line": "4284",
               "source_code": "            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_190",

           "clone_type": "type-1",

           "origin": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "223",
               "end_line": "236",
               "source_code": "            String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n\n            connection.setAutoCommit(false);"
           },

           "clone": {
               "file": "TestUpdatableResultSets.java",
               "start_line": "128",
               "end_line": "141",
               "source_code": "            String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n\n            connection.setAutoCommit(false);"
           }

       },

       {
           "id": "clone_191",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "919",
               "end_line": "939",
               "source_code": "                try {\n                    if (pstmt1 != null) {\n                        pstmt1.close();\n                    }\n\n                    if (pstmt2 != null) {\n                        pstmt2.close();\n                    }\n\n                    if (pstmt3 != null) {\n                        pstmt3.close();\n                    }\n\n                    if (pstmt4 != null) {\n                        pstmt4.close();\n                    }\n\n                    if (pstmt5 != null) {\n                        pstmt5.close();\n                    }\n                }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "843",
               "end_line": "863",
               "source_code": "            try {\n                if (pstmt1 != null) {\n                    pstmt1.close();\n                }\n\n                if (pstmt2 != null) {\n                    pstmt2.close();\n                }\n\n                if (pstmt3 != null) {\n                    pstmt3.close();\n                }\n\n                if (pstmt4 != null) {\n                    pstmt4.close();\n                }\n\n                if (pstmt5 != null) {\n                    pstmt5.close();\n                }\n            }"
           }

       },

       {
           "id": "clone_192",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLDisk.java",
               "start_line": "323",
               "end_line": "337",
               "source_code": "    public CachedObject getAccessor(Index key) {\n\n        NodeAVL node = (NodeAVL) accessorList[key.getPosition()];\n\n        if (node == null) {\n            return null;\n        }\n\n        RowAVL row = (RowAVL) get(node.getRow(this), false);\n\n        node                            = row.getNode(key.getPosition());\n        accessorList[key.getPosition()] = node;\n\n        return node;\n    }"
           },

           "clone": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "338",
               "end_line": "352",
               "source_code": "    public CachedObject getAccessor(Index key) {\n\n        NodeAVL node = (NodeAVL) accessorList[key.getPosition()];\n\n        if (node == null) {\n            return null;\n        }\n\n        RowAVL row = (RowAVL) get(node.getRow(this), false);\n\n        node                            = row.getNode(key.getPosition());\n        accessorList[key.getPosition()] = node;\n\n        return node;\n    }"
           }

       },

       {
           "id": "clone_193",

           "clone_type": "type-1",

           "origin": {
               "file": "BitType.java",
               "start_line": "451",
               "end_line": "470",
               "source_code": "        if (end < offset) {\n            throw Error.error(ErrorCode.X_22011);\n        }\n\n        if (offset > end || end < 0) {\n\n            // return zero length data\n            offset = 0;\n            end    = 0;\n        }\n\n        if (offset < 0) {\n            offset = 0;\n        }\n\n        if (end > dataLength) {\n            end = dataLength;\n        }\n\n        length = end - offset;"
           },

           "clone": {
               "file": "CharacterType.java",
               "start_line": "814",
               "end_line": "833",
               "source_code": "        if (end < offset) {\n            throw Error.error(ErrorCode.X_22011);\n        }\n\n        if (offset > end || end < 0) {\n\n            // return zero length data\n            offset = 0;\n            end    = 0;\n        }\n\n        if (offset < 0) {\n            offset = 0;\n        }\n\n        if (end > dataLength) {\n            end = dataLength;\n        }\n\n        length = end - offset;"
           }

       },

       {
           "id": "clone_194",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "2086",
               "end_line": "2097",
               "source_code": "                if (data[0] == null || data[1] == null) {\n                    return null;\n                }\n\n                Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,\n                                                  true);\n\n                st = Type.SQL_VARCHAR.upper(session, st);\n                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);\n\n                int token    = Tokens.get((String) st);\n                int typeCode = IntervalType.getFieldNameTypeForToken(token);"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2056",
               "end_line": "2067",
               "source_code": "                if (data[0] == null || data[1] == null) {\n                    return null;\n                }\n\n                Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,\n                                                  true);\n\n                st = Type.SQL_VARCHAR.upper(session, st);\n                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);\n\n                int token    = Tokens.get((String) st);\n                int typeCode = IntervalType.getFieldNameTypeForToken(token);"
           }

       },

       {
           "id": "clone_195",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "634",
               "end_line": "647",
               "source_code": "        //\n        int  bufferLength  = session.getStreamBlockSize();\n        long currentOffset = blockOffset;\n\n        dataOut.writeByte(mode);\n        dataOut.writeInt(databaseID);\n        dataOut.writeLong(sessionID);\n        dataOut.writeLong(lobID);\n        dataOut.writeInt(subType);\n\n        HsqlByteArrayOutputStream byteArrayOS =\n            new HsqlByteArrayOutputStream(bufferLength);\n\n        byteArrayOS.reset();"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "578",
               "end_line": "591",
               "source_code": "        //\n        int  bufferLength  = session.getStreamBlockSize();\n        long currentOffset = blockOffset;\n\n        dataOut.writeByte(mode);\n        dataOut.writeInt(databaseID);\n        dataOut.writeLong(sessionID);\n        dataOut.writeLong(lobID);\n        dataOut.writeInt(subType);\n\n        HsqlByteArrayOutputStream byteArrayOS =\n            new HsqlByteArrayOutputStream(bufferLength);\n\n        byteArrayOS.reset();"
           }

       },

       {
           "id": "clone_196",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3482",
               "end_line": "3488",
               "source_code": "        // intermediate holders\n        Iterator  tables;\n        Table     table;\n        Object[]  row;\n        final int table_catalog                = 0;\n        final int table_schema                 = 1;\n        final int table_name                   = 2;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8425",
               "end_line": "8430",
               "source_code": "        Iterator  tables;\n        Table     table;\n        Object[]  row;\n        final int table_catalog              = 0;\n        final int table_schema               = 1;\n        final int table_name                 = 2;"
           }

       },

       {
           "id": "clone_197",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3366",
               "end_line": "3390",
               "source_code": "    Expression XreadIntervalValueExpression() {\n\n        Expression e = XreadDateTimeIntervalTerm();\n\n        while (true) {\n            int type;\n\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n\n            read();\n\n            Expression a = e;\n\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n\n        return e;\n    }"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3340",
               "end_line": "3364",
               "source_code": "    Expression XreadDatetimeValueExpression() {\n\n        Expression e = XreadDateTimeIntervalTerm();\n\n        while (true) {\n            int type;\n\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n\n            read();\n\n            Expression a = e;\n\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n\n        return e;\n    }"
           }

       },

       {
           "id": "clone_198",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "178",
               "end_line": "183",
               "source_code": "        result.lobID       = id;\n        result.blockOffset = offset;\n        result.byteBlock   = block;\n        result.blockLength = block.length;\n\n        return result;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "139",
               "end_line": "144",
               "source_code": "        result.lobID       = id;\n        result.blockOffset = offset;\n        result.byteBlock   = block;\n        result.blockLength = block.length;\n\n        return result;"
           }

       },

       {
           "id": "clone_199",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionCustom.java",
               "start_line": "3601",
               "end_line": "3606",
               "source_code": "            case FUNC_DEGREES :\n            case FUNC_SIN :\n            case FUNC_TAN :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_ROUNDMAGIC :"
           },

           "clone": {
               "file": "FunctionCustom.java",
               "start_line": "2763",
               "end_line": "2768",
               "source_code": "            case FUNC_DEGREES :\n            case FUNC_SIN :\n            case FUNC_TAN :\n            case FUNC_LOG10 :\n            case FUNC_RADIANS :\n            case FUNC_ROUNDMAGIC :"
           }

       },

       {
           "id": "clone_200",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "1040",
               "end_line": "1046",
               "source_code": "        g[0] = \"\" + total;\n        g[1] = \"total\";\n        g[2] = \"\";\n\n        gResult.addRow(g);\n\n        lTime = System.currentTimeMillis() - lTime;"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1866",
               "end_line": "1872",
               "source_code": "        g[0] = \"\" + total;\n        g[1] = \"total\";\n        g[2] = \"\";\n\n        gResult.addRow(g);\n\n        lTime = System.currentTimeMillis() - lTime;"
           }

       },

       {
           "id": "clone_201",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "416",
               "end_line": "423",
               "source_code": "                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "393",
               "end_line": "400",
               "source_code": "                result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;"
           }

       },

       {
           "id": "clone_202",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "113",
               "end_line": "118",
               "source_code": "                read();\n                readThis(Tokens.TABLE);\n\n                isTable   = true;\n                tableType = TableBase.TEMP_TABLE;\n                break;"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "105",
               "end_line": "110",
               "source_code": "                read();\n                readThis(Tokens.TABLE);\n\n                isTable   = true;\n                tableType = TableBase.TEMP_TABLE;\n                break;"
           }

       },

       {
           "id": "clone_203",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4265",
               "end_line": "4270",
               "source_code": "            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2550",
               "end_line": "2555",
               "source_code": "            addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_204",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7686",
               "end_line": "7693",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4975",
               "end_line": "4982",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not null\n            addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null"
           }

       },

       {
           "id": "clone_205",

           "clone_type": "type-1",

           "origin": {
               "file": "Result.java",
               "start_line": "1081",
               "end_line": "1088",
               "source_code": "                break;\n\n            case ResultConstants.DISCONNECT :\n            case ResultConstants.RESETSESSION :\n            case ResultConstants.STARTTRAN :\n                break;\n\n            case ResultConstants.PREPARE :"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "349",
               "end_line": "356",
               "source_code": "                break;\n\n            case ResultConstants.DISCONNECT :\n            case ResultConstants.RESETSESSION :\n            case ResultConstants.STARTTRAN :\n                break;\n\n            case ResultConstants.PREPARE :"
           }

       },

       {
           "id": "clone_206",

           "clone_type": "type-1",

           "origin": {
               "file": "DTIType.java",
               "start_line": "280",
               "end_line": "285",
               "source_code": "            // fall through\n            case Types.SQL_INTERVAL_YEAR :\n            case Types.SQL_INTERVAL_MONTH :\n            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_MINUTE :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "834",
               "end_line": "838",
               "source_code": "                case Types.SQL_INTERVAL_YEAR :\n                case Types.SQL_INTERVAL_MONTH :\n                case Types.SQL_INTERVAL_DAY :\n                case Types.SQL_INTERVAL_HOUR :\n                case Types.SQL_INTERVAL_MINUTE :"
           }

       },

       {
           "id": "clone_207",

           "clone_type": "type-1",

           "origin": {
               "file": "ResultLob.java",
               "start_line": "666",
               "end_line": "674",
               "source_code": "            if (byteArrayOS.size() == 0) {\n                break;\n            }\n\n            //\n            dataOut.writeByte(mode);\n            dataOut.writeInt(databaseID);\n            dataOut.writeLong(sessionID);\n            dataOut.writeLong(lobID);"
           },

           "clone": {
               "file": "ResultLob.java",
               "start_line": "608",
               "end_line": "616",
               "source_code": "            if (byteArrayOS.size() == 0) {\n                break;\n            }\n\n            //\n            dataOut.writeByte(mode);\n            dataOut.writeInt(databaseID);\n            dataOut.writeLong(sessionID);\n            dataOut.writeLong(lobID);"
           }

       },

       {
           "id": "clone_208",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3504",
               "end_line": "3513",
               "source_code": "            table = (Table) tables.next();\n\n            if (!isAccessibleTable(session, table)) {\n                continue;\n            }\n\n            row                = t.getEmptyRowData();\n            row[table_catalog] = database.getCatalogName().name;\n            row[table_schema]  = table.getSchemaName().name;\n            row[table_name]    = table.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "1345",
               "end_line": "1354",
               "source_code": "            table = (Table) tables.next();\n\n            if (!isAccessibleTable(session, table)) {\n                continue;\n            }\n\n            row                = t.getEmptyRowData();\n            row[table_catalog] = database.getCatalogName().name;\n            row[table_schema]  = table.getSchemaName().name;\n            row[table_name]    = table.getName().name;"
           }

       },

       {
           "id": "clone_209",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2008",
               "end_line": "2015",
               "source_code": "        row[icat]          = cat;\n        row[ischem]        = schem;\n        row[ipname]        = pName;\n        row[iinput_parms]  = ip;\n        row[ioutput_parms] = op;\n        row[iresult_sets]  = rs;\n        row[iremark]       = remark;\n        row[iptype]        = pType;"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "2027",
               "end_line": "2034",
               "source_code": "                row[icat]          = cat;\n                row[ischem]        = schem;\n                row[ipname]        = pName;\n                row[iinput_parms]  = ip;\n                row[ioutput_parms] = op;\n                row[iresult_sets]  = rs;\n                row[iremark]       = remark;\n                row[iptype]        = pType;"
           }

       },

       {
           "id": "clone_210",

           "clone_type": "type-1",

           "origin": {
               "file": "ServerConnection.java",
               "start_line": "1152",
               "end_line": "1168",
               "source_code": "                        // table ID  [relid]:\n                        outPacket.writeInt(OdbcUtil.getTableOidForColumn(i,\n                                md));\n\n                        // column id  [attid]\n                        outPacket.writeShort(OdbcUtil.getIdForColumn(i, md));\n                        outPacket.writeInt(pgTypes[i].getOid());\n\n                        // Datatype size  [adtsize]\n                        outPacket.writeShort(pgTypes[i].getTypeWidth());\n                        outPacket.writeInt(pgTypes[i].getLPConstraint());\n\n                        // Var size [atttypmod]\n                        // This is the size constraint integer\n                        // like VARCHAR(12) or DECIMAL(4).\n                        // -1 if none specified for this column.\n                        outPacket.writeShort(0);"
           },

           "clone": {
               "file": "ServerConnection.java",
               "start_line": "791",
               "end_line": "808",
               "source_code": "                            // table ID  [relid]:\n                            outPacket.writeInt(OdbcUtil.getTableOidForColumn(i,\n                                    md));\n\n                            // column id  [attid]\n                            outPacket.writeShort(OdbcUtil.getIdForColumn(i,\n                                    md));\n                            outPacket.writeInt(pgTypes[i].getOid());\n\n                            // Datatype size  [adtsize]\n                            outPacket.writeShort(pgTypes[i].getTypeWidth());\n                            outPacket.writeInt(pgTypes[i].getLPConstraint());\n\n                            // Var size [atttypmod]\n                            // This is the size constraint integer\n                            // like VARCHAR(12) or DECIMAL(4).\n                            // -1 if none specified for this column.\n                            outPacket.writeShort(0);"
           }

       },

       {
           "id": "clone_211",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "2514",
               "end_line": "2530",
               "source_code": "            while (true) {\n                Iterator it = unresolved.iterator();\n\n                if (!it.hasNext()) {\n                    break;\n                }\n\n                OrderedHashSet newResolved = new OrderedHashSet();\n\n                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,\n                                          newResolved);\n                unresolved.removeAll(newResolved);\n\n                if (newResolved.size() == 0) {\n                    break;\n                }\n            }"
           },

           "clone": {
               "file": "SchemaManager.java",
               "start_line": "2480",
               "end_line": "2496",
               "source_code": "            while (true) {\n                Iterator it = unresolved.iterator();\n\n                if (!it.hasNext()) {\n                    break;\n                }\n\n                OrderedHashSet newResolved = new OrderedHashSet();\n\n                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,\n                                          newResolved);\n                unresolved.removeAll(newResolved);\n\n                if (newResolved.size() == 0) {\n                    break;\n                }\n            }"
           }

       },

       {
           "id": "clone_212",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8346",
               "end_line": "8353",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                = t.getEmptyRowData();\n                row[view_catalog]  = database.getCatalogName().name;\n                row[view_schema]   = table.getSchemaName().name;\n                row[view_name]     = table.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "8227",
               "end_line": "8234",
               "source_code": "                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[view_catalog]     = database.getCatalogName().name;\n                row[view_schema]      = table.getSchemaName().name;\n                row[view_name]        = table.getName().name;"
           }

       },

       {
           "id": "clone_213",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1720",
               "end_line": "1724",
               "source_code": "                pResult.removeAll();\n                pResult.add(gScrollPane, BorderLayout.CENTER);\n                pResult.doLayout();\n                gResult.fireTableChanged(null);\n                pResult.repaint();"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1339",
               "end_line": "1343",
               "source_code": "        pResult.removeAll();\n        pResult.add(gScrollPane, BorderLayout.CENTER);\n        pResult.doLayout();\n        gResult.fireTableChanged(null);\n        pResult.repaint();"
           }

       },

       {
           "id": "clone_214",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCResultSet.java",
               "start_line": "7572",
               "end_line": "7583",
               "source_code": "            Object[] rowData = getCurrent();\n            Type     sourceType;\n            Object   value;\n\n            checkColumn(columnIndex);\n\n            sourceType = resultMetaData.columnTypes[--columnIndex];\n            value      = rowData[columnIndex];\n\n            if (trackNull(value)) {\n                return null;\n            }"
           },

           "clone": {
               "file": "JDBCResultSet.java",
               "start_line": "7281",
               "end_line": "7292",
               "source_code": "        Object[] rowData = getCurrent();\n        Type     sourceType;\n        Object   value;\n\n        checkColumn(columnIndex);\n\n        sourceType = resultMetaData.columnTypes[--columnIndex];\n        value      = rowData[columnIndex];\n\n        if (trackNull(value)) {\n            return null;\n        }"
           }

       },

       {
           "id": "clone_215",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7030",
               "end_line": "7036",
               "source_code": "        final int sequence_catalog = 3;\n        final int sequence_schema  = 4;\n        final int sequence_name    = 5;\n\n        //\n        Iterator it;\n        Object[] row;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5557",
               "end_line": "5563",
               "source_code": "        final int sequence_catalog = 3;\n        final int sequence_schema  = 4;\n        final int sequence_name    = 5;\n\n        //\n        Iterator it;\n        Object[] row;"
           }

       },

       {
           "id": "clone_216",

           "clone_type": "type-1",

           "origin": {
               "file": "TestDateTime.java",
               "start_line": "311",
               "end_line": "333",
               "source_code": "        iDeletedCount = deleteStatement.executeUpdate();\n\n        Assert.assertEquals(\n            \"Exactly one record with time data shoud have been deleted.\",\n            iDeletedCount, 1);\n\n        // And now test the date\n        Assert.assertNotNull(\n            \"The inserted time shouldn't be retrieved as null from the database\",\n            retrievedTime);\n\n        // Ignore milliseconds when comparing dates\n        String selectString = selectTime.toString();\n        String retrievedString = retrievedTime.toString();\n\n        boolean result =\n            retrievedString.equals(selectString);\n\n        Assert.assertTrue(\n            \"The time retrieved from database \"\n            + DateFormat.getDateTimeInstance().format(retrievedTime)\n            + \" is not the same as the inserted one \"\n            + DateFormat.getDateTimeInstance().format(insertTime), result);"
           },

           "clone": {
               "file": "TestDateTime.java",
               "start_line": "211",
               "end_line": "233",
               "source_code": "        iDeletedCount = deleteStatement.executeUpdate();\n\n        Assert.assertEquals(\n            \"Exactly one record with time data shoud have been deleted.\",\n            iDeletedCount, 1);\n\n        // And now test the date\n        Assert.assertNotNull(\n            \"The inserted time shouldn't be retrieved as null from the database\",\n            retrievedTime);\n\n        // Ignore milliseconds when comparing dates\n        String selectString = selectTime.toString();\n        String retrievedString = retrievedTime.toString();\n\n        boolean result =\n            retrievedString.equals(selectString);\n\n        Assert.assertTrue(\n            \"The time retrieved from database \"\n            + DateFormat.getDateTimeInstance().format(retrievedTime)\n            + \" is not the same as the inserted one \"\n            + DateFormat.getDateTimeInstance().format(insertTime), result);"
           }

       },

       {
           "id": "clone_217",

           "clone_type": "type-1",

           "origin": {
               "file": "TriggerSample.java",
               "start_line": "356",
               "end_line": "364",
               "source_code": "        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));"
           },

           "clone": {
               "file": "TriggerSample.java",
               "start_line": "332",
               "end_line": "340",
               "source_code": "        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));"
           }

       },

       {
           "id": "clone_218",

           "clone_type": "type-1",

           "origin": {
               "file": "Type.java",
               "start_line": "1040",
               "end_line": "1052",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_FLOAT :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "833",
               "end_line": "845",
               "source_code": "            case Types.SQL_INTEGER :\n                return SQL_INTEGER;\n\n            case Types.SQL_SMALLINT :\n                return SQL_SMALLINT;\n\n            case Types.SQL_BIGINT :\n                return SQL_BIGINT;\n\n            case Types.TINYINT :\n                return TINYINT;\n\n            case Types.SQL_FLOAT :"
           }

       },

       {
           "id": "clone_219",

           "clone_type": "type-1",

           "origin": {
               "file": "ClobType.java",
               "start_line": "98",
               "end_line": "110",
               "source_code": "        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(factor);\n\n        if (multiplier != null) {\n            sb.append(multiplier);\n        }\n\n        sb.append(')');\n\n        return sb.toString();"
           },

           "clone": {
               "file": "BlobType.java",
               "start_line": "99",
               "end_line": "111",
               "source_code": "        StringBuffer sb = new StringBuffer(16);\n\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(factor);\n\n        if (multiplier != null) {\n            sb.append(multiplier);\n        }\n\n        sb.append(')');\n\n        return sb.toString();"
           }

       },

       {
           "id": "clone_220",

           "clone_type": "type-1",

           "origin": {
               "file": "DateTimeType.java",
               "start_line": "535",
               "end_line": "539",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           },

           "clone": {
               "file": "Type.java",
               "start_line": "1082",
               "end_line": "1086",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
           }

       },

       {
           "id": "clone_221",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "146",
               "end_line": "151",
               "source_code": "            System.out.println();\n            System.out.println(\"-v          verbose error messages\");\n            System.out.println(\"-init       initialize the tables\");\n            System.out.println(\"-tpc        transactions per client\");\n            System.out.println(\"-clients    number of simultaneous clients\");\n            System.exit(-1);"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "154",
               "end_line": "159",
               "source_code": "            System.out.println();\n            System.out.println(\"-v          verbose error messages\");\n            System.out.println(\"-init       initialize the tables\");\n            System.out.println(\"-tpc        transactions per client\");\n            System.out.println(\"-clients    number of simultaneous clients\");\n            System.exit(-1);"
           }

       },

       {
           "id": "clone_222",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "1009",
               "end_line": "1030",
               "source_code": "            aOffset++;\n            bOffset++;\n\n            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {\n                aOffset = 0;\n\n                aIndex++;\n            }\n\n            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {\n                bOffset = 0;\n\n                bIndex++;\n            }\n\n            if (aIndex == aAddresses.length) {\n                break;\n            }\n\n            if (bIndex == bAddresses.length) {\n                break;\n            }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "919",
               "end_line": "940",
               "source_code": "            aOffset++;\n            bOffset++;\n\n            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {\n                aOffset = 0;\n\n                aIndex++;\n            }\n\n            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {\n                bOffset = 0;\n\n                bIndex++;\n            }\n\n            if (aIndex == aAddresses.length) {\n                break;\n            }\n\n            if (bIndex == bAddresses.length) {\n                break;\n            }"
           }

       },

       {
           "id": "clone_223",

           "clone_type": "type-1",

           "origin": {
               "file": "RangeVariable.java",
               "start_line": "930",
               "end_line": "950",
               "source_code": "        sb = new StringBuffer();\n\n        String temp = \"INNER\";\n\n        if (isLeftJoin) {\n            temp = \"LEFT OUTER\";\n\n            if (isRightJoin) {\n                temp = \"FULL\";\n            }\n        } else if (isRightJoin) {\n            temp = \"RIGHT OUTER\";\n        }\n\n        sb.append(b).append(\"join type=\").append(temp).append(\"\\n\");\n        sb.append(b).append(\"table=\").append(rangeTable.getName().name).append(\n            \"\\n\");\n\n        if (tableAlias != null) {\n            sb.append(b).append(\"alias=\").append(tableAlias.name).append(\"\\n\");\n        }"
           },

           "clone": {
               "file": "RangeVariableJoined.java",
               "start_line": "344",
               "end_line": "364",
               "source_code": "        sb = new StringBuffer();\n\n        String temp = \"INNER\";\n\n        if (isLeftJoin) {\n            temp = \"LEFT OUTER\";\n\n            if (isRightJoin) {\n                temp = \"FULL\";\n            }\n        } else if (isRightJoin) {\n            temp = \"RIGHT OUTER\";\n        }\n\n        sb.append(b).append(\"join type=\").append(temp).append(\"\\n\");\n        sb.append(b).append(\"table=\").append(rangeTable.getName().name).append(\n            \"\\n\");\n\n        if (tableAlias != null) {\n            sb.append(b).append(\"alias=\").append(tableAlias.name).append(\"\\n\");\n        }"
           }

       },

       {
           "id": "clone_224",

           "clone_type": "type-1",

           "origin": {
               "file": "TestCacheSize.java",
               "start_line": "246",
               "end_line": "255",
               "source_code": "            sw.zero();\n\n            sStatement = cConnection.createStatement();\n\n            java.util.Random randomgen = new java.util.Random();\n\n//            sStatement.execute(\"SET WRITE_DELAY \" + writeDelay);\n            sStatement.execute(ddl1);\n            sStatement.execute(ddl2);\n            sStatement.execute(ddl3);"
           },

           "clone": {
               "file": "TestAllTypes.java",
               "start_line": "169",
               "end_line": "177",
               "source_code": "            sw.zero();\n\n            sStatement = cConnection.createStatement();\n\n            java.util.Random randomgen = new java.util.Random();\n\n            sStatement.execute(ddl1);\n            sStatement.execute(ddl2);\n            sStatement.execute(ddl3);"
           }

       },

       {
           "id": "clone_225",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "7169",
               "end_line": "7173",
               "source_code": "                row                  = t.getEmptyRowData();\n                row[trigger_catalog] = database.getCatalogName().name;\n                row[trigger_schema]  = trigger.getSchemaName().name;\n                row[trigger_name]    = trigger.getName().name;\n                row[table_catalog]   = database.getCatalogName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "6836",
               "end_line": "6842",
               "source_code": "                row = t.getEmptyRowData();\n\n                //\n                row[trigger_catalog] = database.getCatalogName().name;\n                row[trigger_schema]  = trigger.getSchemaName().name;\n                row[trigger_name]    = trigger.getName().name;\n                row[table_catalog]   = database.getCatalogName().name;"
           }

       },

       {
           "id": "clone_226",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "256",
               "end_line": "317",
               "source_code": "        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg   = arg[i].toLowerCase();\n\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n\n                //\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n\n            i++;\n\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n\n                return;\n            } else {\n                /* Syntax ERRORS should either throw or exit with non-0 status.\n                 * In our case, it may be unsafe to exit, so we throw.\n                 * (I.e. should provide easy way for caller to programmatically\n                 * determine that there was an invocation problem).\n                 */\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n\n                // No reason to localize, since the main syntax message is\n                // not localized.\n            }\n        }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "478",
               "end_line": "539",
               "source_code": "        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg = arg[i].toLowerCase();\n\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n\n                //\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n\n            i++;\n\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n\n                return;\n            } else {\n                /* Syntax ERRORS should either throw or exit with non-0 status.\n                 * In our case, it may be unsafe to exit, so we throw.\n                 * (I.e. should provide easy way for caller to programmatically\n                 * determine that there was an invocation problem).\n                 */\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n\n                // No reason to localize, since the main syntax message is\n                // not localized.\n            }\n        }"
           }

       },

       {
           "id": "clone_227",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "785",
               "end_line": "789",
               "source_code": "        Statement st1 = null;\n        ResultSet rs  = null;\n        int       bbalancesum;\n        int       tbalancesum;\n        int       abalancesum;"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "693",
               "end_line": "697",
               "source_code": "        Statement st1 = null;\n        ResultSet rs  = null;\n        int       bbalancesum;\n        int       tbalancesum;\n        int       abalancesum;"
           }

       },

       {
           "id": "clone_228",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaManager.java",
               "start_line": "950",
               "end_line": "964",
               "source_code": "            Table      t = c.getMain();\n\n            if (t != table) {\n                tableSet.add(t);\n            }\n\n            t = c.getRef();\n\n            if (t != table) {\n                tableSet.add(t);\n            }\n\n            constraintNameSet.add(c.getMainName());\n            constraintNameSet.add(c.getRefName());\n            indexNameSet.add(c.getRefIndex().getName());"
           },

           "clone": {
               "file": "TableWorks.java",
               "start_line": "905",
               "end_line": "919",
               "source_code": "                    Table      t = c.getMain();\n\n                    if (t != table) {\n                        tableSet.add(t);\n                    }\n\n                    t = c.getRef();\n\n                    if (t != table) {\n                        tableSet.add(t);\n                    }\n\n                    constraintNameSet.add(c.getMainName());\n                    constraintNameSet.add(c.getRefName());\n                    indexNameSet.add(c.getRefIndex().getName());"
           }

       },

       {
           "id": "clone_229",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "965",
               "end_line": "992",
               "source_code": "                    pstmt1.setInt(1, delta);\n                    pstmt1.setInt(2, aid);\n                    pstmt1.executeUpdate();\n                    pstmt1.clearWarnings();\n                    pstmt2.setInt(1, aid);\n\n                    ResultSet RS = pstmt2.executeQuery();\n\n                    pstmt2.clearWarnings();\n\n                    while (RS.next()) {\n                        aBalance = RS.getInt(1);\n                    }\n\n                    pstmt3.setInt(1, delta);\n                    pstmt3.setInt(2, tid);\n                    pstmt3.executeUpdate();\n                    pstmt3.clearWarnings();\n                    pstmt4.setInt(1, delta);\n                    pstmt4.setInt(2, bid);\n                    pstmt4.executeUpdate();\n                    pstmt4.clearWarnings();\n                    pstmt5.setInt(1, tid);\n                    pstmt5.setInt(2, bid);\n                    pstmt5.setInt(3, aid);\n                    pstmt5.setInt(4, delta);\n                    pstmt5.executeUpdate();\n                    pstmt5.clearWarnings();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "887",
               "end_line": "914",
               "source_code": "                pstmt1.setInt(1, delta);\n                pstmt1.setInt(2, aid);\n                pstmt1.executeUpdate();\n                pstmt1.clearWarnings();\n                pstmt2.setInt(1, aid);\n\n                ResultSet RS = pstmt2.executeQuery();\n\n                pstmt2.clearWarnings();\n\n                while (RS.next()) {\n                    aBalance = RS.getInt(1);\n                }\n\n                pstmt3.setInt(1, delta);\n                pstmt3.setInt(2, tid);\n                pstmt3.executeUpdate();\n                pstmt3.clearWarnings();\n                pstmt4.setInt(1, delta);\n                pstmt4.setInt(2, bid);\n                pstmt4.executeUpdate();\n                pstmt4.clearWarnings();\n                pstmt5.setInt(1, tid);\n                pstmt5.setInt(2, bid);\n                pstmt5.setInt(3, aid);\n                pstmt5.setInt(4, delta);\n                pstmt5.executeUpdate();\n                pstmt5.clearWarnings();"
           }

       },

       {
           "id": "clone_230",

           "clone_type": "type-1",

           "origin": {
               "file": "Types.java",
               "start_line": "721",
               "end_line": "726",
               "source_code": "            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n                return true;\n\n            default :\n                return false;"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "414",
               "end_line": "419",
               "source_code": "            case Types.SQL_DECIMAL :\n            case Types.SQL_NUMERIC :\n                return true;\n\n            default :\n                return false;"
           }

       },

       {
           "id": "clone_231",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2904",
               "end_line": "2909",
               "source_code": "            case Tokens.YEAR :\n            case Tokens.MONTH :\n            case Tokens.DAY :\n            case Tokens.HOUR :\n            case Tokens.MINUTE :\n            case Tokens.SECOND :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2883",
               "end_line": "2888",
               "source_code": "                        case Tokens.YEAR :\n                        case Tokens.MONTH :\n                        case Tokens.DAY :\n                        case Tokens.HOUR :\n                        case Tokens.MINUTE :\n                        case Tokens.SECOND :"
           }

       },

       {
           "id": "clone_232",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "2301",
               "end_line": "2305",
               "source_code": "            case OpTypes.GREATER :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "1978",
               "end_line": "1983",
               "source_code": "            // fall through\n            case OpTypes.GREATER :\n            case OpTypes.GREATER_EQUAL :\n            case OpTypes.GREATER_EQUAL_PRE :\n            case OpTypes.SMALLER :\n            case OpTypes.SMALLER_EQUAL :"
           }

       },

       {
           "id": "clone_233",

           "clone_type": "type-1",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1574",
               "end_line": "1580",
               "source_code": "            ps.setInt(1, 3);\n            ps.setBytes(2, expectedBytes);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1522",
               "end_line": "1528",
               "source_code": "            ps.setInt(1, 3);\n            ps.setBytes(2, expectedBytes);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           }

       },

       {
           "id": "clone_234",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementInsert.java",
               "start_line": "87",
               "end_line": "95",
               "source_code": "        super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,\n              session.getCurrentSchemaHsqlName());\n\n        this.targetTable = targetTable;\n        this.baseTable   = targetTable.isTriggerInsertable() ? targetTable\n                                                             : targetTable\n                                                             .getBaseTable();\n        this.insertColumnMap    = columnMap;\n        this.insertCheckColumns = checkColumns;"
           },

           "clone": {
               "file": "StatementInsert.java",
               "start_line": "60",
               "end_line": "68",
               "source_code": "        super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,\n              session.getCurrentSchemaHsqlName());\n\n        this.targetTable = targetTable;\n        this.baseTable   = targetTable.isTriggerInsertable() ? targetTable\n                                                             : targetTable\n                                                             .getBaseTable();\n        this.insertColumnMap    = columnMap;\n        this.insertCheckColumns = checkColumns;"
           }

       },

       {
           "id": "clone_235",

           "clone_type": "type-1",

           "origin": {
               "file": "TransactionManagerMV2PL.java",
               "start_line": "120",
               "end_line": "135",
               "source_code": "            int limit = session.rowActionList.size();\n\n            // new actionTimestamp used for commitTimestamp\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n\n            endTransaction(session);\n\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n\n                action.commit(session);\n            }\n\n            adjustLobUsage(session);\n            persistCommit(session);"
           },

           "clone": {
               "file": "TransactionManager2PL.java",
               "start_line": "96",
               "end_line": "111",
               "source_code": "            int limit = session.rowActionList.size();\n\n            // new actionTimestamp used for commitTimestamp\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n\n            endTransaction(session);\n\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n\n                action.commit(session);\n            }\n\n            adjustLobUsage(session);\n            persistCommit(session);"
           }

       },

       {
           "id": "clone_236",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5733",
               "end_line": "5738",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5645",
               "end_line": "5650",
               "source_code": "            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);"
           }

       },

       {
           "id": "clone_237",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3427",
               "end_line": "3431",
               "source_code": "            case Tokens.CURRENT_DATE :\n            case Tokens.CURRENT_TIME :\n            case Tokens.CURRENT_TIMESTAMP :\n            case Tokens.LOCALTIME :\n            case Tokens.LOCALTIMESTAMP :"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3396",
               "end_line": "3400",
               "source_code": "            case Tokens.CURRENT_DATE :\n            case Tokens.CURRENT_TIME :\n            case Tokens.CURRENT_TIMESTAMP :\n            case Tokens.LOCALTIME :\n            case Tokens.LOCALTIMESTAMP :"
           }

       },

       {
           "id": "clone_238",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5947",
               "end_line": "5953",
               "source_code": "            //\n            row[specific_catalog] = database.getCatalogName().name;\n            row[specific_schema]  = routine.getSchemaName().name;\n            row[specific_name]    = routine.getSpecificName().name;\n            row[routine_catalog]  = database.getCatalogName().name;\n            row[routine_schema]   = routine.getSchemaName().name;\n            row[routine_name]     = routine.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5701",
               "end_line": "5706",
               "source_code": "                row[specific_catalog] = database.getCatalogName().name;\n                row[specific_schema]  = routine.getSchemaName().name;\n                row[specific_name]    = routine.getSpecificName().name;\n                row[routine_catalog]  = database.getCatalogName().name;\n                row[routine_schema]   = routine.getSchemaName().name;\n                row[routine_name]     = routine.getName().name;"
           }

       },

       {
           "id": "clone_239",

           "clone_type": "type-1",

           "origin": {
               "file": "TestBatchExecution.java",
               "start_line": "176",
               "end_line": "191",
               "source_code": "        preparedTestOne(runs);\n\n        // drop the test table and shut down database\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");\n\n        // get the connection and statement\n        conn  = DriverManager.getConnection(url, \"SA\", \"\");\n        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");"
           },

           "clone": {
               "file": "TestBatchExecution.java",
               "start_line": "152",
               "end_line": "167",
               "source_code": "        preparedTestOne(runs);\n\n        // drop the test table and shut down database\n        println(drop_table_sql);\n        stmnt.execute(drop_table_sql);\n        println(\"---------------------------------------\");\n        println(\"shutting down database\");\n        stmnt.execute(shutdown_sql);\n        println(\"---------------------------------------\");\n\n        // get the connection and statement\n        conn  = DriverManager.getConnection(url, \"SA\", \"\");\n        stmnt = conn.createStatement();\n\n        println(\"\");\n        println(\"***************************************\");"
           }

       },

       {
           "id": "clone_240",

           "clone_type": "type-1",

           "origin": {
               "file": "RowSetNavigatorDataTable.java",
               "start_line": "311",
               "end_line": "328",
               "source_code": "    public void write(RowOutputInterface out,\n                      ResultMetaData meta) throws IOException {\n\n        reset();\n        out.writeLong(id);\n        out.writeInt(size);\n        out.writeInt(0);    // offset\n        out.writeInt(size);\n\n        while (hasNext()) {\n            Object[] data = getNext();\n\n            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,\n                          data, null, null);\n        }\n\n        reset();\n    }"
           },

           "clone": {
               "file": "RowSetNavigatorData.java",
               "start_line": "295",
               "end_line": "312",
               "source_code": "    public void write(RowOutputInterface out,\n                      ResultMetaData meta) throws IOException {\n\n        reset();\n        out.writeLong(id);\n        out.writeInt(size);\n        out.writeInt(0);    // offset\n        out.writeInt(size);\n\n        while (hasNext()) {\n            Object[] data = getNext();\n\n            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,\n                          data, null, null);\n        }\n\n        reset();\n    }"
           }

       },

       {
           "id": "clone_241",

           "clone_type": "type-1",

           "origin": {
               "file": "Transfer.java",
               "start_line": "1139",
               "end_line": "1144",
               "source_code": "        p.add(\"South\", createLabel(\"\"));\n        p.add(\"East\", createLabel(\"\"));\n        p.add(\"West\", createLabel(\"\"));\n        p.setBackground(SystemColor.control);\n\n        return p;"
           },

           "clone": {
               "file": "ConnectionDialog.java",
               "start_line": "294",
               "end_line": "299",
               "source_code": "        p.add(\"South\", createLabel(\"\"));\n        p.add(\"East\", createLabel(\"\"));\n        p.add(\"West\", createLabel(\"\"));\n        p.setBackground(SystemColor.control);\n\n        return p;"
           }

       },

       {
           "id": "clone_242",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3535",
               "end_line": "3549",
               "source_code": "            addColumn(t, \"DATA_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3360",
               "end_line": "3374",
               "source_code": "            addColumn(t, \"DATA_TYPE\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);\n            addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);"
           }

       },

       {
           "id": "clone_243",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberType.java",
               "start_line": "999",
               "end_line": "1008",
               "source_code": "                case Types.SQL_BIGINT :\n                    return convertToLong(session, a);\n\n                case Types.SQL_REAL :\n                case Types.SQL_FLOAT :\n                case Types.SQL_DOUBLE :\n                    return convertToDouble(a);\n\n                case Types.SQL_NUMERIC :\n                case Types.SQL_DECIMAL :"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "897",
               "end_line": "906",
               "source_code": "            case Types.SQL_BIGINT :\n                return convertToLong(session, a);\n\n            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return convertToDouble(a);\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :"
           }

       },

       {
           "id": "clone_244",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "399",
               "end_line": "409",
               "source_code": "//\n            Query = \"SELECT count(*) \";\n            Query += \"FROM   accounts\";\n\n            ResultSet RS = Stmt.executeQuery(Query);\n\n            Stmt.clearWarnings();\n\n            while (RS.next()) {\n                accountsnb = RS.getInt(1);\n            }"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "377",
               "end_line": "390",
               "source_code": "//\n//            Stmt.execute(\"SET WRITE_DELAY 1000 MILLIS;\");\n//            Stmt.execute(\"SET DATABASE DEFAULT TABLE TYPE CACHED\");\n//\n            Query = \"SELECT count(*) \";\n            Query += \"FROM   accounts\";\n\n            ResultSet RS = Stmt.executeQuery(Query);\n\n            Stmt.clearWarnings();\n\n            while (RS.next()) {\n                accountsnb = RS.getInt(1);\n            }"
           }

       },

       {
           "id": "clone_245",

           "clone_type": "type-1",

           "origin": {
               "file": "ValuePoolHashMap.java",
               "start_line": "249",
               "end_line": "274",
               "source_code": "        String testValue;\n        int    index      = hashIndex.getHashIndex(key.hashCode());\n        int    lookup     = hashIndex.hashTable[index];\n        int    lastLookup = -1;\n\n        for (; lookup >= 0;\n                lastLookup = lookup,\n                lookup = hashIndex.getNextLookup(lookup)) {\n            testValue = (String) objectKeyTable[lookup];\n\n            if (key.equals(testValue)) {\n                if (accessCount > ACCESS_MAX) {\n                    resetAccessCount();\n                }\n\n                accessTable[lookup] = accessCount++;\n\n                return testValue;\n            }\n        }\n\n        if (hashIndex.elementCount >= threshold) {\n            reset();\n\n            return getOrAddString(key);\n        }"
           },

           "clone": {
               "file": "ValuePoolHashMap.java",
               "start_line": "204",
               "end_line": "229",
               "source_code": "        String testValue;\n        int    index      = hashIndex.getHashIndex(key.hashCode());\n        int    lookup     = hashIndex.hashTable[index];\n        int    lastLookup = -1;\n\n        for (; lookup >= 0;\n                lastLookup = lookup,\n                lookup = hashIndex.getNextLookup(lookup)) {\n            testValue = (String) objectKeyTable[lookup];\n\n            if (key.equals(testValue)) {\n                if (accessCount > ACCESS_MAX) {\n                    resetAccessCount();\n                }\n\n                accessTable[lookup] = accessCount++;\n\n                return testValue;\n            }\n        }\n\n        if (hashIndex.elementCount >= threshold) {\n            reset();\n\n            return getOrAddString(key);\n        }"
           }

       },

       {
           "id": "clone_246",

           "clone_type": "type-1",

           "origin": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "137",
               "end_line": "148",
               "source_code": "        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           },

           "clone": {
               "file": "TestINPredicateParameterizationAndCorrelation.java",
               "start_line": "121",
               "end_line": "132",
               "source_code": "        pstmt         = conn.prepareStatement(sql);\n\n        pstmt.setInt(1, 0);\n        pstmt.setInt(2, 9);\n\n        rs = pstmt.executeQuery();\n\n        rs.next();\n\n        actualCount = rs.getInt(1);\n\n        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
           }

       },

       {
           "id": "clone_247",

           "clone_type": "type-1",

           "origin": {
               "file": "TextFileReader.java",
               "start_line": "218",
               "end_line": "223",
               "source_code": "                    break;\n\n                default :\n                    wasNormal = true;\n                    complete  = wasCR;\n                    wasCR     = false;"
           },

           "clone": {
               "file": "TextFileReader.java",
               "start_line": "132",
               "end_line": "137",
               "source_code": "                        break;\n\n                    default :\n                        wasNormal = true;\n                        complete  = wasCR;\n                        wasCR     = false;"
           }

       },

       {
           "id": "clone_248",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "1067",
               "end_line": "1114",
               "source_code": "    class MemoryWatcherThread extends Thread {\n\n        long    min          = 0;\n        long    max          = 0;\n        boolean keep_running = true;\n\n        public MemoryWatcherThread() {\n\n            this.reset();\n\n            keep_running = true;\n        }\n\n        public void reset() {\n\n            System.gc();\n\n            long currentFree  = Runtime.getRuntime().freeMemory();\n            long currentAlloc = Runtime.getRuntime().totalMemory();\n\n            min = max = (currentAlloc - currentFree);\n        }\n\n        public void end() {\n            keep_running = false;\n        }\n\n        public void run() {\n\n            while (keep_running) {\n                long currentFree  = Runtime.getRuntime().freeMemory();\n                long currentAlloc = Runtime.getRuntime().totalMemory();\n                long used         = currentAlloc - currentFree;\n\n                if (used < min) {\n                    min = used;\n                }\n\n                if (used > max) {\n                    max = used;\n                }\n\n                try {\n                    sleep(100);\n                } catch (InterruptedException E) {}\n            }\n        }\n    }    /* end of class MemoryWatcherThread */"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "1050",
               "end_line": "1097",
               "source_code": "    class MemoryWatcherThread extends Thread {\n\n        long    min          = 0;\n        long    max          = 0;\n        boolean keep_running = true;\n\n        public MemoryWatcherThread() {\n\n            this.reset();\n\n            keep_running = true;\n        }\n\n        public void reset() {\n\n            System.gc();\n\n            long currentFree  = Runtime.getRuntime().freeMemory();\n            long currentAlloc = Runtime.getRuntime().totalMemory();\n\n            min = max = (currentAlloc - currentFree);\n        }\n\n        public void end() {\n            keep_running = false;\n        }\n\n        public void run() {\n\n            while (keep_running) {\n                long currentFree  = Runtime.getRuntime().freeMemory();\n                long currentAlloc = Runtime.getRuntime().totalMemory();\n                long used         = currentAlloc - currentFree;\n\n                if (used < min) {\n                    min = used;\n                }\n\n                if (used > max) {\n                    max = used;\n                }\n\n                try {\n                    sleep(100);\n                } catch (InterruptedException E) {}\n            }\n        }\n    }    /* end of class MemoryWatcherThread */"
           }

       },

       {
           "id": "clone_249",

           "clone_type": "type-1",

           "origin": {
               "file": "RowInputBase.java",
               "start_line": "310",
               "end_line": "319",
               "source_code": "        mark = 0;\n\n        reset();\n\n        if (buffer.length < rowsize) {\n            buffer = new byte[rowsize];\n        }\n\n        filePos   = filepos;\n        size      = count = rowsize;"
           },

           "clone": {
               "file": "RowInputBase.java",
               "start_line": "286",
               "end_line": "295",
               "source_code": "        mark = 0;\n\n        reset();\n\n        if (buffer.length < rowsize) {\n            buffer = new byte[rowsize];\n        }\n\n        filePos   = filepos;\n        size      = count = rowsize;"
           }

       },

       {
           "id": "clone_250",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSet.java",
               "start_line": "128",
               "end_line": "149",
               "source_code": "    TableDerived[] getSubqueries(Session session) {\n\n        OrderedHashSet subQueries = null;\n\n        if (expression != null) {\n            subQueries = expression.collectAllSubqueries(subQueries);\n        }\n\n        if (subQueries == null || subQueries.size() == 0) {\n            return TableDerived.emptyArray;\n        }\n\n        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];\n\n        subQueries.toArray(subQueryArray);\n\n        for (int i = 0; i < subqueries.length; i++) {\n            subQueryArray[i].prepareTable();\n        }\n\n        return subQueryArray;\n    }"
           },

           "clone": {
               "file": "StatementExpression.java",
               "start_line": "94",
               "end_line": "115",
               "source_code": "    TableDerived[] getSubqueries(Session session) {\n\n        OrderedHashSet subQueries = null;\n\n        if (expression != null) {\n            subQueries = expression.collectAllSubqueries(subQueries);\n        }\n\n        if (subQueries == null || subQueries.size() == 0) {\n            return TableDerived.emptyArray;\n        }\n\n        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];\n\n        subQueries.toArray(subQueryArray);\n\n        for (int i = 0; i < subqueries.length; i++) {\n            subQueryArray[i].prepareTable();\n        }\n\n        return subQueryArray;\n    }"
           }

       },

       {
           "id": "clone_251",

           "clone_type": "type-1",

           "origin": {
               "file": "NumberType.java",
               "start_line": "1735",
               "end_line": "1745",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return 64;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                return (int) precision;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
           },

           "clone": {
               "file": "NumberType.java",
               "start_line": "148",
               "end_line": "158",
               "source_code": "            case Types.SQL_REAL :\n            case Types.SQL_FLOAT :\n            case Types.SQL_DOUBLE :\n                return 64;\n\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                return (int) precision;\n\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
           }

       },

       {
           "id": "clone_252",

           "clone_type": "type-1",

           "origin": {
               "file": "RowAVL.java",
               "start_line": "161",
               "end_line": "170",
               "source_code": "    public NodeAVL insertNode(int index) {\n\n        NodeAVL backnode = getNode(index - 1);\n        NodeAVL newnode  = new NodeAVL(this);\n\n        newnode.nNext  = backnode.nNext;\n        backnode.nNext = newnode;\n\n        return newnode;\n    }"
           },

           "clone": {
               "file": "RowAVLDiskData.java",
               "start_line": "146",
               "end_line": "155",
               "source_code": "    public NodeAVL insertNode(int index) {\n\n        NodeAVL backnode = getNode(index - 1);\n        NodeAVL newnode  = new NodeAVL(this);\n\n        newnode.nNext  = backnode.nNext;\n        backnode.nNext = newnode;\n\n        return newnode;\n    }"
           }

       },

       {
           "id": "clone_253",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCArrayBasic.java",
               "start_line": "539",
               "end_line": "554",
               "source_code": "        RowSetNavigatorClient navigator = new RowSetNavigatorClient();\n\n        for (int i = (int) position; i < position + count; i++) {\n            Object[] rowData = new Object[2];\n\n            rowData[0] = Integer.valueOf(i + 1);\n            rowData[1] = data[i];\n\n            navigator.add(rowData);\n        }\n\n        Result result = Result.newDataResult(meta);\n\n        result.setNavigator(navigator);\n\n        return result;"
           },

           "clone": {
               "file": "JDBCArray.java",
               "start_line": "585",
               "end_line": "600",
               "source_code": "        RowSetNavigatorClient navigator = new RowSetNavigatorClient();\n\n        for (int i = (int) position; i < position + count; i++) {\n            Object[] rowData = new Object[2];\n\n            rowData[0] = Integer.valueOf(i + 1);\n            rowData[1] = data[i];\n\n            navigator.add(rowData);\n        }\n\n        Result result = Result.newDataResult(meta);\n\n        result.setNavigator(navigator);\n\n        return result;"
           }

       },

       {
           "id": "clone_254",

           "clone_type": "type-1",

           "origin": {
               "file": "TestJDBCGeneratedColumns.java",
               "start_line": "165",
               "end_line": "175",
               "source_code": "            Connection c  = newConnection();\n            Statement  st = c.createStatement();\n            String     s  = \"DROP TABLE T IF EXISTS\";\n\n            st.execute(s);\n\n            s = \"CREATE TABLE T (I INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33), C CHARACTER(10))\";\n\n            st.execute(s);\n\n            s = \"INSERT INTO T (C) VALUES('TEST')\";"
           },

           "clone": {
               "file": "TestJDBCGeneratedColumns.java",
               "start_line": "51",
               "end_line": "61",
               "source_code": "            Connection c  = newConnection();\n            Statement  st = c.createStatement();\n            String     s  = \"DROP TABLE T IF EXISTS\";\n\n            st.execute(s);\n\n            s = \"CREATE TABLE T (I INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33), C CHARACTER(10))\";\n\n            st.execute(s);\n\n            s = \"INSERT INTO T (C) VALUES('TEST')\";"
           }

       },

       {
           "id": "clone_255",

           "clone_type": "type-1",

           "origin": {
               "file": "TestSql.java",
               "start_line": "177",
               "end_line": "189",
               "source_code": "                ResultSetMetaData rsmd    = rs.getMetaData();\n                String            result0 = \"\";\n\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result0 += rs.getString(i + 1) + \":\";\n                    }\n\n                    result0 += \"\\n\";\n                }\n\n                rs.close();\n                System.out.println(result0);"
           },

           "clone": {
               "file": "TestSql.java",
               "start_line": "157",
               "end_line": "169",
               "source_code": "                ResultSetMetaData rsmd    = rs.getMetaData();\n                String            result0 = \"\";\n\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result0 += rs.getString(i + 1) + \":\";\n                    }\n\n                    result0 += \"\\n\";\n                }\n\n                rs.close();\n                System.out.println(result0);"
           }

       },

       {
           "id": "clone_256",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLHybrid.java",
               "start_line": "280",
               "end_line": "304",
               "source_code": "    public void rollbackRow(Session session, Row row, int changeAction,\n                            int txModel) {\n\n        switch (changeAction) {\n\n            case RowAction.ACTION_DELETE :\n                row = (Row) get(row, true);\n\n                ((RowAVL) row).setNewNodes(this);\n                row.keepInMemory(false);\n                indexRow(session, row);\n                break;\n\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n                remove(row);\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELEETE\n                remove(row);\n                break;\n        }\n    }"
           },

           "clone": {
               "file": "RowStoreAVLHybridExtended.java",
               "start_line": "157",
               "end_line": "181",
               "source_code": "    public void rollbackRow(Session session, Row row, int changeAction,\n                            int txModel) {\n\n        switch (changeAction) {\n\n            case RowAction.ACTION_DELETE :\n                row = (Row) get(row, true);\n\n                ((RowAVL) row).setNewNodes(this);\n                row.keepInMemory(false);\n                indexRow(session, row);\n                break;\n\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n                remove(row);\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :\n\n                // INSERT + DELEETE\n                remove(row);\n                break;\n        }\n    }"
           }

       },

       {
           "id": "clone_257",

           "clone_type": "type-1",

           "origin": {
               "file": "HsqlProperties.java",
               "start_line": "463",
               "end_line": "468",
               "source_code": "        Object[] row = new Object[indexLimit];\n\n        row[indexName]         = name;\n        row[indexType]         = ValuePool.getInt(type);\n        row[indexClass]        = \"Integer\";\n        row[indexDefaultValue] = ValuePool.getInt(defaultValue);"
           },

           "clone": {
               "file": "HsqlProperties.java",
               "start_line": "449",
               "end_line": "454",
               "source_code": "        Object[] row = new Object[indexLimit];\n\n        row[indexName]         = name;\n        row[indexType]         = ValuePool.getInt(type);\n        row[indexClass]        = \"Integer\";\n        row[indexDefaultValue] = ValuePool.getInt(defaultValue);"
           }

       },

       {
           "id": "clone_258",

           "clone_type": "type-1",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "953",
               "end_line": "958",
               "source_code": "                setNewTableInSchema(tn);\n                setNewTablesInSchema(tableSet);\n                updateConstraints(tn, emptySet);\n                updateConstraints(tableSet, constraintNameSet);\n                database.schemaManager.recompileDependentObjects(tableSet);\n                database.schemaManager.recompileDependentObjects(tn);"
           },

           "clone": {
               "file": "TableWorks.java",
               "start_line": "845",
               "end_line": "850",
               "source_code": "        setNewTableInSchema(tn);\n        setNewTablesInSchema(tableSet);\n        updateConstraints(tn, emptySet);\n        updateConstraints(tableSet, constraintNameSet);\n        database.schemaManager.recompileDependentObjects(tableSet);\n        database.schemaManager.recompileDependentObjects(tn);"
           }

       },

       {
           "id": "clone_259",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "927",
               "end_line": "939",
               "source_code": "        if (r == null) {\n            String[] g = new String[1];\n\n            g[0] = \"Result\";\n\n            gResult.setHead(g);\n\n            g[0] = \"(empty)\";\n\n            gResult.addRow(g);\n\n            return;\n        }"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1744",
               "end_line": "1756",
               "source_code": "        if (r == null) {\n            String[] g = new String[1];\n\n            g[0] = \"Result\";\n\n            gResult.setHead(g);\n\n            g[0] = \"(empty)\";\n\n            gResult.addRow(g);\n\n            return;\n        }"
           }

       },

       {
           "id": "clone_260",

           "clone_type": "type-1",

           "origin": {
               "file": "TestTextTables.java",
               "start_line": "226",
               "end_line": "236",
               "source_code": "        st   = conn.createStatement();\n\n        rs = st.executeQuery(\"select count(*) from tmsingle\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));\n\n        rs = st.executeQuery(\"select count(*) from tident\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));"
           },

           "clone": {
               "file": "TestTextTables.java",
               "start_line": "210",
               "end_line": "220",
               "source_code": "        st   = conn.createStatement();\n\n        rs = st.executeQuery(\"select count(*) from tmsingle\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));\n\n        rs = st.executeQuery(\"select count(*) from tident\");\n\n        assertTrue(rs.next());\n        assertEquals(20, rs.getInt(1));"
           }

       },

       {
           "id": "clone_261",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "4219",
               "end_line": "4223",
               "source_code": "            case Types.SQL_DATE :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :"
           },

           "clone": {
               "file": "PgType.java",
               "start_line": "325",
               "end_line": "352",
               "source_code": "                /*\n            case Types.OTHER :\n                try {\n                    if (o instanceof Serializable) {\n                        o = new JavaObjectData((Serializable) o);\n\n                        break;\n                    }\n                } catch (HsqlException e) {\n                    PgType.throwError(e);\n                }\n                PgType.throwError(Error.error(ErrorCode.X_42565));\n\n                break;\n            case Types.SQL_BLOB :\n                //setBlobParameter(i, o);\n\n                //break;\n            case Types.SQL_CLOB :\n                //setClobParameter(i, o);\n\n                //break;\n            */\n            case Types.SQL_DATE :\n            case Types.SQL_TIME_WITH_TIME_ZONE :\n            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :\n            case Types.SQL_TIME :\n            case Types.SQL_TIMESTAMP :"
           }

       },

       {
           "id": "clone_262",

           "clone_type": "type-1",

           "origin": {
               "file": "RowType.java",
               "start_line": "119",
               "end_line": "137",
               "source_code": "        if (a == b) {\n            return 0;\n        }\n\n        if (a == null) {\n            return -1;\n        }\n\n        if (b == null) {\n            return 1;\n        }\n\n        Object[] arra   = (Object[]) a;\n        Object[] arrb   = (Object[]) b;\n        int      length = arra.length;\n\n        if (arrb.length < length) {\n            length = arrb.length;\n        }"
           },

           "clone": {
               "file": "ArrayType.java",
               "start_line": "145",
               "end_line": "163",
               "source_code": "        if (a == b) {\n            return 0;\n        }\n\n        if (a == null) {\n            return -1;\n        }\n\n        if (b == null) {\n            return 1;\n        }\n\n        Object[] arra   = (Object[]) a;\n        Object[] arrb   = (Object[]) b;\n        int      length = arra.length;\n\n        if (arrb.length < length) {\n            length = arrb.length;\n        }"
           }

       },

       {
           "id": "clone_263",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "1627",
               "end_line": "1636",
               "source_code": "            addColumn(t, \"REMARKS\", CHARACTER_DATA);                // 12\n\n            // ----------------------------------------------------------------\n            // JDBC 4.0\n            // ----------------------------------------------------------------\n            addColumn(t, \"COLUMN_DEF\", CHARACTER_DATA);             // 13\n            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);        // 14\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);     // 15\n            addColumn(t, \"CHAR_OCTET_LENGTH\", Type.SQL_INTEGER);    // 16\n            addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // 17"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "845",
               "end_line": "850",
               "source_code": "            addColumn(t, \"REMARKS\", CHARACTER_DATA);                // 11\n            addColumn(t, \"COLUMN_DEF\", CHARACTER_DATA);             // 12\n            addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);        // 13\n            addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);     // 14\n            addColumn(t, \"CHAR_OCTET_LENGTH\", Type.SQL_INTEGER);    // 15\n            addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // not null"
           }

       },

       {
           "id": "clone_264",

           "clone_type": "type-1",

           "origin": {
               "file": "FunctionSQL.java",
               "start_line": "1043",
               "end_line": "1053",
               "source_code": "                if (data[0] == null || data[1] == null) {\n                    return null;\n                }\n\n                Object value;\n\n                value = Type.SQL_BIGINT.convertToType(session, data[1],\n                                                      nodes[1].dataType);\n\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;"
           },

           "clone": {
               "file": "FunctionSQL.java",
               "start_line": "913",
               "end_line": "923",
               "source_code": "                if (data[0] == null || data[1] == null) {\n                    return null;\n                }\n\n                Object value;\n\n                value = Type.SQL_BIGINT.convertToType(session, data[1],\n                                                      nodes[1].dataType);\n\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;"
           }

       },

       {
           "id": "clone_265",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5666",
               "end_line": "5675",
               "source_code": "        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int routine_catalog  = 3;\n        final int routine_schema   = 4;\n        final int routine_name     = 5;\n        final int table_catalog    = 6;\n        final int table_schema     = 7;\n        final int table_name       = 8;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5078",
               "end_line": "5087",
               "source_code": "        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int routine_catalog  = 3;\n        final int routine_schema   = 4;\n        final int routine_name     = 5;\n        final int table_catalog    = 6;\n        final int table_schema     = 7;\n        final int table_name       = 8;"
           }

       },

       {
           "id": "clone_266",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "954",
               "end_line": "974",
               "source_code": "        Object[] data    = getLobHeader(aID);\n        long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n\n        data = getLobHeader(bID);\n\n        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);\n        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);\n        int     aIndex     = 0;\n        int     bIndex     = 0;\n        int     aOffset    = 0;\n        int     bOffset    = 0;\n\n        if (aLength == 0) {\n            return bLength == 0 ? 0\n                                : -1;\n        }\n\n        if (bLength == 0) {\n            return 1;\n        }"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "886",
               "end_line": "906",
               "source_code": "        Object[] data    = getLobHeader(aID);\n        long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n\n        data = getLobHeader(bID);\n\n        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);\n        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);\n        int     aIndex     = 0;\n        int     bIndex     = 0;\n        int     aOffset    = 0;\n        int     bOffset    = 0;\n\n        if (aLength == 0) {\n            return bLength == 0 ? 0\n                                : -1;\n        }\n\n        if (bLength == 0) {\n            return 1;\n        }"
           }

       },

       {
           "id": "clone_267",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "158",
               "end_line": "167",
               "source_code": "        System.out.println(\n            \"*********************************************************\");\n        System.out.println();\n        System.out.println(\"Driver: \" + DriverName);\n        System.out.println(\"URL:\" + DBUrl);\n        System.out.println();\n        System.out.println(\"Scale factor value: \" + tps);\n        System.out.println(\"Number of clients: \" + n_clients);\n        System.out.println(\"Number of transactions per client: \"\n                           + n_txn_per_client);"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "166",
               "end_line": "175",
               "source_code": "        System.out.println(\n            \"*********************************************************\");\n        System.out.println();\n        System.out.println(\"Driver: \" + DriverName);\n        System.out.println(\"URL:\" + DBUrl);\n        System.out.println();\n        System.out.println(\"Scale factor value: \" + tps);\n        System.out.println(\"Number of clients: \" + n_clients);\n        System.out.println(\"Number of transactions per client: \"\n                           + n_txn_per_client);"
           }

       },

       {
           "id": "clone_268",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5852",
               "end_line": "5857",
               "source_code": "        final int character_set_catalog                  = 16;\n        final int character_set_schema                   = 17;\n        final int character_set_name                     = 18;\n        final int collation_catalog                      = 19;\n        final int collation_schema                       = 20;\n        final int collation_name                         = 21;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2612",
               "end_line": "2617",
               "source_code": "        final int character_set_catalog      = 16;\n        final int character_set_schema       = 17;\n        final int character_set_name         = 18;\n        final int collation_catalog          = 19;\n        final int collation_schema           = 20;\n        final int collation_name             = 21;"
           }

       },

       {
           "id": "clone_269",

           "clone_type": "type-1",

           "origin": {
               "file": "TestOdbcTypes.java",
               "start_line": "1394",
               "end_line": "1400",
               "source_code": "            ps.setInt(1, 3);\n            ps.setTimestamp(2, aTimestamp);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           },

           "clone": {
               "file": "TestOdbcTypes.java",
               "start_line": "1352",
               "end_line": "1358",
               "source_code": "            ps.setInt(1, 3);\n            ps.setTimestamp(2, aTimestamp);\n            assertEquals(1, ps.executeUpdate());\n            ps.setInt(1, 4);\n            assertEquals(1, ps.executeUpdate());\n            ps.close();\n            netConn.commit();"
           }

       },

       {
           "id": "clone_270",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "2786",
               "end_line": "2798",
               "source_code": "        read();\n        readThis(Tokens.OPENBRACKET);\n\n        String  spec    = readQuotedString();\n        Scanner scanner = session.getScanner();\n\n        scanner.reset(spec);\n        scanner.scanNext();\n\n        String schemaName = session.getSchemaName(scanner.token.namePrefix);\n        NumberSequence sequence =\n            database.schemaManager.getSequence(scanner.token.tokenString,\n                                               schemaName, true);"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "2664",
               "end_line": "2677",
               "source_code": "                    read();\n                    readThis(Tokens.OPENBRACKET);\n\n                    String  spec    = readQuotedString();\n                    Scanner scanner = session.getScanner();\n\n                    scanner.reset(spec);\n                    scanner.scanNext();\n\n                    String schemaName =\n                        session.getSchemaName(scanner.token.namePrefix);\n                    NumberSequence sequence =\n                        database.schemaManager.getSequence(\n                            scanner.token.tokenString, schemaName, true);"
           }

       },

       {
           "id": "clone_271",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3216",
               "end_line": "3233",
               "source_code": "            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            // HSQLDB-specific\n            addColumn(t, \"START_WITH\", CHARACTER_DATA);\n            addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);"
           },

           "clone": {
               "file": "DatabaseInformationMain.java",
               "start_line": "3112",
               "end_line": "3129",
               "source_code": "            addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\n            addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);\n            addColumn(t, \"INCREMENT\", CHARACTER_DATA);\n            addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);\n\n            // HSQLDB-specific\n            addColumn(t, \"START_WITH\", CHARACTER_DATA);\n            addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);"
           }

       },

       {
           "id": "clone_272",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5835",
               "end_line": "5841",
               "source_code": "        // column number mappings\n        final int specific_catalog                       = 0;\n        final int specific_schema                        = 1;\n        final int specific_name                          = 2;\n        final int routine_catalog                        = 3;\n        final int routine_schema                         = 4;\n        final int routine_name                           = 5;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5666",
               "end_line": "5672",
               "source_code": "        // column number mappings\n        final int specific_catalog = 0;\n        final int specific_schema  = 1;\n        final int specific_name    = 2;\n        final int routine_catalog  = 3;\n        final int routine_schema   = 4;\n        final int routine_name     = 5;"
           }

       },

       {
           "id": "clone_273",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserRoutine.java",
               "start_line": "2086",
               "end_line": "2101",
               "source_code": "            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION,\n                                                condition);\n\n            list.add(statement);\n            readThis(Tokens.THEN);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }\n\n            if (token.tokenType != Tokens.WHEN) {\n                break;\n            }"
           },

           "clone": {
               "file": "ParserRoutine.java",
               "start_line": "2050",
               "end_line": "2065",
               "source_code": "            statement = new StatementExpression(session, compileContext,\n                                                StatementTypes.CONDITION,\n                                                condition);\n\n            list.add(statement);\n            readThis(Tokens.THEN);\n\n            statements = compileSQLProcedureStatementList(routine, context);\n\n            for (int i = 0; i < statements.length; i++) {\n                list.add(statements[i]);\n            }\n\n            if (token.tokenType != Tokens.WHEN) {\n                break;\n            }"
           }

       },

       {
           "id": "clone_274",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3673",
               "end_line": "3680",
               "source_code": "            if (!session.getGrantee().isAccessible(type)) {\n                continue;\n            }\n\n            row                             = t.getEmptyRowData();\n            row[object_catalog]             = database.getCatalogName().name;\n            row[object_schema]              = type.getSchemaName().name;\n            row[object_name]                = type.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3649",
               "end_line": "3656",
               "source_code": "            if (!session.getGrantee().isAccessible(type)) {\n                continue;\n            }\n\n            row                             = t.getEmptyRowData();\n            row[object_catalog]             = database.getCatalogName().name;\n            row[object_schema]              = type.getSchemaName().name;\n            row[object_name]                = type.getName().name;"
           }

       },

       {
           "id": "clone_275",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCBench.java",
               "start_line": "189",
               "end_line": "208",
               "source_code": "            java.util.Date start = new java.util.Date();\n\n            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 / 1000D;\n\n                System.out.println(\"done. in \" + seconds + \" seconds\\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }\n\n            System.out.println(\"* Starting Benchmark Run *\");\n\n            MemoryWatcher = new MemoryWatcherThread();\n\n            MemoryWatcher.start();"
           },

           "clone": {
               "file": "TestBench.java",
               "start_line": "205",
               "end_line": "224",
               "source_code": "            java.util.Date start = new java.util.Date();\n\n            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 / 1000D;\n\n                System.out.println(\"done. in \" + seconds + \" seconds\\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }\n\n            System.out.println(\"* Starting Benchmark Run *\");\n\n            MemoryWatcher = new MemoryWatcherThread();\n\n            MemoryWatcher.start();"
           }

       },

       {
           "id": "clone_276",

           "clone_type": "type-1",

           "origin": {
               "file": "BitType.java",
               "start_line": "258",
               "end_line": "262",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_BLOB :\n                b = (BlobData) a;\n                break;"
           },

           "clone": {
               "file": "BinaryType.java",
               "start_line": "424",
               "end_line": "428",
               "source_code": "            case Types.SQL_BINARY :\n            case Types.SQL_VARBINARY :\n            case Types.SQL_BLOB :\n                b = (BlobData) a;\n                break;"
           }

       },

       {
           "id": "clone_277",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "2672",
               "end_line": "2680",
               "source_code": "                if (!columnList.contains(column.getName())) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[table_cat]        = database.getCatalogName().name;\n                row[table_schem]      = table.getSchemaName().name;\n                row[table_name]       = table.getName().name;\n                row[column_name]      = column.getName().name;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "610",
               "end_line": "618",
               "source_code": "                if (!columnList.contains(column.getName())) {\n                    continue;\n                }\n\n                row                   = t.getEmptyRowData();\n                row[table_cat]        = database.getCatalogName().name;\n                row[table_schem]      = table.getSchemaName().name;\n                row[table_name]       = table.getName().name;\n                row[column_name]      = column.getName().name;"
           }

       },

       {
           "id": "clone_278",

           "clone_type": "type-1",

           "origin": {
               "file": "Result.java",
               "start_line": "1161",
               "end_line": "1170",
               "source_code": "                        break;\n\n                    case ResultConstants.TX_COMMIT :\n                    case ResultConstants.TX_ROLLBACK :\n                    case ResultConstants.TX_COMMIT_AND_CHAIN :\n                    case ResultConstants.TX_ROLLBACK_AND_CHAIN :\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");"
           },

           "clone": {
               "file": "Result.java",
               "start_line": "432",
               "end_line": "441",
               "source_code": "                        break;\n\n                    case ResultConstants.TX_COMMIT :\n                    case ResultConstants.TX_ROLLBACK :\n                    case ResultConstants.TX_COMMIT_AND_CHAIN :\n                    case ResultConstants.TX_ROLLBACK_AND_CHAIN :\n                        break;\n\n                    default :\n                        throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");"
           }

       },

       {
           "id": "clone_279",

           "clone_type": "type-1",

           "origin": {
               "file": "RowStoreAVLDisk.java",
               "start_line": "235",
               "end_line": "242",
               "source_code": "                break;\n\n            case RowAction.ACTION_INSERT :\n                database.logger.writeInsertStatement(session, row,\n                                                     (Table) table);\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :"
           },

           "clone": {
               "file": "RowStoreAVLMemory.java",
               "start_line": "142",
               "end_line": "149",
               "source_code": "                break;\n\n            case RowAction.ACTION_INSERT :\n                database.logger.writeInsertStatement(session, row,\n                                                     (Table) table);\n                break;\n\n            case RowAction.ACTION_INSERT_DELETE :"
           }

       },

       {
           "id": "clone_280",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseManager.java",
               "start_line": "974",
               "end_line": "999",
               "source_code": "        String       all   = txtCommand.getText();\n        StringBuffer b     = new StringBuffer();\n        long         total = 0;\n\n        for (int i = 0; i < all.length(); i++) {\n            char c = all.charAt(i);\n\n            if (c != '\\n') {\n                b.append(c);\n            }\n        }\n\n        all = b.toString();\n\n        String[] g = new String[4];\n\n        g[0] = \"ms\";\n        g[1] = \"count\";\n        g[2] = \"sql\";\n        g[3] = \"error\";\n\n        gResult.setHead(g);\n\n        int max = 1;\n\n        lTime = System.currentTimeMillis() - lTime;"
           },

           "clone": {
               "file": "DatabaseManagerSwing.java",
               "start_line": "1797",
               "end_line": "1822",
               "source_code": "        String       all   = txtCommand.getText();\n        StringBuffer b     = new StringBuffer();\n        long         total = 0;\n\n        for (int i = 0; i < all.length(); i++) {\n            char c = all.charAt(i);\n\n            if (c != '\\n') {\n                b.append(c);\n            }\n        }\n\n        all = b.toString();\n\n        String[] g = new String[4];\n\n        g[0] = \"ms\";\n        g[1] = \"count\";\n        g[2] = \"sql\";\n        g[3] = \"error\";\n\n        gResult.setHead(g);\n\n        int max = 1;\n\n        lTime = System.currentTimeMillis() - lTime;"
           }

       },

       {
           "id": "clone_281",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionOp.java",
               "start_line": "726",
               "end_line": "769",
               "source_code": "                    boolean wasEscape   = false;\n                    int     escapeCount = 0;\n                    int     i           = 0;\n                    int     j           = 0;\n\n                    for (; i < array.length; i++) {\n                        if (array[i] == escapeChar) {\n                            if (wasEscape) {\n                                escapeCount++;\n\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n\n                                continue;\n                            }\n\n                            wasEscape = true;\n\n                            if (i == array.length - 1) {\n                                throw Error.error(ErrorCode.X_22025);\n                            }\n\n                            continue;\n                        }\n\n                        if (array[i] == '_' || array[i] == '%') {\n                            if (wasEscape) {\n                                escapeCount++;\n\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n\n                                continue;\n                            }\n\n                            break;\n                        }\n\n                        if (wasEscape) {\n                            throw Error.error(ErrorCode.X_22025);\n                        }\n\n                        newArray[j++] = array[i];\n                    }"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "648",
               "end_line": "691",
               "source_code": "                    boolean wasEscape   = false;\n                    int     escapeCount = 0;\n                    int     i           = 0;\n                    int     j           = 0;\n\n                    for (; i < array.length; i++) {\n                        if (array[i] == escapeChar) {\n                            if (wasEscape) {\n                                escapeCount++;\n\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n\n                                continue;\n                            }\n\n                            wasEscape = true;\n\n                            if (i == array.length - 1) {\n                                throw Error.error(ErrorCode.X_22025);\n                            }\n\n                            continue;\n                        }\n\n                        if (array[i] == '_' || array[i] == '%') {\n                            if (wasEscape) {\n                                escapeCount++;\n\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n\n                                continue;\n                            }\n\n                            break;\n                        }\n\n                        if (wasEscape) {\n                            throw Error.error(ErrorCode.X_22025);\n                        }\n\n                        newArray[j++] = array[i];\n                    }"
           }

       },

       {
           "id": "clone_282",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCClobFile.java",
               "start_line": "643",
               "end_line": "699",
               "source_code": "    /**\n     * This method frees the <code>Clob</code> object and releases the resources the resources\n     * that it holds.  The object is invalid once the <code>free</code> method\n     * is called.\n     * <p>\n     * After <code>free</code> has been called, any attempt to invoke a\n     * method other than <code>free</code> will result in a <code>SQLException</code>\n     * being thrown.  If <code>free</code> is called multiple times, the subsequent\n     * calls to <code>free</code> are treated as a no-op.\n     * <p>\n     * @throws SQLException if an error occurs releasing\n     * the Clob's resources\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since JDK 1.4\n     */\n    public synchronized void free() throws SQLException {\n\n        if (m_closed) {\n            return;\n        }\n\n        m_closed = true;\n\n        final List streams = new ArrayList();\n\n        streams.addAll(m_streams);\n\n        m_streams = null;\n\n        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {\n            final Object stream = itr.next();\n\n            if (stream instanceof InputStream) {\n                try {\n                    ((InputStream) stream).close();\n                } catch (Exception ex) {\n\n                    //\n                }\n            } else if (stream instanceof OutputStream) {\n                try {\n                    ((OutputStream) stream).close();\n                } catch (Exception ex) {\n\n                    //\n                }\n            }\n        }\n\n        if (m_deleteOnFree) {\n            try {\n                m_file.delete();\n            } catch (Exception e) {}\n        }\n    }"
           },

           "clone": {
               "file": "JDBCBlobFile.java",
               "start_line": "516",
               "end_line": "588",
               "source_code": "    /**\n     * This method frees the <code>Blob</code> object and releases the resources that\n     * it holds. The object is invalid once the <code>free</code>\n     * method is called.\n     * <p>\n     * After <code>free</code> has been called, any attempt to invoke a\n     * method other than <code>free</code> will result in a <code>SQLException</code>\n     * being thrown.  If <code>free</code> is called multiple times, the subsequent\n     * calls to <code>free</code> are treated as a no-op.\n     * <p>\n     *\n     * <!-- start release-specific documentation -->\n     * <div class=\"ReleaseSpecificDocumentation\">\n     * <h3>HSQLDB-Specific Information:</h3> <p>\n     *\n     * This operation closes any input and/or output streams obtained\n     * via {@link #getBinaryStream()}, {@link #getBinaryStream(long, long)} or\n     * {@link #setBinaryStream(long)}. <p>\n     *\n     * Additionally, if the property {@link #isDeleteOnFree()} is true, then\n     * an attempt is made to delete the backing file.\n     *\n     * </div>\n     * <!-- end release-specific documentation -->\n     *\n     * @throws SQLException if an error occurs releasing\n     * the Blob's resources\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setDeleteOnFree(boolean)\n     * @see #isDeleteOnFree()\n     * @since JDK 1.6\n     */\n    public synchronized void free() throws SQLException {\n\n        if (m_closed) {\n            return;\n        }\n\n        m_closed = true;\n\n        final List streams = new ArrayList();\n\n        streams.addAll(m_streams);\n\n        m_streams = null;\n\n        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {\n            final Object stream = itr.next();\n\n            if (stream instanceof InputStream) {\n                try {\n                    ((InputStream) stream).close();\n                } catch (Exception ex) {\n\n                    //\n                }\n            } else if (stream instanceof OutputStream) {\n                try {\n                    ((OutputStream) stream).close();\n                } catch (Exception ex) {\n\n                    //\n                }\n            }\n        }\n\n        if (m_deleteOnFree) {\n            try {\n                m_file.delete();\n            } catch (Exception e) {}\n        }\n    }"
           }

       },

       {
           "id": "clone_283",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementSchema.java",
               "start_line": "709",
               "end_line": "727",
               "source_code": "            case StatementTypes.DROP_ASSERTION :\n            case StatementTypes.DROP_CHARACTER_SET :\n            case StatementTypes.DROP_COLLATION :\n            case StatementTypes.DROP_TYPE :\n            case StatementTypes.DROP_DOMAIN :\n            case StatementTypes.DROP_ROLE :\n            case StatementTypes.DROP_USER :\n            case StatementTypes.DROP_ROUTINE :\n            case StatementTypes.DROP_SCHEMA :\n            case StatementTypes.DROP_SEQUENCE :\n            case StatementTypes.DROP_TABLE :\n            case StatementTypes.DROP_TRANSFORM :\n            case StatementTypes.DROP_TRANSLATION :\n            case StatementTypes.DROP_TRIGGER :\n            case StatementTypes.DROP_CAST :\n            case StatementTypes.DROP_ORDERING :\n            case StatementTypes.DROP_VIEW :\n            case StatementTypes.DROP_INDEX :\n            case StatementTypes.DROP_CONSTRAINT :"
           },

           "clone": {
               "file": "StatementSchema.java",
               "start_line": "112",
               "end_line": "130",
               "source_code": "            case StatementTypes.DROP_ASSERTION :\n            case StatementTypes.DROP_CHARACTER_SET :\n            case StatementTypes.DROP_COLLATION :\n            case StatementTypes.DROP_TYPE :\n            case StatementTypes.DROP_DOMAIN :\n            case StatementTypes.DROP_ROLE :\n            case StatementTypes.DROP_USER :\n            case StatementTypes.DROP_ROUTINE :\n            case StatementTypes.DROP_SCHEMA :\n            case StatementTypes.DROP_SEQUENCE :\n            case StatementTypes.DROP_TABLE :\n            case StatementTypes.DROP_TRANSFORM :\n            case StatementTypes.DROP_TRANSLATION :\n            case StatementTypes.DROP_TRIGGER :\n            case StatementTypes.DROP_CAST :\n            case StatementTypes.DROP_ORDERING :\n            case StatementTypes.DROP_VIEW :\n            case StatementTypes.DROP_INDEX :\n            case StatementTypes.DROP_CONSTRAINT :"
           }

       },

       {
           "id": "clone_284",

           "clone_type": "type-1",

           "origin": {
               "file": "SchemaObjectSet.java",
               "start_line": "276",
               "end_line": "283",
               "source_code": "            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :"
           },

           "clone": {
               "file": "SchemaObjectSet.java",
               "start_line": "64",
               "end_line": "71",
               "source_code": "            case SchemaObject.SEQUENCE :\n            case SchemaObject.CHARSET :\n            case SchemaObject.DOMAIN :\n            case SchemaObject.TYPE :\n            case SchemaObject.COLLATION :\n            case SchemaObject.PROCEDURE :\n            case SchemaObject.FUNCTION :\n            case SchemaObject.SPECIFIC_ROUTINE :"
           }

       },

       {
           "id": "clone_285",

           "clone_type": "type-1",

           "origin": {
               "file": "BitMap.java",
               "start_line": "557",
               "end_line": "574",
               "source_code": "        int shift     = pos & 0x07;\n        int mask      = (source & 0xff) >>> shift;\n        int innermask = 0xff >> shift;\n        int index     = pos / 8;\n\n        if (count < 8) {\n            innermask = innermask >>> (8 - count);\n            innermask = innermask << (8 - count);\n        }\n\n        mask      &= innermask;\n        innermask = ~innermask;\n\n        if (index >= map.length) {\n            return;\n        }\n\n        byte b = map[index];"
           },

           "clone": {
               "file": "BitMap.java",
               "start_line": "482",
               "end_line": "499",
               "source_code": "        int shift     = pos & 0x07;\n        int mask      = (source & 0xff) >>> shift;\n        int innermask = 0xff >> shift;\n        int index     = pos / 8;\n\n        if (count < 8) {\n            innermask = innermask >>> (8 - count);\n            innermask = innermask << (8 - count);\n        }\n\n        mask      &= innermask;\n        innermask = ~innermask;\n\n        if (index >= map.length) {\n            return;\n        }\n\n        byte b = map[index];"
           }

       },

       {
           "id": "clone_286",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCArrayBasic.java",
               "start_line": "512",
               "end_line": "529",
               "source_code": "        if (!JDBCClobClient.isInLimits(data.length, position, count)) {\n            throw JDBCUtil.outOfRangeArgument();\n        }\n\n        Type[] types = new Type[2];\n\n        types[0] = Type.SQL_INTEGER;\n        types[1] = elementType;\n\n        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);\n\n        meta.columnLabels = new String[] {\n            \"C1\", \"C2\"\n        };\n        meta.colIndexes   = new int[] {\n            -1, -1\n        };\n        meta.columns      = new ColumnBase[2];"
           },

           "clone": {
               "file": "JDBCArray.java",
               "start_line": "555",
               "end_line": "572",
               "source_code": "        if (!JDBCClobClient.isInLimits(data.length, position, count)) {\n            throw JDBCUtil.outOfRangeArgument();\n        }\n\n        Type[] types = new Type[2];\n\n        types[0] = Type.SQL_INTEGER;\n        types[1] = elementType;\n\n        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);\n\n        meta.columnLabels = new String[] {\n            \"C1\", \"C2\"\n        };\n        meta.colIndexes   = new int[] {\n            -1, -1\n        };\n        meta.columns      = new ColumnBase[2];"
           }

       },

       {
           "id": "clone_287",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5182",
               "end_line": "5191",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);     // not null\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);      // not null\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "4724",
               "end_line": "4733",
               "source_code": "            addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);          // not null\n            addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);          // not null\n            addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);    // not null\n            addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);\n            addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);\n            addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);\n            addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);"
           }

       },

       {
           "id": "clone_288",

           "clone_type": "type-1",

           "origin": {
               "file": "DatabaseInformationFull.java",
               "start_line": "5349",
               "end_line": "5355",
               "source_code": "        final int jar_catalog      = 3;\n        final int jar_schema       = 4;\n        final int jar_name         = 5;\n\n        //\n        Iterator it;\n        Object[] row;"
           },

           "clone": {
               "file": "DatabaseInformationFull.java",
               "start_line": "3933",
               "end_line": "3939",
               "source_code": "        final int jar_catalog      = 3;\n        final int jar_schema       = 4;\n        final int jar_name         = 5;\n\n        //\n        Iterator it;\n        Object[] row;"
           }

       },

       {
           "id": "clone_289",

           "clone_type": "type-1",

           "origin": {
               "file": "IntervalType.java",
               "start_line": "327",
               "end_line": "340",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                return true;\n\n            default :\n                return false;"
           },

           "clone": {
               "file": "Types.java",
               "start_line": "697",
               "end_line": "710",
               "source_code": "            case Types.SQL_INTERVAL_DAY :\n            case Types.SQL_INTERVAL_DAY_TO_HOUR :\n            case Types.SQL_INTERVAL_DAY_TO_MINUTE :\n            case Types.SQL_INTERVAL_DAY_TO_SECOND :\n            case Types.SQL_INTERVAL_HOUR :\n            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :\n            case Types.SQL_INTERVAL_HOUR_TO_SECOND :\n            case Types.SQL_INTERVAL_MINUTE :\n            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :\n            case Types.SQL_INTERVAL_SECOND :\n                return true;\n\n            default :\n                return false;"
           }

       },

       {
           "id": "clone_290",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDDL.java",
               "start_line": "1225",
               "end_line": "1240",
               "source_code": "        if (token.tokenType == Tokens.ON) {\n            if (!table.isTemp()) {\n                throw unexpectedToken();\n            }\n\n            read();\n            readThis(Tokens.COMMIT);\n\n            if (token.tokenType == Tokens.DELETE) {}\n            else if (token.tokenType == Tokens.PRESERVE) {\n                table.persistenceScope = TableBase.SCOPE_SESSION;\n            }\n\n            read();\n            readThis(Tokens.ROWS);\n        }"
           },

           "clone": {
               "file": "ParserDDL.java",
               "start_line": "1059",
               "end_line": "1074",
               "source_code": "        if (token.tokenType == Tokens.ON) {\n            if (!table.isTemp()) {\n                throw unexpectedToken();\n            }\n\n            read();\n            readThis(Tokens.COMMIT);\n\n            if (token.tokenType == Tokens.DELETE) {}\n            else if (token.tokenType == Tokens.PRESERVE) {\n                table.persistenceScope = TableBase.SCOPE_SESSION;\n            }\n\n            read();\n            readThis(Tokens.ROWS);\n        }"
           }

       },

       {
           "id": "clone_291",

           "clone_type": "type-1",

           "origin": {
               "file": "TestStoredProcedure.java",
               "start_line": "336",
               "end_line": "343",
               "source_code": "        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();"
           },

           "clone": {
               "file": "TestStoredProcedure.java",
               "start_line": "257",
               "end_line": "264",
               "source_code": "        boolean isResult = cs.execute();\n\n        assertFalse(isResult);\n        cs.getMoreResults();\n\n        ResultSet rs = cs.getResultSet();\n\n        rs.next();"
           }

       },

       {
           "id": "clone_292",

           "clone_type": "type-1",

           "origin": {
               "file": "StatementResultUpdate.java",
               "start_line": "209",
               "end_line": "242",
               "source_code": "        switch (type) {\n\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n        }"
           },

           "clone": {
               "file": "StatementDMQL.java",
               "start_line": "437",
               "end_line": "470",
               "source_code": "        switch (type) {\n\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n        }"
           }

       },

       {
           "id": "clone_293",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "759",
               "end_line": "808",
               "source_code": "            ps.executeUpdate();\n\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n\n            rs.next();\n\n            int length = rs.getInt(1);\n\n            assertTrue(value.length() == length);\n            rs.close();\n\n            String dq3 = \"delete from clobtest;\";\n\n            statement.execute(dq3);\n\n            char[] testChars = new char[11111];\n\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n\n                testChars[i] = (char) j;\n            }\n\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n\n            String dq2 = \"select clobfield from clobtest;\";\n\n            rs = statement.executeQuery(dq2);\n\n            rs.next();\n\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "682",
               "end_line": "731",
               "source_code": "            ps.executeUpdate();\n\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n\n            rs.next();\n\n            int length = rs.getInt(1);\n\n            assertTrue(value.length() == length);\n            rs.close();\n\n            String dq3 = \"delete from clobtest;\";\n\n            statement.execute(dq3);\n\n            char[] testChars = new char[11111];\n\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n\n                testChars[i] = (char) j;\n            }\n\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n\n            String dq2 = \"select clobfield from clobtest;\";\n\n            rs = statement.executeQuery(dq2);\n\n            rs.next();\n\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }"
           }

       },

       {
           "id": "clone_294",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionArithmetic.java",
               "start_line": "116",
               "end_line": "120",
               "source_code": "            case OpTypes.CAST :\n                sb.append(' ').append(Tokens.T_CAST).append('(');\n                sb.append(left).append(' ').append(Tokens.T_AS).append(' ');\n                sb.append(dataType.getTypeDefinition());\n                sb.append(')');"
           },

           "clone": {
               "file": "ExpressionOp.java",
               "start_line": "212",
               "end_line": "216",
               "source_code": "            case OpTypes.CAST :\n                sb.append(' ').append(Tokens.T_CAST).append('(');\n                sb.append(left).append(' ').append(Tokens.T_AS).append(' ');\n                sb.append(dataType.getTypeDefinition());\n                sb.append(')');"
           }

       },

       {
           "id": "clone_295",

           "clone_type": "type-1",

           "origin": {
               "file": "LobManager.java",
               "start_line": "790",
               "end_line": "796",
               "source_code": "            Object[] data    = getLobHeader(a.getId());\n            long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int[][] aAddresses = getBlockAddresses(a.getId(), 0,\n                                                   Integer.MAX_VALUE);\n            int aIndex  = 0;\n            int bOffset = 0;\n            int aOffset = 0;"
           },

           "clone": {
               "file": "LobManager.java",
               "start_line": "695",
               "end_line": "701",
               "source_code": "            Object[] data    = getLobHeader(a.getId());\n            long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int[][] aAddresses = getBlockAddresses(a.getId(), 0,\n                                                   Integer.MAX_VALUE);\n            int aIndex  = 0;\n            int bOffset = 0;\n            int aOffset = 0;"
           }

       },

       {
           "id": "clone_296",

           "clone_type": "type-1",

           "origin": {
               "file": "ParserDQL.java",
               "start_line": "3985",
               "end_line": "3993",
               "source_code": "                rewind(position);\n\n                TableDerived td = XreadSubqueryTableBody(OpTypes.IN);\n\n                e = new Expression(OpTypes.TABLE_SUBQUERY, td);\n\n                readThis(Tokens.CLOSEBRACKET);\n\n                break;"
           },

           "clone": {
               "file": "ParserDQL.java",
               "start_line": "3936",
               "end_line": "3943",
               "source_code": "                rewind(position);\n\n                TableDerived td = XreadSubqueryTableBody(OpTypes.IN);\n\n                e = new Expression(OpTypes.TABLE_SUBQUERY, td);\n\n                readThis(Tokens.CLOSEBRACKET);\n                break;"
           }

       },

       {
           "id": "clone_297",

           "clone_type": "type-1",

           "origin": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "1717",
               "end_line": "1734",
               "source_code": "        checkSetParameterIndex(parameterIndex);\n\n        int i = parameterIndex - 1;\n\n        if (x == null) {\n            parameterValues[i] = null;\n            parameterSet[i]    = Boolean.TRUE;\n\n            return;\n        }\n\n        Type     outType    = parameterTypes[i];\n        long     millis     = x.getTime();\n        int      zoneOffset = 0;\n        Calendar calendar   = cal == null ? session.getCalendar()\n                : cal;\n\n        millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);"
           },

           "clone": {
               "file": "JDBCPreparedStatement.java",
               "start_line": "1642",
               "end_line": "1659",
               "source_code": "        checkSetParameterIndex(parameterIndex);\n\n        int i = parameterIndex - 1;\n\n        if (x == null) {\n            parameterValues[i] = null;\n            parameterSet[i]    = Boolean.TRUE;\n\n            return;\n        }\n\n        Type     outType    = parameterTypes[i];\n        long     millis     = x.getTime();\n        int      zoneOffset = 0;\n        Calendar calendar   = cal == null ? session.getCalendar()\n                : cal;\n\n        millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);"
           }

       },

       {
           "id": "clone_298",

           "clone_type": "type-1",

           "origin": {
               "file": "TableWorks.java",
               "start_line": "689",
               "end_line": "696",
               "source_code": "        moveData(table, tn, -1, 0);\n\n        table = tn;\n\n        database.schemaManager.addSchemaObject(constraint);\n        setNewTableInSchema(table);\n        updateConstraints(table, emptySet);\n        database.schemaManager.recompileDependentObjects(table);"
           },

           "clone": {
               "file": "TableWorks.java",
               "start_line": "664",
               "end_line": "671",
               "source_code": "        moveData(table, tn, -1, 0);\n\n        table = tn;\n\n        database.schemaManager.addSchemaObject(constraint);\n        setNewTableInSchema(table);\n        updateConstraints(table, emptySet);\n        database.schemaManager.recompileDependentObjects(table);"
           }

       },

       {
           "id": "clone_299",

           "clone_type": "type-1",

           "origin": {
               "file": "ExpressionLogical.java",
               "start_line": "2241",
               "end_line": "2247",
               "source_code": "            case OpTypes.IN :\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :"
           },

           "clone": {
               "file": "ExpressionLogical.java",
               "start_line": "148",
               "end_line": "154",
               "source_code": "            case OpTypes.IN :\n            case OpTypes.MATCH_SIMPLE :\n            case OpTypes.MATCH_PARTIAL :\n            case OpTypes.MATCH_FULL :\n            case OpTypes.MATCH_UNIQUE_SIMPLE :\n            case OpTypes.MATCH_UNIQUE_PARTIAL :\n            case OpTypes.MATCH_UNIQUE_FULL :"
           }

       },

       {
           "id": "clone_300",

           "clone_type": "type-1",

           "origin": {
               "file": "TestLobs.java",
               "start_line": "591",
               "end_line": "601",
               "source_code": "            PreparedStatement ps = connection.prepareStatement(dml0);\n\n            connection.setAutoCommit(false);\n\n            //\n            JDBCClob dataClob =\n                new JDBCClob(\"the quick brown fox jumps on the lazy dog\");\n            Reader    reader = null;\n            StopWatch sw     = new StopWatch();\n\n            sw.start();"
           },

           "clone": {
               "file": "TestLobs.java",
               "start_line": "518",
               "end_line": "528",
               "source_code": "            PreparedStatement ps = connection.prepareStatement(dml0);\n\n            connection.setAutoCommit(false);\n\n            //\n            JDBCClob dataClob =\n                new JDBCClob(\"the quick brown fox jumps on the lazy dog\");\n            Reader    reader = null;\n            StopWatch sw     = new StopWatch();\n\n            sw.start();"
           }

       }
   ]      
}